
STM32G473CBT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e7a8  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00007c50  0800e9c0  0800e9c0  0000f9c0  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016610  08016610  00018224  2**0
                  CONTENTS
  4 .ARM          00000008  08016610  08016610  00017610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016618  08016618  00018224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016618  08016618  00017618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801661c  0801661c  0001761c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000224  20000000  08016620  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005bf0  20000240  08016844  00018240  2**6
                  ALLOC
 10 ._user_heap_stack 00000600  20005e30  08016844  00018e30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00018224  2**0
                  CONTENTS, READONLY
 12 .debug_info   000361a9  00000000  00000000  00018254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006970  00000000  00000000  0004e3fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00016752  00000000  00000000  00054d6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001f78  00000000  00000000  0006b4c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001a72  00000000  00000000  0006d438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a689  00000000  00000000  0006eeaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003c134  00000000  00000000  00099533  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fa529  00000000  00000000  000d5667  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001cfb90  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006bb4  00000000  00000000  001cfbd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  001d6788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000240 	.word	0x20000240
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800e970 	.word	0x0800e970

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000244 	.word	0x20000244
 800021c:	0800e970 	.word	0x0800e970

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2iz>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d215      	bcs.n	8000bfe <__aeabi_d2iz+0x36>
 8000bd2:	d511      	bpl.n	8000bf8 <__aeabi_d2iz+0x30>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d912      	bls.n	8000c04 <__aeabi_d2iz+0x3c>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d105      	bne.n	8000c10 <__aeabi_d2iz+0x48>
 8000c04:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000c08:	bf08      	it	eq
 8000c0a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_d2uiz>:
 8000c18:	004a      	lsls	r2, r1, #1
 8000c1a:	d211      	bcs.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c1c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c20:	d211      	bcs.n	8000c46 <__aeabi_d2uiz+0x2e>
 8000c22:	d50d      	bpl.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c24:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c2c:	d40e      	bmi.n	8000c4c <__aeabi_d2uiz+0x34>
 8000c2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c32:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c3a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c3e:	4770      	bx	lr
 8000c40:	f04f 0000 	mov.w	r0, #0
 8000c44:	4770      	bx	lr
 8000c46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c4a:	d102      	bne.n	8000c52 <__aeabi_d2uiz+0x3a>
 8000c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c50:	4770      	bx	lr
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_d2f>:
 8000c58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c60:	bf24      	itt	cs
 8000c62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c6a:	d90d      	bls.n	8000c88 <__aeabi_d2f+0x30>
 8000c6c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c78:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c80:	bf08      	it	eq
 8000c82:	f020 0001 	biceq.w	r0, r0, #1
 8000c86:	4770      	bx	lr
 8000c88:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c8c:	d121      	bne.n	8000cd2 <__aeabi_d2f+0x7a>
 8000c8e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c92:	bfbc      	itt	lt
 8000c94:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c98:	4770      	bxlt	lr
 8000c9a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ca2:	f1c2 0218 	rsb	r2, r2, #24
 8000ca6:	f1c2 0c20 	rsb	ip, r2, #32
 8000caa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cae:	fa20 f002 	lsr.w	r0, r0, r2
 8000cb2:	bf18      	it	ne
 8000cb4:	f040 0001 	orrne.w	r0, r0, #1
 8000cb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cc4:	ea40 000c 	orr.w	r0, r0, ip
 8000cc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000ccc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cd0:	e7cc      	b.n	8000c6c <__aeabi_d2f+0x14>
 8000cd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cd6:	d107      	bne.n	8000ce8 <__aeabi_d2f+0x90>
 8000cd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cdc:	bf1e      	ittt	ne
 8000cde:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ce2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ce6:	4770      	bxne	lr
 8000ce8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cec:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cf0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_uldivmod>:
 8000cf8:	b953      	cbnz	r3, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfa:	b94a      	cbnz	r2, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	bf08      	it	eq
 8000d00:	2800      	cmpeq	r0, #0
 8000d02:	bf1c      	itt	ne
 8000d04:	f04f 31ff 	movne.w	r1, #4294967295
 8000d08:	f04f 30ff 	movne.w	r0, #4294967295
 8000d0c:	f000 b9a0 	b.w	8001050 <__aeabi_idiv0>
 8000d10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d18:	f000 f83c 	bl	8000d94 <__udivmoddi4>
 8000d1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d24:	b004      	add	sp, #16
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_d2lz>:
 8000d28:	b538      	push	{r3, r4, r5, lr}
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	4604      	mov	r4, r0
 8000d30:	460d      	mov	r5, r1
 8000d32:	f7ff ff0b 	bl	8000b4c <__aeabi_dcmplt>
 8000d36:	b928      	cbnz	r0, 8000d44 <__aeabi_d2lz+0x1c>
 8000d38:	4620      	mov	r0, r4
 8000d3a:	4629      	mov	r1, r5
 8000d3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d40:	f000 b80a 	b.w	8000d58 <__aeabi_d2ulz>
 8000d44:	4620      	mov	r0, r4
 8000d46:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d4a:	f000 f805 	bl	8000d58 <__aeabi_d2ulz>
 8000d4e:	4240      	negs	r0, r0
 8000d50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d54:	bd38      	pop	{r3, r4, r5, pc}
 8000d56:	bf00      	nop

08000d58 <__aeabi_d2ulz>:
 8000d58:	b5d0      	push	{r4, r6, r7, lr}
 8000d5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d8c <__aeabi_d2ulz+0x34>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	4606      	mov	r6, r0
 8000d60:	460f      	mov	r7, r1
 8000d62:	f7ff fc81 	bl	8000668 <__aeabi_dmul>
 8000d66:	f7ff ff57 	bl	8000c18 <__aeabi_d2uiz>
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	f7ff fc02 	bl	8000574 <__aeabi_ui2d>
 8000d70:	4b07      	ldr	r3, [pc, #28]	@ (8000d90 <__aeabi_d2ulz+0x38>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	f7ff fc78 	bl	8000668 <__aeabi_dmul>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	4630      	mov	r0, r6
 8000d7e:	4639      	mov	r1, r7
 8000d80:	f7ff faba 	bl	80002f8 <__aeabi_dsub>
 8000d84:	f7ff ff48 	bl	8000c18 <__aeabi_d2uiz>
 8000d88:	4621      	mov	r1, r4
 8000d8a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d8c:	3df00000 	.word	0x3df00000
 8000d90:	41f00000 	.word	0x41f00000

08000d94 <__udivmoddi4>:
 8000d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d98:	9d08      	ldr	r5, [sp, #32]
 8000d9a:	460c      	mov	r4, r1
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d14e      	bne.n	8000e3e <__udivmoddi4+0xaa>
 8000da0:	4694      	mov	ip, r2
 8000da2:	458c      	cmp	ip, r1
 8000da4:	4686      	mov	lr, r0
 8000da6:	fab2 f282 	clz	r2, r2
 8000daa:	d962      	bls.n	8000e72 <__udivmoddi4+0xde>
 8000dac:	b14a      	cbz	r2, 8000dc2 <__udivmoddi4+0x2e>
 8000dae:	f1c2 0320 	rsb	r3, r2, #32
 8000db2:	4091      	lsls	r1, r2
 8000db4:	fa20 f303 	lsr.w	r3, r0, r3
 8000db8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dbc:	4319      	orrs	r1, r3
 8000dbe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f f68c 	uxth.w	r6, ip
 8000dca:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dd2:	fb07 1114 	mls	r1, r7, r4, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb04 f106 	mul.w	r1, r4, r6
 8000dde:	4299      	cmp	r1, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x64>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dea:	f080 8112 	bcs.w	8001012 <__udivmoddi4+0x27e>
 8000dee:	4299      	cmp	r1, r3
 8000df0:	f240 810f 	bls.w	8001012 <__udivmoddi4+0x27e>
 8000df4:	3c02      	subs	r4, #2
 8000df6:	4463      	add	r3, ip
 8000df8:	1a59      	subs	r1, r3, r1
 8000dfa:	fa1f f38e 	uxth.w	r3, lr
 8000dfe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e02:	fb07 1110 	mls	r1, r7, r0, r1
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f606 	mul.w	r6, r0, r6
 8000e0e:	429e      	cmp	r6, r3
 8000e10:	d90a      	bls.n	8000e28 <__udivmoddi4+0x94>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e1a:	f080 80fc 	bcs.w	8001016 <__udivmoddi4+0x282>
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	f240 80f9 	bls.w	8001016 <__udivmoddi4+0x282>
 8000e24:	4463      	add	r3, ip
 8000e26:	3802      	subs	r0, #2
 8000e28:	1b9b      	subs	r3, r3, r6
 8000e2a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e2e:	2100      	movs	r1, #0
 8000e30:	b11d      	cbz	r5, 8000e3a <__udivmoddi4+0xa6>
 8000e32:	40d3      	lsrs	r3, r2
 8000e34:	2200      	movs	r2, #0
 8000e36:	e9c5 3200 	strd	r3, r2, [r5]
 8000e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d905      	bls.n	8000e4e <__udivmoddi4+0xba>
 8000e42:	b10d      	cbz	r5, 8000e48 <__udivmoddi4+0xb4>
 8000e44:	e9c5 0100 	strd	r0, r1, [r5]
 8000e48:	2100      	movs	r1, #0
 8000e4a:	4608      	mov	r0, r1
 8000e4c:	e7f5      	b.n	8000e3a <__udivmoddi4+0xa6>
 8000e4e:	fab3 f183 	clz	r1, r3
 8000e52:	2900      	cmp	r1, #0
 8000e54:	d146      	bne.n	8000ee4 <__udivmoddi4+0x150>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d302      	bcc.n	8000e60 <__udivmoddi4+0xcc>
 8000e5a:	4290      	cmp	r0, r2
 8000e5c:	f0c0 80f0 	bcc.w	8001040 <__udivmoddi4+0x2ac>
 8000e60:	1a86      	subs	r6, r0, r2
 8000e62:	eb64 0303 	sbc.w	r3, r4, r3
 8000e66:	2001      	movs	r0, #1
 8000e68:	2d00      	cmp	r5, #0
 8000e6a:	d0e6      	beq.n	8000e3a <__udivmoddi4+0xa6>
 8000e6c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e70:	e7e3      	b.n	8000e3a <__udivmoddi4+0xa6>
 8000e72:	2a00      	cmp	r2, #0
 8000e74:	f040 8090 	bne.w	8000f98 <__udivmoddi4+0x204>
 8000e78:	eba1 040c 	sub.w	r4, r1, ip
 8000e7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e80:	fa1f f78c 	uxth.w	r7, ip
 8000e84:	2101      	movs	r1, #1
 8000e86:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e8a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e8e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e92:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e96:	fb07 f006 	mul.w	r0, r7, r6
 8000e9a:	4298      	cmp	r0, r3
 8000e9c:	d908      	bls.n	8000eb0 <__udivmoddi4+0x11c>
 8000e9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000ea2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000ea6:	d202      	bcs.n	8000eae <__udivmoddi4+0x11a>
 8000ea8:	4298      	cmp	r0, r3
 8000eaa:	f200 80cd 	bhi.w	8001048 <__udivmoddi4+0x2b4>
 8000eae:	4626      	mov	r6, r4
 8000eb0:	1a1c      	subs	r4, r3, r0
 8000eb2:	fa1f f38e 	uxth.w	r3, lr
 8000eb6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000eba:	fb08 4410 	mls	r4, r8, r0, r4
 8000ebe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ec2:	fb00 f707 	mul.w	r7, r0, r7
 8000ec6:	429f      	cmp	r7, r3
 8000ec8:	d908      	bls.n	8000edc <__udivmoddi4+0x148>
 8000eca:	eb1c 0303 	adds.w	r3, ip, r3
 8000ece:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ed2:	d202      	bcs.n	8000eda <__udivmoddi4+0x146>
 8000ed4:	429f      	cmp	r7, r3
 8000ed6:	f200 80b0 	bhi.w	800103a <__udivmoddi4+0x2a6>
 8000eda:	4620      	mov	r0, r4
 8000edc:	1bdb      	subs	r3, r3, r7
 8000ede:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ee2:	e7a5      	b.n	8000e30 <__udivmoddi4+0x9c>
 8000ee4:	f1c1 0620 	rsb	r6, r1, #32
 8000ee8:	408b      	lsls	r3, r1
 8000eea:	fa22 f706 	lsr.w	r7, r2, r6
 8000eee:	431f      	orrs	r7, r3
 8000ef0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ef4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ef8:	ea43 030c 	orr.w	r3, r3, ip
 8000efc:	40f4      	lsrs	r4, r6
 8000efe:	fa00 f801 	lsl.w	r8, r0, r1
 8000f02:	0c38      	lsrs	r0, r7, #16
 8000f04:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000f08:	fbb4 fef0 	udiv	lr, r4, r0
 8000f0c:	fa1f fc87 	uxth.w	ip, r7
 8000f10:	fb00 441e 	mls	r4, r0, lr, r4
 8000f14:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f18:	fb0e f90c 	mul.w	r9, lr, ip
 8000f1c:	45a1      	cmp	r9, r4
 8000f1e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f22:	d90a      	bls.n	8000f3a <__udivmoddi4+0x1a6>
 8000f24:	193c      	adds	r4, r7, r4
 8000f26:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f2a:	f080 8084 	bcs.w	8001036 <__udivmoddi4+0x2a2>
 8000f2e:	45a1      	cmp	r9, r4
 8000f30:	f240 8081 	bls.w	8001036 <__udivmoddi4+0x2a2>
 8000f34:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f38:	443c      	add	r4, r7
 8000f3a:	eba4 0409 	sub.w	r4, r4, r9
 8000f3e:	fa1f f983 	uxth.w	r9, r3
 8000f42:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f46:	fb00 4413 	mls	r4, r0, r3, r4
 8000f4a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f4e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f52:	45a4      	cmp	ip, r4
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x1d2>
 8000f56:	193c      	adds	r4, r7, r4
 8000f58:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f5c:	d267      	bcs.n	800102e <__udivmoddi4+0x29a>
 8000f5e:	45a4      	cmp	ip, r4
 8000f60:	d965      	bls.n	800102e <__udivmoddi4+0x29a>
 8000f62:	3b02      	subs	r3, #2
 8000f64:	443c      	add	r4, r7
 8000f66:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f6a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f6e:	eba4 040c 	sub.w	r4, r4, ip
 8000f72:	429c      	cmp	r4, r3
 8000f74:	46ce      	mov	lr, r9
 8000f76:	469c      	mov	ip, r3
 8000f78:	d351      	bcc.n	800101e <__udivmoddi4+0x28a>
 8000f7a:	d04e      	beq.n	800101a <__udivmoddi4+0x286>
 8000f7c:	b155      	cbz	r5, 8000f94 <__udivmoddi4+0x200>
 8000f7e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f82:	eb64 040c 	sbc.w	r4, r4, ip
 8000f86:	fa04 f606 	lsl.w	r6, r4, r6
 8000f8a:	40cb      	lsrs	r3, r1
 8000f8c:	431e      	orrs	r6, r3
 8000f8e:	40cc      	lsrs	r4, r1
 8000f90:	e9c5 6400 	strd	r6, r4, [r5]
 8000f94:	2100      	movs	r1, #0
 8000f96:	e750      	b.n	8000e3a <__udivmoddi4+0xa6>
 8000f98:	f1c2 0320 	rsb	r3, r2, #32
 8000f9c:	fa20 f103 	lsr.w	r1, r0, r3
 8000fa0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fa4:	fa24 f303 	lsr.w	r3, r4, r3
 8000fa8:	4094      	lsls	r4, r2
 8000faa:	430c      	orrs	r4, r1
 8000fac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000fb0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000fb4:	fa1f f78c 	uxth.w	r7, ip
 8000fb8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000fbc:	fb08 3110 	mls	r1, r8, r0, r3
 8000fc0:	0c23      	lsrs	r3, r4, #16
 8000fc2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fc6:	fb00 f107 	mul.w	r1, r0, r7
 8000fca:	4299      	cmp	r1, r3
 8000fcc:	d908      	bls.n	8000fe0 <__udivmoddi4+0x24c>
 8000fce:	eb1c 0303 	adds.w	r3, ip, r3
 8000fd2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fd6:	d22c      	bcs.n	8001032 <__udivmoddi4+0x29e>
 8000fd8:	4299      	cmp	r1, r3
 8000fda:	d92a      	bls.n	8001032 <__udivmoddi4+0x29e>
 8000fdc:	3802      	subs	r0, #2
 8000fde:	4463      	add	r3, ip
 8000fe0:	1a5b      	subs	r3, r3, r1
 8000fe2:	b2a4      	uxth	r4, r4
 8000fe4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fe8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ff0:	fb01 f307 	mul.w	r3, r1, r7
 8000ff4:	42a3      	cmp	r3, r4
 8000ff6:	d908      	bls.n	800100a <__udivmoddi4+0x276>
 8000ff8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ffc:	f101 36ff 	add.w	r6, r1, #4294967295
 8001000:	d213      	bcs.n	800102a <__udivmoddi4+0x296>
 8001002:	42a3      	cmp	r3, r4
 8001004:	d911      	bls.n	800102a <__udivmoddi4+0x296>
 8001006:	3902      	subs	r1, #2
 8001008:	4464      	add	r4, ip
 800100a:	1ae4      	subs	r4, r4, r3
 800100c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001010:	e739      	b.n	8000e86 <__udivmoddi4+0xf2>
 8001012:	4604      	mov	r4, r0
 8001014:	e6f0      	b.n	8000df8 <__udivmoddi4+0x64>
 8001016:	4608      	mov	r0, r1
 8001018:	e706      	b.n	8000e28 <__udivmoddi4+0x94>
 800101a:	45c8      	cmp	r8, r9
 800101c:	d2ae      	bcs.n	8000f7c <__udivmoddi4+0x1e8>
 800101e:	ebb9 0e02 	subs.w	lr, r9, r2
 8001022:	eb63 0c07 	sbc.w	ip, r3, r7
 8001026:	3801      	subs	r0, #1
 8001028:	e7a8      	b.n	8000f7c <__udivmoddi4+0x1e8>
 800102a:	4631      	mov	r1, r6
 800102c:	e7ed      	b.n	800100a <__udivmoddi4+0x276>
 800102e:	4603      	mov	r3, r0
 8001030:	e799      	b.n	8000f66 <__udivmoddi4+0x1d2>
 8001032:	4630      	mov	r0, r6
 8001034:	e7d4      	b.n	8000fe0 <__udivmoddi4+0x24c>
 8001036:	46d6      	mov	lr, sl
 8001038:	e77f      	b.n	8000f3a <__udivmoddi4+0x1a6>
 800103a:	4463      	add	r3, ip
 800103c:	3802      	subs	r0, #2
 800103e:	e74d      	b.n	8000edc <__udivmoddi4+0x148>
 8001040:	4606      	mov	r6, r0
 8001042:	4623      	mov	r3, r4
 8001044:	4608      	mov	r0, r1
 8001046:	e70f      	b.n	8000e68 <__udivmoddi4+0xd4>
 8001048:	3e02      	subs	r6, #2
 800104a:	4463      	add	r3, ip
 800104c:	e730      	b.n	8000eb0 <__udivmoddi4+0x11c>
 800104e:	bf00      	nop

08001050 <__aeabi_idiv0>:
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <apInit>:
#include "ap.h"

static uint32_t pre_time = 0;

void apInit(void)
{
 8001054:	b510      	push	{r4, lr}
 8001056:	b082      	sub	sp, #8
  cliOpen(_DEF_UART1, 115200);
 8001058:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 800105c:	2000      	movs	r0, #0
 800105e:	f002 fb09 	bl	8003674 <cliOpen>
  
  controlInit();
 8001062:	f000 fa07 	bl	8001474 <controlInit>

  lcdSetFont(LCD_FONT_HAN);    
 8001066:	2003      	movs	r0, #3
 8001068:	f001 faf8 	bl	800265c <lcdSetFont>

  for (int i = 0; i < 40; i += 1)
 800106c:	2400      	movs	r4, #0
 800106e:	e019      	b.n	80010a4 <apInit+0x50>
  {
    lcdClearBuffer(black);
 8001070:	2000      	movs	r0, #0
 8001072:	f001 f939 	bl	80022e8 <lcdClearBuffer>
    lcdPrintf(0, 64 - i, white, " 한국기계연구원");
 8001076:	4b12      	ldr	r3, [pc, #72]	@ (80010c0 <apInit+0x6c>)
 8001078:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800107c:	f1c4 0140 	rsb	r1, r4, #64	@ 0x40
 8001080:	2000      	movs	r0, #0
 8001082:	f001 fa81 	bl	8002588 <lcdPrintf>
    lcdDrawRect(0, 0, LCD_WIDTH, LCD_HEIGHT, white);
 8001086:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800108a:	9300      	str	r3, [sp, #0]
 800108c:	2340      	movs	r3, #64	@ 0x40
 800108e:	2280      	movs	r2, #128	@ 0x80
 8001090:	2100      	movs	r1, #0
 8001092:	4608      	mov	r0, r1
 8001094:	f001 fa52 	bl	800253c <lcdDrawRect>
    lcdUpdateDraw();
 8001098:	f001 f908 	bl	80022ac <lcdUpdateDraw>
    delay(5);
 800109c:	2005      	movs	r0, #5
 800109e:	f000 fe9d 	bl	8001ddc <delay>
  for (int i = 0; i < 40; i += 1)
 80010a2:	3401      	adds	r4, #1
 80010a4:	2c27      	cmp	r4, #39	@ 0x27
 80010a6:	dde3      	ble.n	8001070 <apInit+0x1c>
  }
  delay(500);  
 80010a8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80010ac:	f000 fe96 	bl	8001ddc <delay>
  lcdClear(black);    
 80010b0:	2000      	movs	r0, #0
 80010b2:	f001 f931 	bl	8002318 <lcdClear>

  lcdSetFont(LCD_FONT_07x10);  
 80010b6:	2000      	movs	r0, #0
 80010b8:	f001 fad0 	bl	800265c <lcdSetFont>
}
 80010bc:	b002      	add	sp, #8
 80010be:	bd10      	pop	{r4, pc}
 80010c0:	0800e9c0 	.word	0x0800e9c0

080010c4 <apMain>:

void apMain(void)
{
 80010c4:	b508      	push	{r3, lr}
  while (1)
  {
    cliMain();
 80010c6:	f002 fd37 	bl	8003b38 <cliMain>
    lcdUpdate();
 80010ca:	f000 f9f7 	bl	80014bc <lcdUpdate>
    controlMain();
 80010ce:	f000 fbcb 	bl	8001868 <controlMain>

    if (millis() - pre_time > 500)
 80010d2:	f000 fe87 	bl	8001de4 <millis>
 80010d6:	4b08      	ldr	r3, [pc, #32]	@ (80010f8 <apMain+0x34>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	1ac0      	subs	r0, r0, r3
 80010dc:	f5b0 7ffa 	cmp.w	r0, #500	@ 0x1f4
 80010e0:	d9f1      	bls.n	80010c6 <apMain+0x2>
    {
      pre_time = millis();
 80010e2:	f000 fe7f 	bl	8001de4 <millis>
 80010e6:	4b04      	ldr	r3, [pc, #16]	@ (80010f8 <apMain+0x34>)
 80010e8:	6018      	str	r0, [r3, #0]
      HAL_GPIO_TogglePin(ON_BOARD_LED_GPIO_Port, ON_BOARD_LED_Pin); // ON BOARD LED toggle 500ms
 80010ea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010ee:	4803      	ldr	r0, [pc, #12]	@ (80010fc <apMain+0x38>)
 80010f0:	f005 fb51 	bl	8006796 <HAL_GPIO_TogglePin>
 80010f4:	e7e7      	b.n	80010c6 <apMain+0x2>
 80010f6:	bf00      	nop
 80010f8:	2000025c 	.word	0x2000025c
 80010fc:	48000800 	.word	0x48000800

08001100 <cliControl>:
    cnt = 0;
  }
}

void cliControl(cli_args_t *args)
{
 8001100:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001104:	b097      	sub	sp, #92	@ 0x5c
 8001106:	4604      	mov	r4, r0
  bool ret = false;

  if (args->argc == 1 && args->isStr(0, "info") == true)
 8001108:	8803      	ldrh	r3, [r0, #0]
 800110a:	2b01      	cmp	r3, #1
 800110c:	d00f      	beq.n	800112e <cliControl+0x2e>
  bool ret = false;
 800110e:	2500      	movs	r5, #0
    cliPrintf("ctrl init : %s\n", is_init ? "OK" : "NG");
    
    ret = true;
  }

  if (args->argc == 3 && args->isStr(0, "wave") == true)
 8001110:	8823      	ldrh	r3, [r4, #0]
 8001112:	2b03      	cmp	r3, #3
 8001114:	d01c      	beq.n	8001150 <cliControl+0x50>
    cliPrintf("wave update.\nfreq: %3d -> %3d hz\nvpp : %2.1f -> %2.1f vpp\n", prev_freq, freq, prev_vpp, vpp_out);

    ret = true;
  }

  if (args->argc == 1 && args->isStr(0, "raw") == true)
 8001116:	8823      	ldrh	r3, [r4, #0]
 8001118:	2b01      	cmp	r3, #1
 800111a:	d05c      	beq.n	80011d6 <cliControl+0xd6>
      }
    }
    ret = true;
  }

  if (args->argc == 1 && args->isStr(0, "cali") == true) // Calibration
 800111c:	8823      	ldrh	r3, [r4, #0]
 800111e:	2b01      	cmp	r3, #1
 8001120:	d07a      	beq.n	8001218 <cliControl+0x118>
    }

    ret = true;
  }

  if (ret != true)
 8001122:	2d00      	cmp	r5, #0
 8001124:	f000 8190 	beq.w	8001448 <cliControl+0x348>
    cliPrintf("ctrl info\n");
    cliPrintf("ctrl cali\n");
    cliPrintf("ctrl raw\n");
    cliPrintf("ctrl wave freq[1-200] vpp[1.0-20.0]\n");
  }
}
 8001128:	b017      	add	sp, #92	@ 0x5c
 800112a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (args->argc == 1 && args->isStr(0, "info") == true)
 800112e:	6943      	ldr	r3, [r0, #20]
 8001130:	49ab      	ldr	r1, [pc, #684]	@ (80013e0 <cliControl+0x2e0>)
 8001132:	2000      	movs	r0, #0
 8001134:	4798      	blx	r3
 8001136:	4605      	mov	r5, r0
 8001138:	2800      	cmp	r0, #0
 800113a:	d0e9      	beq.n	8001110 <cliControl+0x10>
    cliPrintf("ctrl init : %s\n", is_init ? "OK" : "NG");
 800113c:	4ba9      	ldr	r3, [pc, #676]	@ (80013e4 <cliControl+0x2e4>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	b123      	cbz	r3, 800114c <cliControl+0x4c>
 8001142:	49a9      	ldr	r1, [pc, #676]	@ (80013e8 <cliControl+0x2e8>)
 8001144:	48a9      	ldr	r0, [pc, #676]	@ (80013ec <cliControl+0x2ec>)
 8001146:	f002 fb1f 	bl	8003788 <cliPrintf>
    ret = true;
 800114a:	e7e1      	b.n	8001110 <cliControl+0x10>
    cliPrintf("ctrl init : %s\n", is_init ? "OK" : "NG");
 800114c:	49a8      	ldr	r1, [pc, #672]	@ (80013f0 <cliControl+0x2f0>)
 800114e:	e7f9      	b.n	8001144 <cliControl+0x44>
  if (args->argc == 3 && args->isStr(0, "wave") == true)
 8001150:	6963      	ldr	r3, [r4, #20]
 8001152:	49a8      	ldr	r1, [pc, #672]	@ (80013f4 <cliControl+0x2f4>)
 8001154:	2000      	movs	r0, #0
 8001156:	4798      	blx	r3
 8001158:	4606      	mov	r6, r0
 800115a:	2800      	cmp	r0, #0
 800115c:	d0db      	beq.n	8001116 <cliControl+0x16>
    freq_tmp = args->getData(1);
 800115e:	68a3      	ldr	r3, [r4, #8]
 8001160:	2001      	movs	r0, #1
 8001162:	4798      	blx	r3
 8001164:	b285      	uxth	r5, r0
    vpp_tmp  = args->getFloat(2);
 8001166:	68e3      	ldr	r3, [r4, #12]
 8001168:	2002      	movs	r0, #2
 800116a:	4798      	blx	r3
    prev_freq = freq;
 800116c:	4ba2      	ldr	r3, [pc, #648]	@ (80013f8 <cliControl+0x2f8>)
 800116e:	881f      	ldrh	r7, [r3, #0]
    prev_vpp = vpp_out;
 8001170:	4ba2      	ldr	r3, [pc, #648]	@ (80013fc <cliControl+0x2fc>)
 8001172:	f8d3 8000 	ldr.w	r8, [r3]
    freq = constrain(freq_tmp, 1, 200);
 8001176:	b11d      	cbz	r5, 8001180 <cliControl+0x80>
 8001178:	2dc8      	cmp	r5, #200	@ 0xc8
 800117a:	bf28      	it	cs
 800117c:	25c8      	movcs	r5, #200	@ 0xc8
 800117e:	e000      	b.n	8001182 <cliControl+0x82>
 8001180:	2501      	movs	r5, #1
 8001182:	4b9d      	ldr	r3, [pc, #628]	@ (80013f8 <cliControl+0x2f8>)
 8001184:	801d      	strh	r5, [r3, #0]
    vpp_out = constrain(vpp_tmp, 1.0f, 20.0f);
 8001186:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800118a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800118e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001192:	d409      	bmi.n	80011a8 <cliControl+0xa8>
 8001194:	eef3 7a04 	vmov.f32	s15, #52	@ 0x41a00000  20.0
 8001198:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800119c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011a0:	dd04      	ble.n	80011ac <cliControl+0xac>
 80011a2:	eeb0 0a67 	vmov.f32	s0, s15
 80011a6:	e001      	b.n	80011ac <cliControl+0xac>
 80011a8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80011ac:	4b93      	ldr	r3, [pc, #588]	@ (80013fc <cliControl+0x2fc>)
 80011ae:	ed83 0a00 	vstr	s0, [r3]
    cliPrintf("wave update.\nfreq: %3d -> %3d hz\nvpp : %2.1f -> %2.1f vpp\n", prev_freq, freq, prev_vpp, vpp_out);
 80011b2:	ee10 0a10 	vmov	r0, s0
 80011b6:	f7ff f9ff 	bl	80005b8 <__aeabi_f2d>
 80011ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80011be:	4640      	mov	r0, r8
 80011c0:	f7ff f9fa 	bl	80005b8 <__aeabi_f2d>
 80011c4:	e9cd 0100 	strd	r0, r1, [sp]
 80011c8:	462a      	mov	r2, r5
 80011ca:	4639      	mov	r1, r7
 80011cc:	488c      	ldr	r0, [pc, #560]	@ (8001400 <cliControl+0x300>)
 80011ce:	f002 fadb 	bl	8003788 <cliPrintf>
    ret = true;
 80011d2:	4635      	mov	r5, r6
 80011d4:	e79f      	b.n	8001116 <cliControl+0x16>
  if (args->argc == 1 && args->isStr(0, "raw") == true)
 80011d6:	6963      	ldr	r3, [r4, #20]
 80011d8:	498a      	ldr	r1, [pc, #552]	@ (8001404 <cliControl+0x304>)
 80011da:	2000      	movs	r0, #0
 80011dc:	4798      	blx	r3
 80011de:	4606      	mov	r6, r0
 80011e0:	2800      	cmp	r0, #0
 80011e2:	d09b      	beq.n	800111c <cliControl+0x1c>
    uint32_t pre_time = 0;
 80011e4:	2500      	movs	r5, #0
    while (cliKeepLoop())
 80011e6:	f002 fce5 	bl	8003bb4 <cliKeepLoop>
 80011ea:	b198      	cbz	r0, 8001214 <cliControl+0x114>
      if (millis() - pre_time >= 100)
 80011ec:	f000 fdfa 	bl	8001de4 <millis>
 80011f0:	1b43      	subs	r3, r0, r5
 80011f2:	2b63      	cmp	r3, #99	@ 0x63
 80011f4:	d9f7      	bls.n	80011e6 <cliControl+0xe6>
        pre_time = millis();
 80011f6:	f000 fdf5 	bl	8001de4 <millis>
 80011fa:	4605      	mov	r5, r0
        cliPrintf("adc raw : %d %d %d %d %d\n",
 80011fc:	4982      	ldr	r1, [pc, #520]	@ (8001408 <cliControl+0x308>)
 80011fe:	690b      	ldr	r3, [r1, #16]
 8001200:	9301      	str	r3, [sp, #4]
 8001202:	68cb      	ldr	r3, [r1, #12]
 8001204:	9300      	str	r3, [sp, #0]
 8001206:	688b      	ldr	r3, [r1, #8]
 8001208:	684a      	ldr	r2, [r1, #4]
 800120a:	6809      	ldr	r1, [r1, #0]
 800120c:	487f      	ldr	r0, [pc, #508]	@ (800140c <cliControl+0x30c>)
 800120e:	f002 fabb 	bl	8003788 <cliPrintf>
 8001212:	e7e8      	b.n	80011e6 <cliControl+0xe6>
    ret = true;
 8001214:	4635      	mov	r5, r6
 8001216:	e781      	b.n	800111c <cliControl+0x1c>
  if (args->argc == 1 && args->isStr(0, "cali") == true) // Calibration
 8001218:	6963      	ldr	r3, [r4, #20]
 800121a:	497d      	ldr	r1, [pc, #500]	@ (8001410 <cliControl+0x310>)
 800121c:	2000      	movs	r0, #0
 800121e:	4798      	blx	r3
 8001220:	2800      	cmp	r0, #0
 8001222:	f43f af7e 	beq.w	8001122 <cliControl+0x22>
    uint32_t sum[ADC_MAX_CH]   = {0,};
 8001226:	2400      	movs	r4, #0
 8001228:	9407      	str	r4, [sp, #28]
 800122a:	9408      	str	r4, [sp, #32]
 800122c:	9409      	str	r4, [sp, #36]	@ 0x24
 800122e:	940a      	str	r4, [sp, #40]	@ 0x28
 8001230:	940b      	str	r4, [sp, #44]	@ 0x2c
    uint32_t avg[ADC_MAX_CH]   = {0,};
 8001232:	940c      	str	r4, [sp, #48]	@ 0x30
 8001234:	940d      	str	r4, [sp, #52]	@ 0x34
 8001236:	940e      	str	r4, [sp, #56]	@ 0x38
 8001238:	940f      	str	r4, [sp, #60]	@ 0x3c
 800123a:	9410      	str	r4, [sp, #64]	@ 0x40
    uint32_t old[ADC_MAX_CH]   = {0,};
 800123c:	9411      	str	r4, [sp, #68]	@ 0x44
 800123e:	9412      	str	r4, [sp, #72]	@ 0x48
 8001240:	9413      	str	r4, [sp, #76]	@ 0x4c
 8001242:	9414      	str	r4, [sp, #80]	@ 0x50
 8001244:	9415      	str	r4, [sp, #84]	@ 0x54
    volatile uint32_t start_time = 0;
 8001246:	9405      	str	r4, [sp, #20]
    volatile uint32_t diff_time = 0;
 8001248:	9406      	str	r4, [sp, #24]
    cliPrintf("Offset Calibration start...\n");
 800124a:	4872      	ldr	r0, [pc, #456]	@ (8001414 <cliControl+0x314>)
 800124c:	f002 fa9c 	bl	8003788 <cliPrintf>
    cliPrintf("Disconnect the ADC terminal.\n");
 8001250:	4871      	ldr	r0, [pc, #452]	@ (8001418 <cliControl+0x318>)
 8001252:	f002 fa99 	bl	8003788 <cliPrintf>
    for (uint8_t ch = 0; ch < adc_ch_max; ch++)
 8001256:	4623      	mov	r3, r4
 8001258:	e00d      	b.n	8001276 <cliControl+0x176>
      old[ch] = adc_offset[ch];
 800125a:	4a70      	ldr	r2, [pc, #448]	@ (800141c <cliControl+0x31c>)
 800125c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8001260:	edd2 7a00 	vldr	s15, [r2]
 8001264:	aa16      	add	r2, sp, #88	@ 0x58
 8001266:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800126a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800126e:	ed42 7a05 	vstr	s15, [r2, #-20]	@ 0xffffffec
    for (uint8_t ch = 0; ch < adc_ch_max; ch++)
 8001272:	3301      	adds	r3, #1
 8001274:	b2db      	uxtb	r3, r3
 8001276:	2b04      	cmp	r3, #4
 8001278:	d9ef      	bls.n	800125a <cliControl+0x15a>
    start_time = millis();
 800127a:	f000 fdb3 	bl	8001de4 <millis>
 800127e:	9005      	str	r0, [sp, #20]
    bool is_cali_done = false;
 8001280:	2600      	movs	r6, #0
    uint32_t cnt      = 0;
 8001282:	46b0      	mov	r8, r6
    uint32_t adc_time = 0;
 8001284:	4634      	mov	r4, r6
    uint32_t pre_time = 0;
 8001286:	4635      	mov	r5, r6
    uint16_t percent  = 0;
 8001288:	4637      	mov	r7, r6
    while (cliKeepLoop())
 800128a:	f002 fc93 	bl	8003bb4 <cliKeepLoop>
 800128e:	4681      	mov	r9, r0
 8001290:	2800      	cmp	r0, #0
 8001292:	f43f af49 	beq.w	8001128 <cliControl+0x28>
      if (millis() - adc_time >= 1)
 8001296:	f000 fda5 	bl	8001de4 <millis>
 800129a:	42a0      	cmp	r0, r4
 800129c:	d12d      	bne.n	80012fa <cliControl+0x1fa>
      if (millis() - pre_time > 150)
 800129e:	f000 fda1 	bl	8001de4 <millis>
 80012a2:	1b43      	subs	r3, r0, r5
 80012a4:	2b96      	cmp	r3, #150	@ 0x96
 80012a6:	d869      	bhi.n	800137c <cliControl+0x27c>
      if (is_cali_done && (percent > 100))
 80012a8:	2e00      	cmp	r6, #0
 80012aa:	d0ee      	beq.n	800128a <cliControl+0x18a>
 80012ac:	2f64      	cmp	r7, #100	@ 0x64
 80012ae:	d9ec      	bls.n	800128a <cliControl+0x18a>
        cliPrintf("sample_cnt: %d\n", cnt);
 80012b0:	4641      	mov	r1, r8
 80012b2:	485b      	ldr	r0, [pc, #364]	@ (8001420 <cliControl+0x320>)
 80012b4:	f002 fa68 	bl	8003788 <cliPrintf>
        cliPrintf("ch[0]: %d -> %d\n", old[0], avg[0]);
 80012b8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80012ba:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80012bc:	4859      	ldr	r0, [pc, #356]	@ (8001424 <cliControl+0x324>)
 80012be:	f002 fa63 	bl	8003788 <cliPrintf>
        cliPrintf("ch[1]: %d -> %d\n", old[1], avg[1]);
 80012c2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80012c4:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80012c6:	4858      	ldr	r0, [pc, #352]	@ (8001428 <cliControl+0x328>)
 80012c8:	f002 fa5e 	bl	8003788 <cliPrintf>
        cliPrintf("ch[2]: %d -> %d\n", old[2], avg[2]);
 80012cc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80012ce:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80012d0:	4856      	ldr	r0, [pc, #344]	@ (800142c <cliControl+0x32c>)
 80012d2:	f002 fa59 	bl	8003788 <cliPrintf>
        cliPrintf("ch[3]: %d -> %d\n", old[3], avg[3]);
 80012d6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80012d8:	9914      	ldr	r1, [sp, #80]	@ 0x50
 80012da:	4855      	ldr	r0, [pc, #340]	@ (8001430 <cliControl+0x330>)
 80012dc:	f002 fa54 	bl	8003788 <cliPrintf>
        cliPrintf("ch[4]: %d -> %d\n", old[4], avg[4]);
 80012e0:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80012e2:	9915      	ldr	r1, [sp, #84]	@ 0x54
 80012e4:	4853      	ldr	r0, [pc, #332]	@ (8001434 <cliControl+0x334>)
 80012e6:	f002 fa4f 	bl	8003788 <cliPrintf>
        cliPrintf("Offset Calibration Done!!\n");
 80012ea:	4853      	ldr	r0, [pc, #332]	@ (8001438 <cliControl+0x338>)
 80012ec:	f002 fa4c 	bl	8003788 <cliPrintf>
        delay(1000);
 80012f0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80012f4:	f000 fd72 	bl	8001ddc <delay>
        break;
 80012f8:	e716      	b.n	8001128 <cliControl+0x28>
        adc_time = millis();
 80012fa:	f000 fd73 	bl	8001de4 <millis>
 80012fe:	4604      	mov	r4, r0
        if (cnt < 1000)
 8001300:	f5b8 7f7a 	cmp.w	r8, #1000	@ 0x3e8
 8001304:	d31e      	bcc.n	8001344 <cliControl+0x244>
        else if(is_cali_done == false)
 8001306:	2e00      	cmp	r6, #0
 8001308:	d1c9      	bne.n	800129e <cliControl+0x19e>
          diff_time = millis() - start_time;
 800130a:	f000 fd6b 	bl	8001de4 <millis>
 800130e:	9b05      	ldr	r3, [sp, #20]
 8001310:	1ac0      	subs	r0, r0, r3
 8001312:	9006      	str	r0, [sp, #24]
          cliPrintf("Calculated Time: %dms\n", diff_time);
 8001314:	9906      	ldr	r1, [sp, #24]
 8001316:	4849      	ldr	r0, [pc, #292]	@ (800143c <cliControl+0x33c>)
 8001318:	f002 fa36 	bl	8003788 <cliPrintf>
          for (uint8_t ch = 0; ch < adc_ch_max; ch++)
 800131c:	2300      	movs	r3, #0
 800131e:	e029      	b.n	8001374 <cliControl+0x274>
            sum[ch] += adc_value[ch];
 8001320:	aa16      	add	r2, sp, #88	@ 0x58
 8001322:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8001326:	f851 2c3c 	ldr.w	r2, [r1, #-60]
 800132a:	4837      	ldr	r0, [pc, #220]	@ (8001408 <cliControl+0x308>)
 800132c:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8001330:	4402      	add	r2, r0
 8001332:	f841 2c3c 	str.w	r2, [r1, #-60]
          for (uint8_t ch = 0; ch < adc_ch_max; ch++)
 8001336:	3301      	adds	r3, #1
 8001338:	b2db      	uxtb	r3, r3
 800133a:	2b04      	cmp	r3, #4
 800133c:	d9f0      	bls.n	8001320 <cliControl+0x220>
          cnt++;
 800133e:	f108 0801 	add.w	r8, r8, #1
 8001342:	e7ac      	b.n	800129e <cliControl+0x19e>
          for (uint8_t ch = 0; ch < adc_ch_max; ch++)
 8001344:	2300      	movs	r3, #0
 8001346:	e7f8      	b.n	800133a <cliControl+0x23a>
            avg[ch]        = sum[ch] / (cnt + 1);
 8001348:	aa16      	add	r2, sp, #88	@ 0x58
 800134a:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800134e:	f851 2c3c 	ldr.w	r2, [r1, #-60]
 8001352:	f108 0001 	add.w	r0, r8, #1
 8001356:	fbb2 f2f0 	udiv	r2, r2, r0
 800135a:	f841 2c28 	str.w	r2, [r1, #-40]
            adc_offset[ch] = avg[ch];
 800135e:	492f      	ldr	r1, [pc, #188]	@ (800141c <cliControl+0x31c>)
 8001360:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8001364:	ee07 2a90 	vmov	s15, r2
 8001368:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800136c:	edc1 7a00 	vstr	s15, [r1]
          for (uint8_t ch = 0; ch < adc_ch_max; ch++)
 8001370:	3301      	adds	r3, #1
 8001372:	b2db      	uxtb	r3, r3
 8001374:	2b04      	cmp	r3, #4
 8001376:	d9e7      	bls.n	8001348 <cliControl+0x248>
          is_cali_done = true;
 8001378:	464e      	mov	r6, r9
 800137a:	e790      	b.n	800129e <cliControl+0x19e>
        pre_time = millis();
 800137c:	f000 fd32 	bl	8001de4 <millis>
 8001380:	4605      	mov	r5, r0
        if (lcdDrawAvailable())
 8001382:	f000 ff45 	bl	8002210 <lcdDrawAvailable>
 8001386:	2800      	cmp	r0, #0
 8001388:	d08e      	beq.n	80012a8 <cliControl+0x1a8>
          lcdClearBuffer(black);
 800138a:	2000      	movs	r0, #0
 800138c:	f000 ffac 	bl	80022e8 <lcdClearBuffer>
          lcdPrintf(96, 0, white, "%3d%%", percent);
 8001390:	9700      	str	r7, [sp, #0]
 8001392:	4b2b      	ldr	r3, [pc, #172]	@ (8001440 <cliControl+0x340>)
 8001394:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001398:	2100      	movs	r1, #0
 800139a:	2060      	movs	r0, #96	@ 0x60
 800139c:	f001 f8f4 	bl	8002588 <lcdPrintf>
          lcdDrawRect(0, 16, 128, 16, white);
 80013a0:	f64f 79ff 	movw	r9, #65535	@ 0xffff
 80013a4:	f8cd 9000 	str.w	r9, [sp]
 80013a8:	2310      	movs	r3, #16
 80013aa:	2280      	movs	r2, #128	@ 0x80
 80013ac:	4619      	mov	r1, r3
 80013ae:	2000      	movs	r0, #0
 80013b0:	f001 f8c4 	bl	800253c <lcdDrawRect>
          lcdDrawFillRect(2, 19, percent * 124 / 100, 10, white);
 80013b4:	ebc7 1347 	rsb	r3, r7, r7, lsl #5
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	4a22      	ldr	r2, [pc, #136]	@ (8001444 <cliControl+0x344>)
 80013bc:	fb82 1203 	smull	r1, r2, r2, r3
 80013c0:	17db      	asrs	r3, r3, #31
 80013c2:	ebc3 1262 	rsb	r2, r3, r2, asr #5
 80013c6:	f8cd 9000 	str.w	r9, [sp]
 80013ca:	230a      	movs	r3, #10
 80013cc:	b212      	sxth	r2, r2
 80013ce:	2113      	movs	r1, #19
 80013d0:	2002      	movs	r0, #2
 80013d2:	f001 f841 	bl	8002458 <lcdDrawFillRect>
          lcdRequestDraw();
 80013d6:	f000 ff45 	bl	8002264 <lcdRequestDraw>
          percent += 10;
 80013da:	370a      	adds	r7, #10
 80013dc:	b2bf      	uxth	r7, r7
 80013de:	e763      	b.n	80012a8 <cliControl+0x1a8>
 80013e0:	0800e9e0 	.word	0x0800e9e0
 80013e4:	200003a0 	.word	0x200003a0
 80013e8:	0800e9d8 	.word	0x0800e9d8
 80013ec:	0800e9e8 	.word	0x0800e9e8
 80013f0:	0800e9dc 	.word	0x0800e9dc
 80013f4:	0800e9f8 	.word	0x0800e9f8
 80013f8:	20000004 	.word	0x20000004
 80013fc:	2000001c 	.word	0x2000001c
 8001400:	0800ea00 	.word	0x0800ea00
 8001404:	0800ea3c 	.word	0x0800ea3c
 8001408:	2000038c 	.word	0x2000038c
 800140c:	0800ea40 	.word	0x0800ea40
 8001410:	0800ea5c 	.word	0x0800ea5c
 8001414:	0800ea64 	.word	0x0800ea64
 8001418:	0800ea84 	.word	0x0800ea84
 800141c:	20000008 	.word	0x20000008
 8001420:	0800eac4 	.word	0x0800eac4
 8001424:	0800ead4 	.word	0x0800ead4
 8001428:	0800eae8 	.word	0x0800eae8
 800142c:	0800eafc 	.word	0x0800eafc
 8001430:	0800eb10 	.word	0x0800eb10
 8001434:	0800eb24 	.word	0x0800eb24
 8001438:	0800eb38 	.word	0x0800eb38
 800143c:	0800eaa4 	.word	0x0800eaa4
 8001440:	0800eabc 	.word	0x0800eabc
 8001444:	51eb851f 	.word	0x51eb851f
    cliPrintf("ctrl info\n");
 8001448:	4806      	ldr	r0, [pc, #24]	@ (8001464 <cliControl+0x364>)
 800144a:	f002 f99d 	bl	8003788 <cliPrintf>
    cliPrintf("ctrl cali\n");
 800144e:	4806      	ldr	r0, [pc, #24]	@ (8001468 <cliControl+0x368>)
 8001450:	f002 f99a 	bl	8003788 <cliPrintf>
    cliPrintf("ctrl raw\n");
 8001454:	4805      	ldr	r0, [pc, #20]	@ (800146c <cliControl+0x36c>)
 8001456:	f002 f997 	bl	8003788 <cliPrintf>
    cliPrintf("ctrl wave freq[1-200] vpp[1.0-20.0]\n");
 800145a:	4805      	ldr	r0, [pc, #20]	@ (8001470 <cliControl+0x370>)
 800145c:	f002 f994 	bl	8003788 <cliPrintf>
}
 8001460:	e662      	b.n	8001128 <cliControl+0x28>
 8001462:	bf00      	nop
 8001464:	0800eb54 	.word	0x0800eb54
 8001468:	0800eb60 	.word	0x0800eb60
 800146c:	0800eb6c 	.word	0x0800eb6c
 8001470:	0800eb78 	.word	0x0800eb78

08001474 <controlInit>:
{
 8001474:	b538      	push	{r3, r4, r5, lr}
  is_init = true;
 8001476:	2401      	movs	r4, #1
 8001478:	4b0a      	ldr	r3, [pc, #40]	@ (80014a4 <controlInit+0x30>)
 800147a:	701c      	strb	r4, [r3, #0]
  qbufferCreateBySize(&value_queue, (uint8_t *)queue_buffer, sizeof(value_buf_t), value_num);
 800147c:	230a      	movs	r3, #10
 800147e:	2212      	movs	r2, #18
 8001480:	4909      	ldr	r1, [pc, #36]	@ (80014a8 <controlInit+0x34>)
 8001482:	480a      	ldr	r0, [pc, #40]	@ (80014ac <controlInit+0x38>)
 8001484:	f000 fcbb 	bl	8001dfe <qbufferCreateBySize>
  HAL_TIM_Base_Start_IT(&htim1);
 8001488:	4d09      	ldr	r5, [pc, #36]	@ (80014b0 <controlInit+0x3c>)
 800148a:	4628      	mov	r0, r5
 800148c:	f006 fd80 	bl	8007f90 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8001490:	2100      	movs	r1, #0
 8001492:	4628      	mov	r0, r5
 8001494:	f007 f942 	bl	800871c <HAL_TIM_PWM_Start>
  cliAdd("ctrl", cliControl);  
 8001498:	4906      	ldr	r1, [pc, #24]	@ (80014b4 <controlInit+0x40>)
 800149a:	4807      	ldr	r0, [pc, #28]	@ (80014b8 <controlInit+0x44>)
 800149c:	f002 fb96 	bl	8003bcc <cliAdd>
}
 80014a0:	4620      	mov	r0, r4
 80014a2:	bd38      	pop	{r3, r4, r5, pc}
 80014a4:	200003a0 	.word	0x200003a0
 80014a8:	200002c0 	.word	0x200002c0
 80014ac:	200002ac 	.word	0x200002ac
 80014b0:	20005a4c 	.word	0x20005a4c
 80014b4:	08001101 	.word	0x08001101
 80014b8:	0800eba0 	.word	0x0800eba0

080014bc <lcdUpdate>:
{
 80014bc:	b530      	push	{r4, r5, lr}
 80014be:	b085      	sub	sp, #20
  if(millis() - pre_time >= lcd_update_period)
 80014c0:	f000 fc90 	bl	8001de4 <millis>
 80014c4:	4b4d      	ldr	r3, [pc, #308]	@ (80015fc <lcdUpdate+0x140>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	1ac0      	subs	r0, r0, r3
 80014ca:	f5b0 7ffa 	cmp.w	r0, #500	@ 0x1f4
 80014ce:	d201      	bcs.n	80014d4 <lcdUpdate+0x18>
}
 80014d0:	b005      	add	sp, #20
 80014d2:	bd30      	pop	{r4, r5, pc}
    pre_time = millis();
 80014d4:	f000 fc86 	bl	8001de4 <millis>
 80014d8:	4b48      	ldr	r3, [pc, #288]	@ (80015fc <lcdUpdate+0x140>)
 80014da:	6018      	str	r0, [r3, #0]
    lcdClearBuffer(black);
 80014dc:	2000      	movs	r0, #0
 80014de:	f000 ff03 	bl	80022e8 <lcdClearBuffer>
    if(lcdGetFont() == LCD_FONT_HAN)
 80014e2:	f001 f903 	bl	80026ec <lcdGetFont>
 80014e6:	2803      	cmp	r0, #3
 80014e8:	d044      	beq.n	8001574 <lcdUpdate+0xb8>
      lcdPrintf(28, 16*0, white, "%3dHz %2.1fVpp", freq, vpp_out);
 80014ea:	4b45      	ldr	r3, [pc, #276]	@ (8001600 <lcdUpdate+0x144>)
 80014ec:	6818      	ldr	r0, [r3, #0]
 80014ee:	f7ff f863 	bl	80005b8 <__aeabi_f2d>
 80014f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80014f6:	4b43      	ldr	r3, [pc, #268]	@ (8001604 <lcdUpdate+0x148>)
 80014f8:	881b      	ldrh	r3, [r3, #0]
 80014fa:	9300      	str	r3, [sp, #0]
 80014fc:	4b42      	ldr	r3, [pc, #264]	@ (8001608 <lcdUpdate+0x14c>)
 80014fe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001502:	2100      	movs	r1, #0
 8001504:	201c      	movs	r0, #28
 8001506:	f001 f83f 	bl	8002588 <lcdPrintf>
      lcdPrintf(0, 16 * 1, white, "V [1]%1.2f [2]%1.2f", vrms[ADC_CH_VRMS_1], vrms[ADC_CH_VRMS_2]);
 800150a:	4c40      	ldr	r4, [pc, #256]	@ (800160c <lcdUpdate+0x150>)
 800150c:	6825      	ldr	r5, [r4, #0]
 800150e:	6860      	ldr	r0, [r4, #4]
 8001510:	f7ff f852 	bl	80005b8 <__aeabi_f2d>
 8001514:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001518:	4628      	mov	r0, r5
 800151a:	f7ff f84d 	bl	80005b8 <__aeabi_f2d>
 800151e:	e9cd 0100 	strd	r0, r1, [sp]
 8001522:	4b3b      	ldr	r3, [pc, #236]	@ (8001610 <lcdUpdate+0x154>)
 8001524:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001528:	2110      	movs	r1, #16
 800152a:	2000      	movs	r0, #0
 800152c:	f001 f82c 	bl	8002588 <lcdPrintf>
      lcdPrintf(14, 16 * 2, white, "[3]%1.2f [4]%1.2f", vrms[ADC_CH_VRMS_3], vrms[ADC_CH_VRMS_4]);
 8001530:	68a5      	ldr	r5, [r4, #8]
 8001532:	68e0      	ldr	r0, [r4, #12]
 8001534:	f7ff f840 	bl	80005b8 <__aeabi_f2d>
 8001538:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800153c:	4628      	mov	r0, r5
 800153e:	f7ff f83b 	bl	80005b8 <__aeabi_f2d>
 8001542:	e9cd 0100 	strd	r0, r1, [sp]
 8001546:	4b33      	ldr	r3, [pc, #204]	@ (8001614 <lcdUpdate+0x158>)
 8001548:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800154c:	2120      	movs	r1, #32
 800154e:	200e      	movs	r0, #14
 8001550:	f001 f81a 	bl	8002588 <lcdPrintf>
      lcdPrintf(0, 16 * 3, white, "I [1]%1.2f", irms);
 8001554:	4b30      	ldr	r3, [pc, #192]	@ (8001618 <lcdUpdate+0x15c>)
 8001556:	6818      	ldr	r0, [r3, #0]
 8001558:	f7ff f82e 	bl	80005b8 <__aeabi_f2d>
 800155c:	e9cd 0100 	strd	r0, r1, [sp]
 8001560:	4b2e      	ldr	r3, [pc, #184]	@ (800161c <lcdUpdate+0x160>)
 8001562:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001566:	2130      	movs	r1, #48	@ 0x30
 8001568:	2000      	movs	r0, #0
 800156a:	f001 f80d 	bl	8002588 <lcdPrintf>
    lcdRequestDraw();
 800156e:	f000 fe79 	bl	8002264 <lcdRequestDraw>
}
 8001572:	e7ad      	b.n	80014d0 <lcdUpdate+0x14>
      lcdPrintf(0, 16 * 0, white, "%3dHz %2.1fVpp", freq, vpp_out);
 8001574:	4b22      	ldr	r3, [pc, #136]	@ (8001600 <lcdUpdate+0x144>)
 8001576:	6818      	ldr	r0, [r3, #0]
 8001578:	f7ff f81e 	bl	80005b8 <__aeabi_f2d>
 800157c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001580:	4b20      	ldr	r3, [pc, #128]	@ (8001604 <lcdUpdate+0x148>)
 8001582:	881b      	ldrh	r3, [r3, #0]
 8001584:	9300      	str	r3, [sp, #0]
 8001586:	4b20      	ldr	r3, [pc, #128]	@ (8001608 <lcdUpdate+0x14c>)
 8001588:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800158c:	2100      	movs	r1, #0
 800158e:	4608      	mov	r0, r1
 8001590:	f000 fffa 	bl	8002588 <lcdPrintf>
      lcdPrintf(0, 16 * 1, white, "Vrms %1.2f %1.2f", vrms[ADC_CH_VRMS_1], vrms[ADC_CH_VRMS_2]);
 8001594:	4c1d      	ldr	r4, [pc, #116]	@ (800160c <lcdUpdate+0x150>)
 8001596:	6825      	ldr	r5, [r4, #0]
 8001598:	6860      	ldr	r0, [r4, #4]
 800159a:	f7ff f80d 	bl	80005b8 <__aeabi_f2d>
 800159e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80015a2:	4628      	mov	r0, r5
 80015a4:	f7ff f808 	bl	80005b8 <__aeabi_f2d>
 80015a8:	e9cd 0100 	strd	r0, r1, [sp]
 80015ac:	4b1c      	ldr	r3, [pc, #112]	@ (8001620 <lcdUpdate+0x164>)
 80015ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015b2:	2110      	movs	r1, #16
 80015b4:	2000      	movs	r0, #0
 80015b6:	f000 ffe7 	bl	8002588 <lcdPrintf>
      lcdPrintf(40, 16 * 2, white, "%1.2f %1.2f", vrms[ADC_CH_VRMS_3], vrms[ADC_CH_VRMS_4]);
 80015ba:	68a5      	ldr	r5, [r4, #8]
 80015bc:	68e0      	ldr	r0, [r4, #12]
 80015be:	f7fe fffb 	bl	80005b8 <__aeabi_f2d>
 80015c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80015c6:	4628      	mov	r0, r5
 80015c8:	f7fe fff6 	bl	80005b8 <__aeabi_f2d>
 80015cc:	e9cd 0100 	strd	r0, r1, [sp]
 80015d0:	4b14      	ldr	r3, [pc, #80]	@ (8001624 <lcdUpdate+0x168>)
 80015d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015d6:	2120      	movs	r1, #32
 80015d8:	2028      	movs	r0, #40	@ 0x28
 80015da:	f000 ffd5 	bl	8002588 <lcdPrintf>
      lcdPrintf(0, 16 * 3, white, "Irms %1.2f", irms);
 80015de:	4b0e      	ldr	r3, [pc, #56]	@ (8001618 <lcdUpdate+0x15c>)
 80015e0:	6818      	ldr	r0, [r3, #0]
 80015e2:	f7fe ffe9 	bl	80005b8 <__aeabi_f2d>
 80015e6:	e9cd 0100 	strd	r0, r1, [sp]
 80015ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001628 <lcdUpdate+0x16c>)
 80015ec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015f0:	2130      	movs	r1, #48	@ 0x30
 80015f2:	2000      	movs	r0, #0
 80015f4:	f000 ffc8 	bl	8002588 <lcdPrintf>
 80015f8:	e7b9      	b.n	800156e <lcdUpdate+0xb2>
 80015fa:	bf00      	nop
 80015fc:	200002a8 	.word	0x200002a8
 8001600:	2000001c 	.word	0x2000001c
 8001604:	20000004 	.word	0x20000004
 8001608:	0800eba8 	.word	0x0800eba8
 800160c:	20000378 	.word	0x20000378
 8001610:	0800ebe4 	.word	0x0800ebe4
 8001614:	0800ebf8 	.word	0x0800ebf8
 8001618:	20000374 	.word	0x20000374
 800161c:	0800ec0c 	.word	0x0800ec0c
 8001620:	0800ebb8 	.word	0x0800ebb8
 8001624:	0800ebcc 	.word	0x0800ebcc
 8001628:	0800ebd8 	.word	0x0800ebd8

0800162c <dacAvailableForWrite>:
{
 800162c:	b510      	push	{r4, lr}
  rx_len = qbufferAvailable(&value_queue);
 800162e:	4c04      	ldr	r4, [pc, #16]	@ (8001640 <dacAvailableForWrite+0x14>)
 8001630:	4620      	mov	r0, r4
 8001632:	f000 fc46 	bl	8001ec2 <qbufferAvailable>
  wr_len = (value_queue.len - 1) - rx_len;
 8001636:	68a3      	ldr	r3, [r4, #8]
 8001638:	1a18      	subs	r0, r3, r0
}
 800163a:	3801      	subs	r0, #1
 800163c:	bd10      	pop	{r4, pc}
 800163e:	bf00      	nop
 8001640:	200002ac 	.word	0x200002ac

08001644 <controlDacUpdate>:
{
 8001644:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001646:	b087      	sub	sp, #28
  sample_max = control_freq / freq;
 8001648:	4b40      	ldr	r3, [pc, #256]	@ (800174c <controlDacUpdate+0x108>)
 800164a:	881b      	ldrh	r3, [r3, #0]
 800164c:	f242 7710 	movw	r7, #10000	@ 0x2710
 8001650:	fbb7 f7f3 	udiv	r7, r7, r3
 8001654:	4b3e      	ldr	r3, [pc, #248]	@ (8001750 <controlDacUpdate+0x10c>)
 8001656:	601f      	str	r7, [r3, #0]
  dac_out_value = (uint16_t)rint((sinf(((2 * PI) / sample_max) * sample_idx) + 1.0f) * (float)(ADC_RESOLUTION_HALF));
 8001658:	ee07 7a90 	vmov	s15, r7
 800165c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001660:	eddf 6a3c 	vldr	s13, [pc, #240]	@ 8001754 <controlDacUpdate+0x110>
 8001664:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001668:	4e3b      	ldr	r6, [pc, #236]	@ (8001758 <controlDacUpdate+0x114>)
 800166a:	6834      	ldr	r4, [r6, #0]
 800166c:	ee07 4a10 	vmov	s14, r4
 8001670:	eeb8 0a47 	vcvt.f32.u32	s0, s14
 8001674:	ee20 0a27 	vmul.f32	s0, s0, s15
 8001678:	f00c fbb4 	bl	800dde4 <sinf>
 800167c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8001680:	ee30 0a27 	vadd.f32	s0, s0, s15
 8001684:	eddf 7a35 	vldr	s15, [pc, #212]	@ 800175c <controlDacUpdate+0x118>
 8001688:	ee60 7a27 	vmul.f32	s15, s0, s15
 800168c:	ee17 0a90 	vmov	r0, s15
 8001690:	f7fe ff92 	bl	80005b8 <__aeabi_f2d>
 8001694:	ec41 0b10 	vmov	d0, r0, r1
 8001698:	f00c fbea 	bl	800de70 <rint>
 800169c:	ec51 0b10 	vmov	r0, r1, d0
 80016a0:	f7ff faba 	bl	8000c18 <__aeabi_d2uiz>
 80016a4:	b280      	uxth	r0, r0
 80016a6:	4d2e      	ldr	r5, [pc, #184]	@ (8001760 <controlDacUpdate+0x11c>)
 80016a8:	6028      	str	r0, [r5, #0]
  dac_out_value = constrain(dac_out_value, 0, ADC_RESOLUTION-1);
 80016aa:	f640 73ff 	movw	r3, #4095	@ 0xfff
 80016ae:	4283      	cmp	r3, r0
 80016b0:	bfa8      	it	ge
 80016b2:	4603      	movge	r3, r0
 80016b4:	602b      	str	r3, [r5, #0]
  dac_out_value = dac_out_value * (vpp_out / vpp_max);
 80016b6:	4a2b      	ldr	r2, [pc, #172]	@ (8001764 <controlDacUpdate+0x120>)
 80016b8:	edd2 6a00 	vldr	s13, [r2]
 80016bc:	eef3 7a04 	vmov.f32	s15, #52	@ 0x41a00000  20.0
 80016c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80016c4:	ee07 3a90 	vmov	s15, r3
 80016c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016d4:	ee17 3a90 	vmov	r3, s15
 80016d8:	edc5 7a00 	vstr	s15, [r5]
  sample_idx    = next_idx(sample_idx, sample_max);
 80016dc:	193a      	adds	r2, r7, r4
 80016de:	3201      	adds	r2, #1
 80016e0:	fbb2 f1f7 	udiv	r1, r2, r7
 80016e4:	fb07 2211 	mls	r2, r7, r1, r2
 80016e8:	6032      	str	r2, [r6, #0]
  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_out_value); // DAC1 OUT
 80016ea:	2200      	movs	r2, #0
 80016ec:	4611      	mov	r1, r2
 80016ee:	481e      	ldr	r0, [pc, #120]	@ (8001768 <controlDacUpdate+0x124>)
 80016f0:	f004 fb3c 	bl	8005d6c <HAL_DAC_SetValue>
  HAL_DAC_SetValue(&hdac2, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_out_value); // DAC2 OUT
 80016f4:	682b      	ldr	r3, [r5, #0]
 80016f6:	2200      	movs	r2, #0
 80016f8:	4611      	mov	r1, r2
 80016fa:	481c      	ldr	r0, [pc, #112]	@ (800176c <controlDacUpdate+0x128>)
 80016fc:	f004 fb36 	bl	8005d6c <HAL_DAC_SetValue>
  if (millis() - pre_time >= 1)
 8001700:	f000 fb70 	bl	8001de4 <millis>
 8001704:	4b1a      	ldr	r3, [pc, #104]	@ (8001770 <controlDacUpdate+0x12c>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4298      	cmp	r0, r3
 800170a:	d101      	bne.n	8001710 <controlDacUpdate+0xcc>
}
 800170c:	b007      	add	sp, #28
 800170e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    pre_time = millis();
 8001710:	f000 fb68 	bl	8001de4 <millis>
 8001714:	4b16      	ldr	r3, [pc, #88]	@ (8001770 <controlDacUpdate+0x12c>)
 8001716:	6018      	str	r0, [r3, #0]
    buf.frame_start = 0xBBAA;
 8001718:	f64b 33aa 	movw	r3, #48042	@ 0xbbaa
 800171c:	f8ad 3004 	strh.w	r3, [sp, #4]
    buf.value[0] = 12.3f;
 8001720:	4b14      	ldr	r3, [pc, #80]	@ (8001774 <controlDacUpdate+0x130>)
 8001722:	f8cd 3006 	str.w	r3, [sp, #6]
    buf.value[1] = 34.5f;
 8001726:	4b14      	ldr	r3, [pc, #80]	@ (8001778 <controlDacUpdate+0x134>)
 8001728:	f8cd 300a 	str.w	r3, [sp, #10]
    buf.value[2] = 56.7f;
 800172c:	4b13      	ldr	r3, [pc, #76]	@ (800177c <controlDacUpdate+0x138>)
 800172e:	f8cd 300e 	str.w	r3, [sp, #14]
    buf.value[3] = 78.9f;
 8001732:	4b13      	ldr	r3, [pc, #76]	@ (8001780 <controlDacUpdate+0x13c>)
 8001734:	f8cd 3012 	str.w	r3, [sp, #18]
    if (dacAvailableForWrite() > 0)
 8001738:	f7ff ff78 	bl	800162c <dacAvailableForWrite>
 800173c:	2800      	cmp	r0, #0
 800173e:	d0e5      	beq.n	800170c <controlDacUpdate+0xc8>
      qbufferWrite(&value_queue, (uint8_t *)&buf, 1);
 8001740:	2201      	movs	r2, #1
 8001742:	a901      	add	r1, sp, #4
 8001744:	480f      	ldr	r0, [pc, #60]	@ (8001784 <controlDacUpdate+0x140>)
 8001746:	f000 fb65 	bl	8001e14 <qbufferWrite>
}
 800174a:	e7df      	b.n	800170c <controlDacUpdate+0xc8>
 800174c:	20000004 	.word	0x20000004
 8001750:	20000000 	.word	0x20000000
 8001754:	40c90fdb 	.word	0x40c90fdb
 8001758:	200002a4 	.word	0x200002a4
 800175c:	45000000 	.word	0x45000000
 8001760:	20000388 	.word	0x20000388
 8001764:	2000001c 	.word	0x2000001c
 8001768:	200057f4 	.word	0x200057f4
 800176c:	200057e0 	.word	0x200057e0
 8001770:	200002a0 	.word	0x200002a0
 8001774:	4144cccd 	.word	0x4144cccd
 8001778:	420a0000 	.word	0x420a0000
 800177c:	4262cccd 	.word	0x4262cccd
 8001780:	429dcccd 	.word	0x429dcccd
 8001784:	200002ac 	.word	0x200002ac

08001788 <controlMotorUpdate>:
{
 8001788:	b538      	push	{r3, r4, r5, lr}
 800178a:	ed2d 8b02 	vpush	{d8}
  float    arr       = (float)(__HAL_TIM_GET_AUTORELOAD(&htim1));
 800178e:	4b24      	ldr	r3, [pc, #144]	@ (8001820 <controlMotorUpdate+0x98>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	ed93 8a0b 	vldr	s16, [r3, #44]	@ 0x2c
 8001796:	eeb8 8a48 	vcvt.f32.u32	s16, s16
  int32_t  dac_value = dac_out_value;
 800179a:	4b22      	ldr	r3, [pc, #136]	@ (8001824 <controlMotorUpdate+0x9c>)
 800179c:	681d      	ldr	r5, [r3, #0]
  float    vpp_ratio = (vpp_out / vpp_max);
 800179e:	4b22      	ldr	r3, [pc, #136]	@ (8001828 <controlMotorUpdate+0xa0>)
 80017a0:	edd3 6a00 	vldr	s13, [r3]
 80017a4:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 80017a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
  dac_offset = (int32_t)(vpp_ratio * (float)ADC_RESOLUTION_HALF);
 80017ac:	eeb0 7a67 	vmov.f32	s14, s15
 80017b0:	eebe 7aea 	vcvt.s32.f32	s14, s14, #11
 80017b4:	ee17 4a10 	vmov	r4, s14
  if (dac_value >= dac_offset)
 80017b8:	42a5      	cmp	r5, r4
 80017ba:	db23      	blt.n	8001804 <controlMotorUpdate+0x7c>
    HAL_GPIO_WritePin(MT_PH_GPIO_Port, MT_PH_Pin, GPIO_PIN_SET);   // PH: H => OUT1 H, OUT2: L (Forward)
 80017bc:	2201      	movs	r2, #1
 80017be:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80017c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017c6:	f004 ffe1 	bl	800678c <HAL_GPIO_WritePin>
  if(dac_value >= 0)
 80017ca:	1b2b      	subs	r3, r5, r4
 80017cc:	d422      	bmi.n	8001814 <controlMotorUpdate+0x8c>
    dac_value++;
 80017ce:	3301      	adds	r3, #1
  dac_value = constrain(dac_value, 1, ADC_RESOLUTION_HALF);
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	dd21      	ble.n	8001818 <controlMotorUpdate+0x90>
 80017d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80017d8:	bfa8      	it	ge
 80017da:	f44f 6300 	movge.w	r3, #2048	@ 0x800
 80017de:	ee07 3a90 	vmov	s15, r3
  pwm_ratio =  (float)dac_value / (float)ADC_RESOLUTION_HALF;
 80017e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017e6:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 800182c <controlMotorUpdate+0xa4>
 80017ea:	ee67 7a87 	vmul.f32	s15, s15, s14
  pwm_out   = (uint32_t)(pwm_ratio * arr);
 80017ee:	ee28 8a27 	vmul.f32	s16, s16, s15
 80017f2:	eebc 8ac8 	vcvt.u32.f32	s16, s16
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwm_out);
 80017f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001820 <controlMotorUpdate+0x98>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	ed83 8a0d 	vstr	s16, [r3, #52]	@ 0x34
}
 80017fe:	ecbd 8b02 	vpop	{d8}
 8001802:	bd38      	pop	{r3, r4, r5, pc}
    HAL_GPIO_WritePin(MT_PH_GPIO_Port, MT_PH_Pin, GPIO_PIN_RESET); // PH: L => OUT1 L, OUT2: H (Reverse)
 8001804:	2200      	movs	r2, #0
 8001806:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800180a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800180e:	f004 ffbd 	bl	800678c <HAL_GPIO_WritePin>
 8001812:	e7da      	b.n	80017ca <controlMotorUpdate+0x42>
    dac_value *= -1;
 8001814:	1b63      	subs	r3, r4, r5
 8001816:	e7db      	b.n	80017d0 <controlMotorUpdate+0x48>
  dac_value = constrain(dac_value, 1, ADC_RESOLUTION_HALF);
 8001818:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8001830 <controlMotorUpdate+0xa8>
 800181c:	e7e1      	b.n	80017e2 <controlMotorUpdate+0x5a>
 800181e:	bf00      	nop
 8001820:	20005a4c 	.word	0x20005a4c
 8001824:	20000388 	.word	0x20000388
 8001828:	2000001c 	.word	0x2000001c
 800182c:	3a000000 	.word	0x3a000000
 8001830:	00000001 	.word	0x00000001

08001834 <controlUartUpdate>:
{
 8001834:	b500      	push	{lr}
 8001836:	b087      	sub	sp, #28
  if (qbufferAvailable(&value_queue) > 0)
 8001838:	4809      	ldr	r0, [pc, #36]	@ (8001860 <controlUartUpdate+0x2c>)
 800183a:	f000 fb42 	bl	8001ec2 <qbufferAvailable>
 800183e:	b910      	cbnz	r0, 8001846 <controlUartUpdate+0x12>
}
 8001840:	b007      	add	sp, #28
 8001842:	f85d fb04 	ldr.w	pc, [sp], #4
    qbufferRead(&value_queue, (uint8_t *)&buf, 1);
 8001846:	2201      	movs	r2, #1
 8001848:	a901      	add	r1, sp, #4
 800184a:	4805      	ldr	r0, [pc, #20]	@ (8001860 <controlUartUpdate+0x2c>)
 800184c:	f000 fb0c 	bl	8001e68 <qbufferRead>
    HAL_UART_Transmit(&huart3, (uint8_t *)&buf, sizeof(value_buf_t), 10);
 8001850:	230a      	movs	r3, #10
 8001852:	2212      	movs	r2, #18
 8001854:	a901      	add	r1, sp, #4
 8001856:	4803      	ldr	r0, [pc, #12]	@ (8001864 <controlUartUpdate+0x30>)
 8001858:	f007 fe72 	bl	8009540 <HAL_UART_Transmit>
}
 800185c:	e7f0      	b.n	8001840 <controlUartUpdate+0xc>
 800185e:	bf00      	nop
 8001860:	200002ac 	.word	0x200002ac
 8001864:	20005bb8 	.word	0x20005bb8

08001868 <controlMain>:
{
 8001868:	b508      	push	{r3, lr}
  controlUartUpdate();
 800186a:	f7ff ffe3 	bl	8001834 <controlUartUpdate>
}
 800186e:	bd08      	pop	{r3, pc}

08001870 <HAL_ADC_ConvCpltCallback>:
{
 8001870:	b538      	push	{r3, r4, r5, lr}
  if (hadc->Instance == hadc1.Instance) //  10Khz(100us)
 8001872:	6802      	ldr	r2, [r0, #0]
 8001874:	4b0b      	ldr	r3, [pc, #44]	@ (80018a4 <HAL_ADC_ConvCpltCallback+0x34>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	429a      	cmp	r2, r3
 800187a:	d000      	beq.n	800187e <HAL_ADC_ConvCpltCallback+0xe>
}
 800187c:	bd38      	pop	{r3, r4, r5, pc}
    adc_value[i] = HAL_ADC_GetValue(&hadc1);
 800187e:	4c0a      	ldr	r4, [pc, #40]	@ (80018a8 <HAL_ADC_ConvCpltCallback+0x38>)
 8001880:	7825      	ldrb	r5, [r4, #0]
 8001882:	4808      	ldr	r0, [pc, #32]	@ (80018a4 <HAL_ADC_ConvCpltCallback+0x34>)
 8001884:	f003 fac6 	bl	8004e14 <HAL_ADC_GetValue>
 8001888:	4b08      	ldr	r3, [pc, #32]	@ (80018ac <HAL_ADC_ConvCpltCallback+0x3c>)
 800188a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
    i = next_idx(i, adc_ch_max);    
 800188e:	7822      	ldrb	r2, [r4, #0]
 8001890:	3206      	adds	r2, #6
 8001892:	4b07      	ldr	r3, [pc, #28]	@ (80018b0 <HAL_ADC_ConvCpltCallback+0x40>)
 8001894:	fb83 1302 	smull	r1, r3, r3, r2
 8001898:	105b      	asrs	r3, r3, #1
 800189a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	7023      	strb	r3, [r4, #0]
}
 80018a2:	e7eb      	b.n	800187c <HAL_ADC_ConvCpltCallback+0xc>
 80018a4:	20005084 	.word	0x20005084
 80018a8:	2000029c 	.word	0x2000029c
 80018ac:	2000038c 	.word	0x2000038c
 80018b0:	66666667 	.word	0x66666667

080018b4 <adcVrms1UpadateProc>:
  sample_cnt = sample_max * multi_sampling_num;
 80018b4:	4b33      	ldr	r3, [pc, #204]	@ (8001984 <adcVrms1UpadateProc+0xd0>)
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  adc_range  = adc_max - adc_offset[ch];
 80018bc:	4b32      	ldr	r3, [pc, #200]	@ (8001988 <adcVrms1UpadateProc+0xd4>)
 80018be:	ed93 6a00 	vldr	s12, [r3]
 80018c2:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800198c <adcVrms1UpadateProc+0xd8>
 80018c6:	ee37 7a46 	vsub.f32	s14, s14, s12
  adc_min    = adc_offset[ch] - adc_range;
 80018ca:	ee76 7a47 	vsub.f32	s15, s12, s14
  value = adc_value[ch];
 80018ce:	4b30      	ldr	r3, [pc, #192]	@ (8001990 <adcVrms1UpadateProc+0xdc>)
 80018d0:	edd3 6a00 	vldr	s13, [r3]
 80018d4:	eef8 6a66 	vcvt.f32.u32	s13, s13
  value = constrain(value, adc_min, adc_max);
 80018d8:	eef4 7ae6 	vcmpe.f32	s15, s13
 80018dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018e0:	dc08      	bgt.n	80018f4 <adcVrms1UpadateProc+0x40>
 80018e2:	eddf 7a2a 	vldr	s15, [pc, #168]	@ 800198c <adcVrms1UpadateProc+0xd8>
 80018e6:	eef4 6ae7 	vcmpe.f32	s13, s15
 80018ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ee:	dc01      	bgt.n	80018f4 <adcVrms1UpadateProc+0x40>
 80018f0:	eef0 7a66 	vmov.f32	s15, s13
  value = abs(value - adc_offset[ch]);
 80018f4:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80018f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018fc:	ee17 3a90 	vmov	r3, s15
 8001900:	2b00      	cmp	r3, #0
 8001902:	bfb8      	it	lt
 8001904:	425b      	neglt	r3, r3
 8001906:	ee07 3a90 	vmov	s15, r3
 800190a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  value /= adc_range;
 800190e:	eec7 6a87 	vdiv.f32	s13, s15, s14
  sum += value;
 8001912:	4b20      	ldr	r3, [pc, #128]	@ (8001994 <adcVrms1UpadateProc+0xe0>)
 8001914:	edd3 7a00 	vldr	s15, [r3]
 8001918:	ee36 7aa7 	vadd.f32	s14, s13, s15
 800191c:	ed83 7a00 	vstr	s14, [r3]
  cnt++;
 8001920:	491d      	ldr	r1, [pc, #116]	@ (8001998 <adcVrms1UpadateProc+0xe4>)
 8001922:	680b      	ldr	r3, [r1, #0]
 8001924:	3301      	adds	r3, #1
 8001926:	600b      	str	r3, [r1, #0]
  if(cnt >= sample_cnt)
 8001928:	4293      	cmp	r3, r2
 800192a:	d329      	bcc.n	8001980 <adcVrms1UpadateProc+0xcc>
    avg = sum / cnt;
 800192c:	ee07 3a90 	vmov	s15, r3
 8001930:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001934:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001938:	4b18      	ldr	r3, [pc, #96]	@ (800199c <adcVrms1UpadateProc+0xe8>)
 800193a:	edc3 6a00 	vstr	s13, [r3]
    vrms[ch] = avg * vpeak_max;
 800193e:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8001942:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001946:	4b16      	ldr	r3, [pc, #88]	@ (80019a0 <adcVrms1UpadateProc+0xec>)
 8001948:	edc3 7a00 	vstr	s15, [r3]
    vrms[ch] = constrain(vrms[ch], 0, VRMS_MAX);
 800194c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001954:	d409      	bmi.n	800196a <adcVrms1UpadateProc+0xb6>
 8001956:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 80019a4 <adcVrms1UpadateProc+0xf0>
 800195a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800195e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001962:	dd04      	ble.n	800196e <adcVrms1UpadateProc+0xba>
 8001964:	eef0 7a47 	vmov.f32	s15, s14
 8001968:	e001      	b.n	800196e <adcVrms1UpadateProc+0xba>
 800196a:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 80019a8 <adcVrms1UpadateProc+0xf4>
 800196e:	4b0c      	ldr	r3, [pc, #48]	@ (80019a0 <adcVrms1UpadateProc+0xec>)
 8001970:	edc3 7a00 	vstr	s15, [r3]
    sum = 0.0f;
 8001974:	4b07      	ldr	r3, [pc, #28]	@ (8001994 <adcVrms1UpadateProc+0xe0>)
 8001976:	2200      	movs	r2, #0
 8001978:	601a      	str	r2, [r3, #0]
    cnt = 0;
 800197a:	4b07      	ldr	r3, [pc, #28]	@ (8001998 <adcVrms1UpadateProc+0xe4>)
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]
}
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	20000000 	.word	0x20000000
 8001988:	20000008 	.word	0x20000008
 800198c:	457fa000 	.word	0x457fa000
 8001990:	2000038c 	.word	0x2000038c
 8001994:	20000298 	.word	0x20000298
 8001998:	20000294 	.word	0x20000294
 800199c:	20000290 	.word	0x20000290
 80019a0:	20000378 	.word	0x20000378
 80019a4:	411fd70a 	.word	0x411fd70a
 80019a8:	00000000 	.word	0x00000000

080019ac <adcVrms2UpadateProc>:
  sample_cnt = sample_max * multi_sampling_num;
 80019ac:	4b33      	ldr	r3, [pc, #204]	@ (8001a7c <adcVrms2UpadateProc+0xd0>)
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  adc_range  = adc_max - adc_offset[ch];
 80019b4:	4b32      	ldr	r3, [pc, #200]	@ (8001a80 <adcVrms2UpadateProc+0xd4>)
 80019b6:	ed93 6a01 	vldr	s12, [r3, #4]
 80019ba:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8001a84 <adcVrms2UpadateProc+0xd8>
 80019be:	ee37 7a46 	vsub.f32	s14, s14, s12
  adc_min    = adc_offset[ch] - adc_range;
 80019c2:	ee76 7a47 	vsub.f32	s15, s12, s14
  value = adc_value[ch];
 80019c6:	4b30      	ldr	r3, [pc, #192]	@ (8001a88 <adcVrms2UpadateProc+0xdc>)
 80019c8:	edd3 6a01 	vldr	s13, [r3, #4]
 80019cc:	eef8 6a66 	vcvt.f32.u32	s13, s13
  value = constrain(value, adc_min, adc_max);
 80019d0:	eef4 7ae6 	vcmpe.f32	s15, s13
 80019d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019d8:	dc08      	bgt.n	80019ec <adcVrms2UpadateProc+0x40>
 80019da:	eddf 7a2a 	vldr	s15, [pc, #168]	@ 8001a84 <adcVrms2UpadateProc+0xd8>
 80019de:	eef4 6ae7 	vcmpe.f32	s13, s15
 80019e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019e6:	dc01      	bgt.n	80019ec <adcVrms2UpadateProc+0x40>
 80019e8:	eef0 7a66 	vmov.f32	s15, s13
  value = abs(value - adc_offset[ch]);
 80019ec:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80019f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019f4:	ee17 3a90 	vmov	r3, s15
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	bfb8      	it	lt
 80019fc:	425b      	neglt	r3, r3
 80019fe:	ee07 3a90 	vmov	s15, r3
 8001a02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  value /= adc_range;
 8001a06:	eec7 6a87 	vdiv.f32	s13, s15, s14
  sum += value;
 8001a0a:	4b20      	ldr	r3, [pc, #128]	@ (8001a8c <adcVrms2UpadateProc+0xe0>)
 8001a0c:	edd3 7a00 	vldr	s15, [r3]
 8001a10:	ee36 7aa7 	vadd.f32	s14, s13, s15
 8001a14:	ed83 7a00 	vstr	s14, [r3]
  cnt++;
 8001a18:	491d      	ldr	r1, [pc, #116]	@ (8001a90 <adcVrms2UpadateProc+0xe4>)
 8001a1a:	680b      	ldr	r3, [r1, #0]
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	600b      	str	r3, [r1, #0]
  if(cnt >= sample_cnt)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d329      	bcc.n	8001a78 <adcVrms2UpadateProc+0xcc>
    avg = sum / cnt;
 8001a24:	ee07 3a90 	vmov	s15, r3
 8001a28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a2c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001a30:	4b18      	ldr	r3, [pc, #96]	@ (8001a94 <adcVrms2UpadateProc+0xe8>)
 8001a32:	edc3 6a00 	vstr	s13, [r3]
    vrms[ch] = avg * vpeak_max;
 8001a36:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8001a3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a3e:	4b16      	ldr	r3, [pc, #88]	@ (8001a98 <adcVrms2UpadateProc+0xec>)
 8001a40:	edc3 7a01 	vstr	s15, [r3, #4]
    vrms[ch] = constrain(vrms[ch], 0, VRMS_MAX);
 8001a44:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a4c:	d409      	bmi.n	8001a62 <adcVrms2UpadateProc+0xb6>
 8001a4e:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8001a9c <adcVrms2UpadateProc+0xf0>
 8001a52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a5a:	dd04      	ble.n	8001a66 <adcVrms2UpadateProc+0xba>
 8001a5c:	eef0 7a47 	vmov.f32	s15, s14
 8001a60:	e001      	b.n	8001a66 <adcVrms2UpadateProc+0xba>
 8001a62:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 8001aa0 <adcVrms2UpadateProc+0xf4>
 8001a66:	4b0c      	ldr	r3, [pc, #48]	@ (8001a98 <adcVrms2UpadateProc+0xec>)
 8001a68:	edc3 7a01 	vstr	s15, [r3, #4]
    sum = 0.0f;
 8001a6c:	4b07      	ldr	r3, [pc, #28]	@ (8001a8c <adcVrms2UpadateProc+0xe0>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	601a      	str	r2, [r3, #0]
    cnt = 0;
 8001a72:	4b07      	ldr	r3, [pc, #28]	@ (8001a90 <adcVrms2UpadateProc+0xe4>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
}
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	20000000 	.word	0x20000000
 8001a80:	20000008 	.word	0x20000008
 8001a84:	457fa000 	.word	0x457fa000
 8001a88:	2000038c 	.word	0x2000038c
 8001a8c:	2000028c 	.word	0x2000028c
 8001a90:	20000288 	.word	0x20000288
 8001a94:	20000284 	.word	0x20000284
 8001a98:	20000378 	.word	0x20000378
 8001a9c:	411fd70a 	.word	0x411fd70a
 8001aa0:	00000000 	.word	0x00000000

08001aa4 <adcVrms3UpadateProc>:
  sample_cnt = sample_max * multi_sampling_num;
 8001aa4:	4b33      	ldr	r3, [pc, #204]	@ (8001b74 <adcVrms3UpadateProc+0xd0>)
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  adc_range  = adc_max - adc_offset[ch];
 8001aac:	4b32      	ldr	r3, [pc, #200]	@ (8001b78 <adcVrms3UpadateProc+0xd4>)
 8001aae:	ed93 6a02 	vldr	s12, [r3, #8]
 8001ab2:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8001b7c <adcVrms3UpadateProc+0xd8>
 8001ab6:	ee37 7a46 	vsub.f32	s14, s14, s12
  adc_min    = adc_offset[ch] - adc_range;
 8001aba:	ee76 7a47 	vsub.f32	s15, s12, s14
  value = adc_value[ch];
 8001abe:	4b30      	ldr	r3, [pc, #192]	@ (8001b80 <adcVrms3UpadateProc+0xdc>)
 8001ac0:	edd3 6a02 	vldr	s13, [r3, #8]
 8001ac4:	eef8 6a66 	vcvt.f32.u32	s13, s13
  value = constrain(value, adc_min, adc_max);
 8001ac8:	eef4 7ae6 	vcmpe.f32	s15, s13
 8001acc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ad0:	dc08      	bgt.n	8001ae4 <adcVrms3UpadateProc+0x40>
 8001ad2:	eddf 7a2a 	vldr	s15, [pc, #168]	@ 8001b7c <adcVrms3UpadateProc+0xd8>
 8001ad6:	eef4 6ae7 	vcmpe.f32	s13, s15
 8001ada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ade:	dc01      	bgt.n	8001ae4 <adcVrms3UpadateProc+0x40>
 8001ae0:	eef0 7a66 	vmov.f32	s15, s13
  value = abs(value - adc_offset[ch]);
 8001ae4:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8001ae8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001aec:	ee17 3a90 	vmov	r3, s15
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	bfb8      	it	lt
 8001af4:	425b      	neglt	r3, r3
 8001af6:	ee07 3a90 	vmov	s15, r3
 8001afa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  value /= adc_range;
 8001afe:	eec7 6a87 	vdiv.f32	s13, s15, s14
  sum += value;
 8001b02:	4b20      	ldr	r3, [pc, #128]	@ (8001b84 <adcVrms3UpadateProc+0xe0>)
 8001b04:	edd3 7a00 	vldr	s15, [r3]
 8001b08:	ee36 7aa7 	vadd.f32	s14, s13, s15
 8001b0c:	ed83 7a00 	vstr	s14, [r3]
  cnt++;
 8001b10:	491d      	ldr	r1, [pc, #116]	@ (8001b88 <adcVrms3UpadateProc+0xe4>)
 8001b12:	680b      	ldr	r3, [r1, #0]
 8001b14:	3301      	adds	r3, #1
 8001b16:	600b      	str	r3, [r1, #0]
  if(cnt >= sample_cnt)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d329      	bcc.n	8001b70 <adcVrms3UpadateProc+0xcc>
    avg = sum / cnt;
 8001b1c:	ee07 3a90 	vmov	s15, r3
 8001b20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b24:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001b28:	4b18      	ldr	r3, [pc, #96]	@ (8001b8c <adcVrms3UpadateProc+0xe8>)
 8001b2a:	edc3 6a00 	vstr	s13, [r3]
    vrms[ch] = avg * vpeak_max;
 8001b2e:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8001b32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b36:	4b16      	ldr	r3, [pc, #88]	@ (8001b90 <adcVrms3UpadateProc+0xec>)
 8001b38:	edc3 7a02 	vstr	s15, [r3, #8]
    vrms[ch] = constrain(vrms[ch], 0, VRMS_MAX);
 8001b3c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b44:	d409      	bmi.n	8001b5a <adcVrms3UpadateProc+0xb6>
 8001b46:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8001b94 <adcVrms3UpadateProc+0xf0>
 8001b4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b52:	dd04      	ble.n	8001b5e <adcVrms3UpadateProc+0xba>
 8001b54:	eef0 7a47 	vmov.f32	s15, s14
 8001b58:	e001      	b.n	8001b5e <adcVrms3UpadateProc+0xba>
 8001b5a:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 8001b98 <adcVrms3UpadateProc+0xf4>
 8001b5e:	4b0c      	ldr	r3, [pc, #48]	@ (8001b90 <adcVrms3UpadateProc+0xec>)
 8001b60:	edc3 7a02 	vstr	s15, [r3, #8]
    sum = 0.0f;
 8001b64:	4b07      	ldr	r3, [pc, #28]	@ (8001b84 <adcVrms3UpadateProc+0xe0>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	601a      	str	r2, [r3, #0]
    cnt = 0;
 8001b6a:	4b07      	ldr	r3, [pc, #28]	@ (8001b88 <adcVrms3UpadateProc+0xe4>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]
}
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	20000000 	.word	0x20000000
 8001b78:	20000008 	.word	0x20000008
 8001b7c:	457fa000 	.word	0x457fa000
 8001b80:	2000038c 	.word	0x2000038c
 8001b84:	20000280 	.word	0x20000280
 8001b88:	2000027c 	.word	0x2000027c
 8001b8c:	20000278 	.word	0x20000278
 8001b90:	20000378 	.word	0x20000378
 8001b94:	411fd70a 	.word	0x411fd70a
 8001b98:	00000000 	.word	0x00000000

08001b9c <adcVrms4UpadateProc>:
  sample_cnt = sample_max * multi_sampling_num;
 8001b9c:	4b33      	ldr	r3, [pc, #204]	@ (8001c6c <adcVrms4UpadateProc+0xd0>)
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  adc_range  = adc_max - adc_offset[ch];
 8001ba4:	4b32      	ldr	r3, [pc, #200]	@ (8001c70 <adcVrms4UpadateProc+0xd4>)
 8001ba6:	ed93 6a03 	vldr	s12, [r3, #12]
 8001baa:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8001c74 <adcVrms4UpadateProc+0xd8>
 8001bae:	ee37 7a46 	vsub.f32	s14, s14, s12
  adc_min    = adc_offset[ch] - adc_range;
 8001bb2:	ee76 7a47 	vsub.f32	s15, s12, s14
  value = adc_value[ch];
 8001bb6:	4b30      	ldr	r3, [pc, #192]	@ (8001c78 <adcVrms4UpadateProc+0xdc>)
 8001bb8:	edd3 6a03 	vldr	s13, [r3, #12]
 8001bbc:	eef8 6a66 	vcvt.f32.u32	s13, s13
  value = constrain(value, adc_min, adc_max);
 8001bc0:	eef4 7ae6 	vcmpe.f32	s15, s13
 8001bc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bc8:	dc08      	bgt.n	8001bdc <adcVrms4UpadateProc+0x40>
 8001bca:	eddf 7a2a 	vldr	s15, [pc, #168]	@ 8001c74 <adcVrms4UpadateProc+0xd8>
 8001bce:	eef4 6ae7 	vcmpe.f32	s13, s15
 8001bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bd6:	dc01      	bgt.n	8001bdc <adcVrms4UpadateProc+0x40>
 8001bd8:	eef0 7a66 	vmov.f32	s15, s13
  value = abs(value - adc_offset[ch]);
 8001bdc:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8001be0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001be4:	ee17 3a90 	vmov	r3, s15
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	bfb8      	it	lt
 8001bec:	425b      	neglt	r3, r3
 8001bee:	ee07 3a90 	vmov	s15, r3
 8001bf2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  value /= adc_range;
 8001bf6:	eec7 6a87 	vdiv.f32	s13, s15, s14
  sum += value;
 8001bfa:	4b20      	ldr	r3, [pc, #128]	@ (8001c7c <adcVrms4UpadateProc+0xe0>)
 8001bfc:	edd3 7a00 	vldr	s15, [r3]
 8001c00:	ee36 7aa7 	vadd.f32	s14, s13, s15
 8001c04:	ed83 7a00 	vstr	s14, [r3]
  cnt++;
 8001c08:	491d      	ldr	r1, [pc, #116]	@ (8001c80 <adcVrms4UpadateProc+0xe4>)
 8001c0a:	680b      	ldr	r3, [r1, #0]
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	600b      	str	r3, [r1, #0]
  if(cnt >= sample_cnt)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d329      	bcc.n	8001c68 <adcVrms4UpadateProc+0xcc>
    avg = sum / cnt;
 8001c14:	ee07 3a90 	vmov	s15, r3
 8001c18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c1c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001c20:	4b18      	ldr	r3, [pc, #96]	@ (8001c84 <adcVrms4UpadateProc+0xe8>)
 8001c22:	edc3 6a00 	vstr	s13, [r3]
    vrms[ch] = avg * vpeak_max;
 8001c26:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8001c2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c2e:	4b16      	ldr	r3, [pc, #88]	@ (8001c88 <adcVrms4UpadateProc+0xec>)
 8001c30:	edc3 7a03 	vstr	s15, [r3, #12]
    vrms[ch] = constrain(vrms[ch], 0, VRMS_MAX);
 8001c34:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c3c:	d409      	bmi.n	8001c52 <adcVrms4UpadateProc+0xb6>
 8001c3e:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8001c8c <adcVrms4UpadateProc+0xf0>
 8001c42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c4a:	dd04      	ble.n	8001c56 <adcVrms4UpadateProc+0xba>
 8001c4c:	eef0 7a47 	vmov.f32	s15, s14
 8001c50:	e001      	b.n	8001c56 <adcVrms4UpadateProc+0xba>
 8001c52:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 8001c90 <adcVrms4UpadateProc+0xf4>
 8001c56:	4b0c      	ldr	r3, [pc, #48]	@ (8001c88 <adcVrms4UpadateProc+0xec>)
 8001c58:	edc3 7a03 	vstr	s15, [r3, #12]
    sum = 0.0f;
 8001c5c:	4b07      	ldr	r3, [pc, #28]	@ (8001c7c <adcVrms4UpadateProc+0xe0>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	601a      	str	r2, [r3, #0]
    cnt = 0;
 8001c62:	4b07      	ldr	r3, [pc, #28]	@ (8001c80 <adcVrms4UpadateProc+0xe4>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]
}
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	20000000 	.word	0x20000000
 8001c70:	20000008 	.word	0x20000008
 8001c74:	457fa000 	.word	0x457fa000
 8001c78:	2000038c 	.word	0x2000038c
 8001c7c:	20000274 	.word	0x20000274
 8001c80:	20000270 	.word	0x20000270
 8001c84:	2000026c 	.word	0x2000026c
 8001c88:	20000378 	.word	0x20000378
 8001c8c:	411fd70a 	.word	0x411fd70a
 8001c90:	00000000 	.word	0x00000000

08001c94 <adcIrms1UpadateProc>:
  sample_cnt = sample_max * multi_sampling_num;
 8001c94:	4b33      	ldr	r3, [pc, #204]	@ (8001d64 <adcIrms1UpadateProc+0xd0>)
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  adc_range  = adc_max - adc_offset[ch];
 8001c9c:	4b32      	ldr	r3, [pc, #200]	@ (8001d68 <adcIrms1UpadateProc+0xd4>)
 8001c9e:	ed93 6a04 	vldr	s12, [r3, #16]
 8001ca2:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8001d6c <adcIrms1UpadateProc+0xd8>
 8001ca6:	ee37 7a46 	vsub.f32	s14, s14, s12
  adc_min    = adc_offset[ch] - adc_range;
 8001caa:	ee76 7a47 	vsub.f32	s15, s12, s14
  value = adc_value[ch];
 8001cae:	4b30      	ldr	r3, [pc, #192]	@ (8001d70 <adcIrms1UpadateProc+0xdc>)
 8001cb0:	edd3 6a04 	vldr	s13, [r3, #16]
 8001cb4:	eef8 6a66 	vcvt.f32.u32	s13, s13
  value = constrain(value, adc_min, adc_max);
 8001cb8:	eef4 7ae6 	vcmpe.f32	s15, s13
 8001cbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cc0:	dc08      	bgt.n	8001cd4 <adcIrms1UpadateProc+0x40>
 8001cc2:	eddf 7a2a 	vldr	s15, [pc, #168]	@ 8001d6c <adcIrms1UpadateProc+0xd8>
 8001cc6:	eef4 6ae7 	vcmpe.f32	s13, s15
 8001cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cce:	dc01      	bgt.n	8001cd4 <adcIrms1UpadateProc+0x40>
 8001cd0:	eef0 7a66 	vmov.f32	s15, s13
  value = abs(value - adc_offset[ch]);
 8001cd4:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8001cd8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cdc:	ee17 3a90 	vmov	r3, s15
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	bfb8      	it	lt
 8001ce4:	425b      	neglt	r3, r3
 8001ce6:	ee07 3a90 	vmov	s15, r3
 8001cea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  value /= adc_range;
 8001cee:	eec7 6a87 	vdiv.f32	s13, s15, s14
  sum += value;
 8001cf2:	4b20      	ldr	r3, [pc, #128]	@ (8001d74 <adcIrms1UpadateProc+0xe0>)
 8001cf4:	edd3 7a00 	vldr	s15, [r3]
 8001cf8:	ee36 7aa7 	vadd.f32	s14, s13, s15
 8001cfc:	ed83 7a00 	vstr	s14, [r3]
  cnt++;
 8001d00:	491d      	ldr	r1, [pc, #116]	@ (8001d78 <adcIrms1UpadateProc+0xe4>)
 8001d02:	680b      	ldr	r3, [r1, #0]
 8001d04:	3301      	adds	r3, #1
 8001d06:	600b      	str	r3, [r1, #0]
  if(cnt >= sample_cnt)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d32a      	bcc.n	8001d62 <adcIrms1UpadateProc+0xce>
    avg = sum / cnt;
 8001d0c:	ee07 3a90 	vmov	s15, r3
 8001d10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d14:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001d18:	4b18      	ldr	r3, [pc, #96]	@ (8001d7c <adcIrms1UpadateProc+0xe8>)
 8001d1a:	edc3 6a00 	vstr	s13, [r3]
    irms = avg * ipeak_max;
 8001d1e:	4b18      	ldr	r3, [pc, #96]	@ (8001d80 <adcIrms1UpadateProc+0xec>)
 8001d20:	edd3 7a00 	vldr	s15, [r3]
 8001d24:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d28:	4b16      	ldr	r3, [pc, #88]	@ (8001d84 <adcIrms1UpadateProc+0xf0>)
 8001d2a:	edc3 7a00 	vstr	s15, [r3]
    irms = constrain(irms, 0, IRMS_MAX);
 8001d2e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d36:	d409      	bmi.n	8001d4c <adcIrms1UpadateProc+0xb8>
 8001d38:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001d3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d44:	dd04      	ble.n	8001d50 <adcIrms1UpadateProc+0xbc>
 8001d46:	eef0 7a47 	vmov.f32	s15, s14
 8001d4a:	e001      	b.n	8001d50 <adcIrms1UpadateProc+0xbc>
 8001d4c:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8001d88 <adcIrms1UpadateProc+0xf4>
 8001d50:	4b0c      	ldr	r3, [pc, #48]	@ (8001d84 <adcIrms1UpadateProc+0xf0>)
 8001d52:	edc3 7a00 	vstr	s15, [r3]
    sum = 0.0f;
 8001d56:	4b07      	ldr	r3, [pc, #28]	@ (8001d74 <adcIrms1UpadateProc+0xe0>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]
    cnt = 0;
 8001d5c:	4b06      	ldr	r3, [pc, #24]	@ (8001d78 <adcIrms1UpadateProc+0xe4>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	601a      	str	r2, [r3, #0]
}
 8001d62:	4770      	bx	lr
 8001d64:	20000000 	.word	0x20000000
 8001d68:	20000008 	.word	0x20000008
 8001d6c:	456d5000 	.word	0x456d5000
 8001d70:	2000038c 	.word	0x2000038c
 8001d74:	20000268 	.word	0x20000268
 8001d78:	20000264 	.word	0x20000264
 8001d7c:	20000260 	.word	0x20000260
 8001d80:	20000020 	.word	0x20000020
 8001d84:	20000374 	.word	0x20000374
 8001d88:	00000000 	.word	0x00000000

08001d8c <controlAdcUpdate>:
{
 8001d8c:	b508      	push	{r3, lr}
  adcVrms1UpadateProc();
 8001d8e:	f7ff fd91 	bl	80018b4 <adcVrms1UpadateProc>
  adcVrms2UpadateProc();
 8001d92:	f7ff fe0b 	bl	80019ac <adcVrms2UpadateProc>
  adcVrms3UpadateProc();
 8001d96:	f7ff fe85 	bl	8001aa4 <adcVrms3UpadateProc>
  adcVrms4UpadateProc();
 8001d9a:	f7ff feff 	bl	8001b9c <adcVrms4UpadateProc>
  adcIrms1UpadateProc();
 8001d9e:	f7ff ff79 	bl	8001c94 <adcIrms1UpadateProc>
}
 8001da2:	bd08      	pop	{r3, pc}

08001da4 <controlInterruptHandler>:
{
 8001da4:	b508      	push	{r3, lr}
  controlAdcUpdate();
 8001da6:	f7ff fff1 	bl	8001d8c <controlAdcUpdate>
  controlDacUpdate();
 8001daa:	f7ff fc4b 	bl	8001644 <controlDacUpdate>
  controlMotorUpdate();
 8001dae:	f7ff fceb 	bl	8001788 <controlMotorUpdate>
}
 8001db2:	bd08      	pop	{r3, pc}

08001db4 <HAL_TIM_PeriodElapsedCallback>:
{
 8001db4:	b508      	push	{r3, lr}
  if (htim->Instance == htim1.Instance) // 20Khz(50us)
 8001db6:	6803      	ldr	r3, [r0, #0]
 8001db8:	4a06      	ldr	r2, [pc, #24]	@ (8001dd4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001dba:	6812      	ldr	r2, [r2, #0]
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d000      	beq.n	8001dc2 <HAL_TIM_PeriodElapsedCallback+0xe>
}
 8001dc0:	bd08      	pop	{r3, pc}
    if(htim->Instance->CNT >= (htim->Instance->ARR)/2) // 10Khz(100us)
 8001dc2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001dc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dc6:	ebb2 0f53 	cmp.w	r2, r3, lsr #1
 8001dca:	d3f9      	bcc.n	8001dc0 <HAL_TIM_PeriodElapsedCallback+0xc>
      controlInterruptHandler();
 8001dcc:	f7ff ffea 	bl	8001da4 <controlInterruptHandler>
}
 8001dd0:	e7f6      	b.n	8001dc0 <HAL_TIM_PeriodElapsedCallback+0xc>
 8001dd2:	bf00      	nop
 8001dd4:	20005a4c 	.word	0x20005a4c

08001dd8 <bspInit>:


bool bspInit(void)
{
  return true;
}
 8001dd8:	2001      	movs	r0, #1
 8001dda:	4770      	bx	lr

08001ddc <delay>:

void delay(uint32_t ms)
{
 8001ddc:	b508      	push	{r3, lr}
  HAL_Delay(ms);
 8001dde:	f002 fe89 	bl	8004af4 <HAL_Delay>
}
 8001de2:	bd08      	pop	{r3, pc}

08001de4 <millis>:

uint32_t millis(void)
{
 8001de4:	b508      	push	{r3, lr}
  return HAL_GetTick();
 8001de6:	f002 fe7f 	bl	8004ae8 <HAL_GetTick>
}
 8001dea:	bd08      	pop	{r3, pc}

08001dec <qbufferCreate>:
{

}

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 8001dec:	4603      	mov	r3, r0
  bool ret = true;

  p_node->in    = 0;
 8001dee:	2000      	movs	r0, #0
 8001df0:	6018      	str	r0, [r3, #0]
  p_node->out   = 0;
 8001df2:	6058      	str	r0, [r3, #4]
  p_node->len   = length;
 8001df4:	609a      	str	r2, [r3, #8]
  p_node->size  = 1;
 8001df6:	2001      	movs	r0, #1
 8001df8:	60d8      	str	r0, [r3, #12]
  p_node->p_buf = p_buf;
 8001dfa:	6119      	str	r1, [r3, #16]

  return ret;
}
 8001dfc:	4770      	bx	lr

08001dfe <qbufferCreateBySize>:

bool qbufferCreateBySize(qbuffer_t *p_node, uint8_t *p_buf, uint32_t size, uint32_t length)
{
 8001dfe:	b410      	push	{r4}
  bool ret = true;

  p_node->in    = 0;
 8001e00:	2400      	movs	r4, #0
 8001e02:	6004      	str	r4, [r0, #0]
  p_node->out   = 0;
 8001e04:	6044      	str	r4, [r0, #4]
  p_node->len   = length;
 8001e06:	6083      	str	r3, [r0, #8]
  p_node->size  = size;
 8001e08:	60c2      	str	r2, [r0, #12]
  p_node->p_buf = p_buf;
 8001e0a:	6101      	str	r1, [r0, #16]

  return ret;
}
 8001e0c:	2001      	movs	r0, #1
 8001e0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <qbufferWrite>:

bool qbufferWrite(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 8001e14:	b5f0      	push	{r4, r5, r6, r7, lr}
  bool ret = true;
  uint32_t next_in;


  for (int i=0; i<length; i++)
 8001e16:	2700      	movs	r7, #0
 8001e18:	e00c      	b.n	8001e34 <qbufferWrite+0x20>
        uint8_t *p_buf;

        p_buf = &p_node->p_buf[p_node->in*p_node->size];
        for (int j=0; j<p_node->size; j++)
        {
          p_buf[j] = p_data[j];
 8001e1a:	eb0c 0503 	add.w	r5, ip, r3
 8001e1e:	f811 e003 	ldrb.w	lr, [r1, r3]
 8001e22:	f806 e005 	strb.w	lr, [r6, r5]
        for (int j=0; j<p_node->size; j++)
 8001e26:	3301      	adds	r3, #1
 8001e28:	68c5      	ldr	r5, [r0, #12]
 8001e2a:	429d      	cmp	r5, r3
 8001e2c:	d8f5      	bhi.n	8001e1a <qbufferWrite+0x6>
        }
        p_data += p_node->size;
 8001e2e:	4429      	add	r1, r5
      }
      p_node->in = next_in;
 8001e30:	6004      	str	r4, [r0, #0]
  for (int i=0; i<length; i++)
 8001e32:	3701      	adds	r7, #1
 8001e34:	4297      	cmp	r7, r2
 8001e36:	d213      	bcs.n	8001e60 <qbufferWrite+0x4c>
    next_in = (p_node->in + 1) % p_node->len;
 8001e38:	6805      	ldr	r5, [r0, #0]
 8001e3a:	1c6b      	adds	r3, r5, #1
 8001e3c:	6884      	ldr	r4, [r0, #8]
 8001e3e:	fbb3 f6f4 	udiv	r6, r3, r4
 8001e42:	fb04 3416 	mls	r4, r4, r6, r3
    if (next_in != p_node->out)
 8001e46:	6843      	ldr	r3, [r0, #4]
 8001e48:	42a3      	cmp	r3, r4
 8001e4a:	d00b      	beq.n	8001e64 <qbufferWrite+0x50>
      if (p_node->p_buf != NULL && p_data != NULL)
 8001e4c:	6906      	ldr	r6, [r0, #16]
 8001e4e:	2e00      	cmp	r6, #0
 8001e50:	d0ee      	beq.n	8001e30 <qbufferWrite+0x1c>
 8001e52:	2900      	cmp	r1, #0
 8001e54:	d0ec      	beq.n	8001e30 <qbufferWrite+0x1c>
        p_buf = &p_node->p_buf[p_node->in*p_node->size];
 8001e56:	68c3      	ldr	r3, [r0, #12]
 8001e58:	fb03 fc05 	mul.w	ip, r3, r5
        for (int j=0; j<p_node->size; j++)
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	e7e3      	b.n	8001e28 <qbufferWrite+0x14>
  bool ret = true;
 8001e60:	2001      	movs	r0, #1
      break;
    }
  }

  return ret;
}
 8001e62:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ret = false;
 8001e64:	2000      	movs	r0, #0
 8001e66:	e7fc      	b.n	8001e62 <qbufferWrite+0x4e>

08001e68 <qbufferRead>:

bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 8001e68:	b570      	push	{r4, r5, r6, lr}
 8001e6a:	460c      	mov	r4, r1
 8001e6c:	4616      	mov	r6, r2
  bool ret = true;


  for (int i=0; i<length; i++)
 8001e6e:	2500      	movs	r5, #0
 8001e70:	e016      	b.n	8001ea0 <qbufferRead+0x38>
      uint8_t *p_buf;

      p_buf = &p_node->p_buf[p_node->out*p_node->size];
      for (int j=0; j<p_node->size; j++)
      {
        p_data[j] = p_buf[j];
 8001e72:	eb01 0c0e 	add.w	ip, r1, lr
 8001e76:	f81c c003 	ldrb.w	ip, [ip, r3]
 8001e7a:	f804 c003 	strb.w	ip, [r4, r3]
      for (int j=0; j<p_node->size; j++)
 8001e7e:	3301      	adds	r3, #1
 8001e80:	68c2      	ldr	r2, [r0, #12]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d8f5      	bhi.n	8001e72 <qbufferRead+0xa>
      }

      p_data += p_node->size;
 8001e86:	4414      	add	r4, r2
    }

    if (p_node->out != p_node->in)
 8001e88:	6843      	ldr	r3, [r0, #4]
 8001e8a:	6802      	ldr	r2, [r0, #0]
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d016      	beq.n	8001ebe <qbufferRead+0x56>
    {
      p_node->out = (p_node->out + 1) % p_node->len;
 8001e90:	3301      	adds	r3, #1
 8001e92:	6882      	ldr	r2, [r0, #8]
 8001e94:	fbb3 f1f2 	udiv	r1, r3, r2
 8001e98:	fb02 3311 	mls	r3, r2, r1, r3
 8001e9c:	6043      	str	r3, [r0, #4]
  for (int i=0; i<length; i++)
 8001e9e:	3501      	adds	r5, #1
 8001ea0:	42b5      	cmp	r5, r6
 8001ea2:	d20a      	bcs.n	8001eba <qbufferRead+0x52>
    if (p_node->p_buf != NULL && p_data != NULL)
 8001ea4:	6901      	ldr	r1, [r0, #16]
 8001ea6:	2900      	cmp	r1, #0
 8001ea8:	d0ee      	beq.n	8001e88 <qbufferRead+0x20>
 8001eaa:	2c00      	cmp	r4, #0
 8001eac:	d0ec      	beq.n	8001e88 <qbufferRead+0x20>
      p_buf = &p_node->p_buf[p_node->out*p_node->size];
 8001eae:	6843      	ldr	r3, [r0, #4]
 8001eb0:	68c2      	ldr	r2, [r0, #12]
 8001eb2:	fb02 fe03 	mul.w	lr, r2, r3
      for (int j=0; j<p_node->size; j++)
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	e7e2      	b.n	8001e80 <qbufferRead+0x18>
  bool ret = true;
 8001eba:	2001      	movs	r0, #1
      break;
    }
  }

  return ret;
}
 8001ebc:	bd70      	pop	{r4, r5, r6, pc}
      ret = false;
 8001ebe:	2000      	movs	r0, #0
 8001ec0:	e7fc      	b.n	8001ebc <qbufferRead+0x54>

08001ec2 <qbufferAvailable>:
uint32_t qbufferAvailable(qbuffer_t *p_node)
{
  uint32_t ret;


  ret = (p_node->len + p_node->in - p_node->out) % p_node->len;
 8001ec2:	6882      	ldr	r2, [r0, #8]
 8001ec4:	6803      	ldr	r3, [r0, #0]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	6841      	ldr	r1, [r0, #4]
 8001eca:	1a5b      	subs	r3, r3, r1
 8001ecc:	fbb3 f0f2 	udiv	r0, r3, r2

  return ret;
}
 8001ed0:	fb02 3010 	mls	r0, r2, r0, r3
 8001ed4:	4770      	bx	lr
	...

08001ed8 <cliAdc>:

}

#ifdef _USE_HW_ADC
void cliAdc(cli_args_t *args)
{
 8001ed8:	b508      	push	{r3, lr}
  bool ret = false;

  if (args->argc == 1 && args->isStr(0, "info") == true)
 8001eda:	8803      	ldrh	r3, [r0, #0]
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d10e      	bne.n	8001efe <cliAdc+0x26>
 8001ee0:	6943      	ldr	r3, [r0, #20]
 8001ee2:	4909      	ldr	r1, [pc, #36]	@ (8001f08 <cliAdc+0x30>)
 8001ee4:	2000      	movs	r0, #0
 8001ee6:	4798      	blx	r3
 8001ee8:	b148      	cbz	r0, 8001efe <cliAdc+0x26>
  {
    cliPrintf("adc init : %s\n", is_init ? "OK" : "NG");
 8001eea:	4b08      	ldr	r3, [pc, #32]	@ (8001f0c <cliAdc+0x34>)
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	b123      	cbz	r3, 8001efa <cliAdc+0x22>
 8001ef0:	4907      	ldr	r1, [pc, #28]	@ (8001f10 <cliAdc+0x38>)
 8001ef2:	4808      	ldr	r0, [pc, #32]	@ (8001f14 <cliAdc+0x3c>)
 8001ef4:	f001 fc48 	bl	8003788 <cliPrintf>
    ret = true;
  }

  if (ret != true)
 8001ef8:	e004      	b.n	8001f04 <cliAdc+0x2c>
    cliPrintf("adc init : %s\n", is_init ? "OK" : "NG");
 8001efa:	4907      	ldr	r1, [pc, #28]	@ (8001f18 <cliAdc+0x40>)
 8001efc:	e7f9      	b.n	8001ef2 <cliAdc+0x1a>
  {
    cliPrintf("adc info\n");
 8001efe:	4807      	ldr	r0, [pc, #28]	@ (8001f1c <cliAdc+0x44>)
 8001f00:	f001 fc42 	bl	8003788 <cliPrintf>
  }
}
 8001f04:	bd08      	pop	{r3, pc}
 8001f06:	bf00      	nop
 8001f08:	0800e9e0 	.word	0x0800e9e0
 8001f0c:	200003a1 	.word	0x200003a1
 8001f10:	0800e9d8 	.word	0x0800e9d8
 8001f14:	0800ec18 	.word	0x0800ec18
 8001f18:	0800e9dc 	.word	0x0800e9dc
 8001f1c:	0800ec28 	.word	0x0800ec28

08001f20 <adcInit>:
{
 8001f20:	b538      	push	{r3, r4, r5, lr}
  is_init = true;
 8001f22:	2401      	movs	r4, #1
 8001f24:	4b09      	ldr	r3, [pc, #36]	@ (8001f4c <adcInit+0x2c>)
 8001f26:	701c      	strb	r4, [r3, #0]
  HAL_TIM_Base_Start(&htim8); //ADC TIM8
 8001f28:	4809      	ldr	r0, [pc, #36]	@ (8001f50 <adcInit+0x30>)
 8001f2a:	f005 ffeb 	bl	8007f04 <HAL_TIM_Base_Start>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001f2e:	4d09      	ldr	r5, [pc, #36]	@ (8001f54 <adcInit+0x34>)
 8001f30:	217f      	movs	r1, #127	@ 0x7f
 8001f32:	4628      	mov	r0, r5
 8001f34:	f003 fcec 	bl	8005910 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_IT(&hadc1);
 8001f38:	4628      	mov	r0, r5
 8001f3a:	f003 fbbb 	bl	80056b4 <HAL_ADC_Start_IT>
 cliAdd("adc", cliAdc);
 8001f3e:	4906      	ldr	r1, [pc, #24]	@ (8001f58 <adcInit+0x38>)
 8001f40:	4806      	ldr	r0, [pc, #24]	@ (8001f5c <adcInit+0x3c>)
 8001f42:	f001 fe43 	bl	8003bcc <cliAdd>
}
 8001f46:	4620      	mov	r0, r4
 8001f48:	bd38      	pop	{r3, r4, r5, pc}
 8001f4a:	bf00      	nop
 8001f4c:	200003a1 	.word	0x200003a1
 8001f50:	20005968 	.word	0x20005968
 8001f54:	20005084 	.word	0x20005084
 8001f58:	08001ed9 	.word	0x08001ed9
 8001f5c:	0800ec34 	.word	0x0800ec34

08001f60 <cliDac>:
  
}

#ifdef _USE_HW_DAC
void cliDac(cli_args_t *args)
{
 8001f60:	b508      	push	{r3, lr}
  bool ret = false;

  if (args->argc == 1 && args->isStr(0, "info") == true)
 8001f62:	8803      	ldrh	r3, [r0, #0]
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d10e      	bne.n	8001f86 <cliDac+0x26>
 8001f68:	6943      	ldr	r3, [r0, #20]
 8001f6a:	4909      	ldr	r1, [pc, #36]	@ (8001f90 <cliDac+0x30>)
 8001f6c:	2000      	movs	r0, #0
 8001f6e:	4798      	blx	r3
 8001f70:	b148      	cbz	r0, 8001f86 <cliDac+0x26>
  {
    cliPrintf("dac init : %s\n", is_init ? "OK" : "NG");
 8001f72:	4b08      	ldr	r3, [pc, #32]	@ (8001f94 <cliDac+0x34>)
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	b123      	cbz	r3, 8001f82 <cliDac+0x22>
 8001f78:	4907      	ldr	r1, [pc, #28]	@ (8001f98 <cliDac+0x38>)
 8001f7a:	4808      	ldr	r0, [pc, #32]	@ (8001f9c <cliDac+0x3c>)
 8001f7c:	f001 fc04 	bl	8003788 <cliPrintf>
    ret = true;
  }

  if (ret != true)
 8001f80:	e004      	b.n	8001f8c <cliDac+0x2c>
    cliPrintf("dac init : %s\n", is_init ? "OK" : "NG");
 8001f82:	4907      	ldr	r1, [pc, #28]	@ (8001fa0 <cliDac+0x40>)
 8001f84:	e7f9      	b.n	8001f7a <cliDac+0x1a>
  {
    cliPrintf("dac info\n");
 8001f86:	4807      	ldr	r0, [pc, #28]	@ (8001fa4 <cliDac+0x44>)
 8001f88:	f001 fbfe 	bl	8003788 <cliPrintf>
  }
}
 8001f8c:	bd08      	pop	{r3, pc}
 8001f8e:	bf00      	nop
 8001f90:	0800e9e0 	.word	0x0800e9e0
 8001f94:	200003a2 	.word	0x200003a2
 8001f98:	0800e9d8 	.word	0x0800e9d8
 8001f9c:	0800ec38 	.word	0x0800ec38
 8001fa0:	0800e9dc 	.word	0x0800e9dc
 8001fa4:	0800ec48 	.word	0x0800ec48

08001fa8 <dacInit>:
{
 8001fa8:	b510      	push	{r4, lr}
  is_init = true;
 8001faa:	2401      	movs	r4, #1
 8001fac:	4b07      	ldr	r3, [pc, #28]	@ (8001fcc <dacInit+0x24>)
 8001fae:	701c      	strb	r4, [r3, #0]
  HAL_DAC_Start(&hdac1, DAC1_CHANNEL_1);
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	4807      	ldr	r0, [pc, #28]	@ (8001fd0 <dacInit+0x28>)
 8001fb4:	f003 fe8e 	bl	8005cd4 <HAL_DAC_Start>
  HAL_DAC_Start(&hdac2, DAC1_CHANNEL_1);
 8001fb8:	2100      	movs	r1, #0
 8001fba:	4806      	ldr	r0, [pc, #24]	@ (8001fd4 <dacInit+0x2c>)
 8001fbc:	f003 fe8a 	bl	8005cd4 <HAL_DAC_Start>
  cliAdd("dac", cliDac);
 8001fc0:	4905      	ldr	r1, [pc, #20]	@ (8001fd8 <dacInit+0x30>)
 8001fc2:	4806      	ldr	r0, [pc, #24]	@ (8001fdc <dacInit+0x34>)
 8001fc4:	f001 fe02 	bl	8003bcc <cliAdd>
}
 8001fc8:	4620      	mov	r0, r4
 8001fca:	bd10      	pop	{r4, pc}
 8001fcc:	200003a2 	.word	0x200003a2
 8001fd0:	200057f4 	.word	0x200057f4
 8001fd4:	200057e0 	.word	0x200057e0
 8001fd8:	08001f61 	.word	0x08001f61
 8001fdc:	0800ec54 	.word	0x0800ec54

08001fe0 <i2cInit>:




bool i2cInit(void)
{
 8001fe0:	b508      	push	{r3, lr}

#ifdef _USE_HW_RTOS
 mutex_lock = xSemaphoreCreateMutex();
#endif

 for (i=0; i<I2C_MAX_CH; i++)
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	b133      	cbz	r3, 8001ff4 <i2cInit+0x14>
   i2c_timeout[i] = 10;
   i2c_errcount[i] = 0;
   is_begin[i] = false;
 }

 logPrintf("[OK] i2cInit()\n");
 8001fe6:	4809      	ldr	r0, [pc, #36]	@ (800200c <i2cInit+0x2c>)
 8001fe8:	f002 f898 	bl	800411c <logPrintf>

#if CLI_USE(HW_I2C)
 cliAdd("i2c", cliI2C);
#endif

 is_init = true;
 8001fec:	2001      	movs	r0, #1
 8001fee:	4b08      	ldr	r3, [pc, #32]	@ (8002010 <i2cInit+0x30>)
 8001ff0:	7018      	strb	r0, [r3, #0]
 return true;
}
 8001ff2:	bd08      	pop	{r3, pc}
   i2c_timeout[i] = 10;
 8001ff4:	4a07      	ldr	r2, [pc, #28]	@ (8002014 <i2cInit+0x34>)
 8001ff6:	210a      	movs	r1, #10
 8001ff8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   i2c_errcount[i] = 0;
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	4906      	ldr	r1, [pc, #24]	@ (8002018 <i2cInit+0x38>)
 8002000:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   is_begin[i] = false;
 8002004:	4905      	ldr	r1, [pc, #20]	@ (800201c <i2cInit+0x3c>)
 8002006:	54ca      	strb	r2, [r1, r3]
 for (i=0; i<I2C_MAX_CH; i++)
 8002008:	3301      	adds	r3, #1
 800200a:	e7eb      	b.n	8001fe4 <i2cInit+0x4>
 800200c:	0800ec58 	.word	0x0800ec58
 8002010:	200003a5 	.word	0x200003a5
 8002014:	200003ac 	.word	0x200003ac
 8002018:	200003a8 	.word	0x200003a8
 800201c:	200003a4 	.word	0x200003a4

08002020 <i2cBegin>:
}

bool i2cBegin(uint8_t ch, uint32_t freq_khz)
{
 return true;
}
 8002020:	2001      	movs	r0, #1
 8002022:	4770      	bx	lr

08002024 <i2cIsDeviceReady>:
 HAL_GPIO_WritePin(p_pin->sda_port, p_pin->sda_pin, _DEF_HIGH);
 unLock();
}

bool i2cIsDeviceReady(uint8_t ch, uint8_t dev_addr)
{
 8002024:	b510      	push	{r4, lr}
 bool ret = false;

 lock();
 if (HAL_I2C_IsDeviceReady(i2c_tbl[ch].p_i2c, dev_addr << 1, 10, 10) == HAL_OK)
 8002026:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800202a:	230a      	movs	r3, #10
 800202c:	461a      	mov	r2, r3
 800202e:	0049      	lsls	r1, r1, #1
 8002030:	4c05      	ldr	r4, [pc, #20]	@ (8002048 <i2cIsDeviceReady+0x24>)
 8002032:	f854 0030 	ldr.w	r0, [r4, r0, lsl #3]
 8002036:	f004 fe84 	bl	8006d42 <HAL_I2C_IsDeviceReady>
 800203a:	b910      	cbnz	r0, 8002042 <i2cIsDeviceReady+0x1e>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800203c:	b662      	cpsie	i
 {
   __enable_irq();
   ret = true;
 800203e:	2001      	movs	r0, #1
 }
 unLock();

 return ret;
}
 8002040:	bd10      	pop	{r4, pc}
 bool ret = false;
 8002042:	2000      	movs	r0, #0
 8002044:	e7fc      	b.n	8002040 <i2cIsDeviceReady+0x1c>
 8002046:	bf00      	nop
 8002048:	0800ec68 	.word	0x0800ec68

0800204c <i2cWriteBytes>:
{
 #if 1
 bool ret;
 HAL_StatusTypeDef i2c_ret;

 if (ch >= I2C_MAX_CH)
 800204c:	b108      	cbz	r0, 8002052 <i2cWriteBytes+0x6>
 {
   return false;
 800204e:	2000      	movs	r0, #0

 return ret;
 #else
 return false;
 #endif
}
 8002050:	4770      	bx	lr
{
 8002052:	b500      	push	{lr}
 8002054:	b085      	sub	sp, #20
 i2c_ret = HAL_I2C_Mem_Write(i2c_tbl[ch].p_i2c, (uint16_t)(dev_addr << 1), reg_addr, I2C_MEMADD_SIZE_8BIT, p_data, length, timeout);
 8002056:	0049      	lsls	r1, r1, #1
 8002058:	b289      	uxth	r1, r1
 800205a:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
 800205e:	9807      	ldr	r0, [sp, #28]
 8002060:	9002      	str	r0, [sp, #8]
 8002062:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 8002066:	9001      	str	r0, [sp, #4]
 8002068:	9300      	str	r3, [sp, #0]
 800206a:	2301      	movs	r3, #1
 800206c:	4805      	ldr	r0, [pc, #20]	@ (8002084 <i2cWriteBytes+0x38>)
 800206e:	f850 003c 	ldr.w	r0, [r0, ip, lsl #3]
 8002072:	f004 fd92 	bl	8006b9a <HAL_I2C_Mem_Write>
 if(i2c_ret == HAL_OK)
 8002076:	b918      	cbnz	r0, 8002080 <i2cWriteBytes+0x34>
   ret = true;
 8002078:	2001      	movs	r0, #1
}
 800207a:	b005      	add	sp, #20
 800207c:	f85d fb04 	ldr.w	pc, [sp], #4
   ret = false;
 8002080:	2000      	movs	r0, #0
 8002082:	e7fa      	b.n	800207a <i2cWriteBytes+0x2e>
 8002084:	0800ec68 	.word	0x0800ec68

08002088 <i2cWriteByte>:
{
 8002088:	b500      	push	{lr}
 800208a:	b085      	sub	sp, #20
 800208c:	f88d 300f 	strb.w	r3, [sp, #15]
 return i2cWriteBytes(ch, dev_addr, reg_addr, &data, 1, timeout);
 8002090:	9b06      	ldr	r3, [sp, #24]
 8002092:	9301      	str	r3, [sp, #4]
 8002094:	2301      	movs	r3, #1
 8002096:	9300      	str	r3, [sp, #0]
 8002098:	f10d 030f 	add.w	r3, sp, #15
 800209c:	f7ff ffd6 	bl	800204c <i2cWriteBytes>
}
 80020a0:	b005      	add	sp, #20
 80020a2:	f85d fb04 	ldr.w	pc, [sp], #4

080020a6 <I2C1_EV_IRQHandler>:


void I2C1_EV_IRQHandler(void)
{
 return;
}
 80020a6:	4770      	bx	lr

080020a8 <TransferDoneISR>:
#ifdef _USE_HW_CLI
static void cliLcd(cli_args_t *args);
#endif

void TransferDoneISR(void)
{
 80020a8:	b538      	push	{r3, r4, r5, lr}
  fps_time = millis() - fps_pre_time;
 80020aa:	f7ff fe9b 	bl	8001de4 <millis>
 80020ae:	4d0e      	ldr	r5, [pc, #56]	@ (80020e8 <TransferDoneISR+0x40>)
 80020b0:	682b      	ldr	r3, [r5, #0]
 80020b2:	1ac0      	subs	r0, r0, r3
 80020b4:	4c0d      	ldr	r4, [pc, #52]	@ (80020ec <TransferDoneISR+0x44>)
 80020b6:	6020      	str	r0, [r4, #0]
  fps_pre_time = millis();
 80020b8:	f7ff fe94 	bl	8001de4 <millis>
 80020bc:	6028      	str	r0, [r5, #0]
  draw_frame_time = millis() - draw_pre_time;
 80020be:	f7ff fe91 	bl	8001de4 <millis>
 80020c2:	4b0b      	ldr	r3, [pc, #44]	@ (80020f0 <TransferDoneISR+0x48>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	1ac0      	subs	r0, r0, r3
 80020c8:	4b0a      	ldr	r3, [pc, #40]	@ (80020f4 <TransferDoneISR+0x4c>)
 80020ca:	6018      	str	r0, [r3, #0]

  if (fps_time > 0)
 80020cc:	6823      	ldr	r3, [r4, #0]
 80020ce:	b133      	cbz	r3, 80020de <TransferDoneISR+0x36>
  {
    fps_count = 1000 / fps_time;
 80020d0:	6822      	ldr	r2, [r4, #0]
 80020d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80020da:	4a07      	ldr	r2, [pc, #28]	@ (80020f8 <TransferDoneISR+0x50>)
 80020dc:	6013      	str	r3, [r2, #0]
  }

  lcd_request_draw = false;
 80020de:	4b07      	ldr	r3, [pc, #28]	@ (80020fc <TransferDoneISR+0x54>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	701a      	strb	r2, [r3, #0]
}
 80020e4:	bd38      	pop	{r3, r4, r5, pc}
 80020e6:	bf00      	nop
 80020e8:	200043d4 	.word	0x200043d4
 80020ec:	200043d0 	.word	0x200043d0
 80020f0:	200043c8 	.word	0x200043c8
 80020f4:	200043c4 	.word	0x200043c4
 80020f8:	200043cc 	.word	0x200043cc
 80020fc:	200043d8 	.word	0x200043d8

08002100 <lcdDrawPixel>:
  return p_draw_frame_buf[y_pos * LCD_WIDTH + x_pos];
}

LCD_OPT_DEF void lcdDrawPixel(int16_t x_pos, int16_t y_pos, uint32_t rgb_code)
{
  if (x_pos < 0 || x_pos >= LCD_WIDTH) return;
 8002100:	b283      	uxth	r3, r0
 8002102:	2b7f      	cmp	r3, #127	@ 0x7f
 8002104:	d808      	bhi.n	8002118 <lcdDrawPixel+0x18>
  if (y_pos < 0 || y_pos >= LCD_HEIGHT) return;
 8002106:	b28b      	uxth	r3, r1
 8002108:	2b3f      	cmp	r3, #63	@ 0x3f
 800210a:	d805      	bhi.n	8002118 <lcdDrawPixel+0x18>

  p_draw_frame_buf[y_pos * LCD_WIDTH + x_pos] = rgb_code;
 800210c:	4b03      	ldr	r3, [pc, #12]	@ (800211c <lcdDrawPixel+0x1c>)
 800210e:	eb00 10c1 	add.w	r0, r0, r1, lsl #7
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
}
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	200043c0 	.word	0x200043c0

08002120 <disEngFont>:
     }
   }
 }

void disEngFont(int x, int y, char ch, lcd_font_t *font, uint16_t textcolor)
{
 8002120:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002124:	4681      	mov	r9, r0
 8002126:	4688      	mov	r8, r1
 8002128:	4693      	mov	fp, r2
 800212a:	461d      	mov	r5, r3
 800212c:	f8bd a028 	ldrh.w	sl, [sp, #40]	@ 0x28
  uint32_t i, b, j;


  // We gaan door het font
  for (i = 0; i < font->height; i++)
 8002130:	2700      	movs	r7, #0
 8002132:	e013      	b.n	800215c <disEngFont+0x3c>
  {
    b = font->data[(ch - 32) * font->height + i];
    for (j = 0; j < font->width; j++)
 8002134:	3401      	adds	r4, #1
 8002136:	782b      	ldrb	r3, [r5, #0]
 8002138:	42a3      	cmp	r3, r4
 800213a:	d90e      	bls.n	800215a <disEngFont+0x3a>
    {
      if ((b << j) & 0x8000)
 800213c:	fa06 f304 	lsl.w	r3, r6, r4
 8002140:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8002144:	d0f6      	beq.n	8002134 <disEngFont+0x14>
      {
        lcdDrawPixel(x + j, (y + i), textcolor);
 8002146:	eb09 0004 	add.w	r0, r9, r4
 800214a:	eb08 0107 	add.w	r1, r8, r7
 800214e:	4652      	mov	r2, sl
 8002150:	b209      	sxth	r1, r1
 8002152:	b200      	sxth	r0, r0
 8002154:	f7ff ffd4 	bl	8002100 <lcdDrawPixel>
 8002158:	e7ec      	b.n	8002134 <disEngFont+0x14>
  for (i = 0; i < font->height; i++)
 800215a:	3701      	adds	r7, #1
 800215c:	786a      	ldrb	r2, [r5, #1]
 800215e:	42ba      	cmp	r2, r7
 8002160:	d908      	bls.n	8002174 <disEngFont+0x54>
    b = font->data[(ch - 32) * font->height + i];
 8002162:	6869      	ldr	r1, [r5, #4]
 8002164:	f1ab 0320 	sub.w	r3, fp, #32
 8002168:	fb02 7303 	mla	r3, r2, r3, r7
 800216c:	f831 6013 	ldrh.w	r6, [r1, r3, lsl #1]
    for (j = 0; j < font->width; j++)
 8002170:	2400      	movs	r4, #0
 8002172:	e7e0      	b.n	8002136 <disEngFont+0x16>
      }
    }
  }
}
 8002174:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002178 <disHanFont>:
 {
 8002178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800217c:	b083      	sub	sp, #12
 800217e:	4607      	mov	r7, r0
 8002180:	4688      	mov	r8, r1
 8002182:	9201      	str	r2, [sp, #4]
 8002184:	4699      	mov	r9, r3
   uint16_t  FontSize = FontPtr->Size_Char;
 8002186:	f8b2 c002 	ldrh.w	ip, [r2, #2]
   if (FontSize > 2)
 800218a:	f1bc 0f02 	cmp.w	ip, #2
 800218e:	d901      	bls.n	8002194 <disHanFont+0x1c>
     FontSize = 2;
 8002190:	f04f 0c02 	mov.w	ip, #2
   for ( i = 0 ; i < 16 ; i++ )        // 16 Lines per Font/Char
 8002194:	f04f 0a00 	mov.w	sl, #0
 8002198:	46d3      	mov	fp, sl
 800219a:	e02a      	b.n	80021f2 <disHanFont+0x7a>
         index_x++;
 800219c:	3501      	adds	r5, #1
 800219e:	b2ad      	uxth	r5, r5
       for( Loop=0; Loop<8; Loop++ )
 80021a0:	3401      	adds	r4, #1
 80021a2:	b2a4      	uxth	r4, r4
 80021a4:	2c07      	cmp	r4, #7
 80021a6:	d80d      	bhi.n	80021c4 <disHanFont+0x4c>
         if( (font_data<<Loop) & (0x80))
 80021a8:	fa06 f304 	lsl.w	r3, r6, r4
 80021ac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80021b0:	d0f4      	beq.n	800219c <disHanFont+0x24>
           lcdDrawPixel(x + index_x, y + i, textcolor);
 80021b2:	19e8      	adds	r0, r5, r7
 80021b4:	eb0b 0108 	add.w	r1, fp, r8
 80021b8:	464a      	mov	r2, r9
 80021ba:	b209      	sxth	r1, r1
 80021bc:	b200      	sxth	r0, r0
 80021be:	f7ff ff9f 	bl	8002100 <lcdDrawPixel>
 80021c2:	e7eb      	b.n	800219c <disHanFont+0x24>
     for ( j = 0 ; j < FontSize ; j++ )      // 16 x 16 (2 Bytes)
 80021c4:	46d4      	mov	ip, sl
 80021c6:	f8dd a000 	ldr.w	sl, [sp]
 80021ca:	f10a 0201 	add.w	r2, sl, #1
 80021ce:	fa1f fa82 	uxth.w	sl, r2
 80021d2:	45e2      	cmp	sl, ip
 80021d4:	d209      	bcs.n	80021ea <disHanFont+0x72>
       font_data = FontPtr->FontBuffer[i*FontSize +j];
 80021d6:	fb0c a30b 	mla	r3, ip, fp, sl
 80021da:	9a01      	ldr	r2, [sp, #4]
 80021dc:	4413      	add	r3, r2
 80021de:	799e      	ldrb	r6, [r3, #6]
       for( Loop=0; Loop<8; Loop++ )
 80021e0:	2400      	movs	r4, #0
 80021e2:	f8cd a000 	str.w	sl, [sp]
 80021e6:	46e2      	mov	sl, ip
 80021e8:	e7dc      	b.n	80021a4 <disHanFont+0x2c>
   for ( i = 0 ; i < 16 ; i++ )        // 16 Lines per Font/Char
 80021ea:	f10b 0201 	add.w	r2, fp, #1
 80021ee:	fa1f fb82 	uxth.w	fp, r2
 80021f2:	f1bb 0f0f 	cmp.w	fp, #15
 80021f6:	d802      	bhi.n	80021fe <disHanFont+0x86>
     index_x = 0;
 80021f8:	2500      	movs	r5, #0
     for ( j = 0 ; j < FontSize ; j++ )      // 16 x 16 (2 Bytes)
 80021fa:	46aa      	mov	sl, r5
 80021fc:	e7e9      	b.n	80021d2 <disHanFont+0x5a>
 }
 80021fe:	b003      	add	sp, #12
 8002200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002204 <lcdGetFps>:
  return fps_count;
 8002204:	4b01      	ldr	r3, [pc, #4]	@ (800220c <lcdGetFps+0x8>)
 8002206:	6818      	ldr	r0, [r3, #0]
}
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	200043cc 	.word	0x200043cc

08002210 <lcdDrawAvailable>:
{
 8002210:	b510      	push	{r4, lr}
  if (draw_fps > 0)
 8002212:	4b11      	ldr	r3, [pc, #68]	@ (8002258 <lcdDrawAvailable+0x48>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2b00      	cmp	r3, #0
 8002218:	dd17      	ble.n	800224a <lcdDrawAvailable+0x3a>
    if (!lcd_request_draw && millis()-draw_pre_time >= (1000/draw_fps))
 800221a:	4b10      	ldr	r3, [pc, #64]	@ (800225c <lcdDrawAvailable+0x4c>)
 800221c:	781c      	ldrb	r4, [r3, #0]
 800221e:	b10c      	cbz	r4, 8002224 <lcdDrawAvailable+0x14>
  bool ret = false;
 8002220:	2400      	movs	r4, #0
 8002222:	e016      	b.n	8002252 <lcdDrawAvailable+0x42>
    if (!lcd_request_draw && millis()-draw_pre_time >= (1000/draw_fps))
 8002224:	f7ff fdde 	bl	8001de4 <millis>
 8002228:	4b0d      	ldr	r3, [pc, #52]	@ (8002260 <lcdDrawAvailable+0x50>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	1ac0      	subs	r0, r0, r3
 800222e:	4b0a      	ldr	r3, [pc, #40]	@ (8002258 <lcdDrawAvailable+0x48>)
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002236:	fb93 f3f2 	sdiv	r3, r3, r2
 800223a:	4298      	cmp	r0, r3
 800223c:	d309      	bcc.n	8002252 <lcdDrawAvailable+0x42>
      draw_pre_time = millis();
 800223e:	f7ff fdd1 	bl	8001de4 <millis>
 8002242:	4b07      	ldr	r3, [pc, #28]	@ (8002260 <lcdDrawAvailable+0x50>)
 8002244:	6018      	str	r0, [r3, #0]
      ret = true;
 8002246:	2401      	movs	r4, #1
 8002248:	e003      	b.n	8002252 <lcdDrawAvailable+0x42>
    ret = !lcd_request_draw;
 800224a:	4b04      	ldr	r3, [pc, #16]	@ (800225c <lcdDrawAvailable+0x4c>)
 800224c:	781c      	ldrb	r4, [r3, #0]
 800224e:	f084 0401 	eor.w	r4, r4, #1
}
 8002252:	4620      	mov	r0, r4
 8002254:	bd10      	pop	{r4, pc}
 8002256:	bf00      	nop
 8002258:	20000024 	.word	0x20000024
 800225c:	200043d8 	.word	0x200043d8
 8002260:	200043c8 	.word	0x200043c8

08002264 <lcdRequestDraw>:
{
 8002264:	b570      	push	{r4, r5, r6, lr}
  if (is_init != true)
 8002266:	4b0d      	ldr	r3, [pc, #52]	@ (800229c <lcdRequestDraw+0x38>)
 8002268:	781c      	ldrb	r4, [r3, #0]
 800226a:	b194      	cbz	r4, 8002292 <lcdRequestDraw+0x2e>
  if (lcd_request_draw == true)
 800226c:	4b0c      	ldr	r3, [pc, #48]	@ (80022a0 <lcdRequestDraw+0x3c>)
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	b98b      	cbnz	r3, 8002296 <lcdRequestDraw+0x32>
  lcd.setWindow(0, 0, LCD_WIDTH-1, LCD_HEIGHT-1);
 8002272:	4d0c      	ldr	r5, [pc, #48]	@ (80022a4 <lcdRequestDraw+0x40>)
 8002274:	233f      	movs	r3, #63	@ 0x3f
 8002276:	227f      	movs	r2, #127	@ 0x7f
 8002278:	2100      	movs	r1, #0
 800227a:	4608      	mov	r0, r1
 800227c:	68ae      	ldr	r6, [r5, #8]
 800227e:	47b0      	blx	r6
  lcd_request_draw = true;
 8002280:	4b07      	ldr	r3, [pc, #28]	@ (80022a0 <lcdRequestDraw+0x3c>)
 8002282:	2201      	movs	r2, #1
 8002284:	701a      	strb	r2, [r3, #0]
  lcd.sendBuffer((uint8_t *)frame_buffer[frame_index], LCD_WIDTH * LCD_HEIGHT, 0);
 8002286:	69eb      	ldr	r3, [r5, #28]
 8002288:	2200      	movs	r2, #0
 800228a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800228e:	4806      	ldr	r0, [pc, #24]	@ (80022a8 <lcdRequestDraw+0x44>)
 8002290:	4798      	blx	r3
}
 8002292:	4620      	mov	r0, r4
 8002294:	bd70      	pop	{r4, r5, r6, pc}
    return false;
 8002296:	2400      	movs	r4, #0
 8002298:	e7fb      	b.n	8002292 <lcdRequestDraw+0x2e>
 800229a:	bf00      	nop
 800229c:	200043da 	.word	0x200043da
 80022a0:	200043d8 	.word	0x200043d8
 80022a4:	200043dc 	.word	0x200043dc
 80022a8:	200003c0 	.word	0x200003c0

080022ac <lcdUpdateDraw>:
  if (is_init != true)
 80022ac:	4b0a      	ldr	r3, [pc, #40]	@ (80022d8 <lcdUpdateDraw+0x2c>)
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	b903      	cbnz	r3, 80022b4 <lcdUpdateDraw+0x8>
 80022b2:	4770      	bx	lr
{
 80022b4:	b510      	push	{r4, lr}
  lcdRequestDraw();
 80022b6:	f7ff ffd5 	bl	8002264 <lcdRequestDraw>
  pre_time = millis();
 80022ba:	f7ff fd93 	bl	8001de4 <millis>
 80022be:	4604      	mov	r4, r0
  while(lcdDrawAvailable() != true)
 80022c0:	f7ff ffa6 	bl	8002210 <lcdDrawAvailable>
 80022c4:	b938      	cbnz	r0, 80022d6 <lcdUpdateDraw+0x2a>
    delay(1);
 80022c6:	2001      	movs	r0, #1
 80022c8:	f7ff fd88 	bl	8001ddc <delay>
    if (millis()-pre_time >= 100)
 80022cc:	f7ff fd8a 	bl	8001de4 <millis>
 80022d0:	1b00      	subs	r0, r0, r4
 80022d2:	2863      	cmp	r0, #99	@ 0x63
 80022d4:	d9f4      	bls.n	80022c0 <lcdUpdateDraw+0x14>
}
 80022d6:	bd10      	pop	{r4, pc}
 80022d8:	200043da 	.word	0x200043da

080022dc <lcdGetFrameBuffer>:
}
 80022dc:	4b01      	ldr	r3, [pc, #4]	@ (80022e4 <lcdGetFrameBuffer+0x8>)
 80022de:	6818      	ldr	r0, [r3, #0]
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	200043c0 	.word	0x200043c0

080022e8 <lcdClearBuffer>:
{
 80022e8:	b510      	push	{r4, lr}
 80022ea:	4604      	mov	r4, r0
  uint16_t *p_buf = lcdGetFrameBuffer();
 80022ec:	f7ff fff6 	bl	80022dc <lcdGetFrameBuffer>
  for (int i=0; i<LCD_WIDTH * LCD_HEIGHT; i++)
 80022f0:	2300      	movs	r3, #0
    p_buf[i] = rgb_code;
 80022f2:	b2a1      	uxth	r1, r4
 80022f4:	461a      	mov	r2, r3
 80022f6:	f361 020f 	bfi	r2, r1, #0, #16
 80022fa:	f361 030f 	bfi	r3, r1, #0, #16
 80022fe:	f361 431f 	bfi	r3, r1, #16, #16
 8002302:	f361 421f 	bfi	r2, r1, #16, #16
 8002306:	f500 4180 	add.w	r1, r0, #16384	@ 0x4000
 800230a:	6003      	str	r3, [r0, #0]
 800230c:	6042      	str	r2, [r0, #4]
  for (int i=0; i<LCD_WIDTH * LCD_HEIGHT; i++)
 800230e:	3008      	adds	r0, #8
 8002310:	4281      	cmp	r1, r0
 8002312:	d1fa      	bne.n	800230a <lcdClearBuffer+0x22>
}
 8002314:	bd10      	pop	{r4, pc}
 8002316:	bf00      	nop

08002318 <lcdClear>:
{
 8002318:	b510      	push	{r4, lr}
 800231a:	4604      	mov	r4, r0
  uint16_t *p_buf = lcdGetFrameBuffer();
 800231c:	f7ff ffde 	bl	80022dc <lcdGetFrameBuffer>
  for (int i=0; i<LCD_WIDTH * LCD_HEIGHT; i++)
 8002320:	2300      	movs	r3, #0
    p_buf[i] = rgb_code;
 8002322:	b2a1      	uxth	r1, r4
 8002324:	461a      	mov	r2, r3
 8002326:	f361 020f 	bfi	r2, r1, #0, #16
 800232a:	f361 030f 	bfi	r3, r1, #0, #16
 800232e:	f361 431f 	bfi	r3, r1, #16, #16
 8002332:	f361 421f 	bfi	r2, r1, #16, #16
 8002336:	f500 4180 	add.w	r1, r0, #16384	@ 0x4000
 800233a:	6003      	str	r3, [r0, #0]
 800233c:	6042      	str	r2, [r0, #4]
  for (int i=0; i<LCD_WIDTH * LCD_HEIGHT; i++)
 800233e:	3008      	adds	r0, #8
 8002340:	4281      	cmp	r1, r0
 8002342:	d1fa      	bne.n	800233a <lcdClear+0x22>
}
 8002344:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  lcdUpdateDraw();
 8002348:	f7ff bfb0 	b.w	80022ac <lcdUpdateDraw>

0800234c <lcdDrawLine>:
{
 800234c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002350:	b083      	sub	sp, #12
 8002352:	468b      	mov	fp, r1
 8002354:	4616      	mov	r6, r2
 8002356:	461c      	mov	r4, r3
 8002358:	f8bd 8030 	ldrh.w	r8, [sp, #48]	@ 0x30
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 800235c:	1a5a      	subs	r2, r3, r1
 800235e:	ea82 79e2 	eor.w	r9, r2, r2, asr #31
 8002362:	eba9 79e2 	sub.w	r9, r9, r2, asr #31
 8002366:	1a31      	subs	r1, r6, r0
 8002368:	ea81 7ae1 	eor.w	sl, r1, r1, asr #31
 800236c:	ebaa 7ae1 	sub.w	sl, sl, r1, asr #31
  if (x0 < 0) x0 = 0;
 8002370:	2800      	cmp	r0, #0
 8002372:	db29      	blt.n	80023c8 <lcdDrawLine+0x7c>
  if (y0 < 0) y0 = 0;
 8002374:	f1bb 0f00 	cmp.w	fp, #0
 8002378:	db28      	blt.n	80023cc <lcdDrawLine+0x80>
  if (x1 < 0) x1 = 0;
 800237a:	2e00      	cmp	r6, #0
 800237c:	db29      	blt.n	80023d2 <lcdDrawLine+0x86>
  if (y1 < 0) y1 = 0;
 800237e:	2c00      	cmp	r4, #0
 8002380:	db29      	blt.n	80023d6 <lcdDrawLine+0x8a>
  if (steep)
 8002382:	45d1      	cmp	r9, sl
 8002384:	dc05      	bgt.n	8002392 <lcdDrawLine+0x46>
 8002386:	4623      	mov	r3, r4
 8002388:	4634      	mov	r4, r6
 800238a:	461e      	mov	r6, r3
 800238c:	465b      	mov	r3, fp
 800238e:	4683      	mov	fp, r0
 8002390:	4618      	mov	r0, r3
  if (x0 > x1)
 8002392:	45a3      	cmp	fp, r4
 8002394:	dc05      	bgt.n	80023a2 <lcdDrawLine+0x56>
 8002396:	4633      	mov	r3, r6
 8002398:	4606      	mov	r6, r0
 800239a:	4618      	mov	r0, r3
 800239c:	4623      	mov	r3, r4
 800239e:	465c      	mov	r4, fp
 80023a0:	469b      	mov	fp, r3
  dx = x1 - x0;
 80023a2:	ebab 0504 	sub.w	r5, fp, r4
 80023a6:	b2ab      	uxth	r3, r5
 80023a8:	9300      	str	r3, [sp, #0]
  dy = abs(y1 - y0);
 80023aa:	1b87      	subs	r7, r0, r6
 80023ac:	2f00      	cmp	r7, #0
 80023ae:	bfb8      	it	lt
 80023b0:	427f      	neglt	r7, r7
  int16_t err = dx / 2;
 80023b2:	f3c5 33c0 	ubfx	r3, r5, #15, #1
 80023b6:	fa03 f585 	sxtah	r5, r3, r5
 80023ba:	106d      	asrs	r5, r5, #1
  if (y0 < y1)
 80023bc:	4286      	cmp	r6, r0
 80023be:	db29      	blt.n	8002414 <lcdDrawLine+0xc8>
    ystep = -1;
 80023c0:	f04f 33ff 	mov.w	r3, #4294967295
 80023c4:	9301      	str	r3, [sp, #4]
 80023c6:	e014      	b.n	80023f2 <lcdDrawLine+0xa6>
  if (x0 < 0) x0 = 0;
 80023c8:	2000      	movs	r0, #0
 80023ca:	e7d3      	b.n	8002374 <lcdDrawLine+0x28>
  if (y0 < 0) y0 = 0;
 80023cc:	f04f 0b00 	mov.w	fp, #0
 80023d0:	e7d3      	b.n	800237a <lcdDrawLine+0x2e>
  if (x1 < 0) x1 = 0;
 80023d2:	2600      	movs	r6, #0
 80023d4:	e7d3      	b.n	800237e <lcdDrawLine+0x32>
  if (y1 < 0) y1 = 0;
 80023d6:	2400      	movs	r4, #0
 80023d8:	e7d3      	b.n	8002382 <lcdDrawLine+0x36>
      lcdDrawPixel(x0, y0, color);
 80023da:	4642      	mov	r2, r8
 80023dc:	4631      	mov	r1, r6
 80023de:	4620      	mov	r0, r4
 80023e0:	f7ff fe8e 	bl	8002100 <lcdDrawPixel>
    err -= dy;
 80023e4:	1bed      	subs	r5, r5, r7
 80023e6:	b2ab      	uxth	r3, r5
 80023e8:	b22d      	sxth	r5, r5
    if (err < 0)
 80023ea:	2d00      	cmp	r5, #0
 80023ec:	db0b      	blt.n	8002406 <lcdDrawLine+0xba>
  for (; x0<=x1; x0++)
 80023ee:	3401      	adds	r4, #1
 80023f0:	b224      	sxth	r4, r4
 80023f2:	455c      	cmp	r4, fp
 80023f4:	dc11      	bgt.n	800241a <lcdDrawLine+0xce>
    if (steep)
 80023f6:	45d1      	cmp	r9, sl
 80023f8:	ddef      	ble.n	80023da <lcdDrawLine+0x8e>
      lcdDrawPixel(y0, x0, color);
 80023fa:	4642      	mov	r2, r8
 80023fc:	4621      	mov	r1, r4
 80023fe:	4630      	mov	r0, r6
 8002400:	f7ff fe7e 	bl	8002100 <lcdDrawPixel>
 8002404:	e7ee      	b.n	80023e4 <lcdDrawLine+0x98>
      y0 += ystep;
 8002406:	9a01      	ldr	r2, [sp, #4]
 8002408:	4416      	add	r6, r2
 800240a:	b236      	sxth	r6, r6
      err += dx;
 800240c:	9a00      	ldr	r2, [sp, #0]
 800240e:	4413      	add	r3, r2
 8002410:	b21d      	sxth	r5, r3
 8002412:	e7ec      	b.n	80023ee <lcdDrawLine+0xa2>
    ystep = 1;
 8002414:	2301      	movs	r3, #1
 8002416:	9301      	str	r3, [sp, #4]
 8002418:	e7eb      	b.n	80023f2 <lcdDrawLine+0xa6>
}
 800241a:	b003      	add	sp, #12
 800241c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002420 <lcdDrawVLine>:
{
 8002420:	b500      	push	{lr}
 8002422:	b083      	sub	sp, #12
  lcdDrawLine(x, y, x, y+h-1, color);
 8002424:	440a      	add	r2, r1
 8002426:	b292      	uxth	r2, r2
 8002428:	3a01      	subs	r2, #1
 800242a:	9300      	str	r3, [sp, #0]
 800242c:	b213      	sxth	r3, r2
 800242e:	4602      	mov	r2, r0
 8002430:	f7ff ff8c 	bl	800234c <lcdDrawLine>
}
 8002434:	b003      	add	sp, #12
 8002436:	f85d fb04 	ldr.w	pc, [sp], #4
 800243a:	bf00      	nop

0800243c <lcdDrawHLine>:
{
 800243c:	b500      	push	{lr}
 800243e:	b083      	sub	sp, #12
  lcdDrawLine(x, y, x+w-1, y, color);
 8002440:	4402      	add	r2, r0
 8002442:	b292      	uxth	r2, r2
 8002444:	3a01      	subs	r2, #1
 8002446:	9300      	str	r3, [sp, #0]
 8002448:	460b      	mov	r3, r1
 800244a:	b212      	sxth	r2, r2
 800244c:	f7ff ff7e 	bl	800234c <lcdDrawLine>
}
 8002450:	b003      	add	sp, #12
 8002452:	f85d fb04 	ldr.w	pc, [sp], #4
 8002456:	bf00      	nop

08002458 <lcdDrawFillRect>:
{
 8002458:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800245c:	4605      	mov	r5, r0
 800245e:	4688      	mov	r8, r1
 8002460:	4616      	mov	r6, r2
 8002462:	461f      	mov	r7, r3
 8002464:	f8bd 9020 	ldrh.w	r9, [sp, #32]
  for (int16_t i=x; i<x+w; i++)
 8002468:	4604      	mov	r4, r0
 800246a:	e007      	b.n	800247c <lcdDrawFillRect+0x24>
    lcdDrawVLine(i, y, h, color);
 800246c:	464b      	mov	r3, r9
 800246e:	463a      	mov	r2, r7
 8002470:	4641      	mov	r1, r8
 8002472:	4620      	mov	r0, r4
 8002474:	f7ff ffd4 	bl	8002420 <lcdDrawVLine>
  for (int16_t i=x; i<x+w; i++)
 8002478:	3401      	adds	r4, #1
 800247a:	b224      	sxth	r4, r4
 800247c:	eb05 0c06 	add.w	ip, r5, r6
 8002480:	4564      	cmp	r4, ip
 8002482:	dbf3      	blt.n	800246c <lcdDrawFillRect+0x14>
}
 8002484:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08002488 <lcdInit>:
{
 8002488:	b510      	push	{r4, lr}
 800248a:	b082      	sub	sp, #8
  backlight_value = 100;
 800248c:	4b20      	ldr	r3, [pc, #128]	@ (8002510 <lcdInit+0x88>)
 800248e:	2264      	movs	r2, #100	@ 0x64
 8002490:	701a      	strb	r2, [r3, #0]
  is_init = ssd1306Init();
 8002492:	f000 fe7e 	bl	8003192 <ssd1306Init>
 8002496:	4b1f      	ldr	r3, [pc, #124]	@ (8002514 <lcdInit+0x8c>)
 8002498:	7018      	strb	r0, [r3, #0]
  ssd1306InitDriver(&lcd);
 800249a:	4c1f      	ldr	r4, [pc, #124]	@ (8002518 <lcdInit+0x90>)
 800249c:	4620      	mov	r0, r4
 800249e:	f000 fd95 	bl	8002fcc <ssd1306InitDriver>
  lcd.setCallBack(TransferDoneISR);
 80024a2:	69a3      	ldr	r3, [r4, #24]
 80024a4:	481d      	ldr	r0, [pc, #116]	@ (800251c <lcdInit+0x94>)
 80024a6:	4798      	blx	r3
  for (int i=0; i<LCD_WIDTH*LCD_HEIGHT; i++)
 80024a8:	2300      	movs	r3, #0
 80024aa:	e004      	b.n	80024b6 <lcdInit+0x2e>
    frame_buffer[0][i] = black;
 80024ac:	4a1c      	ldr	r2, [pc, #112]	@ (8002520 <lcdInit+0x98>)
 80024ae:	2100      	movs	r1, #0
 80024b0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (int i=0; i<LCD_WIDTH*LCD_HEIGHT; i++)
 80024b4:	3301      	adds	r3, #1
 80024b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80024ba:	dbf7      	blt.n	80024ac <lcdInit+0x24>
  memset(frame_buffer, 0x00, sizeof(frame_buffer));
 80024bc:	4c18      	ldr	r4, [pc, #96]	@ (8002520 <lcdInit+0x98>)
 80024be:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80024c2:	2100      	movs	r1, #0
 80024c4:	4620      	mov	r0, r4
 80024c6:	f008 ff05 	bl	800b2d4 <memset>
  p_draw_frame_buf = frame_buffer[frame_index];
 80024ca:	4b16      	ldr	r3, [pc, #88]	@ (8002524 <lcdInit+0x9c>)
 80024cc:	601c      	str	r4, [r3, #0]
  if (is_init)
 80024ce:	4b11      	ldr	r3, [pc, #68]	@ (8002514 <lcdInit+0x8c>)
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	b963      	cbnz	r3, 80024ee <lcdInit+0x66>
  logPrintf("[%s] lcdInit()\n", is_init ? "OK":"NG");
 80024d4:	4b0f      	ldr	r3, [pc, #60]	@ (8002514 <lcdInit+0x8c>)
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	b19b      	cbz	r3, 8002502 <lcdInit+0x7a>
 80024da:	4913      	ldr	r1, [pc, #76]	@ (8002528 <lcdInit+0xa0>)
 80024dc:	4813      	ldr	r0, [pc, #76]	@ (800252c <lcdInit+0xa4>)
 80024de:	f001 fe1d 	bl	800411c <logPrintf>
  if (is_init != true)
 80024e2:	4b0c      	ldr	r3, [pc, #48]	@ (8002514 <lcdInit+0x8c>)
 80024e4:	781c      	ldrb	r4, [r3, #0]
 80024e6:	b974      	cbnz	r4, 8002506 <lcdInit+0x7e>
}
 80024e8:	4620      	mov	r0, r4
 80024ea:	b002      	add	sp, #8
 80024ec:	bd10      	pop	{r4, pc}
    lcdDrawFillRect(0, 0, LCD_WIDTH, LCD_HEIGHT, black);
 80024ee:	2000      	movs	r0, #0
 80024f0:	9000      	str	r0, [sp, #0]
 80024f2:	2340      	movs	r3, #64	@ 0x40
 80024f4:	2280      	movs	r2, #128	@ 0x80
 80024f6:	4601      	mov	r1, r0
 80024f8:	f7ff ffae 	bl	8002458 <lcdDrawFillRect>
    lcdUpdateDraw();
 80024fc:	f7ff fed6 	bl	80022ac <lcdUpdateDraw>
 8002500:	e7e8      	b.n	80024d4 <lcdInit+0x4c>
  logPrintf("[%s] lcdInit()\n", is_init ? "OK":"NG");
 8002502:	490b      	ldr	r1, [pc, #44]	@ (8002530 <lcdInit+0xa8>)
 8002504:	e7ea      	b.n	80024dc <lcdInit+0x54>
  cliAdd("lcd", cliLcd);
 8002506:	490b      	ldr	r1, [pc, #44]	@ (8002534 <lcdInit+0xac>)
 8002508:	480b      	ldr	r0, [pc, #44]	@ (8002538 <lcdInit+0xb0>)
 800250a:	f001 fb5f 	bl	8003bcc <cliAdd>
  return true;
 800250e:	e7eb      	b.n	80024e8 <lcdInit+0x60>
 8002510:	20000028 	.word	0x20000028
 8002514:	200043da 	.word	0x200043da
 8002518:	200043dc 	.word	0x200043dc
 800251c:	080020a9 	.word	0x080020a9
 8002520:	200003c0 	.word	0x200003c0
 8002524:	200043c0 	.word	0x200043c0
 8002528:	0800e9d8 	.word	0x0800e9d8
 800252c:	0800ec80 	.word	0x0800ec80
 8002530:	0800e9dc 	.word	0x0800e9dc
 8002534:	08002669 	.word	0x08002669
 8002538:	0800ec90 	.word	0x0800ec90

0800253c <lcdDrawRect>:
{
 800253c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002540:	4604      	mov	r4, r0
 8002542:	460d      	mov	r5, r1
 8002544:	4690      	mov	r8, r2
 8002546:	461e      	mov	r6, r3
 8002548:	f8bd 7018 	ldrh.w	r7, [sp, #24]
  lcdDrawHLine(x, y, w, color);
 800254c:	463b      	mov	r3, r7
 800254e:	f7ff ff75 	bl	800243c <lcdDrawHLine>
  lcdDrawHLine(x, y+h-1, w, color);
 8002552:	19a9      	adds	r1, r5, r6
 8002554:	b289      	uxth	r1, r1
 8002556:	3901      	subs	r1, #1
 8002558:	463b      	mov	r3, r7
 800255a:	4642      	mov	r2, r8
 800255c:	b209      	sxth	r1, r1
 800255e:	4620      	mov	r0, r4
 8002560:	f7ff ff6c 	bl	800243c <lcdDrawHLine>
  lcdDrawVLine(x, y, h, color);
 8002564:	463b      	mov	r3, r7
 8002566:	4632      	mov	r2, r6
 8002568:	4629      	mov	r1, r5
 800256a:	4620      	mov	r0, r4
 800256c:	f7ff ff58 	bl	8002420 <lcdDrawVLine>
  lcdDrawVLine(x+w-1, y, h, color);
 8002570:	eb04 0008 	add.w	r0, r4, r8
 8002574:	b280      	uxth	r0, r0
 8002576:	3801      	subs	r0, #1
 8002578:	463b      	mov	r3, r7
 800257a:	4632      	mov	r2, r6
 800257c:	4629      	mov	r1, r5
 800257e:	b200      	sxth	r0, r0
 8002580:	f7ff ff4e 	bl	8002420 <lcdDrawVLine>
}
 8002584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002588 <lcdPrintf>:
 {
 8002588:	b408      	push	{r3}
 800258a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800258e:	b0ce      	sub	sp, #312	@ 0x138
 8002590:	4681      	mov	r9, r0
 8002592:	460e      	mov	r6, r1
 8002594:	4690      	mov	r8, r2
 8002596:	ab57      	add	r3, sp, #348	@ 0x15c
 8002598:	f853 2b04 	ldr.w	r2, [r3], #4
   va_start (arg, fmt);
 800259c:	934d      	str	r3, [sp, #308]	@ 0x134
   len = vsnprintf(print_buffer, 255, fmt, arg);
 800259e:	21ff      	movs	r1, #255	@ 0xff
 80025a0:	a80d      	add	r0, sp, #52	@ 0x34
 80025a2:	f008 fe89 	bl	800b2b8 <vsniprintf>
 80025a6:	4607      	mov	r7, r0
   if (font_tbl[lcd_font]->data != NULL)
 80025a8:	4b2a      	ldr	r3, [pc, #168]	@ (8002654 <lcdPrintf+0xcc>)
 80025aa:	781a      	ldrb	r2, [r3, #0]
 80025ac:	4b2a      	ldr	r3, [pc, #168]	@ (8002658 <lcdPrintf+0xd0>)
 80025ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	b113      	cbz	r3, 80025bc <lcdPrintf+0x34>
 80025b6:	464c      	mov	r4, r9
     for( i=0; i<len; i+=Size_Char )
 80025b8:	2500      	movs	r5, #0
 80025ba:	e003      	b.n	80025c4 <lcdPrintf+0x3c>
 80025bc:	464c      	mov	r4, r9
    for (i = 0; i < len; i += Size_Char)
 80025be:	2500      	movs	r5, #0
 80025c0:	e029      	b.n	8002616 <lcdPrintf+0x8e>
     for( i=0; i<len; i+=Size_Char )
 80025c2:	3501      	adds	r5, #1
 80025c4:	42bd      	cmp	r5, r7
 80025c6:	da3f      	bge.n	8002648 <lcdPrintf+0xc0>
       disEngFont(x, y, print_buffer[i], font_tbl[lcd_font], color);
 80025c8:	f8df a08c 	ldr.w	sl, [pc, #140]	@ 8002658 <lcdPrintf+0xd0>
 80025cc:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8002654 <lcdPrintf+0xcc>
 80025d0:	f89b 3000 	ldrb.w	r3, [fp]
 80025d4:	f8cd 8000 	str.w	r8, [sp]
 80025d8:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
 80025dc:	aa0d      	add	r2, sp, #52	@ 0x34
 80025de:	5d52      	ldrb	r2, [r2, r5]
 80025e0:	4631      	mov	r1, r6
 80025e2:	4620      	mov	r0, r4
 80025e4:	f7ff fd9c 	bl	8002120 <disEngFont>
       font_width = font_tbl[lcd_font]->width;
 80025e8:	f89b 3000 	ldrb.w	r3, [fp]
 80025ec:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
 80025f0:	f893 c000 	ldrb.w	ip, [r3]
       font_height = font_tbl[lcd_font]->height;
 80025f4:	785b      	ldrb	r3, [r3, #1]
       x += font_width;
 80025f6:	4464      	add	r4, ip
       if ((x+font_width) > HW_LCD_WIDTH)
 80025f8:	44a4      	add	ip, r4
 80025fa:	f1bc 0f80 	cmp.w	ip, #128	@ 0x80
 80025fe:	dde0      	ble.n	80025c2 <lcdPrintf+0x3a>
         y += font_height;
 8002600:	441e      	add	r6, r3
         x  = x_Pre;
 8002602:	464c      	mov	r4, r9
 8002604:	e7dd      	b.n	80025c2 <lcdPrintf+0x3a>
        x += 1 * 8;
 8002606:	3408      	adds	r4, #8
        font_width = 8;
 8002608:	2308      	movs	r3, #8
 800260a:	e017      	b.n	800263c <lcdPrintf+0xb4>
      if (FontBuf.Code_Type == PHAN_END_CODE)
 800260c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8002610:	2b04      	cmp	r3, #4
 8002612:	d019      	beq.n	8002648 <lcdPrintf+0xc0>
    for (i = 0; i < len; i += Size_Char)
 8002614:	4415      	add	r5, r2
 8002616:	42bd      	cmp	r5, r7
 8002618:	da16      	bge.n	8002648 <lcdPrintf+0xc0>
      hanFontLoad (&print_buffer[i], &FontBuf);
 800261a:	a903      	add	r1, sp, #12
 800261c:	ab0d      	add	r3, sp, #52	@ 0x34
 800261e:	1958      	adds	r0, r3, r5
 8002620:	f000 fc50 	bl	8002ec4 <hanFontLoad>
      disHanFont (x, y, &FontBuf, color);
 8002624:	4643      	mov	r3, r8
 8002626:	aa03      	add	r2, sp, #12
 8002628:	4631      	mov	r1, r6
 800262a:	4620      	mov	r0, r4
 800262c:	f7ff fda4 	bl	8002178 <disHanFont>
      Size_Char = FontBuf.Size_Char;
 8002630:	f8bd 200e 	ldrh.w	r2, [sp, #14]
      if (Size_Char >= 2)
 8002634:	2a01      	cmp	r2, #1
 8002636:	dde6      	ble.n	8002606 <lcdPrintf+0x7e>
        x += 2 * 8;
 8002638:	3410      	adds	r4, #16
        font_width = 16;
 800263a:	2310      	movs	r3, #16
      if ((x + font_width) > HW_LCD_WIDTH)
 800263c:	4423      	add	r3, r4
 800263e:	2b80      	cmp	r3, #128	@ 0x80
 8002640:	dde4      	ble.n	800260c <lcdPrintf+0x84>
        y += 16;
 8002642:	3610      	adds	r6, #16
        x = x_Pre;
 8002644:	464c      	mov	r4, r9
 8002646:	e7e1      	b.n	800260c <lcdPrintf+0x84>
}
 8002648:	b04e      	add	sp, #312	@ 0x138
 800264a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800264e:	b001      	add	sp, #4
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop
 8002654:	200043d9 	.word	0x200043d9
 8002658:	0800ecc0 	.word	0x0800ecc0

0800265c <lcdSetFont>:

void lcdSetFont(LcdFont font)
{
  lcd_font = font;
 800265c:	4b01      	ldr	r3, [pc, #4]	@ (8002664 <lcdSetFont+0x8>)
 800265e:	7018      	strb	r0, [r3, #0]
}
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	200043d9 	.word	0x200043d9

08002668 <cliLcd>:
  return lcd_font;
}

#ifdef _USE_HW_CLI
void cliLcd(cli_args_t *args)
{
 8002668:	b500      	push	{lr}
 800266a:	b083      	sub	sp, #12
  bool ret = false;


  if (args->argc == 1 && args->isStr(0, "test") == true)
 800266c:	8803      	ldrh	r3, [r0, #0]
 800266e:	2b01      	cmp	r3, #1
 8002670:	d104      	bne.n	800267c <cliLcd+0x14>
 8002672:	6943      	ldr	r3, [r0, #20]
 8002674:	4919      	ldr	r1, [pc, #100]	@ (80026dc <cliLcd+0x74>)
 8002676:	2000      	movs	r0, #0
 8002678:	4798      	blx	r3
 800267a:	b928      	cbnz	r0, 8002688 <cliLcd+0x20>
    ret = true;
  }

  if (ret != true)
  {
    cliPrintf("lcd test\n");
 800267c:	4818      	ldr	r0, [pc, #96]	@ (80026e0 <cliLcd+0x78>)
 800267e:	f001 f883 	bl	8003788 <cliPrintf>
  }
}
 8002682:	b003      	add	sp, #12
 8002684:	f85d fb04 	ldr.w	pc, [sp], #4
    lcdSetFont(LCD_FONT_07x10);
 8002688:	2000      	movs	r0, #0
 800268a:	f7ff ffe7 	bl	800265c <lcdSetFont>
    while (cliKeepLoop())
 800268e:	f001 fa91 	bl	8003bb4 <cliKeepLoop>
 8002692:	b1d0      	cbz	r0, 80026ca <cliLcd+0x62>
      if (lcdDrawAvailable() == true)
 8002694:	f7ff fdbc 	bl	8002210 <lcdDrawAvailable>
 8002698:	2800      	cmp	r0, #0
 800269a:	d0f8      	beq.n	800268e <cliLcd+0x26>
        lcdClearBuffer(black);
 800269c:	2000      	movs	r0, #0
 800269e:	f7ff fe23 	bl	80022e8 <lcdClearBuffer>
        lcdPrintf(20, 16 * 0, white, "[ LCD TEST ]");
 80026a2:	4b10      	ldr	r3, [pc, #64]	@ (80026e4 <cliLcd+0x7c>)
 80026a4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80026a8:	2100      	movs	r1, #0
 80026aa:	2014      	movs	r0, #20
 80026ac:	f7ff ff6c 	bl	8002588 <lcdPrintf>
        lcdPrintf(20, 16 * 1, white, "%d fps", lcdGetFps());
 80026b0:	f7ff fda8 	bl	8002204 <lcdGetFps>
 80026b4:	9000      	str	r0, [sp, #0]
 80026b6:	4b0c      	ldr	r3, [pc, #48]	@ (80026e8 <cliLcd+0x80>)
 80026b8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80026bc:	2110      	movs	r1, #16
 80026be:	2014      	movs	r0, #20
 80026c0:	f7ff ff62 	bl	8002588 <lcdPrintf>
        lcdRequestDraw();
 80026c4:	f7ff fdce 	bl	8002264 <lcdRequestDraw>
 80026c8:	e7e1      	b.n	800268e <cliLcd+0x26>
    lcdSetFont(LCD_FONT_HAN);
 80026ca:	2003      	movs	r0, #3
 80026cc:	f7ff ffc6 	bl	800265c <lcdSetFont>
    lcdClearBuffer(black);
 80026d0:	2000      	movs	r0, #0
 80026d2:	f7ff fe09 	bl	80022e8 <lcdClearBuffer>
    lcdUpdateDraw();
 80026d6:	f7ff fde9 	bl	80022ac <lcdUpdateDraw>
  if (ret != true)
 80026da:	e7d2      	b.n	8002682 <cliLcd+0x1a>
 80026dc:	0800ec94 	.word	0x0800ec94
 80026e0:	0800ecb4 	.word	0x0800ecb4
 80026e4:	0800ec9c 	.word	0x0800ec9c
 80026e8:	0800ecac 	.word	0x0800ecac

080026ec <lcdGetFont>:
}
 80026ec:	4b01      	ldr	r3, [pc, #4]	@ (80026f4 <lcdGetFont+0x8>)
 80026ee:	7818      	ldrb	r0, [r3, #0]
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	200043d9 	.word	0x200043d9

080026f8 <uartInit>:




bool uartInit(void)
{
 80026f8:	b510      	push	{r4, lr}
  for (int i=0; i<UART_MAX_CH; i++)
 80026fa:	2300      	movs	r3, #0
 80026fc:	e00c      	b.n	8002718 <uartInit+0x20>
  {
    uart_tbl[i].is_open = false;
 80026fe:	4c0e      	ldr	r4, [pc, #56]	@ (8002738 <uartInit+0x40>)
 8002700:	2234      	movs	r2, #52	@ 0x34
 8002702:	fb03 f202 	mul.w	r2, r3, r2
 8002706:	18a1      	adds	r1, r4, r2
 8002708:	2000      	movs	r0, #0
 800270a:	54a0      	strb	r0, [r4, r2]
    uart_tbl[i].baud = 115200;
 800270c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002710:	604a      	str	r2, [r1, #4]
    uart_tbl[i].rx_cnt = 0;
 8002712:	62c8      	str	r0, [r1, #44]	@ 0x2c
    uart_tbl[i].tx_cnt = 0;
 8002714:	6308      	str	r0, [r1, #48]	@ 0x30
  for (int i=0; i<UART_MAX_CH; i++)
 8002716:	3301      	adds	r3, #1
 8002718:	2b01      	cmp	r3, #1
 800271a:	ddf0      	ble.n	80026fe <uartInit+0x6>
  }

  uart_tbl[_DEF_UART1].rx_buf = rx_buf_1;
 800271c:	4b06      	ldr	r3, [pc, #24]	@ (8002738 <uartInit+0x40>)
 800271e:	4a07      	ldr	r2, [pc, #28]	@ (800273c <uartInit+0x44>)
 8002720:	609a      	str	r2, [r3, #8]
  uart_tbl[_DEF_UART2].rx_buf = rx_buf_2;
 8002722:	4a07      	ldr	r2, [pc, #28]	@ (8002740 <uartInit+0x48>)
 8002724:	63da      	str	r2, [r3, #60]	@ 0x3c

  is_init = true;
 8002726:	2401      	movs	r4, #1
 8002728:	4b06      	ldr	r3, [pc, #24]	@ (8002744 <uartInit+0x4c>)
 800272a:	701c      	strb	r4, [r3, #0]

#if CLI_USE(HW_UART)
  cliAdd("uart", cliUart);
 800272c:	4906      	ldr	r1, [pc, #24]	@ (8002748 <uartInit+0x50>)
 800272e:	4807      	ldr	r0, [pc, #28]	@ (800274c <uartInit+0x54>)
 8002730:	f001 fa4c 	bl	8003bcc <cliAdd>
#endif
  return true;
}
 8002734:	4620      	mov	r0, r4
 8002736:	bd10      	pop	{r4, pc}
 8002738:	20004bfc 	.word	0x20004bfc
 800273c:	200047fc 	.word	0x200047fc
 8002740:	200043fc 	.word	0x200043fc
 8002744:	20004c64 	.word	0x20004c64
 8002748:	08002acd 	.word	0x08002acd
 800274c:	0800ecd0 	.word	0x0800ecd0

08002750 <uartOpen>:
{
  bool ret = false;
  HAL_StatusTypeDef ret_hal;


  if (ch >= UART_MAX_CH) return false;
 8002750:	2801      	cmp	r0, #1
 8002752:	f200 8106 	bhi.w	8002962 <uartOpen+0x212>
{
 8002756:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002758:	b085      	sub	sp, #20
 800275a:	4604      	mov	r4, r0

  if (uart_tbl[ch].is_open == true && uart_tbl[ch].baud == baud)
 800275c:	2334      	movs	r3, #52	@ 0x34
 800275e:	fb00 f303 	mul.w	r3, r0, r3
 8002762:	4a81      	ldr	r2, [pc, #516]	@ (8002968 <uartOpen+0x218>)
 8002764:	5cd0      	ldrb	r0, [r2, r3]
 8002766:	b130      	cbz	r0, 8002776 <uartOpen+0x26>
 8002768:	4613      	mov	r3, r2
 800276a:	2234      	movs	r2, #52	@ 0x34
 800276c:	fb02 3304 	mla	r3, r2, r4, r3
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	428b      	cmp	r3, r1
 8002774:	d003      	beq.n	800277e <uartOpen+0x2e>
  {
    return true;
  }


  switch(ch)
 8002776:	b124      	cbz	r4, 8002782 <uartOpen+0x32>
 8002778:	2c01      	cmp	r4, #1
 800277a:	d079      	beq.n	8002870 <uartOpen+0x120>
 800277c:	2000      	movs	r0, #0
      }
      break;
  }

  return ret;
}
 800277e:	b005      	add	sp, #20
 8002780:	bdf0      	pop	{r4, r5, r6, r7, pc}
      uart_tbl[ch].baud      = baud;
 8002782:	4a79      	ldr	r2, [pc, #484]	@ (8002968 <uartOpen+0x218>)
 8002784:	2034      	movs	r0, #52	@ 0x34
 8002786:	fb04 f000 	mul.w	r0, r4, r0
 800278a:	1815      	adds	r5, r2, r0
 800278c:	6069      	str	r1, [r5, #4]
      uart_tbl[ch].p_huart   = uart_hw_tbl[ch].p_huart;
 800278e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8002792:	4e76      	ldr	r6, [pc, #472]	@ (800296c <uartOpen+0x21c>)
 8002794:	eb06 06c3 	add.w	r6, r6, r3, lsl #3
 8002798:	68b3      	ldr	r3, [r6, #8]
 800279a:	622b      	str	r3, [r5, #32]
      uart_tbl[ch].p_hdma_rx = uart_hw_tbl[ch].p_hdma_rx;
 800279c:	68f7      	ldr	r7, [r6, #12]
 800279e:	626f      	str	r7, [r5, #36]	@ 0x24
      uart_tbl[ch].p_huart->Instance = uart_hw_tbl[ch].p_uart;
 80027a0:	6877      	ldr	r7, [r6, #4]
 80027a2:	601f      	str	r7, [r3, #0]
      uart_tbl[ch].p_huart->Init.BaudRate       = baud;
 80027a4:	6a2b      	ldr	r3, [r5, #32]
 80027a6:	6059      	str	r1, [r3, #4]
      uart_tbl[ch].p_huart->Init.WordLength     = UART_WORDLENGTH_8B;
 80027a8:	6a29      	ldr	r1, [r5, #32]
 80027aa:	2300      	movs	r3, #0
 80027ac:	608b      	str	r3, [r1, #8]
      uart_tbl[ch].p_huart->Init.StopBits       = UART_STOPBITS_1;
 80027ae:	6a29      	ldr	r1, [r5, #32]
 80027b0:	60cb      	str	r3, [r1, #12]
      uart_tbl[ch].p_huart->Init.Parity         = UART_PARITY_NONE;
 80027b2:	6a29      	ldr	r1, [r5, #32]
 80027b4:	610b      	str	r3, [r1, #16]
      uart_tbl[ch].p_huart->Init.Mode           = UART_MODE_TX_RX;
 80027b6:	6a29      	ldr	r1, [r5, #32]
 80027b8:	270c      	movs	r7, #12
 80027ba:	614f      	str	r7, [r1, #20]
      uart_tbl[ch].p_huart->Init.HwFlowCtl      = UART_HWCONTROL_NONE;
 80027bc:	6a29      	ldr	r1, [r5, #32]
 80027be:	618b      	str	r3, [r1, #24]
      uart_tbl[ch].p_huart->Init.OverSampling   = UART_OVERSAMPLING_16;
 80027c0:	6a29      	ldr	r1, [r5, #32]
 80027c2:	61cb      	str	r3, [r1, #28]
      uart_tbl[ch].p_huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80027c4:	6a29      	ldr	r1, [r5, #32]
 80027c6:	620b      	str	r3, [r1, #32]
      uart_tbl[ch].p_huart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80027c8:	6a29      	ldr	r1, [r5, #32]
 80027ca:	624b      	str	r3, [r1, #36]	@ 0x24
      uart_tbl[ch].p_huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80027cc:	6a29      	ldr	r1, [r5, #32]
 80027ce:	628b      	str	r3, [r1, #40]	@ 0x28
      qbufferCreate(&uart_tbl[ch].qbuffer, &uart_tbl[ch].rx_buf[0], UART_RX_BUF_LENGTH);
 80027d0:	3008      	adds	r0, #8
 80027d2:	4410      	add	r0, r2
 80027d4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80027d8:	68a9      	ldr	r1, [r5, #8]
 80027da:	3004      	adds	r0, #4
 80027dc:	f7ff fb06 	bl	8001dec <qbufferCreate>
      __HAL_RCC_USART1_CLK_ENABLE();
 80027e0:	4b63      	ldr	r3, [pc, #396]	@ (8002970 <uartOpen+0x220>)
 80027e2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80027e4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80027e8:	661a      	str	r2, [r3, #96]	@ 0x60
 80027ea:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80027ec:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80027f0:	9200      	str	r2, [sp, #0]
 80027f2:	9a00      	ldr	r2, [sp, #0]
      __HAL_RCC_GPIOA_CLK_ENABLE();
 80027f4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80027f6:	f042 0201 	orr.w	r2, r2, #1
 80027fa:	64da      	str	r2, [r3, #76]	@ 0x4c
 80027fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027fe:	f003 0301 	and.w	r3, r3, #1
 8002802:	9301      	str	r3, [sp, #4]
 8002804:	9b01      	ldr	r3, [sp, #4]
      HAL_UART_DeInit(uart_tbl[ch].p_huart);
 8002806:	6a28      	ldr	r0, [r5, #32]
 8002808:	f006 f93b 	bl	8008a82 <HAL_UART_DeInit>
      if (uart_hw_tbl[ch].is_rs485 == true)
 800280c:	7d33      	ldrb	r3, [r6, #20]
 800280e:	b143      	cbz	r3, 8002822 <uartOpen+0xd2>
        ret_hal = HAL_RS485Ex_Init(uart_tbl[ch].p_huart, UART_DE_POLARITY_HIGH, 0, 0);
 8002810:	2300      	movs	r3, #0
 8002812:	461a      	mov	r2, r3
 8002814:	4619      	mov	r1, r3
 8002816:	6a28      	ldr	r0, [r5, #32]
 8002818:	f007 f838 	bl	800988c <HAL_RS485Ex_Init>
      if (ret_hal == HAL_OK)
 800281c:	b148      	cbz	r0, 8002832 <uartOpen+0xe2>
  bool ret = false;
 800281e:	2000      	movs	r0, #0
 8002820:	e7ad      	b.n	800277e <uartOpen+0x2e>
        ret_hal = HAL_UART_Init(uart_tbl[ch].p_huart);
 8002822:	4b51      	ldr	r3, [pc, #324]	@ (8002968 <uartOpen+0x218>)
 8002824:	2234      	movs	r2, #52	@ 0x34
 8002826:	fb02 3304 	mla	r3, r2, r4, r3
 800282a:	6a18      	ldr	r0, [r3, #32]
 800282c:	f006 ff56 	bl	80096dc <HAL_UART_Init>
 8002830:	e7f4      	b.n	800281c <uartOpen+0xcc>
        uart_tbl[ch].is_open = true;
 8002832:	4a4d      	ldr	r2, [pc, #308]	@ (8002968 <uartOpen+0x218>)
 8002834:	2334      	movs	r3, #52	@ 0x34
 8002836:	fb04 f303 	mul.w	r3, r4, r3
 800283a:	18d0      	adds	r0, r2, r3
 800283c:	2101      	movs	r1, #1
 800283e:	54d1      	strb	r1, [r2, r3]
        if(HAL_UART_Receive_DMA(uart_tbl[ch].p_huart, (uint8_t *)&uart_tbl[ch].rx_buf[0], UART_RX_BUF_LENGTH) != HAL_OK)
 8002840:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002844:	6881      	ldr	r1, [r0, #8]
 8002846:	6a00      	ldr	r0, [r0, #32]
 8002848:	f006 ffd4 	bl	80097f4 <HAL_UART_Receive_DMA>
 800284c:	b970      	cbnz	r0, 800286c <uartOpen+0x11c>
        ret = true;
 800284e:	2001      	movs	r0, #1
        uart_tbl[ch].qbuffer.in  = uart_tbl[ch].qbuffer.len - ((DMA_Channel_TypeDef *)uart_tbl[ch].p_huart->hdmarx->Instance)->CNDTR;
 8002850:	4b45      	ldr	r3, [pc, #276]	@ (8002968 <uartOpen+0x218>)
 8002852:	2234      	movs	r2, #52	@ 0x34
 8002854:	fb02 3304 	mla	r3, r2, r4, r3
 8002858:	695a      	ldr	r2, [r3, #20]
 800285a:	6a19      	ldr	r1, [r3, #32]
 800285c:	f8d1 1080 	ldr.w	r1, [r1, #128]	@ 0x80
 8002860:	6809      	ldr	r1, [r1, #0]
 8002862:	6849      	ldr	r1, [r1, #4]
 8002864:	1a52      	subs	r2, r2, r1
 8002866:	60da      	str	r2, [r3, #12]
        uart_tbl[ch].qbuffer.out = uart_tbl[ch].qbuffer.in;
 8002868:	611a      	str	r2, [r3, #16]
 800286a:	e788      	b.n	800277e <uartOpen+0x2e>
          ret = false;
 800286c:	2000      	movs	r0, #0
 800286e:	e7ef      	b.n	8002850 <uartOpen+0x100>
      uart_tbl[ch].baud = baud;
 8002870:	4a3d      	ldr	r2, [pc, #244]	@ (8002968 <uartOpen+0x218>)
 8002872:	2034      	movs	r0, #52	@ 0x34
 8002874:	fb04 f000 	mul.w	r0, r4, r0
 8002878:	1815      	adds	r5, r2, r0
 800287a:	6069      	str	r1, [r5, #4]
      uart_tbl[ch].p_huart           = uart_hw_tbl[ch].p_huart;
 800287c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8002880:	4e3a      	ldr	r6, [pc, #232]	@ (800296c <uartOpen+0x21c>)
 8002882:	eb06 06c3 	add.w	r6, r6, r3, lsl #3
 8002886:	68b3      	ldr	r3, [r6, #8]
 8002888:	622b      	str	r3, [r5, #32]
      uart_tbl[ch].p_hdma_rx         = uart_hw_tbl[ch].p_hdma_rx;
 800288a:	68f7      	ldr	r7, [r6, #12]
 800288c:	626f      	str	r7, [r5, #36]	@ 0x24
      uart_tbl[ch].p_hdma_tx         = uart_hw_tbl[ch].p_hdma_tx;
 800288e:	6937      	ldr	r7, [r6, #16]
 8002890:	62af      	str	r7, [r5, #40]	@ 0x28
      uart_tbl[ch].p_huart->Instance = uart_hw_tbl[ch].p_uart;
 8002892:	6877      	ldr	r7, [r6, #4]
 8002894:	601f      	str	r7, [r3, #0]
      uart_tbl[ch].p_huart->Init.BaudRate               = baud;
 8002896:	6a2b      	ldr	r3, [r5, #32]
 8002898:	6059      	str	r1, [r3, #4]
      uart_tbl[ch].p_huart->Init.WordLength             = UART_WORDLENGTH_8B;
 800289a:	6a29      	ldr	r1, [r5, #32]
 800289c:	2300      	movs	r3, #0
 800289e:	608b      	str	r3, [r1, #8]
      uart_tbl[ch].p_huart->Init.StopBits               = UART_STOPBITS_1;
 80028a0:	6a29      	ldr	r1, [r5, #32]
 80028a2:	60cb      	str	r3, [r1, #12]
      uart_tbl[ch].p_huart->Init.Parity                 = UART_PARITY_NONE;
 80028a4:	6a29      	ldr	r1, [r5, #32]
 80028a6:	610b      	str	r3, [r1, #16]
      uart_tbl[ch].p_huart->Init.Mode                   = UART_MODE_TX_RX;
 80028a8:	6a29      	ldr	r1, [r5, #32]
 80028aa:	270c      	movs	r7, #12
 80028ac:	614f      	str	r7, [r1, #20]
      uart_tbl[ch].p_huart->Init.HwFlowCtl              = UART_HWCONTROL_NONE;
 80028ae:	6a29      	ldr	r1, [r5, #32]
 80028b0:	618b      	str	r3, [r1, #24]
      uart_tbl[ch].p_huart->Init.OverSampling           = UART_OVERSAMPLING_16;
 80028b2:	6a29      	ldr	r1, [r5, #32]
 80028b4:	61cb      	str	r3, [r1, #28]
      uart_tbl[ch].p_huart->Init.OneBitSampling         = UART_ONE_BIT_SAMPLE_DISABLE;
 80028b6:	6a29      	ldr	r1, [r5, #32]
 80028b8:	620b      	str	r3, [r1, #32]
      uart_tbl[ch].p_huart->Init.ClockPrescaler         = UART_PRESCALER_DIV1;
 80028ba:	6a29      	ldr	r1, [r5, #32]
 80028bc:	624b      	str	r3, [r1, #36]	@ 0x24
      uart_tbl[ch].p_huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80028be:	6a29      	ldr	r1, [r5, #32]
 80028c0:	628b      	str	r3, [r1, #40]	@ 0x28
      qbufferCreate(&uart_tbl[ch].qbuffer, &uart_tbl[ch].rx_buf[0], UART_RX_BUF_LENGTH);
 80028c2:	3008      	adds	r0, #8
 80028c4:	4410      	add	r0, r2
 80028c6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80028ca:	68a9      	ldr	r1, [r5, #8]
 80028cc:	3004      	adds	r0, #4
 80028ce:	f7ff fa8d 	bl	8001dec <qbufferCreate>
      __HAL_RCC_USART3_CLK_ENABLE();
 80028d2:	4b27      	ldr	r3, [pc, #156]	@ (8002970 <uartOpen+0x220>)
 80028d4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80028d6:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80028da:	659a      	str	r2, [r3, #88]	@ 0x58
 80028dc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80028de:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 80028e2:	9202      	str	r2, [sp, #8]
 80028e4:	9a02      	ldr	r2, [sp, #8]
      __HAL_RCC_GPIOB_CLK_ENABLE();
 80028e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80028e8:	f042 0202 	orr.w	r2, r2, #2
 80028ec:	64da      	str	r2, [r3, #76]	@ 0x4c
 80028ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028f0:	f003 0302 	and.w	r3, r3, #2
 80028f4:	9303      	str	r3, [sp, #12]
 80028f6:	9b03      	ldr	r3, [sp, #12]
      HAL_UART_DeInit(uart_tbl[ch].p_huart);
 80028f8:	6a28      	ldr	r0, [r5, #32]
 80028fa:	f006 f8c2 	bl	8008a82 <HAL_UART_DeInit>
      if (uart_hw_tbl[ch].is_rs485 == true)
 80028fe:	7d33      	ldrb	r3, [r6, #20]
 8002900:	b143      	cbz	r3, 8002914 <uartOpen+0x1c4>
        ret_hal = HAL_RS485Ex_Init(uart_tbl[ch].p_huart, UART_DE_POLARITY_HIGH, 0, 0);
 8002902:	2300      	movs	r3, #0
 8002904:	461a      	mov	r2, r3
 8002906:	4619      	mov	r1, r3
 8002908:	6a28      	ldr	r0, [r5, #32]
 800290a:	f006 ffbf 	bl	800988c <HAL_RS485Ex_Init>
      if (ret_hal == HAL_OK)
 800290e:	b148      	cbz	r0, 8002924 <uartOpen+0x1d4>
  bool ret = false;
 8002910:	2000      	movs	r0, #0
 8002912:	e734      	b.n	800277e <uartOpen+0x2e>
        ret_hal = HAL_UART_Init(uart_tbl[ch].p_huart);
 8002914:	4b14      	ldr	r3, [pc, #80]	@ (8002968 <uartOpen+0x218>)
 8002916:	2234      	movs	r2, #52	@ 0x34
 8002918:	fb02 3304 	mla	r3, r2, r4, r3
 800291c:	6a18      	ldr	r0, [r3, #32]
 800291e:	f006 fedd 	bl	80096dc <HAL_UART_Init>
 8002922:	e7f4      	b.n	800290e <uartOpen+0x1be>
        uart_tbl[ch].is_open = true;
 8002924:	4a10      	ldr	r2, [pc, #64]	@ (8002968 <uartOpen+0x218>)
 8002926:	2334      	movs	r3, #52	@ 0x34
 8002928:	fb04 f303 	mul.w	r3, r4, r3
 800292c:	18d0      	adds	r0, r2, r3
 800292e:	2101      	movs	r1, #1
 8002930:	54d1      	strb	r1, [r2, r3]
        if (HAL_UART_Receive_DMA(uart_tbl[ch].p_huart, (uint8_t *)&uart_tbl[ch].rx_buf[0], UART_RX_BUF_LENGTH) != HAL_OK)
 8002932:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002936:	6881      	ldr	r1, [r0, #8]
 8002938:	6a00      	ldr	r0, [r0, #32]
 800293a:	f006 ff5b 	bl	80097f4 <HAL_UART_Receive_DMA>
 800293e:	b970      	cbnz	r0, 800295e <uartOpen+0x20e>
        ret                  = true;
 8002940:	2001      	movs	r0, #1
        uart_tbl[ch].qbuffer.in  = uart_tbl[ch].qbuffer.len - ((DMA_Channel_TypeDef *)uart_tbl[ch].p_huart->hdmarx->Instance)->CNDTR;
 8002942:	4b09      	ldr	r3, [pc, #36]	@ (8002968 <uartOpen+0x218>)
 8002944:	2234      	movs	r2, #52	@ 0x34
 8002946:	fb02 3304 	mla	r3, r2, r4, r3
 800294a:	695a      	ldr	r2, [r3, #20]
 800294c:	6a19      	ldr	r1, [r3, #32]
 800294e:	f8d1 1080 	ldr.w	r1, [r1, #128]	@ 0x80
 8002952:	6809      	ldr	r1, [r1, #0]
 8002954:	6849      	ldr	r1, [r1, #4]
 8002956:	1a52      	subs	r2, r2, r1
 8002958:	60da      	str	r2, [r3, #12]
        uart_tbl[ch].qbuffer.out = uart_tbl[ch].qbuffer.in;
 800295a:	611a      	str	r2, [r3, #16]
 800295c:	e70f      	b.n	800277e <uartOpen+0x2e>
          ret = false;
 800295e:	2000      	movs	r0, #0
 8002960:	e7ef      	b.n	8002942 <uartOpen+0x1f2>
  if (ch >= UART_MAX_CH) return false;
 8002962:	2000      	movs	r0, #0
}
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	20004bfc 	.word	0x20004bfc
 800296c:	0800ed80 	.word	0x0800ed80
 8002970:	40021000 	.word	0x40021000

08002974 <uartAvailable>:

  return true;
}

uint32_t uartAvailable(uint8_t ch)
{
 8002974:	b510      	push	{r4, lr}
  uint32_t ret = 0;


  switch(ch)
 8002976:	4603      	mov	r3, r0
 8002978:	b118      	cbz	r0, 8002982 <uartAvailable+0xe>
 800297a:	2801      	cmp	r0, #1
 800297c:	d012      	beq.n	80029a4 <uartAvailable+0x30>
 800297e:	2000      	movs	r0, #0
      ret = qbufferAvailable(&uart_tbl[ch].qbuffer);
      break;
  }

  return ret;
}
 8002980:	bd10      	pop	{r4, pc}
      uart_tbl[ch].qbuffer.in = (uart_tbl[ch].qbuffer.len - ((DMA_Channel_TypeDef *)uart_tbl[ch].p_hdma_rx->Instance)->CNDTR);
 8002982:	4811      	ldr	r0, [pc, #68]	@ (80029c8 <uartAvailable+0x54>)
 8002984:	2234      	movs	r2, #52	@ 0x34
 8002986:	fb02 f303 	mul.w	r3, r2, r3
 800298a:	18c2      	adds	r2, r0, r3
 800298c:	6951      	ldr	r1, [r2, #20]
 800298e:	6a54      	ldr	r4, [r2, #36]	@ 0x24
 8002990:	6824      	ldr	r4, [r4, #0]
 8002992:	6864      	ldr	r4, [r4, #4]
 8002994:	1b09      	subs	r1, r1, r4
 8002996:	60d1      	str	r1, [r2, #12]
      ret = qbufferAvailable(&uart_tbl[ch].qbuffer);
 8002998:	3308      	adds	r3, #8
 800299a:	4418      	add	r0, r3
 800299c:	3004      	adds	r0, #4
 800299e:	f7ff fa90 	bl	8001ec2 <qbufferAvailable>
      break;
 80029a2:	e7ed      	b.n	8002980 <uartAvailable+0xc>
      uart_tbl[ch].qbuffer.in = (uart_tbl[ch].qbuffer.len - ((DMA_Channel_TypeDef *)uart_tbl[ch].p_hdma_rx->Instance)->CNDTR);
 80029a4:	4808      	ldr	r0, [pc, #32]	@ (80029c8 <uartAvailable+0x54>)
 80029a6:	2234      	movs	r2, #52	@ 0x34
 80029a8:	fb02 f303 	mul.w	r3, r2, r3
 80029ac:	18c2      	adds	r2, r0, r3
 80029ae:	6951      	ldr	r1, [r2, #20]
 80029b0:	6a54      	ldr	r4, [r2, #36]	@ 0x24
 80029b2:	6824      	ldr	r4, [r4, #0]
 80029b4:	6864      	ldr	r4, [r4, #4]
 80029b6:	1b09      	subs	r1, r1, r4
 80029b8:	60d1      	str	r1, [r2, #12]
      ret = qbufferAvailable(&uart_tbl[ch].qbuffer);
 80029ba:	3308      	adds	r3, #8
 80029bc:	4418      	add	r0, r3
 80029be:	3004      	adds	r0, #4
 80029c0:	f7ff fa7f 	bl	8001ec2 <qbufferAvailable>
  return ret;
 80029c4:	e7dc      	b.n	8002980 <uartAvailable+0xc>
 80029c6:	bf00      	nop
 80029c8:	20004bfc 	.word	0x20004bfc

080029cc <uartRead>:

  return true;
}

uint8_t uartRead(uint8_t ch)
{
 80029cc:	b510      	push	{r4, lr}
 80029ce:	b082      	sub	sp, #8
  uint8_t ret = 0;
 80029d0:	2300      	movs	r3, #0
 80029d2:	f88d 3007 	strb.w	r3, [sp, #7]


  switch(ch)
 80029d6:	4604      	mov	r4, r0
 80029d8:	b160      	cbz	r0, 80029f4 <uartRead+0x28>
 80029da:	2801      	cmp	r0, #1
 80029dc:	d017      	beq.n	8002a0e <uartRead+0x42>

    case _DEF_UART2:
      qbufferRead(&uart_tbl[ch].qbuffer, &ret, 1);
      break;
  }
  uart_tbl[ch].rx_cnt++;
 80029de:	4b12      	ldr	r3, [pc, #72]	@ (8002a28 <uartRead+0x5c>)
 80029e0:	2234      	movs	r2, #52	@ 0x34
 80029e2:	fb02 3304 	mla	r3, r2, r4, r3
 80029e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029e8:	3201      	adds	r2, #1
 80029ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  return ret;
}
 80029ec:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80029f0:	b002      	add	sp, #8
 80029f2:	bd10      	pop	{r4, pc}
      qbufferRead(&uart_tbl[ch].qbuffer, &ret, 1);
 80029f4:	2034      	movs	r0, #52	@ 0x34
 80029f6:	fb04 f000 	mul.w	r0, r4, r0
 80029fa:	3008      	adds	r0, #8
 80029fc:	4b0a      	ldr	r3, [pc, #40]	@ (8002a28 <uartRead+0x5c>)
 80029fe:	4418      	add	r0, r3
 8002a00:	2201      	movs	r2, #1
 8002a02:	f10d 0107 	add.w	r1, sp, #7
 8002a06:	3004      	adds	r0, #4
 8002a08:	f7ff fa2e 	bl	8001e68 <qbufferRead>
      break;
 8002a0c:	e7e7      	b.n	80029de <uartRead+0x12>
      qbufferRead(&uart_tbl[ch].qbuffer, &ret, 1);
 8002a0e:	2034      	movs	r0, #52	@ 0x34
 8002a10:	fb04 f000 	mul.w	r0, r4, r0
 8002a14:	3008      	adds	r0, #8
 8002a16:	4b04      	ldr	r3, [pc, #16]	@ (8002a28 <uartRead+0x5c>)
 8002a18:	4418      	add	r0, r3
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f10d 0107 	add.w	r1, sp, #7
 8002a20:	3004      	adds	r0, #4
 8002a22:	f7ff fa21 	bl	8001e68 <qbufferRead>
      break;
 8002a26:	e7da      	b.n	80029de <uartRead+0x12>
 8002a28:	20004bfc 	.word	0x20004bfc

08002a2c <uartWrite>:

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 8002a2c:	b538      	push	{r3, r4, r5, lr}
 8002a2e:	4614      	mov	r4, r2
  uint32_t ret = 0;


  switch(ch)
 8002a30:	4605      	mov	r5, r0
 8002a32:	b150      	cbz	r0, 8002a4a <uartWrite+0x1e>
 8002a34:	2801      	cmp	r0, #1
 8002a36:	d014      	beq.n	8002a62 <uartWrite+0x36>
 8002a38:	2000      	movs	r0, #0
      {
        ret = length;
      }
      break;
  }
  uart_tbl[ch].tx_cnt += ret;
 8002a3a:	4b11      	ldr	r3, [pc, #68]	@ (8002a80 <uartWrite+0x54>)
 8002a3c:	2234      	movs	r2, #52	@ 0x34
 8002a3e:	fb02 3305 	mla	r3, r2, r5, r3
 8002a42:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a44:	4402      	add	r2, r0
 8002a46:	631a      	str	r2, [r3, #48]	@ 0x30

  return ret;
}
 8002a48:	bd38      	pop	{r3, r4, r5, pc}
      if (HAL_UART_Transmit(uart_tbl[ch].p_huart, p_data, length, 100) == HAL_OK)
 8002a4a:	480d      	ldr	r0, [pc, #52]	@ (8002a80 <uartWrite+0x54>)
 8002a4c:	2334      	movs	r3, #52	@ 0x34
 8002a4e:	fb03 0005 	mla	r0, r3, r5, r0
 8002a52:	2364      	movs	r3, #100	@ 0x64
 8002a54:	b292      	uxth	r2, r2
 8002a56:	6a00      	ldr	r0, [r0, #32]
 8002a58:	f006 fd72 	bl	8009540 <HAL_UART_Transmit>
 8002a5c:	b160      	cbz	r0, 8002a78 <uartWrite+0x4c>
  uint32_t ret = 0;
 8002a5e:	2000      	movs	r0, #0
 8002a60:	e7eb      	b.n	8002a3a <uartWrite+0xe>
      if (HAL_UART_Transmit_DMA(uart_tbl[ch].p_huart, p_data, length) == HAL_OK)
 8002a62:	4b07      	ldr	r3, [pc, #28]	@ (8002a80 <uartWrite+0x54>)
 8002a64:	2234      	movs	r2, #52	@ 0x34
 8002a66:	fb02 3300 	mla	r3, r2, r0, r3
 8002a6a:	b2a2      	uxth	r2, r4
 8002a6c:	6a18      	ldr	r0, [r3, #32]
 8002a6e:	f006 f82b 	bl	8008ac8 <HAL_UART_Transmit_DMA>
 8002a72:	b118      	cbz	r0, 8002a7c <uartWrite+0x50>
  uint32_t ret = 0;
 8002a74:	2000      	movs	r0, #0
 8002a76:	e7e0      	b.n	8002a3a <uartWrite+0xe>
        ret = length;
 8002a78:	4620      	mov	r0, r4
 8002a7a:	e7de      	b.n	8002a3a <uartWrite+0xe>
        ret = length;
 8002a7c:	4620      	mov	r0, r4
 8002a7e:	e7dc      	b.n	8002a3a <uartWrite+0xe>
 8002a80:	20004bfc 	.word	0x20004bfc

08002a84 <uartPrintf>:

  return ret;
}

uint32_t uartPrintf(uint8_t ch, const char *fmt, ...)
{
 8002a84:	b40e      	push	{r1, r2, r3}
 8002a86:	b510      	push	{r4, lr}
 8002a88:	b0c3      	sub	sp, #268	@ 0x10c
 8002a8a:	4604      	mov	r4, r0
 8002a8c:	ab45      	add	r3, sp, #276	@ 0x114
 8002a8e:	f853 2b04 	ldr.w	r2, [r3], #4
  char buf[256];
  va_list args;
  int len;
  uint32_t ret;

  va_start(args, fmt);
 8002a92:	9301      	str	r3, [sp, #4]
  len = vsnprintf(buf, 256, fmt, args);
 8002a94:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002a98:	a802      	add	r0, sp, #8
 8002a9a:	f008 fc0d 	bl	800b2b8 <vsniprintf>
 8002a9e:	4602      	mov	r2, r0

  ret = uartWrite(ch, (uint8_t *)buf, len);
 8002aa0:	a902      	add	r1, sp, #8
 8002aa2:	4620      	mov	r0, r4
 8002aa4:	f7ff ffc2 	bl	8002a2c <uartWrite>

  va_end(args);


  return ret;
}
 8002aa8:	b043      	add	sp, #268	@ 0x10c
 8002aaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002aae:	b003      	add	sp, #12
 8002ab0:	4770      	bx	lr
	...

08002ab4 <uartGetBaud>:
uint32_t uartGetBaud(uint8_t ch)
{
  uint32_t ret = 0;


  if (ch >= UART_MAX_CH) return 0;
 8002ab4:	2801      	cmp	r0, #1
 8002ab6:	d805      	bhi.n	8002ac4 <uartGetBaud+0x10>

  ret = uart_tbl[ch].baud;
 8002ab8:	4b03      	ldr	r3, [pc, #12]	@ (8002ac8 <uartGetBaud+0x14>)
 8002aba:	2234      	movs	r2, #52	@ 0x34
 8002abc:	fb02 3300 	mla	r3, r2, r0, r3
 8002ac0:	6858      	ldr	r0, [r3, #4]

  return ret;
 8002ac2:	4770      	bx	lr
  if (ch >= UART_MAX_CH) return 0;
 8002ac4:	2000      	movs	r0, #0
}
 8002ac6:	4770      	bx	lr
 8002ac8:	20004bfc 	.word	0x20004bfc

08002acc <cliUart>:
  return uart_tbl[ch].tx_cnt;
}

#if CLI_USE(HW_UART)
void cliUart(cli_args_t *args)
{
 8002acc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	4604      	mov	r4, r0
  bool ret = false;


  if (args->argc == 1 && args->isStr(0, "info"))
 8002ad2:	8803      	ldrh	r3, [r0, #0]
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d007      	beq.n	8002ae8 <cliUart+0x1c>
  bool ret = false;
 8002ad8:	2500      	movs	r5, #0
      cliPrintf("_DEF_UART%d : %s, %d bps\n", i+1, uart_hw_tbl[i].p_msg, uartGetBaud(i));
    }
    ret = true;
  }

  if (args->argc == 2 && args->isStr(0, "test"))
 8002ada:	8823      	ldrh	r3, [r4, #0]
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d01f      	beq.n	8002b20 <cliUart+0x54>
      cliPrintf("This is cliPort\n");
    }
    ret = true;
  }

  if (ret == false)
 8002ae0:	2d00      	cmp	r5, #0
 8002ae2:	d065      	beq.n	8002bb0 <cliUart+0xe4>
  {
    cliPrintf("uart info\n");
    cliPrintf("uart test ch[1~%d]\n", HW_UART_MAX_CH);
  }
}
 8002ae4:	b003      	add	sp, #12
 8002ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (args->argc == 1 && args->isStr(0, "info"))
 8002ae8:	6943      	ldr	r3, [r0, #20]
 8002aea:	4935      	ldr	r1, [pc, #212]	@ (8002bc0 <cliUart+0xf4>)
 8002aec:	2000      	movs	r0, #0
 8002aee:	4798      	blx	r3
 8002af0:	4605      	mov	r5, r0
 8002af2:	2800      	cmp	r0, #0
 8002af4:	d0f1      	beq.n	8002ada <cliUart+0xe>
    for (int i=0; i<UART_MAX_CH; i++)
 8002af6:	2000      	movs	r0, #0
 8002af8:	e00f      	b.n	8002b1a <cliUart+0x4e>
      cliPrintf("_DEF_UART%d : %s, %d bps\n", i+1, uart_hw_tbl[i].p_msg, uartGetBaud(i));
 8002afa:	1c46      	adds	r6, r0, #1
 8002afc:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8002b00:	4b30      	ldr	r3, [pc, #192]	@ (8002bc4 <cliUart+0xf8>)
 8002b02:	f853 7032 	ldr.w	r7, [r3, r2, lsl #3]
 8002b06:	b2c0      	uxtb	r0, r0
 8002b08:	f7ff ffd4 	bl	8002ab4 <uartGetBaud>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	463a      	mov	r2, r7
 8002b10:	4631      	mov	r1, r6
 8002b12:	482d      	ldr	r0, [pc, #180]	@ (8002bc8 <cliUart+0xfc>)
 8002b14:	f000 fe38 	bl	8003788 <cliPrintf>
    for (int i=0; i<UART_MAX_CH; i++)
 8002b18:	4630      	mov	r0, r6
 8002b1a:	2801      	cmp	r0, #1
 8002b1c:	dded      	ble.n	8002afa <cliUart+0x2e>
 8002b1e:	e7dc      	b.n	8002ada <cliUart+0xe>
  if (args->argc == 2 && args->isStr(0, "test"))
 8002b20:	6963      	ldr	r3, [r4, #20]
 8002b22:	492a      	ldr	r1, [pc, #168]	@ (8002bcc <cliUart+0x100>)
 8002b24:	2000      	movs	r0, #0
 8002b26:	4798      	blx	r3
 8002b28:	2800      	cmp	r0, #0
 8002b2a:	d0d9      	beq.n	8002ae0 <cliUart+0x14>
    uart_ch = constrain(args->getData(1), 1, UART_MAX_CH) - 1;
 8002b2c:	68a3      	ldr	r3, [r4, #8]
 8002b2e:	2001      	movs	r0, #1
 8002b30:	4798      	blx	r3
 8002b32:	2800      	cmp	r0, #0
 8002b34:	dd0b      	ble.n	8002b4e <cliUart+0x82>
 8002b36:	68a3      	ldr	r3, [r4, #8]
 8002b38:	2001      	movs	r0, #1
 8002b3a:	4798      	blx	r3
 8002b3c:	2802      	cmp	r0, #2
 8002b3e:	dc0f      	bgt.n	8002b60 <cliUart+0x94>
 8002b40:	68a3      	ldr	r3, [r4, #8]
 8002b42:	2001      	movs	r0, #1
 8002b44:	4798      	blx	r3
 8002b46:	b2c4      	uxtb	r4, r0
 8002b48:	3c01      	subs	r4, #1
 8002b4a:	b2e4      	uxtb	r4, r4
 8002b4c:	e000      	b.n	8002b50 <cliUart+0x84>
 8002b4e:	2400      	movs	r4, #0
    if (uart_ch != cliGetPort())
 8002b50:	f000 fda8 	bl	80036a4 <cliGetPort>
 8002b54:	42a0      	cmp	r0, r4
 8002b56:	d108      	bne.n	8002b6a <cliUart+0x9e>
      cliPrintf("This is cliPort\n");
 8002b58:	481d      	ldr	r0, [pc, #116]	@ (8002bd0 <cliUart+0x104>)
 8002b5a:	f000 fe15 	bl	8003788 <cliPrintf>
 8002b5e:	e7c1      	b.n	8002ae4 <cliUart+0x18>
    uart_ch = constrain(args->getData(1), 1, UART_MAX_CH) - 1;
 8002b60:	2401      	movs	r4, #1
 8002b62:	e7f5      	b.n	8002b50 <cliUart+0x84>
        if (cliAvailable() > 0)
 8002b64:	f000 fe00 	bl	8003768 <cliAvailable>
 8002b68:	b978      	cbnz	r0, 8002b8a <cliUart+0xbe>
        if (uartAvailable(uart_ch) > 0)
 8002b6a:	4620      	mov	r0, r4
 8002b6c:	f7ff ff02 	bl	8002974 <uartAvailable>
 8002b70:	2800      	cmp	r0, #0
 8002b72:	d0f7      	beq.n	8002b64 <cliUart+0x98>
          rx_data = uartRead(uart_ch);
 8002b74:	4620      	mov	r0, r4
 8002b76:	f7ff ff29 	bl	80029cc <uartRead>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	f88d 0007 	strb.w	r0, [sp, #7]
          cliPrintf("<- _DEF_UART%d RX : 0x%X\n", uart_ch + 1, rx_data);
 8002b80:	1c61      	adds	r1, r4, #1
 8002b82:	4814      	ldr	r0, [pc, #80]	@ (8002bd4 <cliUart+0x108>)
 8002b84:	f000 fe00 	bl	8003788 <cliPrintf>
 8002b88:	e7ec      	b.n	8002b64 <cliUart+0x98>
          rx_data = cliRead();
 8002b8a:	f000 fdf5 	bl	8003778 <cliRead>
 8002b8e:	f88d 0007 	strb.w	r0, [sp, #7]
          if (rx_data == 'q')
 8002b92:	2871      	cmp	r0, #113	@ 0x71
 8002b94:	d0a6      	beq.n	8002ae4 <cliUart+0x18>
            uartWrite(uart_ch, &rx_data, 1);
 8002b96:	2201      	movs	r2, #1
 8002b98:	f10d 0107 	add.w	r1, sp, #7
 8002b9c:	4620      	mov	r0, r4
 8002b9e:	f7ff ff45 	bl	8002a2c <uartWrite>
            cliPrintf("-> _DEF_UART%d TX : 0x%X\n", uart_ch + 1, rx_data);
 8002ba2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8002ba6:	1c61      	adds	r1, r4, #1
 8002ba8:	480b      	ldr	r0, [pc, #44]	@ (8002bd8 <cliUart+0x10c>)
 8002baa:	f000 fded 	bl	8003788 <cliPrintf>
 8002bae:	e7dc      	b.n	8002b6a <cliUart+0x9e>
    cliPrintf("uart info\n");
 8002bb0:	480a      	ldr	r0, [pc, #40]	@ (8002bdc <cliUart+0x110>)
 8002bb2:	f000 fde9 	bl	8003788 <cliPrintf>
    cliPrintf("uart test ch[1~%d]\n", HW_UART_MAX_CH);
 8002bb6:	2102      	movs	r1, #2
 8002bb8:	4809      	ldr	r0, [pc, #36]	@ (8002be0 <cliUart+0x114>)
 8002bba:	f000 fde5 	bl	8003788 <cliPrintf>
}
 8002bbe:	e791      	b.n	8002ae4 <cliUart+0x18>
 8002bc0:	0800e9e0 	.word	0x0800e9e0
 8002bc4:	0800ed80 	.word	0x0800ed80
 8002bc8:	0800ecd8 	.word	0x0800ecd8
 8002bcc:	0800ec94 	.word	0x0800ec94
 8002bd0:	0800ed2c 	.word	0x0800ed2c
 8002bd4:	0800ecf4 	.word	0x0800ecf4
 8002bd8:	0800ed10 	.word	0x0800ed10
 8002bdc:	0800ed40 	.word	0x0800ed40
 8002be0:	0800ed4c 	.word	0x0800ed4c

08002be4 <hanUniFontLoad>:
    for(i = 0; i < 32; i++)   FontPtr->FontBuffer[i] |= K_font[248 + uJonType*28+uJongsung][i];
  }
}

void hanUniFontLoad(char *HanCode, han_font_t *FontPtr)
{
 8002be4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002be8:	460c      	mov	r4, r1
  static uint16_t uChosung, uJoongsung, uJongsung, uChoType, uJooType,uJonType;




  utf16 = (uint8_t)(HanCode[0] & 0x0f) << 12 | (uint8_t)(HanCode[1] & 0x3f) << 6 | (uint8_t)(HanCode[2] & 0x3f);
 8002bea:	7802      	ldrb	r2, [r0, #0]
 8002bec:	7843      	ldrb	r3, [r0, #1]
 8002bee:	019b      	lsls	r3, r3, #6
 8002bf0:	f403 637c 	and.w	r3, r3, #4032	@ 0xfc0
 8002bf4:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8002bf8:	b21b      	sxth	r3, r3
 8002bfa:	7882      	ldrb	r2, [r0, #2]
 8002bfc:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8002c00:	4313      	orrs	r3, r2
 8002c02:	b29b      	uxth	r3, r3


  //seperate phoneme code
  utf16 -= 0xac00;
 8002c04:	f503 43a8 	add.w	r3, r3, #21504	@ 0x5400
 8002c08:	b298      	uxth	r0, r3
  uJongsung  = utf16 % 28;
 8002c0a:	f3c3 038d 	ubfx	r3, r3, #2, #14
 8002c0e:	4a41      	ldr	r2, [pc, #260]	@ (8002d14 <hanUniFontLoad+0x130>)
 8002c10:	fba2 2303 	umull	r2, r3, r2, r3
 8002c14:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8002c18:	eba0 0082 	sub.w	r0, r0, r2, lsl #2
 8002c1c:	b280      	uxth	r0, r0
 8002c1e:	493e      	ldr	r1, [pc, #248]	@ (8002d18 <hanUniFontLoad+0x134>)
 8002c20:	8008      	strh	r0, [r1, #0]
  utf16 /= 28;
 8002c22:	b29b      	uxth	r3, r3
  uJoongsung = utf16 % 21;
 8002c24:	4a3d      	ldr	r2, [pc, #244]	@ (8002d1c <hanUniFontLoad+0x138>)
 8002c26:	fba2 5203 	umull	r5, r2, r2, r3
 8002c2a:	1a9d      	subs	r5, r3, r2
 8002c2c:	eb02 0255 	add.w	r2, r2, r5, lsr #1
 8002c30:	0912      	lsrs	r2, r2, #4
 8002c32:	eb02 0542 	add.w	r5, r2, r2, lsl #1
 8002c36:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
 8002c3a:	1b5b      	subs	r3, r3, r5
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	4d38      	ldr	r5, [pc, #224]	@ (8002d20 <hanUniFontLoad+0x13c>)
 8002c40:	802b      	strh	r3, [r5, #0]
  uChosung   = utf16 / 21;
 8002c42:	b292      	uxth	r2, r2
 8002c44:	4e37      	ldr	r6, [pc, #220]	@ (8002d24 <hanUniFontLoad+0x140>)
 8002c46:	8032      	strh	r2, [r6, #0]


  //make font index
  uChosung   = UniChoIdxTbl[uChosung];    //Chosung index
 8002c48:	4f37      	ldr	r7, [pc, #220]	@ (8002d28 <hanUniFontLoad+0x144>)
 8002c4a:	5cbf      	ldrb	r7, [r7, r2]
 8002c4c:	8037      	strh	r7, [r6, #0]
  uJoongsung = UniJooIdxTbl[uJoongsung];  //Joongsung index
 8002c4e:	4a37      	ldr	r2, [pc, #220]	@ (8002d2c <hanUniFontLoad+0x148>)
 8002c50:	5cd6      	ldrb	r6, [r2, r3]
 8002c52:	802e      	strh	r6, [r5, #0]
  uJongsung  = UniJonIdxTbl[uJongsung];   //Jongsung index
 8002c54:	4b36      	ldr	r3, [pc, #216]	@ (8002d30 <hanUniFontLoad+0x14c>)
 8002c56:	f813 9000 	ldrb.w	r9, [r3, r0]
 8002c5a:	f8a1 9000 	strh.w	r9, [r1]


  //decide a character type (몇번째 벌을 사용할지 결정)
  uChoType = uJongsung ? ChoTypeCaseJongYes[uJoongsung]:ChoTypeCaseJongNo [uJoongsung];
 8002c5e:	f1b9 0f00 	cmp.w	r9, #0
 8002c62:	d00b      	beq.n	8002c7c <hanUniFontLoad+0x98>
 8002c64:	4b33      	ldr	r3, [pc, #204]	@ (8002d34 <hanUniFontLoad+0x150>)
 8002c66:	f813 e006 	ldrb.w	lr, [r3, r6]
 8002c6a:	4b33      	ldr	r3, [pc, #204]	@ (8002d38 <hanUniFontLoad+0x154>)
 8002c6c:	f8a3 e000 	strh.w	lr, [r3]
    //'ㄱ'(1) 이나 'ㅋ'(16) 인경우는
  uJooType = ((uChosung == 0 || uChosung == 1 ||uChosung == 16 ) ? 0: 1) + (uJongsung ? 2: 0);
 8002c70:	2f01      	cmp	r7, #1
 8002c72:	d909      	bls.n	8002c88 <hanUniFontLoad+0xa4>
 8002c74:	2f10      	cmp	r7, #16
 8002c76:	d005      	beq.n	8002c84 <hanUniFontLoad+0xa0>
 8002c78:	2501      	movs	r5, #1
 8002c7a:	e006      	b.n	8002c8a <hanUniFontLoad+0xa6>
  uChoType = uJongsung ? ChoTypeCaseJongYes[uJoongsung]:ChoTypeCaseJongNo [uJoongsung];
 8002c7c:	4b2f      	ldr	r3, [pc, #188]	@ (8002d3c <hanUniFontLoad+0x158>)
 8002c7e:	f813 e006 	ldrb.w	lr, [r3, r6]
 8002c82:	e7f2      	b.n	8002c6a <hanUniFontLoad+0x86>
  uJooType = ((uChosung == 0 || uChosung == 1 ||uChosung == 16 ) ? 0: 1) + (uJongsung ? 2: 0);
 8002c84:	2500      	movs	r5, #0
 8002c86:	e000      	b.n	8002c8a <hanUniFontLoad+0xa6>
 8002c88:	2500      	movs	r5, #0
 8002c8a:	b2ad      	uxth	r5, r5
 8002c8c:	f1b9 0f00 	cmp.w	r9, #0
 8002c90:	d00b      	beq.n	8002caa <hanUniFontLoad+0xc6>
 8002c92:	2302      	movs	r3, #2
 8002c94:	441d      	add	r5, r3
 8002c96:	4b2a      	ldr	r3, [pc, #168]	@ (8002d40 <hanUniFontLoad+0x15c>)
 8002c98:	801d      	strh	r5, [r3, #0]
  uJonType = JonType[uJoongsung];
 8002c9a:	4b2a      	ldr	r3, [pc, #168]	@ (8002d44 <hanUniFontLoad+0x160>)
 8002c9c:	f813 8006 	ldrb.w	r8, [r3, r6]
 8002ca0:	4b29      	ldr	r3, [pc, #164]	@ (8002d48 <hanUniFontLoad+0x164>)
 8002ca2:	f8a3 8000 	strh.w	r8, [r3]

  for(i = 0; i<32; i++)
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	e01a      	b.n	8002ce0 <hanUniFontLoad+0xfc>
  uJooType = ((uChosung == 0 || uChosung == 1 ||uChosung == 16 ) ? 0: 1) + (uJongsung ? 2: 0);
 8002caa:	464b      	mov	r3, r9
 8002cac:	e7f2      	b.n	8002c94 <hanUniFontLoad+0xb0>
  {
    FontPtr->FontBuffer[i]  = (uint8_t)K_font[uChoType*20+uChosung][i];
 8002cae:	eb0e 028e 	add.w	r2, lr, lr, lsl #2
 8002cb2:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 8002cb6:	4925      	ldr	r1, [pc, #148]	@ (8002d4c <hanUniFontLoad+0x168>)
 8002cb8:	eb01 1242 	add.w	r2, r1, r2, lsl #5
 8002cbc:	5cd0      	ldrb	r0, [r2, r3]
 8002cbe:	eb04 0c03 	add.w	ip, r4, r3
 8002cc2:	f88c 0006 	strb.w	r0, [ip, #6]
    FontPtr->FontBuffer[i] |= (uint8_t)K_font[160 + uJooType*22+uJoongsung][i];
 8002cc6:	2216      	movs	r2, #22
 8002cc8:	fb05 f202 	mul.w	r2, r5, r2
 8002ccc:	32a0      	adds	r2, #160	@ 0xa0
 8002cce:	4432      	add	r2, r6
 8002cd0:	eb01 1142 	add.w	r1, r1, r2, lsl #5
 8002cd4:	5cca      	ldrb	r2, [r1, r3]
 8002cd6:	4310      	orrs	r0, r2
 8002cd8:	f88c 0006 	strb.w	r0, [ip, #6]
  for(i = 0; i<32; i++)
 8002cdc:	3301      	adds	r3, #1
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	2b1f      	cmp	r3, #31
 8002ce2:	d9e4      	bls.n	8002cae <hanUniFontLoad+0xca>
  }

  //combine Jongsung
  if(uJongsung)
 8002ce4:	f1b9 0f00 	cmp.w	r9, #0
 8002ce8:	d101      	bne.n	8002cee <hanUniFontLoad+0x10a>
  {
    for(i = 0; i < 32; i++)   FontPtr->FontBuffer[i] |= K_font[248 + uJonType*28+uJongsung][i];
  }
}
 8002cea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    for(i = 0; i < 32; i++)   FontPtr->FontBuffer[i] |= K_font[248 + uJonType*28+uJongsung][i];
 8002cee:	2200      	movs	r2, #0
 8002cf0:	2a1f      	cmp	r2, #31
 8002cf2:	d8fa      	bhi.n	8002cea <hanUniFontLoad+0x106>
 8002cf4:	18a5      	adds	r5, r4, r2
 8002cf6:	79a9      	ldrb	r1, [r5, #6]
 8002cf8:	ebc8 03c8 	rsb	r3, r8, r8, lsl #3
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	33f8      	adds	r3, #248	@ 0xf8
 8002d00:	444b      	add	r3, r9
 8002d02:	4812      	ldr	r0, [pc, #72]	@ (8002d4c <hanUniFontLoad+0x168>)
 8002d04:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8002d08:	5c9b      	ldrb	r3, [r3, r2]
 8002d0a:	430b      	orrs	r3, r1
 8002d0c:	71ab      	strb	r3, [r5, #6]
 8002d0e:	3201      	adds	r2, #1
 8002d10:	b292      	uxth	r2, r2
 8002d12:	e7ed      	b.n	8002cf0 <hanUniFontLoad+0x10c>
 8002d14:	24924925 	.word	0x24924925
 8002d18:	20004c70 	.word	0x20004c70
 8002d1c:	86186187 	.word	0x86186187
 8002d20:	20004c6e 	.word	0x20004c6e
 8002d24:	20004c6c 	.word	0x20004c6c
 8002d28:	08012da4 	.word	0x08012da4
 8002d2c:	08012d84 	.word	0x08012d84
 8002d30:	08012d64 	.word	0x08012d64
 8002d34:	08012d34 	.word	0x08012d34
 8002d38:	20004c6a 	.word	0x20004c6a
 8002d3c:	08012d4c 	.word	0x08012d4c
 8002d40:	20004c68 	.word	0x20004c68
 8002d44:	08012d1c 	.word	0x08012d1c
 8002d48:	20004c66 	.word	0x20004c66
 8002d4c:	0800edc0 	.word	0x0800edc0

08002d50 <hanEngFontLoad>:
void hanEngFontLoad(char *HanCode, han_font_t *FontPtr)
{
  uint16_t i;
  char EngCode;

  EngCode = *HanCode;
 8002d50:	f890 c000 	ldrb.w	ip, [r0]

  EngCode -= 0x20;  // FONT는 스페이스 부터 시작한다.
 8002d54:	f1ac 0c20 	sub.w	ip, ip, #32
 8002d58:	fa5f fc8c 	uxtb.w	ip, ip

  for ( i = 0 ; i < 16 ; i++ )
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	e007      	b.n	8002d70 <hanEngFontLoad+0x20>
  {
     FontPtr->FontBuffer[ i ] = (char)wEngFon[(int)EngCode][i];
 8002d60:	4a05      	ldr	r2, [pc, #20]	@ (8002d78 <hanEngFontLoad+0x28>)
 8002d62:	eb02 120c 	add.w	r2, r2, ip, lsl #4
 8002d66:	5cd0      	ldrb	r0, [r2, r3]
 8002d68:	18ca      	adds	r2, r1, r3
 8002d6a:	7190      	strb	r0, [r2, #6]
  for ( i = 0 ; i < 16 ; i++ )
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	2b0f      	cmp	r3, #15
 8002d72:	d9f5      	bls.n	8002d60 <hanEngFontLoad+0x10>
  }
}
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	08012e24 	.word	0x08012e24

08002d7c <hanCnvCodeWan2Johab>:
uint16_t hanCnvCodeWan2Johab(uint16_t WanCode)
{
  int index;
  uint16_t hcode, lcode;

  hcode = (WanCode >> 8) & 0xFF;
 8002d7c:	0a03      	lsrs	r3, r0, #8
  lcode = WanCode & 0x0ff;
 8002d7e:	b2c0      	uxtb	r0, r0

  index = (hcode - 0x0B0) * 94 + (lcode - 0x0A1);
 8002d80:	3bb0      	subs	r3, #176	@ 0xb0
 8002d82:	38a1      	subs	r0, #161	@ 0xa1
 8002d84:	225e      	movs	r2, #94	@ 0x5e
 8002d86:	fb02 0003 	mla	r0, r2, r3, r0

  return wWanToJohabTable[index];
}
 8002d8a:	4b02      	ldr	r3, [pc, #8]	@ (8002d94 <hanCnvCodeWan2Johab+0x18>)
 8002d8c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	08011ac0 	.word	0x08011ac0

08002d98 <hanWanFontLoad>:
{
 8002d98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002d9c:	460c      	mov	r4, r1
  wHanCode = (uint16_t)HanCode[0]<<8  | ((uint16_t)HanCode[1] & 0x00FF);
 8002d9e:	7802      	ldrb	r2, [r0, #0]
 8002da0:	7840      	ldrb	r0, [r0, #1]
  wHanCode = hanCnvCodeWan2Johab(wHanCode);
 8002da2:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8002da6:	f7ff ffe9 	bl	8002d7c <hanCnvCodeWan2Johab>
  uChosung   = (wHanCode>>10)&0x001F;//Chosung code
 8002daa:	f3c0 2684 	ubfx	r6, r0, #10, #5
 8002dae:	4d38      	ldr	r5, [pc, #224]	@ (8002e90 <hanWanFontLoad+0xf8>)
 8002db0:	802e      	strh	r6, [r5, #0]
  uJoongsung = (wHanCode>>5) &0x001F;//Joongsung code
 8002db2:	f3c0 1144 	ubfx	r1, r0, #5, #5
 8002db6:	4a37      	ldr	r2, [pc, #220]	@ (8002e94 <hanWanFontLoad+0xfc>)
 8002db8:	8011      	strh	r1, [r2, #0]
  uJongsung  = wHanCode & 0x001F;    //Jongsung code
 8002dba:	f000 001f 	and.w	r0, r0, #31
 8002dbe:	4b36      	ldr	r3, [pc, #216]	@ (8002e98 <hanWanFontLoad+0x100>)
 8002dc0:	8018      	strh	r0, [r3, #0]
  uChosung   = ChoIdxTbl[uChosung];    //Chosung index
 8002dc2:	4f36      	ldr	r7, [pc, #216]	@ (8002e9c <hanWanFontLoad+0x104>)
 8002dc4:	5dbf      	ldrb	r7, [r7, r6]
 8002dc6:	802f      	strh	r7, [r5, #0]
  uJoongsung = JooIdxTbl[uJoongsung];  //Joongsung index
 8002dc8:	4d35      	ldr	r5, [pc, #212]	@ (8002ea0 <hanWanFontLoad+0x108>)
 8002dca:	5c6e      	ldrb	r6, [r5, r1]
 8002dcc:	8016      	strh	r6, [r2, #0]
  uJongsung  = JonIdxTbl[uJongsung];   //Jongsung index
 8002dce:	4a35      	ldr	r2, [pc, #212]	@ (8002ea4 <hanWanFontLoad+0x10c>)
 8002dd0:	f812 9000 	ldrb.w	r9, [r2, r0]
 8002dd4:	f8a3 9000 	strh.w	r9, [r3]
  uChoType = uJongsung ? ChoTypeCaseJongYes[uJoongsung]:ChoTypeCaseJongNo [uJoongsung];
 8002dd8:	f1b9 0f00 	cmp.w	r9, #0
 8002ddc:	d00b      	beq.n	8002df6 <hanWanFontLoad+0x5e>
 8002dde:	4b32      	ldr	r3, [pc, #200]	@ (8002ea8 <hanWanFontLoad+0x110>)
 8002de0:	f813 e006 	ldrb.w	lr, [r3, r6]
 8002de4:	4b31      	ldr	r3, [pc, #196]	@ (8002eac <hanWanFontLoad+0x114>)
 8002de6:	f8a3 e000 	strh.w	lr, [r3]
  uJooType = ((uChosung == 0 || uChosung == 1 ||uChosung == 16 ) ? 0: 1) + (uJongsung ? 2: 0);
 8002dea:	2f01      	cmp	r7, #1
 8002dec:	d909      	bls.n	8002e02 <hanWanFontLoad+0x6a>
 8002dee:	2f10      	cmp	r7, #16
 8002df0:	d005      	beq.n	8002dfe <hanWanFontLoad+0x66>
 8002df2:	2501      	movs	r5, #1
 8002df4:	e006      	b.n	8002e04 <hanWanFontLoad+0x6c>
  uChoType = uJongsung ? ChoTypeCaseJongYes[uJoongsung]:ChoTypeCaseJongNo [uJoongsung];
 8002df6:	4b2e      	ldr	r3, [pc, #184]	@ (8002eb0 <hanWanFontLoad+0x118>)
 8002df8:	f813 e006 	ldrb.w	lr, [r3, r6]
 8002dfc:	e7f2      	b.n	8002de4 <hanWanFontLoad+0x4c>
  uJooType = ((uChosung == 0 || uChosung == 1 ||uChosung == 16 ) ? 0: 1) + (uJongsung ? 2: 0);
 8002dfe:	2500      	movs	r5, #0
 8002e00:	e000      	b.n	8002e04 <hanWanFontLoad+0x6c>
 8002e02:	2500      	movs	r5, #0
 8002e04:	b2ad      	uxth	r5, r5
 8002e06:	f1b9 0f00 	cmp.w	r9, #0
 8002e0a:	d00b      	beq.n	8002e24 <hanWanFontLoad+0x8c>
 8002e0c:	2302      	movs	r3, #2
 8002e0e:	441d      	add	r5, r3
 8002e10:	4b28      	ldr	r3, [pc, #160]	@ (8002eb4 <hanWanFontLoad+0x11c>)
 8002e12:	801d      	strh	r5, [r3, #0]
  uJonType = JonType[uJoongsung];
 8002e14:	4b28      	ldr	r3, [pc, #160]	@ (8002eb8 <hanWanFontLoad+0x120>)
 8002e16:	f813 8006 	ldrb.w	r8, [r3, r6]
 8002e1a:	4b28      	ldr	r3, [pc, #160]	@ (8002ebc <hanWanFontLoad+0x124>)
 8002e1c:	f8a3 8000 	strh.w	r8, [r3]
  for(i = 0; i<32; i++)
 8002e20:	2300      	movs	r3, #0
 8002e22:	e01a      	b.n	8002e5a <hanWanFontLoad+0xc2>
  uJooType = ((uChosung == 0 || uChosung == 1 ||uChosung == 16 ) ? 0: 1) + (uJongsung ? 2: 0);
 8002e24:	464b      	mov	r3, r9
 8002e26:	e7f2      	b.n	8002e0e <hanWanFontLoad+0x76>
    FontPtr->FontBuffer[i]  = K_font[uChoType*20+uChosung][i];
 8002e28:	eb0e 028e 	add.w	r2, lr, lr, lsl #2
 8002e2c:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 8002e30:	4923      	ldr	r1, [pc, #140]	@ (8002ec0 <hanWanFontLoad+0x128>)
 8002e32:	eb01 1242 	add.w	r2, r1, r2, lsl #5
 8002e36:	5cd0      	ldrb	r0, [r2, r3]
 8002e38:	eb04 0c03 	add.w	ip, r4, r3
 8002e3c:	f88c 0006 	strb.w	r0, [ip, #6]
    FontPtr->FontBuffer[i] |= K_font[160 + uJooType*22+uJoongsung][i];
 8002e40:	2216      	movs	r2, #22
 8002e42:	fb05 f202 	mul.w	r2, r5, r2
 8002e46:	32a0      	adds	r2, #160	@ 0xa0
 8002e48:	4432      	add	r2, r6
 8002e4a:	eb01 1142 	add.w	r1, r1, r2, lsl #5
 8002e4e:	5cca      	ldrb	r2, [r1, r3]
 8002e50:	4310      	orrs	r0, r2
 8002e52:	f88c 0006 	strb.w	r0, [ip, #6]
  for(i = 0; i<32; i++)
 8002e56:	3301      	adds	r3, #1
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	2b1f      	cmp	r3, #31
 8002e5c:	d9e4      	bls.n	8002e28 <hanWanFontLoad+0x90>
  if(uJongsung)
 8002e5e:	f1b9 0f00 	cmp.w	r9, #0
 8002e62:	d101      	bne.n	8002e68 <hanWanFontLoad+0xd0>
}
 8002e64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    for(i = 0; i < 32; i++)   FontPtr->FontBuffer[i] |= K_font[248 + uJonType*28+uJongsung][i];
 8002e68:	2200      	movs	r2, #0
 8002e6a:	2a1f      	cmp	r2, #31
 8002e6c:	d8fa      	bhi.n	8002e64 <hanWanFontLoad+0xcc>
 8002e6e:	18a5      	adds	r5, r4, r2
 8002e70:	79a9      	ldrb	r1, [r5, #6]
 8002e72:	ebc8 03c8 	rsb	r3, r8, r8, lsl #3
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	33f8      	adds	r3, #248	@ 0xf8
 8002e7a:	444b      	add	r3, r9
 8002e7c:	4810      	ldr	r0, [pc, #64]	@ (8002ec0 <hanWanFontLoad+0x128>)
 8002e7e:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8002e82:	5c9b      	ldrb	r3, [r3, r2]
 8002e84:	430b      	orrs	r3, r1
 8002e86:	71ab      	strb	r3, [r5, #6]
 8002e88:	3201      	adds	r2, #1
 8002e8a:	b292      	uxth	r2, r2
 8002e8c:	e7ed      	b.n	8002e6a <hanWanFontLoad+0xd2>
 8002e8e:	bf00      	nop
 8002e90:	20004c7c 	.word	0x20004c7c
 8002e94:	20004c7a 	.word	0x20004c7a
 8002e98:	20004c78 	.word	0x20004c78
 8002e9c:	08012e04 	.word	0x08012e04
 8002ea0:	08012de4 	.word	0x08012de4
 8002ea4:	08012dc4 	.word	0x08012dc4
 8002ea8:	08012d34 	.word	0x08012d34
 8002eac:	20004c76 	.word	0x20004c76
 8002eb0:	08012d4c 	.word	0x08012d4c
 8002eb4:	20004c74 	.word	0x20004c74
 8002eb8:	08012d1c 	.word	0x08012d1c
 8002ebc:	20004c72 	.word	0x20004c72
 8002ec0:	0800edc0 	.word	0x0800edc0

08002ec4 <hanFontLoad>:
{
 8002ec4:	b570      	push	{r4, r5, r6, lr}
 8002ec6:	4605      	mov	r5, r0
 8002ec8:	460c      	mov	r4, r1
  memset(FontPtr->FontBuffer, 0x00, 32);
 8002eca:	2220      	movs	r2, #32
 8002ecc:	2100      	movs	r1, #0
 8002ece:	1da0      	adds	r0, r4, #6
 8002ed0:	f008 fa00 	bl	800b2d4 <memset>
  FontPtr->Code_Type = PHAN_NULL_CODE;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	80a3      	strh	r3, [r4, #4]
  if( !HanCode[0] || HanCode[0] == 0x0A )   // 문자열 마지막
 8002ed8:	782b      	ldrb	r3, [r5, #0]
 8002eda:	b1cb      	cbz	r3, 8002f10 <hanFontLoad+0x4c>
 8002edc:	2b0a      	cmp	r3, #10
 8002ede:	d017      	beq.n	8002f10 <hanFontLoad+0x4c>
  else if( HanCode[0] & 0x80 )              // 한글 코드인경우
 8002ee0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002ee4:	d022      	beq.n	8002f2c <hanFontLoad+0x68>
    utf8_code = ((uint8_t)HanCode[0]<<16) | ((uint8_t)HanCode[1]<<8) | ((uint8_t)HanCode[2]<<0);
 8002ee6:	786a      	ldrb	r2, [r5, #1]
 8002ee8:	0212      	lsls	r2, r2, #8
 8002eea:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8002eee:	78aa      	ldrb	r2, [r5, #2]
 8002ef0:	4313      	orrs	r3, r2
    if (utf8_code >= 0xEAB080 && utf8_code <= 0xED9FB0)
 8002ef2:	4a13      	ldr	r2, [pc, #76]	@ (8002f40 <hanFontLoad+0x7c>)
 8002ef4:	441a      	add	r2, r3
 8002ef6:	4b13      	ldr	r3, [pc, #76]	@ (8002f44 <hanFontLoad+0x80>)
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d80e      	bhi.n	8002f1a <hanFontLoad+0x56>
      FontPtr->Code_Type = PHAN_HANGUL_CODE;
 8002efc:	2301      	movs	r3, #1
 8002efe:	80a3      	strh	r3, [r4, #4]
      FontPtr->Size_Char = 3;
 8002f00:	2303      	movs	r3, #3
 8002f02:	8063      	strh	r3, [r4, #2]
      hanUniFontLoad(HanCode, FontPtr);
 8002f04:	4621      	mov	r1, r4
 8002f06:	4628      	mov	r0, r5
 8002f08:	f7ff fe6c 	bl	8002be4 <hanUniFontLoad>
    return PHAN_HANGUL_CODE;
 8002f0c:	2001      	movs	r0, #1
}
 8002f0e:	bd70      	pop	{r4, r5, r6, pc}
    FontPtr->Code_Type = PHAN_END_CODE;
 8002f10:	2004      	movs	r0, #4
 8002f12:	80a0      	strh	r0, [r4, #4]
    FontPtr->Size_Char = 1;
 8002f14:	2301      	movs	r3, #1
 8002f16:	8063      	strh	r3, [r4, #2]
    return PHAN_END_CODE;
 8002f18:	e7f9      	b.n	8002f0e <hanFontLoad+0x4a>
      FontPtr->Code_Type = PHAN_HANGUL_CODE;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	80a3      	strh	r3, [r4, #4]
      FontPtr->Size_Char = 2;
 8002f1e:	2302      	movs	r3, #2
 8002f20:	8063      	strh	r3, [r4, #2]
      hanWanFontLoad(HanCode, FontPtr );
 8002f22:	4621      	mov	r1, r4
 8002f24:	4628      	mov	r0, r5
 8002f26:	f7ff ff37 	bl	8002d98 <hanWanFontLoad>
 8002f2a:	e7ef      	b.n	8002f0c <hanFontLoad+0x48>
    FontPtr->Code_Type = PHAN_ENG_CODE;
 8002f2c:	2602      	movs	r6, #2
 8002f2e:	80a6      	strh	r6, [r4, #4]
    FontPtr->Size_Char = 1;
 8002f30:	2301      	movs	r3, #1
 8002f32:	8063      	strh	r3, [r4, #2]
    hanEngFontLoad(HanCode, FontPtr);
 8002f34:	4621      	mov	r1, r4
 8002f36:	4628      	mov	r0, r5
 8002f38:	f7ff ff0a 	bl	8002d50 <hanEngFontLoad>
    return PHAN_ENG_CODE;
 8002f3c:	4630      	mov	r0, r6
 8002f3e:	e7e6      	b.n	8002f0e <hanFontLoad+0x4a>
 8002f40:	ff154f80 	.word	0xff154f80
 8002f44:	0002ef30 	.word	0x0002ef30

08002f48 <ssd1306SetWindow>:
  return true;
}

void ssd1306SetWindow(int32_t x0, int32_t y0, int32_t x1, int32_t y1)
{
}
 8002f48:	4770      	bx	lr

08002f4a <ssd1306GetWidth>:

uint16_t ssd1306GetWidth(void)
{
  return LCD_WIDTH;
}
 8002f4a:	2080      	movs	r0, #128	@ 0x80
 8002f4c:	4770      	bx	lr

08002f4e <ssd1306GetHeight>:

uint16_t ssd1306GetHeight(void)
{
  return LCD_HEIGHT;
}
 8002f4e:	2040      	movs	r0, #64	@ 0x40
 8002f50:	4770      	bx	lr
	...

08002f54 <ssd1306SetCallBack>:
  return true;
}

bool ssd1306SetCallBack(void (*p_func)(void))
{
  frameCallBack = p_func;
 8002f54:	4b01      	ldr	r3, [pc, #4]	@ (8002f5c <ssd1306SetCallBack+0x8>)
 8002f56:	6018      	str	r0, [r3, #0]

  return true;
}
 8002f58:	2001      	movs	r0, #1
 8002f5a:	4770      	bx	lr
 8002f5c:	20005080 	.word	0x20005080

08002f60 <ssd1306Fill>:

void ssd1306Fill(uint16_t color)
{
  uint32_t i;

  for(i = 0; i < sizeof(ssd1306_buffer); i++)
 8002f60:	2300      	movs	r3, #0
 8002f62:	e003      	b.n	8002f6c <ssd1306Fill+0xc>
  {
    ssd1306_buffer[i] = (color > 0) ? 0xFF : 0x00;
 8002f64:	2100      	movs	r1, #0
 8002f66:	4a05      	ldr	r2, [pc, #20]	@ (8002f7c <ssd1306Fill+0x1c>)
 8002f68:	54d1      	strb	r1, [r2, r3]
  for(i = 0; i < sizeof(ssd1306_buffer); i++)
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f70:	d203      	bcs.n	8002f7a <ssd1306Fill+0x1a>
    ssd1306_buffer[i] = (color > 0) ? 0xFF : 0x00;
 8002f72:	2800      	cmp	r0, #0
 8002f74:	d0f6      	beq.n	8002f64 <ssd1306Fill+0x4>
 8002f76:	21ff      	movs	r1, #255	@ 0xff
 8002f78:	e7f5      	b.n	8002f66 <ssd1306Fill+0x6>
  }
}
 8002f7a:	4770      	bx	lr
 8002f7c:	20004c80 	.word	0x20004c80

08002f80 <ssd1306DrawPixel>:
  return true;
}

void ssd1306DrawPixel(uint8_t x, uint8_t y, uint16_t color)
{
  if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8002f80:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8002f84:	d11f      	bne.n	8002fc6 <ssd1306DrawPixel+0x46>
 8002f86:	293f      	cmp	r1, #63	@ 0x3f
 8002f88:	d81d      	bhi.n	8002fc6 <ssd1306DrawPixel+0x46>
{
 8002f8a:	b410      	push	{r4}
  {
    return;
  }


  if (color > 0)
 8002f8c:	b16a      	cbz	r2, 8002faa <ssd1306DrawPixel+0x2a>
  {
    ssd1306_buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002f8e:	08cb      	lsrs	r3, r1, #3
 8002f90:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 8002f94:	4c0c      	ldr	r4, [pc, #48]	@ (8002fc8 <ssd1306DrawPixel+0x48>)
 8002f96:	5c23      	ldrb	r3, [r4, r0]
 8002f98:	f001 0107 	and.w	r1, r1, #7
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	408a      	lsls	r2, r1
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	5423      	strb	r3, [r4, r0]
  }
  else
  {
    ssd1306_buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
  }
}
 8002fa4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002fa8:	4770      	bx	lr
    ssd1306_buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002faa:	08cb      	lsrs	r3, r1, #3
 8002fac:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 8002fb0:	4c05      	ldr	r4, [pc, #20]	@ (8002fc8 <ssd1306DrawPixel+0x48>)
 8002fb2:	5c22      	ldrb	r2, [r4, r0]
 8002fb4:	f001 0107 	and.w	r1, r1, #7
 8002fb8:	2301      	movs	r3, #1
 8002fba:	408b      	lsls	r3, r1
 8002fbc:	43db      	mvns	r3, r3
 8002fbe:	b25b      	sxtb	r3, r3
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	5423      	strb	r3, [r4, r0]
 8002fc4:	e7ee      	b.n	8002fa4 <ssd1306DrawPixel+0x24>
 8002fc6:	4770      	bx	lr
 8002fc8:	20004c80 	.word	0x20004c80

08002fcc <ssd1306InitDriver>:
  p_driver->init        = ssd1306Init;
 8002fcc:	4b07      	ldr	r3, [pc, #28]	@ (8002fec <ssd1306InitDriver+0x20>)
 8002fce:	6003      	str	r3, [r0, #0]
  p_driver->reset       = ssd1306Reset;
 8002fd0:	4b07      	ldr	r3, [pc, #28]	@ (8002ff0 <ssd1306InitDriver+0x24>)
 8002fd2:	6043      	str	r3, [r0, #4]
  p_driver->setWindow   = ssd1306SetWindow;
 8002fd4:	4b07      	ldr	r3, [pc, #28]	@ (8002ff4 <ssd1306InitDriver+0x28>)
 8002fd6:	6083      	str	r3, [r0, #8]
  p_driver->getWidth    = ssd1306GetWidth;
 8002fd8:	4b07      	ldr	r3, [pc, #28]	@ (8002ff8 <ssd1306InitDriver+0x2c>)
 8002fda:	6103      	str	r3, [r0, #16]
  p_driver->getHeight   = ssd1306GetHeight;
 8002fdc:	4b07      	ldr	r3, [pc, #28]	@ (8002ffc <ssd1306InitDriver+0x30>)
 8002fde:	6143      	str	r3, [r0, #20]
  p_driver->setCallBack = ssd1306SetCallBack;
 8002fe0:	4b07      	ldr	r3, [pc, #28]	@ (8003000 <ssd1306InitDriver+0x34>)
 8002fe2:	6183      	str	r3, [r0, #24]
  p_driver->sendBuffer  = ssd1306SendBuffer;
 8002fe4:	4b07      	ldr	r3, [pc, #28]	@ (8003004 <ssd1306InitDriver+0x38>)
 8002fe6:	61c3      	str	r3, [r0, #28]
}
 8002fe8:	2001      	movs	r0, #1
 8002fea:	4770      	bx	lr
 8002fec:	08003193 	.word	0x08003193
 8002ff0:	080030b1 	.word	0x080030b1
 8002ff4:	08002f49 	.word	0x08002f49
 8002ff8:	08002f4b 	.word	0x08002f4b
 8002ffc:	08002f4f 	.word	0x08002f4f
 8003000:	08002f55 	.word	0x08002f55
 8003004:	08003075 	.word	0x08003075

08003008 <ssd1306WriteCmd>:
{
 8003008:	b500      	push	{lr}
 800300a:	b083      	sub	sp, #12
 800300c:	4603      	mov	r3, r0
  return i2cWriteByte(i2c_ch, i2c_dev, 0x00, cmd_data, 10);
 800300e:	220a      	movs	r2, #10
 8003010:	9200      	str	r2, [sp, #0]
 8003012:	2200      	movs	r2, #0
 8003014:	213c      	movs	r1, #60	@ 0x3c
 8003016:	4610      	mov	r0, r2
 8003018:	f7ff f836 	bl	8002088 <i2cWriteByte>
}
 800301c:	b003      	add	sp, #12
 800301e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08003024 <ssd1306UpdateDraw>:
{
 8003024:	b510      	push	{r4, lr}
 8003026:	b082      	sub	sp, #8
  for (i = 0; i < SSD1306_HEIGHT/8; i++)
 8003028:	2400      	movs	r4, #0
 800302a:	2c07      	cmp	r4, #7
 800302c:	d81b      	bhi.n	8003066 <ssd1306UpdateDraw+0x42>
    ssd1306WriteCmd(0xB0 + i);
 800302e:	f1a4 0050 	sub.w	r0, r4, #80	@ 0x50
 8003032:	b2c0      	uxtb	r0, r0
 8003034:	f7ff ffe8 	bl	8003008 <ssd1306WriteCmd>
    ssd1306WriteCmd(0x00);
 8003038:	2000      	movs	r0, #0
 800303a:	f7ff ffe5 	bl	8003008 <ssd1306WriteCmd>
    ssd1306WriteCmd(0x10);
 800303e:	2010      	movs	r0, #16
 8003040:	f7ff ffe2 	bl	8003008 <ssd1306WriteCmd>
    if (i2cWriteBytes(i2c_ch, i2c_dev, 0x40, &ssd1306_buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100) == false)
 8003044:	2364      	movs	r3, #100	@ 0x64
 8003046:	9301      	str	r3, [sp, #4]
 8003048:	2380      	movs	r3, #128	@ 0x80
 800304a:	9300      	str	r3, [sp, #0]
 800304c:	4b08      	ldr	r3, [pc, #32]	@ (8003070 <ssd1306UpdateDraw+0x4c>)
 800304e:	eb03 13c4 	add.w	r3, r3, r4, lsl #7
 8003052:	2240      	movs	r2, #64	@ 0x40
 8003054:	213c      	movs	r1, #60	@ 0x3c
 8003056:	2000      	movs	r0, #0
 8003058:	f7fe fff8 	bl	800204c <i2cWriteBytes>
 800305c:	4603      	mov	r3, r0
 800305e:	b118      	cbz	r0, 8003068 <ssd1306UpdateDraw+0x44>
  for (i = 0; i < SSD1306_HEIGHT/8; i++)
 8003060:	3401      	adds	r4, #1
 8003062:	b2e4      	uxtb	r4, r4
 8003064:	e7e1      	b.n	800302a <ssd1306UpdateDraw+0x6>
  return true;
 8003066:	2301      	movs	r3, #1
}
 8003068:	4618      	mov	r0, r3
 800306a:	b002      	add	sp, #8
 800306c:	bd10      	pop	{r4, pc}
 800306e:	bf00      	nop
 8003070:	20004c80 	.word	0x20004c80

08003074 <ssd1306SendBuffer>:
{
 8003074:	b570      	push	{r4, r5, r6, lr}
 8003076:	4606      	mov	r6, r0
  for (int y=0; y<SSD1306_HEIGHT; y++)
 8003078:	2500      	movs	r5, #0
 800307a:	e00b      	b.n	8003094 <ssd1306SendBuffer+0x20>
      ssd1306DrawPixel(x, y, p_buf[y*LCD_WIDTH + x]);
 800307c:	eb04 13c5 	add.w	r3, r4, r5, lsl #7
 8003080:	f836 2013 	ldrh.w	r2, [r6, r3, lsl #1]
 8003084:	b2e9      	uxtb	r1, r5
 8003086:	b2e0      	uxtb	r0, r4
 8003088:	f7ff ff7a 	bl	8002f80 <ssd1306DrawPixel>
    for (int x=0; x<SSD1306_WIDTH; x++)
 800308c:	3401      	adds	r4, #1
 800308e:	2c7f      	cmp	r4, #127	@ 0x7f
 8003090:	ddf4      	ble.n	800307c <ssd1306SendBuffer+0x8>
  for (int y=0; y<SSD1306_HEIGHT; y++)
 8003092:	3501      	adds	r5, #1
 8003094:	2d3f      	cmp	r5, #63	@ 0x3f
 8003096:	dc01      	bgt.n	800309c <ssd1306SendBuffer+0x28>
    for (int x=0; x<SSD1306_WIDTH; x++)
 8003098:	2400      	movs	r4, #0
 800309a:	e7f8      	b.n	800308e <ssd1306SendBuffer+0x1a>
  ssd1306UpdateDraw();
 800309c:	f7ff ffc2 	bl	8003024 <ssd1306UpdateDraw>
  if (frameCallBack != NULL)
 80030a0:	4b02      	ldr	r3, [pc, #8]	@ (80030ac <ssd1306SendBuffer+0x38>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	b103      	cbz	r3, 80030a8 <ssd1306SendBuffer+0x34>
    frameCallBack();
 80030a6:	4798      	blx	r3
}
 80030a8:	2001      	movs	r0, #1
 80030aa:	bd70      	pop	{r4, r5, r6, pc}
 80030ac:	20005080 	.word	0x20005080

080030b0 <ssd1306Reset>:
{
 80030b0:	b510      	push	{r4, lr}
  ret = i2cBegin(i2c_ch, 800);
 80030b2:	f44f 7148 	mov.w	r1, #800	@ 0x320
 80030b6:	2000      	movs	r0, #0
 80030b8:	f7fe ffb2 	bl	8002020 <i2cBegin>
  if (ret != true)
 80030bc:	4604      	mov	r4, r0
 80030be:	b908      	cbnz	r0, 80030c4 <ssd1306Reset+0x14>
}
 80030c0:	4620      	mov	r0, r4
 80030c2:	bd10      	pop	{r4, pc}
  if (i2cIsDeviceReady(i2c_ch, i2c_dev) != true)
 80030c4:	213c      	movs	r1, #60	@ 0x3c
 80030c6:	2000      	movs	r0, #0
 80030c8:	f7fe ffac 	bl	8002024 <i2cIsDeviceReady>
 80030cc:	4604      	mov	r4, r0
 80030ce:	2800      	cmp	r0, #0
 80030d0:	d0f6      	beq.n	80030c0 <ssd1306Reset+0x10>
  ssd1306WriteCmd(0xAE); //display off
 80030d2:	20ae      	movs	r0, #174	@ 0xae
 80030d4:	f7ff ff98 	bl	8003008 <ssd1306WriteCmd>
  ssd1306WriteCmd(0x20); //Set Memory Addressing Mode
 80030d8:	2020      	movs	r0, #32
 80030da:	f7ff ff95 	bl	8003008 <ssd1306WriteCmd>
  ssd1306WriteCmd(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80030de:	2010      	movs	r0, #16
 80030e0:	f7ff ff92 	bl	8003008 <ssd1306WriteCmd>
  ssd1306WriteCmd(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80030e4:	20b0      	movs	r0, #176	@ 0xb0
 80030e6:	f7ff ff8f 	bl	8003008 <ssd1306WriteCmd>
  ssd1306WriteCmd(0xC8); //Set COM Output Scan Direction
 80030ea:	20c8      	movs	r0, #200	@ 0xc8
 80030ec:	f7ff ff8c 	bl	8003008 <ssd1306WriteCmd>
  ssd1306WriteCmd(0x00); //---set low column address
 80030f0:	2000      	movs	r0, #0
 80030f2:	f7ff ff89 	bl	8003008 <ssd1306WriteCmd>
  ssd1306WriteCmd(0x10); //---set high column address
 80030f6:	2010      	movs	r0, #16
 80030f8:	f7ff ff86 	bl	8003008 <ssd1306WriteCmd>
  ssd1306WriteCmd(0x40); //--set start line address
 80030fc:	2040      	movs	r0, #64	@ 0x40
 80030fe:	f7ff ff83 	bl	8003008 <ssd1306WriteCmd>
  ssd1306WriteCmd(0x81); //--set contrast control register
 8003102:	2081      	movs	r0, #129	@ 0x81
 8003104:	f7ff ff80 	bl	8003008 <ssd1306WriteCmd>
  ssd1306WriteCmd(0xFF);
 8003108:	20ff      	movs	r0, #255	@ 0xff
 800310a:	f7ff ff7d 	bl	8003008 <ssd1306WriteCmd>
  ssd1306WriteCmd(0xA1); //--set segment re-map 0 to 127
 800310e:	20a1      	movs	r0, #161	@ 0xa1
 8003110:	f7ff ff7a 	bl	8003008 <ssd1306WriteCmd>
  ssd1306WriteCmd(0xA6); //--set normal display
 8003114:	20a6      	movs	r0, #166	@ 0xa6
 8003116:	f7ff ff77 	bl	8003008 <ssd1306WriteCmd>
  ssd1306WriteCmd(0xA8); //--set multiplex ratio(1 to 64)
 800311a:	20a8      	movs	r0, #168	@ 0xa8
 800311c:	f7ff ff74 	bl	8003008 <ssd1306WriteCmd>
  ssd1306WriteCmd(SSD1306_HEIGHT-1); // 0x3F
 8003120:	203f      	movs	r0, #63	@ 0x3f
 8003122:	f7ff ff71 	bl	8003008 <ssd1306WriteCmd>
  ssd1306WriteCmd(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8003126:	20a4      	movs	r0, #164	@ 0xa4
 8003128:	f7ff ff6e 	bl	8003008 <ssd1306WriteCmd>
  ssd1306WriteCmd(0xD3); //-set display offset
 800312c:	20d3      	movs	r0, #211	@ 0xd3
 800312e:	f7ff ff6b 	bl	8003008 <ssd1306WriteCmd>
  ssd1306WriteCmd(0x00); //-not offset
 8003132:	2000      	movs	r0, #0
 8003134:	f7ff ff68 	bl	8003008 <ssd1306WriteCmd>
  ssd1306WriteCmd(0xD5); //--set display clock divide ratio/oscillator frequency
 8003138:	20d5      	movs	r0, #213	@ 0xd5
 800313a:	f7ff ff65 	bl	8003008 <ssd1306WriteCmd>
  ssd1306WriteCmd(0x80); //--set divide ratio
 800313e:	2080      	movs	r0, #128	@ 0x80
 8003140:	f7ff ff62 	bl	8003008 <ssd1306WriteCmd>
  ssd1306WriteCmd(0xD9); //--set pre-charge period
 8003144:	20d9      	movs	r0, #217	@ 0xd9
 8003146:	f7ff ff5f 	bl	8003008 <ssd1306WriteCmd>
  ssd1306WriteCmd(0x22); //
 800314a:	2022      	movs	r0, #34	@ 0x22
 800314c:	f7ff ff5c 	bl	8003008 <ssd1306WriteCmd>
  ssd1306WriteCmd(0xDA); //--set com pins hardware configuration
 8003150:	20da      	movs	r0, #218	@ 0xda
 8003152:	f7ff ff59 	bl	8003008 <ssd1306WriteCmd>
  ssd1306WriteCmd(0x12);
 8003156:	2012      	movs	r0, #18
 8003158:	f7ff ff56 	bl	8003008 <ssd1306WriteCmd>
  ssd1306WriteCmd(0xDB); //--set vcomh
 800315c:	20db      	movs	r0, #219	@ 0xdb
 800315e:	f7ff ff53 	bl	8003008 <ssd1306WriteCmd>
  ssd1306WriteCmd(0x20); //0x20,0.77xVcc
 8003162:	2020      	movs	r0, #32
 8003164:	f7ff ff50 	bl	8003008 <ssd1306WriteCmd>
  ssd1306WriteCmd(0x8D); //--set DC-DC enable
 8003168:	208d      	movs	r0, #141	@ 0x8d
 800316a:	f7ff ff4d 	bl	8003008 <ssd1306WriteCmd>
  ssd1306WriteCmd(0x14); //
 800316e:	2014      	movs	r0, #20
 8003170:	f7ff ff4a 	bl	8003008 <ssd1306WriteCmd>
  ssd1306WriteCmd(SSD1306_SEGREMAP | 0x01); // 정방향
 8003174:	20a1      	movs	r0, #161	@ 0xa1
 8003176:	f7ff ff47 	bl	8003008 <ssd1306WriteCmd>
  ssd1306WriteCmd(SSD1306_COMSCANDEC);
 800317a:	20c8      	movs	r0, #200	@ 0xc8
 800317c:	f7ff ff44 	bl	8003008 <ssd1306WriteCmd>
  ssd1306WriteCmd(0xAF); //--turn on SSD1306 panel
 8003180:	20af      	movs	r0, #175	@ 0xaf
 8003182:	f7ff ff41 	bl	8003008 <ssd1306WriteCmd>
  ssd1306Fill(black);
 8003186:	2000      	movs	r0, #0
 8003188:	f7ff feea 	bl	8002f60 <ssd1306Fill>
  ssd1306UpdateDraw();
 800318c:	f7ff ff4a 	bl	8003024 <ssd1306UpdateDraw>
  return true;
 8003190:	e796      	b.n	80030c0 <ssd1306Reset+0x10>

08003192 <ssd1306Init>:
{
 8003192:	b508      	push	{r3, lr}
  ret = ssd1306Reset();
 8003194:	f7ff ff8c 	bl	80030b0 <ssd1306Reset>
}
 8003198:	bd08      	pop	{r3, pc}
	...

0800319c <hwInit>:


#include "hw.h"

void hwInit(void)
{
 800319c:	b510      	push	{r4, lr}
  bspInit();
 800319e:	f7fe fe1b 	bl	8001dd8 <bspInit>

  cliInit();
 80031a2:	f000 fd3b 	bl	8003c1c <cliInit>
  logInit();
 80031a6:	f000 ffa1 	bl	80040ec <logInit>
  uartInit();
 80031aa:	f7ff faa5 	bl	80026f8 <uartInit>
  i2cInit();
 80031ae:	f7fe ff17 	bl	8001fe0 <i2cInit>
  lcdInit();
 80031b2:	f7ff f969 	bl	8002488 <lcdInit>
  dacInit();
 80031b6:	f7fe fef7 	bl	8001fa8 <dacInit>
  adcInit();
 80031ba:	f7fe feb1 	bl	8001f20 <adcInit>

  for (int i=0; i<HW_UART_MAX_CH; i++)
 80031be:	2400      	movs	r4, #0
 80031c0:	e005      	b.n	80031ce <hwInit+0x32>
  {
    uartOpen(i, 115200);
 80031c2:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 80031c6:	b2e0      	uxtb	r0, r4
 80031c8:	f7ff fac2 	bl	8002750 <uartOpen>
  for (int i=0; i<HW_UART_MAX_CH; i++)
 80031cc:	3401      	adds	r4, #1
 80031ce:	2c01      	cmp	r4, #1
 80031d0:	ddf7      	ble.n	80031c2 <hwInit+0x26>
  }
  uartOpen(_DEF_CH2, 256000);
 80031d2:	f44f 317a 	mov.w	r1, #256000	@ 0x3e800
 80031d6:	2001      	movs	r0, #1
 80031d8:	f7ff faba 	bl	8002750 <uartOpen>

  logOpen(HW_LOG_CH, 115200);
 80031dc:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 80031e0:	2000      	movs	r0, #0
 80031e2:	f000 ff89 	bl	80040f8 <logOpen>
  logDebug("\r\n[ Firmware Begin... ]\r\n");
 80031e6:	480d      	ldr	r0, [pc, #52]	@ (800321c <hwInit+0x80>)
 80031e8:	f000 ff98 	bl	800411c <logPrintf>
  logDebug("Booting..Name \t\t: %s\r\n", _DEF_BOARD_NAME);
 80031ec:	490c      	ldr	r1, [pc, #48]	@ (8003220 <hwInit+0x84>)
 80031ee:	480d      	ldr	r0, [pc, #52]	@ (8003224 <hwInit+0x88>)
 80031f0:	f000 ff94 	bl	800411c <logPrintf>
  logDebug("Booting..Ver  \t\t: %s\r\n", _DEF_FIRMWATRE_VERSION);
 80031f4:	490c      	ldr	r1, [pc, #48]	@ (8003228 <hwInit+0x8c>)
 80031f6:	480d      	ldr	r0, [pc, #52]	@ (800322c <hwInit+0x90>)
 80031f8:	f000 ff90 	bl	800411c <logPrintf>
  logDebug("Booting..Clock\t\t: %d Mhz\r\n", (int)HAL_RCC_GetSysClockFreq() / 1000000);
 80031fc:	f004 f9c6 	bl	800758c <HAL_RCC_GetSysClockFreq>
 8003200:	490b      	ldr	r1, [pc, #44]	@ (8003230 <hwInit+0x94>)
 8003202:	fb81 3100 	smull	r3, r1, r1, r0
 8003206:	17c0      	asrs	r0, r0, #31
 8003208:	ebc0 41a1 	rsb	r1, r0, r1, asr #18
 800320c:	4809      	ldr	r0, [pc, #36]	@ (8003234 <hwInit+0x98>)
 800320e:	f000 ff85 	bl	800411c <logPrintf>
  logDebug("\n");
 8003212:	4809      	ldr	r0, [pc, #36]	@ (8003238 <hwInit+0x9c>)
 8003214:	f000 ff82 	bl	800411c <logPrintf>
}
 8003218:	bd10      	pop	{r4, pc}
 800321a:	bf00      	nop
 800321c:	08015c38 	.word	0x08015c38
 8003220:	08015c54 	.word	0x08015c54
 8003224:	08015c64 	.word	0x08015c64
 8003228:	08015c7c 	.word	0x08015c7c
 800322c:	08015c88 	.word	0x08015c88
 8003230:	431bde83 	.word	0x431bde83
 8003234:	08015ca0 	.word	0x08015ca0
 8003238:	08015c50 	.word	0x08015c50

0800323c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800323c:	b510      	push	{r4, lr}
 800323e:	b08c      	sub	sp, #48	@ 0x30

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8003240:	2400      	movs	r4, #0
 8003242:	9409      	str	r4, [sp, #36]	@ 0x24
 8003244:	940a      	str	r4, [sp, #40]	@ 0x28
 8003246:	940b      	str	r4, [sp, #44]	@ 0x2c
  ADC_ChannelConfTypeDef sConfig = {0};
 8003248:	2220      	movs	r2, #32
 800324a:	4621      	mov	r1, r4
 800324c:	a801      	add	r0, sp, #4
 800324e:	f008 f841 	bl	800b2d4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8003252:	483f      	ldr	r0, [pc, #252]	@ (8003350 <MX_ADC1_Init+0x114>)
 8003254:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003258:	6003      	str	r3, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800325a:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 800325e:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003260:	6084      	str	r4, [r0, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003262:	60c4      	str	r4, [r0, #12]
  hadc1.Init.GainCompensation = 0;
 8003264:	6104      	str	r4, [r0, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003266:	2301      	movs	r3, #1
 8003268:	6143      	str	r3, [r0, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800326a:	2204      	movs	r2, #4
 800326c:	6182      	str	r2, [r0, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800326e:	7704      	strb	r4, [r0, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003270:	7744      	strb	r4, [r0, #29]
  hadc1.Init.NbrOfConversion = 5;
 8003272:	2205      	movs	r2, #5
 8003274:	6202      	str	r2, [r0, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003276:	f880 4024 	strb.w	r4, [r0, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T8_TRGO;
 800327a:	f44f 629c 	mov.w	r2, #1248	@ 0x4e0
 800327e:	62c2      	str	r2, [r0, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8003280:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003284:	6302      	str	r2, [r0, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003286:	f880 4038 	strb.w	r4, [r0, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800328a:	63c4      	str	r4, [r0, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = ENABLE;
 800328c:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_8;
 8003290:	2208      	movs	r2, #8
 8003292:	6442      	str	r2, [r0, #68]	@ 0x44
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_3;
 8003294:	2260      	movs	r2, #96	@ 0x60
 8003296:	6482      	str	r2, [r0, #72]	@ 0x48
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8003298:	64c4      	str	r4, [r0, #76]	@ 0x4c
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 800329a:	6503      	str	r3, [r0, #80]	@ 0x50
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800329c:	f001 fc6c 	bl	8004b78 <HAL_ADC_Init>
 80032a0:	2800      	cmp	r0, #0
 80032a2:	d140      	bne.n	8003326 <MX_ADC1_Init+0xea>
    Error_Handler();
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80032a4:	2300      	movs	r3, #0
 80032a6:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80032a8:	a909      	add	r1, sp, #36	@ 0x24
 80032aa:	4829      	ldr	r0, [pc, #164]	@ (8003350 <MX_ADC1_Init+0x114>)
 80032ac:	f002 fb84 	bl	80059b8 <HAL_ADCEx_MultiModeConfigChannel>
 80032b0:	2800      	cmp	r0, #0
 80032b2:	d13b      	bne.n	800332c <MX_ADC1_Init+0xf0>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80032b4:	4b27      	ldr	r3, [pc, #156]	@ (8003354 <MX_ADC1_Init+0x118>)
 80032b6:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80032b8:	2306      	movs	r3, #6
 80032ba:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 80032bc:	2305      	movs	r3, #5
 80032be:	9303      	str	r3, [sp, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80032c0:	237f      	movs	r3, #127	@ 0x7f
 80032c2:	9304      	str	r3, [sp, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80032c4:	2304      	movs	r3, #4
 80032c6:	9305      	str	r3, [sp, #20]
  sConfig.Offset = 0;
 80032c8:	2300      	movs	r3, #0
 80032ca:	9306      	str	r3, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80032cc:	a901      	add	r1, sp, #4
 80032ce:	4820      	ldr	r0, [pc, #128]	@ (8003350 <MX_ADC1_Init+0x114>)
 80032d0:	f001 ff1a 	bl	8005108 <HAL_ADC_ConfigChannel>
 80032d4:	2800      	cmp	r0, #0
 80032d6:	d12c      	bne.n	8003332 <MX_ADC1_Init+0xf6>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80032d8:	4b1f      	ldr	r3, [pc, #124]	@ (8003358 <MX_ADC1_Init+0x11c>)
 80032da:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80032dc:	230c      	movs	r3, #12
 80032de:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80032e0:	a901      	add	r1, sp, #4
 80032e2:	481b      	ldr	r0, [pc, #108]	@ (8003350 <MX_ADC1_Init+0x114>)
 80032e4:	f001 ff10 	bl	8005108 <HAL_ADC_ConfigChannel>
 80032e8:	bb30      	cbnz	r0, 8003338 <MX_ADC1_Init+0xfc>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80032ea:	4b1c      	ldr	r3, [pc, #112]	@ (800335c <MX_ADC1_Init+0x120>)
 80032ec:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80032ee:	2312      	movs	r3, #18
 80032f0:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80032f2:	a901      	add	r1, sp, #4
 80032f4:	4816      	ldr	r0, [pc, #88]	@ (8003350 <MX_ADC1_Init+0x114>)
 80032f6:	f001 ff07 	bl	8005108 <HAL_ADC_ConfigChannel>
 80032fa:	bb00      	cbnz	r0, 800333e <MX_ADC1_Init+0x102>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80032fc:	4b18      	ldr	r3, [pc, #96]	@ (8003360 <MX_ADC1_Init+0x124>)
 80032fe:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8003300:	2318      	movs	r3, #24
 8003302:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003304:	a901      	add	r1, sp, #4
 8003306:	4812      	ldr	r0, [pc, #72]	@ (8003350 <MX_ADC1_Init+0x114>)
 8003308:	f001 fefe 	bl	8005108 <HAL_ADC_ConfigChannel>
 800330c:	b9d0      	cbnz	r0, 8003344 <MX_ADC1_Init+0x108>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800330e:	4b15      	ldr	r3, [pc, #84]	@ (8003364 <MX_ADC1_Init+0x128>)
 8003310:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8003312:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003316:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003318:	a901      	add	r1, sp, #4
 800331a:	480d      	ldr	r0, [pc, #52]	@ (8003350 <MX_ADC1_Init+0x114>)
 800331c:	f001 fef4 	bl	8005108 <HAL_ADC_ConfigChannel>
 8003320:	b998      	cbnz	r0, 800334a <MX_ADC1_Init+0x10e>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003322:	b00c      	add	sp, #48	@ 0x30
 8003324:	bd10      	pop	{r4, pc}
    Error_Handler();
 8003326:	f000 ff25 	bl	8004174 <Error_Handler>
 800332a:	e7bb      	b.n	80032a4 <MX_ADC1_Init+0x68>
    Error_Handler();
 800332c:	f000 ff22 	bl	8004174 <Error_Handler>
 8003330:	e7c0      	b.n	80032b4 <MX_ADC1_Init+0x78>
    Error_Handler();
 8003332:	f000 ff1f 	bl	8004174 <Error_Handler>
 8003336:	e7cf      	b.n	80032d8 <MX_ADC1_Init+0x9c>
    Error_Handler();
 8003338:	f000 ff1c 	bl	8004174 <Error_Handler>
 800333c:	e7d5      	b.n	80032ea <MX_ADC1_Init+0xae>
    Error_Handler();
 800333e:	f000 ff19 	bl	8004174 <Error_Handler>
 8003342:	e7db      	b.n	80032fc <MX_ADC1_Init+0xc0>
    Error_Handler();
 8003344:	f000 ff16 	bl	8004174 <Error_Handler>
 8003348:	e7e1      	b.n	800330e <MX_ADC1_Init+0xd2>
    Error_Handler();
 800334a:	f000 ff13 	bl	8004174 <Error_Handler>
}
 800334e:	e7e8      	b.n	8003322 <MX_ADC1_Init+0xe6>
 8003350:	20005084 	.word	0x20005084
 8003354:	04300002 	.word	0x04300002
 8003358:	08600004 	.word	0x08600004
 800335c:	0c900008 	.word	0x0c900008
 8003360:	10c00010 	.word	0x10c00010
 8003364:	2e300800 	.word	0x2e300800

08003368 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003368:	b530      	push	{r4, r5, lr}
 800336a:	b09f      	sub	sp, #124	@ 0x7c
 800336c:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800336e:	2100      	movs	r1, #0
 8003370:	9119      	str	r1, [sp, #100]	@ 0x64
 8003372:	911a      	str	r1, [sp, #104]	@ 0x68
 8003374:	911b      	str	r1, [sp, #108]	@ 0x6c
 8003376:	911c      	str	r1, [sp, #112]	@ 0x70
 8003378:	911d      	str	r1, [sp, #116]	@ 0x74
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800337a:	2254      	movs	r2, #84	@ 0x54
 800337c:	a804      	add	r0, sp, #16
 800337e:	f007 ffa9 	bl	800b2d4 <memset>
  if(adcHandle->Instance==ADC1)
 8003382:	6823      	ldr	r3, [r4, #0]
 8003384:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003388:	d001      	beq.n	800338e <HAL_ADC_MspInit+0x26>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800338a:	b01f      	add	sp, #124	@ 0x7c
 800338c:	bd30      	pop	{r4, r5, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800338e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003392:	9304      	str	r3, [sp, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8003394:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8003398:	9315      	str	r3, [sp, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800339a:	a804      	add	r0, sp, #16
 800339c:	f004 fa60 	bl	8007860 <HAL_RCCEx_PeriphCLKConfig>
 80033a0:	2800      	cmp	r0, #0
 80033a2:	d138      	bne.n	8003416 <HAL_ADC_MspInit+0xae>
    __HAL_RCC_ADC12_CLK_ENABLE();
 80033a4:	4b1d      	ldr	r3, [pc, #116]	@ (800341c <HAL_ADC_MspInit+0xb4>)
 80033a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80033a8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80033ac:	64da      	str	r2, [r3, #76]	@ 0x4c
 80033ae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80033b0:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80033b4:	9201      	str	r2, [sp, #4]
 80033b6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033b8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80033ba:	f042 0201 	orr.w	r2, r2, #1
 80033be:	64da      	str	r2, [r3, #76]	@ 0x4c
 80033c0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80033c2:	f002 0201 	and.w	r2, r2, #1
 80033c6:	9202      	str	r2, [sp, #8]
 80033c8:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033ca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80033cc:	f042 0202 	orr.w	r2, r2, #2
 80033d0:	64da      	str	r2, [r3, #76]	@ 0x4c
 80033d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033d4:	f003 0302 	and.w	r3, r3, #2
 80033d8:	9303      	str	r3, [sp, #12]
 80033da:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = MCU_ADC0_Pin|MCU_ADC1_Pin|MCU_ADC2_Pin|MCU_ADC3_Pin;
 80033dc:	230f      	movs	r3, #15
 80033de:	9319      	str	r3, [sp, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033e0:	2503      	movs	r5, #3
 80033e2:	951a      	str	r5, [sp, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033e4:	2400      	movs	r4, #0
 80033e6:	941b      	str	r4, [sp, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033e8:	a919      	add	r1, sp, #100	@ 0x64
 80033ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80033ee:	f003 f855 	bl	800649c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MCU_ADC11_Pin;
 80033f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80033f6:	9319      	str	r3, [sp, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033f8:	951a      	str	r5, [sp, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033fa:	941b      	str	r4, [sp, #108]	@ 0x6c
    HAL_GPIO_Init(MCU_ADC11_GPIO_Port, &GPIO_InitStruct);
 80033fc:	a919      	add	r1, sp, #100	@ 0x64
 80033fe:	4808      	ldr	r0, [pc, #32]	@ (8003420 <HAL_ADC_MspInit+0xb8>)
 8003400:	f003 f84c 	bl	800649c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8003404:	4622      	mov	r2, r4
 8003406:	4621      	mov	r1, r4
 8003408:	2012      	movs	r0, #18
 800340a:	f002 fc25 	bl	8005c58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800340e:	2012      	movs	r0, #18
 8003410:	f002 fc32 	bl	8005c78 <HAL_NVIC_EnableIRQ>
}
 8003414:	e7b9      	b.n	800338a <HAL_ADC_MspInit+0x22>
      Error_Handler();
 8003416:	f000 fead 	bl	8004174 <Error_Handler>
 800341a:	e7c3      	b.n	80033a4 <HAL_ADC_MspInit+0x3c>
 800341c:	40021000 	.word	0x40021000
 8003420:	48000400 	.word	0x48000400

08003424 <cliLineClean>:
  return ret;
}

void cliLineClean(cli_t *p_cli)
{
  p_cli->line.count   = 0;
 8003424:	2300      	movs	r3, #0
 8003426:	f880 33f2 	strb.w	r3, [r0, #1010]	@ 0x3f2
  p_cli->line.cursor  = 0;
 800342a:	f880 33f1 	strb.w	r3, [r0, #1009]	@ 0x3f1
  p_cli->line.buf_len = CLI_LINE_BUF_MAX - 1;
 800342e:	223f      	movs	r2, #63	@ 0x3f
 8003430:	f880 23f0 	strb.w	r2, [r0, #1008]	@ 0x3f0
  p_cli->line.buf[0]  = 0;
 8003434:	f880 33b0 	strb.w	r3, [r0, #944]	@ 0x3b0
}
 8003438:	4770      	bx	lr

0800343a <cliLineAdd>:

void cliLineAdd(cli_t *p_cli)
{
 800343a:	b538      	push	{r3, r4, r5, lr}
 800343c:	4605      	mov	r5, r0

  p_cli->line_buf[p_cli->hist_line_last] = p_cli->line;
 800343e:	f890 4196 	ldrb.w	r4, [r0, #406]	@ 0x196
 8003442:	eb04 1044 	add.w	r0, r4, r4, lsl #5
 8003446:	eb04 0040 	add.w	r0, r4, r0, lsl #1
 800344a:	4428      	add	r0, r5
 800344c:	2243      	movs	r2, #67	@ 0x43
 800344e:	f505 716c 	add.w	r1, r5, #944	@ 0x3b0
 8003452:	f500 70cc 	add.w	r0, r0, #408	@ 0x198
 8003456:	f008 f802 	bl	800b45e <memcpy>

  if (p_cli->hist_line_count < CLI_LINE_HIS_MAX)
 800345a:	f895 3197 	ldrb.w	r3, [r5, #407]	@ 0x197
 800345e:	2b07      	cmp	r3, #7
 8003460:	d802      	bhi.n	8003468 <cliLineAdd+0x2e>
  {
    p_cli->hist_line_count++;
 8003462:	3301      	adds	r3, #1
 8003464:	f885 3197 	strb.w	r3, [r5, #407]	@ 0x197
  }

  p_cli->hist_line_i    = p_cli->hist_line_last;
 8003468:	f885 4195 	strb.w	r4, [r5, #405]	@ 0x195
  p_cli->hist_line_last = (p_cli->hist_line_last + 1) % CLI_LINE_HIS_MAX;
 800346c:	3401      	adds	r4, #1
 800346e:	4263      	negs	r3, r4
 8003470:	f004 0407 	and.w	r4, r4, #7
 8003474:	f003 0307 	and.w	r3, r3, #7
 8003478:	bf58      	it	pl
 800347a:	425c      	negpl	r4, r3
 800347c:	f885 4196 	strb.w	r4, [r5, #406]	@ 0x196
  p_cli->hist_line_new  = true;
 8003480:	2301      	movs	r3, #1
 8003482:	f885 3194 	strb.w	r3, [r5, #404]	@ 0x194
}
 8003486:	bd38      	pop	{r3, r4, r5, pc}

08003488 <cliToUpper>:
void cliToUpper(char *str)
{
  uint16_t i;
  uint8_t  str_ch;

  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 8003488:	2300      	movs	r3, #0
 800348a:	e003      	b.n	8003494 <cliToUpper+0xc>

    if ((str_ch >= 'a') && (str_ch <= 'z'))
    {
      str_ch = str_ch - 'a' + 'A';
    }
    str[i] = str_ch;
 800348c:	f88c 2000 	strb.w	r2, [ip]
  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 8003490:	3301      	adds	r3, #1
 8003492:	b29b      	uxth	r3, r3
 8003494:	2b0f      	cmp	r3, #15
 8003496:	d80b      	bhi.n	80034b0 <cliToUpper+0x28>
    str_ch = str[i];
 8003498:	eb00 0c03 	add.w	ip, r0, r3
 800349c:	5cc2      	ldrb	r2, [r0, r3]
    if (str_ch == 0)
 800349e:	b13a      	cbz	r2, 80034b0 <cliToUpper+0x28>
    if ((str_ch >= 'a') && (str_ch <= 'z'))
 80034a0:	f1a2 0161 	sub.w	r1, r2, #97	@ 0x61
 80034a4:	b2c9      	uxtb	r1, r1
 80034a6:	2919      	cmp	r1, #25
 80034a8:	d8f0      	bhi.n	800348c <cliToUpper+0x4>
      str_ch = str_ch - 'a' + 'A';
 80034aa:	3a20      	subs	r2, #32
 80034ac:	b2d2      	uxtb	r2, r2
 80034ae:	e7ed      	b.n	800348c <cliToUpper+0x4>
  }

  if (i == CLI_CMD_NAME_MAX)
 80034b0:	2b10      	cmp	r3, #16
 80034b2:	d000      	beq.n	80034b6 <cliToUpper+0x2e>
  {
    str[i-1] = 0;
  }
}
 80034b4:	4770      	bx	lr
    str[i-1] = 0;
 80034b6:	3b01      	subs	r3, #1
 80034b8:	2200      	movs	r2, #0
 80034ba:	54c2      	strb	r2, [r0, r3]
}
 80034bc:	e7fa      	b.n	80034b4 <cliToUpper+0x2c>
	...

080034c0 <cliArgsGetStr>:
{
  char *ret = NULL;
  cli_t *p_cli = &cli_node;


  if (index >= p_cli->cmd_args.argc)
 80034c0:	4b06      	ldr	r3, [pc, #24]	@ (80034dc <cliArgsGetStr+0x1c>)
 80034c2:	f8b3 3678 	ldrh.w	r3, [r3, #1656]	@ 0x678
 80034c6:	4298      	cmp	r0, r3
 80034c8:	d205      	bcs.n	80034d6 <cliArgsGetStr+0x16>
  {
    return 0;
  }

  ret = p_cli->cmd_args.argv[index];
 80034ca:	4b04      	ldr	r3, [pc, #16]	@ (80034dc <cliArgsGetStr+0x1c>)
 80034cc:	f8d3 367c 	ldr.w	r3, [r3, #1660]	@ 0x67c
 80034d0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

  return ret;
 80034d4:	4770      	bx	lr
    return 0;
 80034d6:	2000      	movs	r0, #0
}
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop
 80034dc:	200050f0 	.word	0x200050f0

080034e0 <cliArgsIsStr>:

bool cliArgsIsStr(uint8_t index, const char *p_str)
{
 80034e0:	b508      	push	{r3, lr}
 80034e2:	4603      	mov	r3, r0
  bool ret = false;
  cli_t *p_cli = &cli_node;


  if (index >= p_cli->cmd_args.argc)
 80034e4:	4a09      	ldr	r2, [pc, #36]	@ (800350c <cliArgsIsStr+0x2c>)
 80034e6:	f8b2 2678 	ldrh.w	r2, [r2, #1656]	@ 0x678
 80034ea:	4290      	cmp	r0, r2
 80034ec:	d20a      	bcs.n	8003504 <cliArgsIsStr+0x24>
 80034ee:	4608      	mov	r0, r1
  {
    return 0;
  }

  if(strcmp(p_str, p_cli->cmd_args.argv[index]) == 0)
 80034f0:	4a06      	ldr	r2, [pc, #24]	@ (800350c <cliArgsIsStr+0x2c>)
 80034f2:	f8d2 267c 	ldr.w	r2, [r2, #1660]	@ 0x67c
 80034f6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80034fa:	f7fc fe91 	bl	8000220 <strcmp>
 80034fe:	b118      	cbz	r0, 8003508 <cliArgsIsStr+0x28>
  bool ret = false;
 8003500:	2000      	movs	r0, #0
 8003502:	e000      	b.n	8003506 <cliArgsIsStr+0x26>
    return 0;
 8003504:	2000      	movs	r0, #0
  {
    ret = true;
  }

  return ret;
}
 8003506:	bd08      	pop	{r3, pc}
    ret = true;
 8003508:	2001      	movs	r0, #1
 800350a:	e7fc      	b.n	8003506 <cliArgsIsStr+0x26>
 800350c:	200050f0 	.word	0x200050f0

08003510 <cliArgsGetFloat>:
{
 8003510:	b508      	push	{r3, lr}
  if (index >= p_cli->cmd_args.argc)
 8003512:	4b08      	ldr	r3, [pc, #32]	@ (8003534 <cliArgsGetFloat+0x24>)
 8003514:	f8b3 3678 	ldrh.w	r3, [r3, #1656]	@ 0x678
 8003518:	4298      	cmp	r0, r3
 800351a:	d302      	bcc.n	8003522 <cliArgsGetFloat+0x12>
    return 0;
 800351c:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 8003538 <cliArgsGetFloat+0x28>
}
 8003520:	bd08      	pop	{r3, pc}
  ret = (float)strtof((const char * ) p_cli->cmd_args.argv[index], (char **)NULL);
 8003522:	4b04      	ldr	r3, [pc, #16]	@ (8003534 <cliArgsGetFloat+0x24>)
 8003524:	f8d3 367c 	ldr.w	r3, [r3, #1660]	@ 0x67c
 8003528:	2100      	movs	r1, #0
 800352a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800352e:	f007 f85f 	bl	800a5f0 <strtof>
  return ret;
 8003532:	e7f5      	b.n	8003520 <cliArgsGetFloat+0x10>
 8003534:	200050f0 	.word	0x200050f0
 8003538:	00000000 	.word	0x00000000

0800353c <cliArgsGetData>:
{
 800353c:	b508      	push	{r3, lr}
  if (index >= p_cli->cmd_args.argc)
 800353e:	4b08      	ldr	r3, [pc, #32]	@ (8003560 <cliArgsGetData+0x24>)
 8003540:	f8b3 3678 	ldrh.w	r3, [r3, #1656]	@ 0x678
 8003544:	4298      	cmp	r0, r3
 8003546:	d301      	bcc.n	800354c <cliArgsGetData+0x10>
    return 0;
 8003548:	2000      	movs	r0, #0
}
 800354a:	bd08      	pop	{r3, pc}
  ret = (int32_t)strtoul((const char * ) p_cli->cmd_args.argv[index], (char **)NULL, (int) 0);
 800354c:	4b04      	ldr	r3, [pc, #16]	@ (8003560 <cliArgsGetData+0x24>)
 800354e:	f8d3 367c 	ldr.w	r3, [r3, #1660]	@ 0x67c
 8003552:	2200      	movs	r2, #0
 8003554:	4611      	mov	r1, r2
 8003556:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800355a:	f007 f91b 	bl	800a794 <strtoul>
  return ret;
 800355e:	e7f4      	b.n	800354a <cliArgsGetData+0xe>
 8003560:	200050f0 	.word	0x200050f0

08003564 <cliShowPrompt>:
{
 8003564:	b510      	push	{r4, lr}
 8003566:	4604      	mov	r4, r0
  uartPrintf(p_cli->ch, "\n\r");
 8003568:	4904      	ldr	r1, [pc, #16]	@ (800357c <cliShowPrompt+0x18>)
 800356a:	7800      	ldrb	r0, [r0, #0]
 800356c:	f7ff fa8a 	bl	8002a84 <uartPrintf>
  uartPrintf(p_cli->ch, CLI_PROMPT_STR);
 8003570:	4903      	ldr	r1, [pc, #12]	@ (8003580 <cliShowPrompt+0x1c>)
 8003572:	7820      	ldrb	r0, [r4, #0]
 8003574:	f7ff fa86 	bl	8002a84 <uartPrintf>
}
 8003578:	bd10      	pop	{r4, pc}
 800357a:	bf00      	nop
 800357c:	08015cbc 	.word	0x08015cbc
 8003580:	08015cc0 	.word	0x08015cc0

08003584 <cliLineChange>:
{
 8003584:	b538      	push	{r3, r4, r5, lr}
  if (p_cli->hist_line_count == 0)
 8003586:	f890 3197 	ldrb.w	r3, [r0, #407]	@ 0x197
 800358a:	b343      	cbz	r3, 80035de <cliLineChange+0x5a>
 800358c:	4604      	mov	r4, r0
 800358e:	460d      	mov	r5, r1
  if (p_cli->line.cursor > 0)
 8003590:	f890 23f1 	ldrb.w	r2, [r0, #1009]	@ 0x3f1
 8003594:	bb22      	cbnz	r2, 80035e0 <cliLineChange+0x5c>
  if (p_cli->line.count > 0)
 8003596:	f894 23f2 	ldrb.w	r2, [r4, #1010]	@ 0x3f2
 800359a:	bb32      	cbnz	r2, 80035ea <cliLineChange+0x66>
  if (key_up == true)
 800359c:	2d01      	cmp	r5, #1
 800359e:	d029      	beq.n	80035f4 <cliLineChange+0x70>
    p_cli->hist_line_i = (p_cli->hist_line_i + 1) % p_cli->hist_line_count;
 80035a0:	f994 1195 	ldrsb.w	r1, [r4, #405]	@ 0x195
 80035a4:	3101      	adds	r1, #1
 80035a6:	f894 3197 	ldrb.w	r3, [r4, #407]	@ 0x197
 80035aa:	fb91 f2f3 	sdiv	r2, r1, r3
 80035ae:	fb03 1112 	mls	r1, r3, r2, r1
 80035b2:	f884 1195 	strb.w	r1, [r4, #405]	@ 0x195
    change_i = p_cli->hist_line_i;
 80035b6:	b2c9      	uxtb	r1, r1
  p_cli->line = p_cli->line_buf[change_i];
 80035b8:	eb01 1341 	add.w	r3, r1, r1, lsl #5
 80035bc:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 80035c0:	4421      	add	r1, r4
 80035c2:	2243      	movs	r2, #67	@ 0x43
 80035c4:	f501 71cc 	add.w	r1, r1, #408	@ 0x198
 80035c8:	f504 706c 	add.w	r0, r4, #944	@ 0x3b0
 80035cc:	f007 ff47 	bl	800b45e <memcpy>
  p_cli->line.cursor = p_cli->line.count;
 80035d0:	f894 33f2 	ldrb.w	r3, [r4, #1010]	@ 0x3f2
 80035d4:	f884 33f1 	strb.w	r3, [r4, #1009]	@ 0x3f1
  p_cli->hist_line_new = false;
 80035d8:	2300      	movs	r3, #0
 80035da:	f884 3194 	strb.w	r3, [r4, #404]	@ 0x194
}
 80035de:	bd38      	pop	{r3, r4, r5, pc}
    uartPrintf(p_cli->ch, "\x1B[%dD", p_cli->line.cursor);
 80035e0:	490f      	ldr	r1, [pc, #60]	@ (8003620 <cliLineChange+0x9c>)
 80035e2:	7800      	ldrb	r0, [r0, #0]
 80035e4:	f7ff fa4e 	bl	8002a84 <uartPrintf>
 80035e8:	e7d5      	b.n	8003596 <cliLineChange+0x12>
    uartPrintf(p_cli->ch, "\x1B[%dP", p_cli->line.count);
 80035ea:	490e      	ldr	r1, [pc, #56]	@ (8003624 <cliLineChange+0xa0>)
 80035ec:	7820      	ldrb	r0, [r4, #0]
 80035ee:	f7ff fa49 	bl	8002a84 <uartPrintf>
 80035f2:	e7d3      	b.n	800359c <cliLineChange+0x18>
    if (p_cli->hist_line_new == true)
 80035f4:	f894 3194 	ldrb.w	r3, [r4, #404]	@ 0x194
 80035f8:	b11b      	cbz	r3, 8003602 <cliLineChange+0x7e>
      p_cli->hist_line_i = p_cli->hist_line_last;
 80035fa:	f994 3196 	ldrsb.w	r3, [r4, #406]	@ 0x196
 80035fe:	f884 3195 	strb.w	r3, [r4, #405]	@ 0x195
    p_cli->hist_line_i = (p_cli->hist_line_i + p_cli->hist_line_count - 1) % p_cli->hist_line_count;
 8003602:	f994 1195 	ldrsb.w	r1, [r4, #405]	@ 0x195
 8003606:	f894 3197 	ldrb.w	r3, [r4, #407]	@ 0x197
 800360a:	4419      	add	r1, r3
 800360c:	3901      	subs	r1, #1
 800360e:	fb91 f2f3 	sdiv	r2, r1, r3
 8003612:	fb03 1112 	mls	r1, r3, r2, r1
 8003616:	f884 1195 	strb.w	r1, [r4, #405]	@ 0x195
    change_i = p_cli->hist_line_i;
 800361a:	b2c9      	uxtb	r1, r1
 800361c:	e7cc      	b.n	80035b8 <cliLineChange+0x34>
 800361e:	bf00      	nop
 8003620:	08015cc8 	.word	0x08015cc8
 8003624:	08015cd0 	.word	0x08015cd0

08003628 <cliParseArgs>:
{
 8003628:	b570      	push	{r4, r5, r6, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	4606      	mov	r6, r0
  p_cli->argc = 0;
 800362e:	2400      	movs	r4, #0
 8003630:	f8a0 4112 	strh.w	r4, [r0, #274]	@ 0x112
  argv    = p_cli->argv;
 8003634:	f500 758a 	add.w	r5, r0, #276	@ 0x114
  argv[argc] = NULL;
 8003638:	f8c0 4114 	str.w	r4, [r0, #276]	@ 0x114
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 800363c:	aa01      	add	r2, sp, #4
 800363e:	490c      	ldr	r1, [pc, #48]	@ (8003670 <cliParseArgs+0x48>)
 8003640:	f500 706c 	add.w	r0, r0, #944	@ 0x3b0
 8003644:	f007 fe88 	bl	800b358 <strtok_r>
  uint16_t argc = 0;
 8003648:	4623      	mov	r3, r4
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 800364a:	e009      	b.n	8003660 <cliParseArgs+0x38>
    argv[argc++] = tok;
 800364c:	1c5c      	adds	r4, r3, #1
 800364e:	b2a4      	uxth	r4, r4
 8003650:	f845 0023 	str.w	r0, [r5, r3, lsl #2]
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 8003654:	aa01      	add	r2, sp, #4
 8003656:	4906      	ldr	r1, [pc, #24]	@ (8003670 <cliParseArgs+0x48>)
 8003658:	2000      	movs	r0, #0
 800365a:	f007 fe7d 	bl	800b358 <strtok_r>
    argv[argc++] = tok;
 800365e:	4623      	mov	r3, r4
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 8003660:	2800      	cmp	r0, #0
 8003662:	d1f3      	bne.n	800364c <cliParseArgs+0x24>
  p_cli->argc = argc;
 8003664:	f8a6 3112 	strh.w	r3, [r6, #274]	@ 0x112
  if (argc > 0)
 8003668:	b103      	cbz	r3, 800366c <cliParseArgs+0x44>
    ret = true;
 800366a:	2001      	movs	r0, #1
}
 800366c:	b002      	add	sp, #8
 800366e:	bd70      	pop	{r4, r5, r6, pc}
 8003670:	08015cd8 	.word	0x08015cd8

08003674 <cliOpen>:
  cli_node.ch = ch;
 8003674:	4b0a      	ldr	r3, [pc, #40]	@ (80036a0 <cliOpen+0x2c>)
 8003676:	7018      	strb	r0, [r3, #0]
  if (cli_node.is_open == false || cli_node.baud != baud)
 8003678:	7a1b      	ldrb	r3, [r3, #8]
 800367a:	b11b      	cbz	r3, 8003684 <cliOpen+0x10>
 800367c:	4b08      	ldr	r3, [pc, #32]	@ (80036a0 <cliOpen+0x2c>)
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	428b      	cmp	r3, r1
 8003682:	d000      	beq.n	8003686 <cliOpen+0x12>
    if (baud > 0)
 8003684:	b911      	cbnz	r1, 800368c <cliOpen+0x18>
}
 8003686:	4b06      	ldr	r3, [pc, #24]	@ (80036a0 <cliOpen+0x2c>)
 8003688:	7a18      	ldrb	r0, [r3, #8]
 800368a:	4770      	bx	lr
{
 800368c:	b510      	push	{r4, lr}
      cli_node.baud = baud;
 800368e:	4c04      	ldr	r4, [pc, #16]	@ (80036a0 <cliOpen+0x2c>)
 8003690:	6061      	str	r1, [r4, #4]
      cli_node.is_open = uartOpen(ch, baud);
 8003692:	f7ff f85d 	bl	8002750 <uartOpen>
 8003696:	7220      	strb	r0, [r4, #8]
}
 8003698:	4b01      	ldr	r3, [pc, #4]	@ (80036a0 <cliOpen+0x2c>)
 800369a:	7a18      	ldrb	r0, [r3, #8]
 800369c:	bd10      	pop	{r4, pc}
 800369e:	bf00      	nop
 80036a0:	200050f0 	.word	0x200050f0

080036a4 <cliGetPort>:
}
 80036a4:	4b01      	ldr	r3, [pc, #4]	@ (80036ac <cliGetPort+0x8>)
 80036a6:	7818      	ldrb	r0, [r3, #0]
 80036a8:	4770      	bx	lr
 80036aa:	bf00      	nop
 80036ac:	200050f0 	.word	0x200050f0

080036b0 <cliShowLog>:
{
 80036b0:	b538      	push	{r3, r4, r5, lr}
  if (cli_node.is_log == true)
 80036b2:	4b23      	ldr	r3, [pc, #140]	@ (8003740 <cliShowLog+0x90>)
 80036b4:	7a5b      	ldrb	r3, [r3, #9]
 80036b6:	b903      	cbnz	r3, 80036ba <cliShowLog+0xa>
}
 80036b8:	bd38      	pop	{r3, r4, r5, pc}
 80036ba:	4605      	mov	r5, r0
    uartPrintf(p_cli->log_ch, "Cursor  : %d\n", p_cli->line.cursor);
 80036bc:	f890 23f1 	ldrb.w	r2, [r0, #1009]	@ 0x3f1
 80036c0:	4920      	ldr	r1, [pc, #128]	@ (8003744 <cliShowLog+0x94>)
 80036c2:	7a80      	ldrb	r0, [r0, #10]
 80036c4:	f7ff f9de 	bl	8002a84 <uartPrintf>
    uartPrintf(p_cli->log_ch, "Count   : %d\n", p_cli->line.count);
 80036c8:	f895 23f2 	ldrb.w	r2, [r5, #1010]	@ 0x3f2
 80036cc:	491e      	ldr	r1, [pc, #120]	@ (8003748 <cliShowLog+0x98>)
 80036ce:	7aa8      	ldrb	r0, [r5, #10]
 80036d0:	f7ff f9d8 	bl	8002a84 <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf_len : %d\n", p_cli->line.buf_len);
 80036d4:	f895 23f0 	ldrb.w	r2, [r5, #1008]	@ 0x3f0
 80036d8:	491c      	ldr	r1, [pc, #112]	@ (800374c <cliShowLog+0x9c>)
 80036da:	7aa8      	ldrb	r0, [r5, #10]
 80036dc:	f7ff f9d2 	bl	8002a84 <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf     : %s\n", p_cli->line.buf);
 80036e0:	f505 726c 	add.w	r2, r5, #944	@ 0x3b0
 80036e4:	491a      	ldr	r1, [pc, #104]	@ (8003750 <cliShowLog+0xa0>)
 80036e6:	7aa8      	ldrb	r0, [r5, #10]
 80036e8:	f7ff f9cc 	bl	8002a84 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_i  : %d\n", p_cli->hist_line_i);
 80036ec:	f995 2195 	ldrsb.w	r2, [r5, #405]	@ 0x195
 80036f0:	4918      	ldr	r1, [pc, #96]	@ (8003754 <cliShowLog+0xa4>)
 80036f2:	7aa8      	ldrb	r0, [r5, #10]
 80036f4:	f7ff f9c6 	bl	8002a84 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_lt : %d\n", p_cli->hist_line_last);
 80036f8:	f895 2196 	ldrb.w	r2, [r5, #406]	@ 0x196
 80036fc:	4916      	ldr	r1, [pc, #88]	@ (8003758 <cliShowLog+0xa8>)
 80036fe:	7aa8      	ldrb	r0, [r5, #10]
 8003700:	f7ff f9c0 	bl	8002a84 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_c  : %d\n", p_cli->hist_line_count);
 8003704:	f895 2197 	ldrb.w	r2, [r5, #407]	@ 0x197
 8003708:	4914      	ldr	r1, [pc, #80]	@ (800375c <cliShowLog+0xac>)
 800370a:	7aa8      	ldrb	r0, [r5, #10]
 800370c:	f7ff f9ba 	bl	8002a84 <uartPrintf>
    for (int i=0; i<p_cli->hist_line_count; i++)
 8003710:	2400      	movs	r4, #0
 8003712:	e00c      	b.n	800372e <cliShowLog+0x7e>
      uartPrintf(p_cli->log_ch, "buf %d   : %s\n", i, p_cli->line_buf[i].buf);
 8003714:	eb04 1344 	add.w	r3, r4, r4, lsl #5
 8003718:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800371c:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 8003720:	442b      	add	r3, r5
 8003722:	4622      	mov	r2, r4
 8003724:	490e      	ldr	r1, [pc, #56]	@ (8003760 <cliShowLog+0xb0>)
 8003726:	7aa8      	ldrb	r0, [r5, #10]
 8003728:	f7ff f9ac 	bl	8002a84 <uartPrintf>
    for (int i=0; i<p_cli->hist_line_count; i++)
 800372c:	3401      	adds	r4, #1
 800372e:	f895 3197 	ldrb.w	r3, [r5, #407]	@ 0x197
 8003732:	42a3      	cmp	r3, r4
 8003734:	dcee      	bgt.n	8003714 <cliShowLog+0x64>
    uartPrintf(p_cli->log_ch, "\n");
 8003736:	490b      	ldr	r1, [pc, #44]	@ (8003764 <cliShowLog+0xb4>)
 8003738:	7aa8      	ldrb	r0, [r5, #10]
 800373a:	f7ff f9a3 	bl	8002a84 <uartPrintf>
}
 800373e:	e7bb      	b.n	80036b8 <cliShowLog+0x8>
 8003740:	200050f0 	.word	0x200050f0
 8003744:	08015ce0 	.word	0x08015ce0
 8003748:	08015cf0 	.word	0x08015cf0
 800374c:	08015d00 	.word	0x08015d00
 8003750:	08015d10 	.word	0x08015d10
 8003754:	08015d20 	.word	0x08015d20
 8003758:	08015d30 	.word	0x08015d30
 800375c:	08015d40 	.word	0x08015d40
 8003760:	08015d50 	.word	0x08015d50
 8003764:	08015c50 	.word	0x08015c50

08003768 <cliAvailable>:
{
 8003768:	b508      	push	{r3, lr}
  return uartAvailable(cli_node.ch);
 800376a:	4b02      	ldr	r3, [pc, #8]	@ (8003774 <cliAvailable+0xc>)
 800376c:	7818      	ldrb	r0, [r3, #0]
 800376e:	f7ff f901 	bl	8002974 <uartAvailable>
}
 8003772:	bd08      	pop	{r3, pc}
 8003774:	200050f0 	.word	0x200050f0

08003778 <cliRead>:
{
 8003778:	b508      	push	{r3, lr}
  return uartRead(cli_node.ch);
 800377a:	4b02      	ldr	r3, [pc, #8]	@ (8003784 <cliRead+0xc>)
 800377c:	7818      	ldrb	r0, [r3, #0]
 800377e:	f7ff f925 	bl	80029cc <uartRead>
}
 8003782:	bd08      	pop	{r3, pc}
 8003784:	200050f0 	.word	0x200050f0

08003788 <cliPrintf>:
{
 8003788:	b40f      	push	{r0, r1, r2, r3}
 800378a:	b510      	push	{r4, lr}
 800378c:	b082      	sub	sp, #8
 800378e:	ab04      	add	r3, sp, #16
 8003790:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start (arg, fmt);
 8003794:	9301      	str	r3, [sp, #4]
  len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 8003796:	4c08      	ldr	r4, [pc, #32]	@ (80037b8 <cliPrintf+0x30>)
 8003798:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800379c:	4620      	mov	r0, r4
 800379e:	f007 fd8b 	bl	800b2b8 <vsniprintf>
 80037a2:	4602      	mov	r2, r0
  uartWrite(p_cli->ch, (uint8_t *)p_cli->print_buffer, len);
 80037a4:	4621      	mov	r1, r4
 80037a6:	f814 0c11 	ldrb.w	r0, [r4, #-17]
 80037aa:	f7ff f93f 	bl	8002a2c <uartWrite>
}
 80037ae:	b002      	add	sp, #8
 80037b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037b4:	b004      	add	sp, #16
 80037b6:	4770      	bx	lr
 80037b8:	20005101 	.word	0x20005101

080037bc <cliRunCmd>:
{
 80037bc:	b538      	push	{r3, r4, r5, lr}
 80037be:	4605      	mov	r5, r0
  if (cliParseArgs(p_cli) == true)
 80037c0:	f7ff ff32 	bl	8003628 <cliParseArgs>
 80037c4:	b908      	cbnz	r0, 80037ca <cliRunCmd+0xe>
}
 80037c6:	2000      	movs	r0, #0
 80037c8:	bd38      	pop	{r3, r4, r5, pc}
    cliPrintf("\r\n");
 80037ca:	4816      	ldr	r0, [pc, #88]	@ (8003824 <cliRunCmd+0x68>)
 80037cc:	f7ff ffdc 	bl	8003788 <cliPrintf>
    cliToUpper(p_cli->argv[0]);
 80037d0:	f8d5 0114 	ldr.w	r0, [r5, #276]	@ 0x114
 80037d4:	f7ff fe58 	bl	8003488 <cliToUpper>
    for (int i=0; i<p_cli->cmd_count; i++)
 80037d8:	2400      	movs	r4, #0
 80037da:	f8b5 33f4 	ldrh.w	r3, [r5, #1012]	@ 0x3f4
 80037de:	42a3      	cmp	r3, r4
 80037e0:	ddf1      	ble.n	80037c6 <cliRunCmd+0xa>
      if (strcmp(p_cli->argv[0], p_cli->cmd_list[i].cmd_str) == 0)
 80037e2:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 80037e6:	0089      	lsls	r1, r1, #2
 80037e8:	f501 717e 	add.w	r1, r1, #1016	@ 0x3f8
 80037ec:	4429      	add	r1, r5
 80037ee:	f8d5 0114 	ldr.w	r0, [r5, #276]	@ 0x114
 80037f2:	f7fc fd15 	bl	8000220 <strcmp>
 80037f6:	b108      	cbz	r0, 80037fc <cliRunCmd+0x40>
    for (int i=0; i<p_cli->cmd_count; i++)
 80037f8:	3401      	adds	r4, #1
 80037fa:	e7ee      	b.n	80037da <cliRunCmd+0x1e>
        p_cli->cmd_args.argc =  p_cli->argc - 1;
 80037fc:	f8b5 3112 	ldrh.w	r3, [r5, #274]	@ 0x112
 8003800:	3b01      	subs	r3, #1
 8003802:	f8a5 3678 	strh.w	r3, [r5, #1656]	@ 0x678
        p_cli->cmd_args.argv = &p_cli->argv[1];
 8003806:	f505 738c 	add.w	r3, r5, #280	@ 0x118
 800380a:	f8c5 367c 	str.w	r3, [r5, #1660]	@ 0x67c
        p_cli->cmd_list[i].cmd_func(&p_cli->cmd_args);
 800380e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8003812:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 8003816:	f8d4 3408 	ldr.w	r3, [r4, #1032]	@ 0x408
 800381a:	f505 60cf 	add.w	r0, r5, #1656	@ 0x678
 800381e:	4798      	blx	r3
        break;
 8003820:	e7d1      	b.n	80037c6 <cliRunCmd+0xa>
 8003822:	bf00      	nop
 8003824:	08015c9c 	.word	0x08015c9c

08003828 <cliUpdate>:
{
 8003828:	b530      	push	{r4, r5, lr}
 800382a:	b085      	sub	sp, #20
 800382c:	4604      	mov	r4, r0
 800382e:	f88d 1007 	strb.w	r1, [sp, #7]
  if (p_cli->state == CLI_RX_IDLE)
 8003832:	7c03      	ldrb	r3, [r0, #16]
 8003834:	b9ab      	cbnz	r3, 8003862 <cliUpdate+0x3a>
    switch(rx_data)
 8003836:	b2cb      	uxtb	r3, r1
 8003838:	2b1b      	cmp	r3, #27
 800383a:	d030      	beq.n	800389e <cliUpdate+0x76>
 800383c:	d81c      	bhi.n	8003878 <cliUpdate+0x50>
 800383e:	2b08      	cmp	r3, #8
 8003840:	d04b      	beq.n	80038da <cliUpdate+0xb2>
 8003842:	2b0d      	cmp	r3, #13
 8003844:	f040 8084 	bne.w	8003950 <cliUpdate+0x128>
        if (line->count > 0)
 8003848:	f890 33f2 	ldrb.w	r3, [r0, #1010]	@ 0x3f2
 800384c:	bb0b      	cbnz	r3, 8003892 <cliUpdate+0x6a>
        line->count = 0;
 800384e:	2300      	movs	r3, #0
 8003850:	f884 33f2 	strb.w	r3, [r4, #1010]	@ 0x3f2
        line->cursor = 0;
 8003854:	f884 33f1 	strb.w	r3, [r4, #1009]	@ 0x3f1
        line->buf[0] = 0;
 8003858:	f884 33b0 	strb.w	r3, [r4, #944]	@ 0x3b0
        cliShowPrompt(p_cli);
 800385c:	4620      	mov	r0, r4
 800385e:	f7ff fe81 	bl	8003564 <cliShowPrompt>
  switch(p_cli->state)
 8003862:	7c23      	ldrb	r3, [r4, #16]
 8003864:	3b01      	subs	r3, #1
 8003866:	2b03      	cmp	r3, #3
 8003868:	f200 80c8 	bhi.w	80039fc <cliUpdate+0x1d4>
 800386c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003870:	00cc00c4 	.word	0x00cc00c4
 8003874:	015600cf 	.word	0x015600cf
    switch(rx_data)
 8003878:	2b7f      	cmp	r3, #127	@ 0x7f
 800387a:	d169      	bne.n	8003950 <cliUpdate+0x128>
        if (line->cursor < line->count)
 800387c:	f890 c3f1 	ldrb.w	ip, [r0, #1009]	@ 0x3f1
 8003880:	f890 e3f2 	ldrb.w	lr, [r0, #1010]	@ 0x3f2
 8003884:	45f4      	cmp	ip, lr
 8003886:	d2ec      	bcs.n	8003862 <cliUpdate+0x3a>
          mov_len = line->count - line->cursor;
 8003888:	ebae 050c 	sub.w	r5, lr, ip
 800388c:	b2ed      	uxtb	r5, r5
          for (int i=1; i<mov_len; i++)
 800388e:	2201      	movs	r2, #1
 8003890:	e012      	b.n	80038b8 <cliUpdate+0x90>
          cliLineAdd(p_cli);
 8003892:	f7ff fdd2 	bl	800343a <cliLineAdd>
          cliRunCmd(p_cli);
 8003896:	4620      	mov	r0, r4
 8003898:	f7ff ff90 	bl	80037bc <cliRunCmd>
 800389c:	e7d7      	b.n	800384e <cliUpdate+0x26>
        p_cli->state = CLI_RX_SP1;
 800389e:	2301      	movs	r3, #1
 80038a0:	7403      	strb	r3, [r0, #16]
        break;
 80038a2:	e7de      	b.n	8003862 <cliUpdate+0x3a>
            line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 80038a4:	eb0c 0302 	add.w	r3, ip, r2
 80038a8:	1e59      	subs	r1, r3, #1
 80038aa:	4423      	add	r3, r4
 80038ac:	f893 03b0 	ldrb.w	r0, [r3, #944]	@ 0x3b0
 80038b0:	1863      	adds	r3, r4, r1
 80038b2:	f883 03b0 	strb.w	r0, [r3, #944]	@ 0x3b0
          for (int i=1; i<mov_len; i++)
 80038b6:	3201      	adds	r2, #1
 80038b8:	4295      	cmp	r5, r2
 80038ba:	dcf3      	bgt.n	80038a4 <cliUpdate+0x7c>
          line->count--;
 80038bc:	f10e 3eff 	add.w	lr, lr, #4294967295
 80038c0:	fa5f fe8e 	uxtb.w	lr, lr
 80038c4:	f884 e3f2 	strb.w	lr, [r4, #1010]	@ 0x3f2
          line->buf[line->count] = 0;
 80038c8:	44a6      	add	lr, r4
 80038ca:	2300      	movs	r3, #0
 80038cc:	f88e 33b0 	strb.w	r3, [lr, #944]	@ 0x3b0
          uartPrintf(p_cli->ch, "\x1B[1P");
 80038d0:	4994      	ldr	r1, [pc, #592]	@ (8003b24 <cliUpdate+0x2fc>)
 80038d2:	7820      	ldrb	r0, [r4, #0]
 80038d4:	f7ff f8d6 	bl	8002a84 <uartPrintf>
 80038d8:	e7c3      	b.n	8003862 <cliUpdate+0x3a>
        if (line->count > 0 && line->cursor > 0)
 80038da:	f890 33f2 	ldrb.w	r3, [r0, #1010]	@ 0x3f2
 80038de:	b35b      	cbz	r3, 8003938 <cliUpdate+0x110>
 80038e0:	f890 03f1 	ldrb.w	r0, [r0, #1009]	@ 0x3f1
 80038e4:	b340      	cbz	r0, 8003938 <cliUpdate+0x110>
          if (line->cursor == line->count)
 80038e6:	4283      	cmp	r3, r0
 80038e8:	d009      	beq.n	80038fe <cliUpdate+0xd6>
          if (line->cursor < line->count)
 80038ea:	f894 c3f2 	ldrb.w	ip, [r4, #1010]	@ 0x3f2
 80038ee:	4560      	cmp	r0, ip
 80038f0:	d222      	bcs.n	8003938 <cliUpdate+0x110>
            mov_len = line->count - line->cursor;
 80038f2:	ebac 0e00 	sub.w	lr, ip, r0
 80038f6:	fa5f fe8e 	uxtb.w	lr, lr
            for (int i=0; i<mov_len; i++)
 80038fa:	2200      	movs	r2, #0
 80038fc:	e011      	b.n	8003922 <cliUpdate+0xfa>
            line->count--;
 80038fe:	3b01      	subs	r3, #1
 8003900:	b2db      	uxtb	r3, r3
 8003902:	f884 33f2 	strb.w	r3, [r4, #1010]	@ 0x3f2
            line->buf[line->count] = 0;
 8003906:	4423      	add	r3, r4
 8003908:	2200      	movs	r2, #0
 800390a:	f883 23b0 	strb.w	r2, [r3, #944]	@ 0x3b0
 800390e:	e7ec      	b.n	80038ea <cliUpdate+0xc2>
              line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 8003910:	1883      	adds	r3, r0, r2
 8003912:	1e59      	subs	r1, r3, #1
 8003914:	4423      	add	r3, r4
 8003916:	f893 53b0 	ldrb.w	r5, [r3, #944]	@ 0x3b0
 800391a:	1863      	adds	r3, r4, r1
 800391c:	f883 53b0 	strb.w	r5, [r3, #944]	@ 0x3b0
            for (int i=0; i<mov_len; i++)
 8003920:	3201      	adds	r2, #1
 8003922:	4596      	cmp	lr, r2
 8003924:	dcf4      	bgt.n	8003910 <cliUpdate+0xe8>
            line->count--;
 8003926:	f10c 33ff 	add.w	r3, ip, #4294967295
 800392a:	b2db      	uxtb	r3, r3
 800392c:	f884 33f2 	strb.w	r3, [r4, #1010]	@ 0x3f2
            line->buf[line->count] = 0;
 8003930:	4423      	add	r3, r4
 8003932:	2200      	movs	r2, #0
 8003934:	f883 23b0 	strb.w	r2, [r3, #944]	@ 0x3b0
        if (line->cursor > 0)
 8003938:	f894 33f1 	ldrb.w	r3, [r4, #1009]	@ 0x3f1
 800393c:	2b00      	cmp	r3, #0
 800393e:	d090      	beq.n	8003862 <cliUpdate+0x3a>
          line->cursor--;
 8003940:	3b01      	subs	r3, #1
 8003942:	f884 33f1 	strb.w	r3, [r4, #1009]	@ 0x3f1
          uartPrintf(p_cli->ch, "\b \b\x1B[1P");
 8003946:	4978      	ldr	r1, [pc, #480]	@ (8003b28 <cliUpdate+0x300>)
 8003948:	7820      	ldrb	r0, [r4, #0]
 800394a:	f7ff f89b 	bl	8002a84 <uartPrintf>
 800394e:	e788      	b.n	8003862 <cliUpdate+0x3a>
        if ((line->count + 1) < line->buf_len)
 8003950:	f894 33f2 	ldrb.w	r3, [r4, #1010]	@ 0x3f2
 8003954:	1c59      	adds	r1, r3, #1
 8003956:	f894 23f0 	ldrb.w	r2, [r4, #1008]	@ 0x3f0
 800395a:	4291      	cmp	r1, r2
 800395c:	da81      	bge.n	8003862 <cliUpdate+0x3a>
          if (line->cursor == line->count)
 800395e:	f894 23f1 	ldrb.w	r2, [r4, #1009]	@ 0x3f1
 8003962:	4293      	cmp	r3, r2
 8003964:	d016      	beq.n	8003994 <cliUpdate+0x16c>
          if (line->cursor < line->count)
 8003966:	f894 c3f1 	ldrb.w	ip, [r4, #1009]	@ 0x3f1
 800396a:	f894 03f2 	ldrb.w	r0, [r4, #1010]	@ 0x3f2
 800396e:	4584      	cmp	ip, r0
 8003970:	f4bf af77 	bcs.w	8003862 <cliUpdate+0x3a>
            mov_len = line->count - line->cursor;
 8003974:	eba0 050c 	sub.w	r5, r0, ip
 8003978:	b2ed      	uxtb	r5, r5
            for (int i=0; i<mov_len; i++)
 800397a:	2200      	movs	r2, #0
 800397c:	4295      	cmp	r5, r2
 800397e:	dd24      	ble.n	80039ca <cliUpdate+0x1a2>
              line->buf[line->count - i] = line->buf[line->count - i - 1];
 8003980:	1a83      	subs	r3, r0, r2
 8003982:	1e59      	subs	r1, r3, #1
 8003984:	4421      	add	r1, r4
 8003986:	f891 13b0 	ldrb.w	r1, [r1, #944]	@ 0x3b0
 800398a:	4423      	add	r3, r4
 800398c:	f883 13b0 	strb.w	r1, [r3, #944]	@ 0x3b0
            for (int i=0; i<mov_len; i++)
 8003990:	3201      	adds	r2, #1
 8003992:	e7f3      	b.n	800397c <cliUpdate+0x154>
            uartWrite(p_cli->ch, &rx_data, 1);
 8003994:	2201      	movs	r2, #1
 8003996:	f10d 0107 	add.w	r1, sp, #7
 800399a:	7820      	ldrb	r0, [r4, #0]
 800399c:	f7ff f846 	bl	8002a2c <uartWrite>
            line->buf[line->cursor] = rx_data;
 80039a0:	f894 23f1 	ldrb.w	r2, [r4, #1009]	@ 0x3f1
 80039a4:	18a3      	adds	r3, r4, r2
 80039a6:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80039aa:	f883 13b0 	strb.w	r1, [r3, #944]	@ 0x3b0
            line->count++;
 80039ae:	f894 33f2 	ldrb.w	r3, [r4, #1010]	@ 0x3f2
 80039b2:	3301      	adds	r3, #1
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	f884 33f2 	strb.w	r3, [r4, #1010]	@ 0x3f2
            line->cursor++;
 80039ba:	3201      	adds	r2, #1
 80039bc:	f884 23f1 	strb.w	r2, [r4, #1009]	@ 0x3f1
            line->buf[line->count] = 0;
 80039c0:	4423      	add	r3, r4
 80039c2:	2200      	movs	r2, #0
 80039c4:	f883 23b0 	strb.w	r2, [r3, #944]	@ 0x3b0
 80039c8:	e7cd      	b.n	8003966 <cliUpdate+0x13e>
            line->buf[line->cursor] = rx_data;
 80039ca:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80039ce:	eb04 030c 	add.w	r3, r4, ip
 80039d2:	f883 23b0 	strb.w	r2, [r3, #944]	@ 0x3b0
            line->count++;
 80039d6:	3001      	adds	r0, #1
 80039d8:	b2c0      	uxtb	r0, r0
 80039da:	f884 03f2 	strb.w	r0, [r4, #1010]	@ 0x3f2
            line->cursor++;
 80039de:	f10c 0c01 	add.w	ip, ip, #1
 80039e2:	f884 c3f1 	strb.w	ip, [r4, #1009]	@ 0x3f1
            line->buf[line->count] = 0;
 80039e6:	4420      	add	r0, r4
 80039e8:	2300      	movs	r3, #0
 80039ea:	f880 33b0 	strb.w	r3, [r0, #944]	@ 0x3b0
            uartPrintf(p_cli->ch, "\x1B[4h%c\x1B[4l", rx_data);
 80039ee:	494f      	ldr	r1, [pc, #316]	@ (8003b2c <cliUpdate+0x304>)
 80039f0:	7820      	ldrb	r0, [r4, #0]
 80039f2:	f7ff f847 	bl	8002a84 <uartPrintf>
 80039f6:	e734      	b.n	8003862 <cliUpdate+0x3a>
      p_cli->state = CLI_RX_SP2;
 80039f8:	2302      	movs	r3, #2
 80039fa:	7423      	strb	r3, [r4, #16]
  cliShowLog(p_cli);
 80039fc:	4620      	mov	r0, r4
 80039fe:	f7ff fe57 	bl	80036b0 <cliShowLog>
}
 8003a02:	2000      	movs	r0, #0
 8003a04:	b005      	add	sp, #20
 8003a06:	bd30      	pop	{r4, r5, pc}
      p_cli->state = CLI_RX_SP3;
 8003a08:	2303      	movs	r3, #3
 8003a0a:	7423      	strb	r3, [r4, #16]
      break;
 8003a0c:	e7f6      	b.n	80039fc <cliUpdate+0x1d4>
      p_cli->state = CLI_RX_IDLE;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	7423      	strb	r3, [r4, #16]
      if (rx_data == CLI_KEY_LEFT)
 8003a12:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003a16:	2b44      	cmp	r3, #68	@ 0x44
 8003a18:	d026      	beq.n	8003a68 <cliUpdate+0x240>
      if (rx_data == CLI_KEY_RIGHT)
 8003a1a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003a1e:	2b43      	cmp	r3, #67	@ 0x43
 8003a20:	d037      	beq.n	8003a92 <cliUpdate+0x26a>
      if (rx_data == CLI_KEY_UP)
 8003a22:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003a26:	2b41      	cmp	r3, #65	@ 0x41
 8003a28:	d04a      	beq.n	8003ac0 <cliUpdate+0x298>
      if (rx_data == CLI_KEY_DOWN)
 8003a2a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003a2e:	2b42      	cmp	r3, #66	@ 0x42
 8003a30:	d050      	beq.n	8003ad4 <cliUpdate+0x2ac>
      if (rx_data == CLI_KEY_HOME)
 8003a32:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003a36:	2b31      	cmp	r3, #49	@ 0x31
 8003a38:	d056      	beq.n	8003ae8 <cliUpdate+0x2c0>
      if (rx_data == CLI_KEY_END)
 8003a3a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003a3e:	2b34      	cmp	r3, #52	@ 0x34
 8003a40:	d1dc      	bne.n	80039fc <cliUpdate+0x1d4>
        if (line->cursor < line->count)
 8003a42:	f894 33f1 	ldrb.w	r3, [r4, #1009]	@ 0x3f1
 8003a46:	f894 23f2 	ldrb.w	r2, [r4, #1010]	@ 0x3f2
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d358      	bcc.n	8003b00 <cliUpdate+0x2d8>
        if (line->cursor > line->count)
 8003a4e:	f894 23f1 	ldrb.w	r2, [r4, #1009]	@ 0x3f1
 8003a52:	f894 33f2 	ldrb.w	r3, [r4, #1010]	@ 0x3f2
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d859      	bhi.n	8003b0e <cliUpdate+0x2e6>
        line->cursor = line->count;
 8003a5a:	f894 33f2 	ldrb.w	r3, [r4, #1010]	@ 0x3f2
 8003a5e:	f884 33f1 	strb.w	r3, [r4, #1009]	@ 0x3f1
        p_cli->state = CLI_RX_SP4;
 8003a62:	2304      	movs	r3, #4
 8003a64:	7423      	strb	r3, [r4, #16]
 8003a66:	e7c9      	b.n	80039fc <cliUpdate+0x1d4>
        if (line->cursor > 0)
 8003a68:	f894 23f1 	ldrb.w	r2, [r4, #1009]	@ 0x3f1
 8003a6c:	2a00      	cmp	r2, #0
 8003a6e:	d0d4      	beq.n	8003a1a <cliUpdate+0x1f2>
          line->cursor--;
 8003a70:	3a01      	subs	r2, #1
 8003a72:	f884 23f1 	strb.w	r2, [r4, #1009]	@ 0x3f1
          tx_buf[0] = 0x1B;
 8003a76:	221b      	movs	r2, #27
 8003a78:	f88d 2008 	strb.w	r2, [sp, #8]
          tx_buf[1] = 0x5B;
 8003a7c:	225b      	movs	r2, #91	@ 0x5b
 8003a7e:	f88d 2009 	strb.w	r2, [sp, #9]
          tx_buf[2] = rx_data;
 8003a82:	f88d 300a 	strb.w	r3, [sp, #10]
          uartWrite(p_cli->ch, tx_buf, 3);
 8003a86:	2203      	movs	r2, #3
 8003a88:	a902      	add	r1, sp, #8
 8003a8a:	7820      	ldrb	r0, [r4, #0]
 8003a8c:	f7fe ffce 	bl	8002a2c <uartWrite>
 8003a90:	e7c3      	b.n	8003a1a <cliUpdate+0x1f2>
        if (line->cursor < line->count)
 8003a92:	f894 23f1 	ldrb.w	r2, [r4, #1009]	@ 0x3f1
 8003a96:	f894 13f2 	ldrb.w	r1, [r4, #1010]	@ 0x3f2
 8003a9a:	428a      	cmp	r2, r1
 8003a9c:	d2c1      	bcs.n	8003a22 <cliUpdate+0x1fa>
          line->cursor++;
 8003a9e:	3201      	adds	r2, #1
 8003aa0:	f884 23f1 	strb.w	r2, [r4, #1009]	@ 0x3f1
          tx_buf[0] = 0x1B;
 8003aa4:	221b      	movs	r2, #27
 8003aa6:	f88d 2008 	strb.w	r2, [sp, #8]
          tx_buf[1] = 0x5B;
 8003aaa:	225b      	movs	r2, #91	@ 0x5b
 8003aac:	f88d 2009 	strb.w	r2, [sp, #9]
          tx_buf[2] = rx_data;
 8003ab0:	f88d 300a 	strb.w	r3, [sp, #10]
          uartWrite(p_cli->ch, tx_buf, 3);
 8003ab4:	2203      	movs	r2, #3
 8003ab6:	a902      	add	r1, sp, #8
 8003ab8:	7820      	ldrb	r0, [r4, #0]
 8003aba:	f7fe ffb7 	bl	8002a2c <uartWrite>
 8003abe:	e7b0      	b.n	8003a22 <cliUpdate+0x1fa>
        cliLineChange(p_cli, true);
 8003ac0:	2101      	movs	r1, #1
 8003ac2:	4620      	mov	r0, r4
 8003ac4:	f7ff fd5e 	bl	8003584 <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 8003ac8:	f504 716c 	add.w	r1, r4, #944	@ 0x3b0
 8003acc:	7820      	ldrb	r0, [r4, #0]
 8003ace:	f7fe ffd9 	bl	8002a84 <uartPrintf>
 8003ad2:	e7aa      	b.n	8003a2a <cliUpdate+0x202>
        cliLineChange(p_cli, false);
 8003ad4:	2100      	movs	r1, #0
 8003ad6:	4620      	mov	r0, r4
 8003ad8:	f7ff fd54 	bl	8003584 <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 8003adc:	f504 716c 	add.w	r1, r4, #944	@ 0x3b0
 8003ae0:	7820      	ldrb	r0, [r4, #0]
 8003ae2:	f7fe ffcf 	bl	8002a84 <uartPrintf>
 8003ae6:	e7a4      	b.n	8003a32 <cliUpdate+0x20a>
        uartPrintf(p_cli->ch, "\x1B[%dD", line->cursor);
 8003ae8:	f894 23f1 	ldrb.w	r2, [r4, #1009]	@ 0x3f1
 8003aec:	4910      	ldr	r1, [pc, #64]	@ (8003b30 <cliUpdate+0x308>)
 8003aee:	7820      	ldrb	r0, [r4, #0]
 8003af0:	f7fe ffc8 	bl	8002a84 <uartPrintf>
        line->cursor = 0;
 8003af4:	2300      	movs	r3, #0
 8003af6:	f884 33f1 	strb.w	r3, [r4, #1009]	@ 0x3f1
        p_cli->state = CLI_RX_SP4;
 8003afa:	2304      	movs	r3, #4
 8003afc:	7423      	strb	r3, [r4, #16]
 8003afe:	e79c      	b.n	8003a3a <cliUpdate+0x212>
          mov_len = line->count - line->cursor;
 8003b00:	1ad2      	subs	r2, r2, r3
          uartPrintf(p_cli->ch, "\x1B[%dC", mov_len);
 8003b02:	b292      	uxth	r2, r2
 8003b04:	490b      	ldr	r1, [pc, #44]	@ (8003b34 <cliUpdate+0x30c>)
 8003b06:	7820      	ldrb	r0, [r4, #0]
 8003b08:	f7fe ffbc 	bl	8002a84 <uartPrintf>
 8003b0c:	e79f      	b.n	8003a4e <cliUpdate+0x226>
          mov_len = line->cursor - line->count;
 8003b0e:	1ad2      	subs	r2, r2, r3
          uartPrintf(p_cli->ch, "\x1B[%dD", mov_len);
 8003b10:	b292      	uxth	r2, r2
 8003b12:	4907      	ldr	r1, [pc, #28]	@ (8003b30 <cliUpdate+0x308>)
 8003b14:	7820      	ldrb	r0, [r4, #0]
 8003b16:	f7fe ffb5 	bl	8002a84 <uartPrintf>
 8003b1a:	e79e      	b.n	8003a5a <cliUpdate+0x232>
      p_cli->state = CLI_RX_IDLE;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	7423      	strb	r3, [r4, #16]
      break;
 8003b20:	e76c      	b.n	80039fc <cliUpdate+0x1d4>
 8003b22:	bf00      	nop
 8003b24:	08015d60 	.word	0x08015d60
 8003b28:	08015d68 	.word	0x08015d68
 8003b2c:	08015d70 	.word	0x08015d70
 8003b30:	08015cc8 	.word	0x08015cc8
 8003b34:	08015d7c 	.word	0x08015d7c

08003b38 <cliMain>:
{
 8003b38:	b538      	push	{r3, r4, r5, lr}
  if (cli_node.is_open != true)
 8003b3a:	4b09      	ldr	r3, [pc, #36]	@ (8003b60 <cliMain+0x28>)
 8003b3c:	7a1c      	ldrb	r4, [r3, #8]
 8003b3e:	b90c      	cbnz	r4, 8003b44 <cliMain+0xc>
}
 8003b40:	4620      	mov	r0, r4
 8003b42:	bd38      	pop	{r3, r4, r5, pc}
  if (uartAvailable(cli_node.ch) > 0)
 8003b44:	7818      	ldrb	r0, [r3, #0]
 8003b46:	f7fe ff15 	bl	8002974 <uartAvailable>
 8003b4a:	2800      	cmp	r0, #0
 8003b4c:	d0f8      	beq.n	8003b40 <cliMain+0x8>
    cliUpdate(&cli_node, uartRead(cli_node.ch));
 8003b4e:	4d04      	ldr	r5, [pc, #16]	@ (8003b60 <cliMain+0x28>)
 8003b50:	7828      	ldrb	r0, [r5, #0]
 8003b52:	f7fe ff3b 	bl	80029cc <uartRead>
 8003b56:	4601      	mov	r1, r0
 8003b58:	4628      	mov	r0, r5
 8003b5a:	f7ff fe65 	bl	8003828 <cliUpdate>
 8003b5e:	e7ef      	b.n	8003b40 <cliMain+0x8>
 8003b60:	200050f0 	.word	0x200050f0

08003b64 <cliShowList>:

  return ret;
}

void cliShowList(cli_args_t *args)
{
 8003b64:	b510      	push	{r4, lr}
  cli_t *p_cli = &cli_node;


  cliPrintf("\r\n");
 8003b66:	480f      	ldr	r0, [pc, #60]	@ (8003ba4 <cliShowList+0x40>)
 8003b68:	f7ff fe0e 	bl	8003788 <cliPrintf>
  cliPrintf("---------- cmd list ---------\r\n");
 8003b6c:	480e      	ldr	r0, [pc, #56]	@ (8003ba8 <cliShowList+0x44>)
 8003b6e:	f7ff fe0b 	bl	8003788 <cliPrintf>

  for (int i=0; i<p_cli->cmd_count; i++)
 8003b72:	2400      	movs	r4, #0
 8003b74:	e00c      	b.n	8003b90 <cliShowList+0x2c>
  {
    cliPrintf(p_cli->cmd_list[i].cmd_str);
 8003b76:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8003b7a:	0098      	lsls	r0, r3, #2
 8003b7c:	f500 707e 	add.w	r0, r0, #1016	@ 0x3f8
 8003b80:	4b0a      	ldr	r3, [pc, #40]	@ (8003bac <cliShowList+0x48>)
 8003b82:	4418      	add	r0, r3
 8003b84:	f7ff fe00 	bl	8003788 <cliPrintf>
    cliPrintf("\r\n");
 8003b88:	4806      	ldr	r0, [pc, #24]	@ (8003ba4 <cliShowList+0x40>)
 8003b8a:	f7ff fdfd 	bl	8003788 <cliPrintf>
  for (int i=0; i<p_cli->cmd_count; i++)
 8003b8e:	3401      	adds	r4, #1
 8003b90:	4b06      	ldr	r3, [pc, #24]	@ (8003bac <cliShowList+0x48>)
 8003b92:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	@ 0x3f4
 8003b96:	42a3      	cmp	r3, r4
 8003b98:	dced      	bgt.n	8003b76 <cliShowList+0x12>
  }

  cliPrintf("-----------------------------\r\n");
 8003b9a:	4805      	ldr	r0, [pc, #20]	@ (8003bb0 <cliShowList+0x4c>)
 8003b9c:	f7ff fdf4 	bl	8003788 <cliPrintf>
}
 8003ba0:	bd10      	pop	{r4, pc}
 8003ba2:	bf00      	nop
 8003ba4:	08015c9c 	.word	0x08015c9c
 8003ba8:	08015d84 	.word	0x08015d84
 8003bac:	200050f0 	.word	0x200050f0
 8003bb0:	08015da4 	.word	0x08015da4

08003bb4 <cliKeepLoop>:
{
 8003bb4:	b508      	push	{r3, lr}
  if (uartAvailable(p_cli->ch) == 0)
 8003bb6:	4b04      	ldr	r3, [pc, #16]	@ (8003bc8 <cliKeepLoop+0x14>)
 8003bb8:	7818      	ldrb	r0, [r3, #0]
 8003bba:	f7fe fedb 	bl	8002974 <uartAvailable>
 8003bbe:	b908      	cbnz	r0, 8003bc4 <cliKeepLoop+0x10>
    return true;
 8003bc0:	2001      	movs	r0, #1
}
 8003bc2:	bd08      	pop	{r3, pc}
    return false;
 8003bc4:	2000      	movs	r0, #0
 8003bc6:	e7fc      	b.n	8003bc2 <cliKeepLoop+0xe>
 8003bc8:	200050f0 	.word	0x200050f0

08003bcc <cliAdd>:
{
 8003bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (p_cli->cmd_count >= CLI_CMD_LIST_MAX)
 8003bd0:	4b11      	ldr	r3, [pc, #68]	@ (8003c18 <cliAdd+0x4c>)
 8003bd2:	f8b3 53f4 	ldrh.w	r5, [r3, #1012]	@ 0x3f4
 8003bd6:	2d1f      	cmp	r5, #31
 8003bd8:	d902      	bls.n	8003be0 <cliAdd+0x14>
    return false;
 8003bda:	2000      	movs	r0, #0
}
 8003bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003be0:	460e      	mov	r6, r1
  strcpy(p_cli->cmd_list[index].cmd_str, cmd_str);
 8003be2:	00af      	lsls	r7, r5, #2
 8003be4:	eb05 0485 	add.w	r4, r5, r5, lsl #2
 8003be8:	00a4      	lsls	r4, r4, #2
 8003bea:	f504 747e 	add.w	r4, r4, #1016	@ 0x3f8
 8003bee:	4698      	mov	r8, r3
 8003bf0:	441c      	add	r4, r3
 8003bf2:	4601      	mov	r1, r0
 8003bf4:	4620      	mov	r0, r4
 8003bf6:	f007 fc2a 	bl	800b44e <strcpy>
  p_cli->cmd_list[index].cmd_func = p_func;
 8003bfa:	442f      	add	r7, r5
 8003bfc:	eb08 0787 	add.w	r7, r8, r7, lsl #2
 8003c00:	f8c7 6408 	str.w	r6, [r7, #1032]	@ 0x408
  cliToUpper(p_cli->cmd_list[index].cmd_str);
 8003c04:	4620      	mov	r0, r4
 8003c06:	f7ff fc3f 	bl	8003488 <cliToUpper>
  p_cli->cmd_count++;
 8003c0a:	f8b8 33f4 	ldrh.w	r3, [r8, #1012]	@ 0x3f4
 8003c0e:	3301      	adds	r3, #1
 8003c10:	f8a8 33f4 	strh.w	r3, [r8, #1012]	@ 0x3f4
  return ret;
 8003c14:	2001      	movs	r0, #1
 8003c16:	e7e1      	b.n	8003bdc <cliAdd+0x10>
 8003c18:	200050f0 	.word	0x200050f0

08003c1c <cliInit>:
{
 8003c1c:	b508      	push	{r3, lr}
  cli_node.is_open = false;
 8003c1e:	4810      	ldr	r0, [pc, #64]	@ (8003c60 <cliInit+0x44>)
 8003c20:	2300      	movs	r3, #0
 8003c22:	7203      	strb	r3, [r0, #8]
  cli_node.is_log  = false;
 8003c24:	7243      	strb	r3, [r0, #9]
  cli_node.state   = CLI_RX_IDLE;
 8003c26:	7403      	strb	r3, [r0, #16]
  cli_node.hist_line_i     = 0;
 8003c28:	f880 3195 	strb.w	r3, [r0, #405]	@ 0x195
  cli_node.hist_line_last  = 0;
 8003c2c:	f880 3196 	strb.w	r3, [r0, #406]	@ 0x196
  cli_node.hist_line_count = 0;
 8003c30:	f880 3197 	strb.w	r3, [r0, #407]	@ 0x197
  cli_node.hist_line_new   = false;
 8003c34:	f880 3194 	strb.w	r3, [r0, #404]	@ 0x194
  cli_node.cmd_args.getData  = cliArgsGetData;
 8003c38:	4b0a      	ldr	r3, [pc, #40]	@ (8003c64 <cliInit+0x48>)
 8003c3a:	f8c0 3680 	str.w	r3, [r0, #1664]	@ 0x680
  cli_node.cmd_args.getFloat = cliArgsGetFloat;
 8003c3e:	4b0a      	ldr	r3, [pc, #40]	@ (8003c68 <cliInit+0x4c>)
 8003c40:	f8c0 3684 	str.w	r3, [r0, #1668]	@ 0x684
  cli_node.cmd_args.getStr   = cliArgsGetStr;
 8003c44:	4b09      	ldr	r3, [pc, #36]	@ (8003c6c <cliInit+0x50>)
 8003c46:	f8c0 3688 	str.w	r3, [r0, #1672]	@ 0x688
  cli_node.cmd_args.isStr    = cliArgsIsStr;
 8003c4a:	4b09      	ldr	r3, [pc, #36]	@ (8003c70 <cliInit+0x54>)
 8003c4c:	f8c0 368c 	str.w	r3, [r0, #1676]	@ 0x68c
  cliLineClean(&cli_node);
 8003c50:	f7ff fbe8 	bl	8003424 <cliLineClean>
  cliAdd("help", cliShowList);  
 8003c54:	4907      	ldr	r1, [pc, #28]	@ (8003c74 <cliInit+0x58>)
 8003c56:	4808      	ldr	r0, [pc, #32]	@ (8003c78 <cliInit+0x5c>)
 8003c58:	f7ff ffb8 	bl	8003bcc <cliAdd>
}
 8003c5c:	2001      	movs	r0, #1
 8003c5e:	bd08      	pop	{r3, pc}
 8003c60:	200050f0 	.word	0x200050f0
 8003c64:	0800353d 	.word	0x0800353d
 8003c68:	08003511 	.word	0x08003511
 8003c6c:	080034c1 	.word	0x080034c1
 8003c70:	080034e1 	.word	0x080034e1
 8003c74:	08003b65 	.word	0x08003b65
 8003c78:	08015dc4 	.word	0x08015dc4

08003c7c <MX_DAC1_Init>:
DAC_HandleTypeDef hdac2;
DMA_HandleTypeDef hdma_dac1_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8003c7c:	b500      	push	{lr}
 8003c7e:	b08d      	sub	sp, #52	@ 0x34

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8003c80:	2230      	movs	r2, #48	@ 0x30
 8003c82:	2100      	movs	r1, #0
 8003c84:	4668      	mov	r0, sp
 8003c86:	f007 fb25 	bl	800b2d4 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8003c8a:	4811      	ldr	r0, [pc, #68]	@ (8003cd0 <MX_DAC1_Init+0x54>)
 8003c8c:	4b11      	ldr	r3, [pc, #68]	@ (8003cd4 <MX_DAC1_Init+0x58>)
 8003c8e:	6003      	str	r3, [r0, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8003c90:	f002 f80e 	bl	8005cb0 <HAL_DAC_Init>
 8003c94:	b9a8      	cbnz	r0, 8003cc2 <MX_DAC1_Init+0x46>
    Error_Handler();
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8003c96:	2302      	movs	r3, #2
 8003c98:	9300      	str	r3, [sp, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f88d 2004 	strb.w	r2, [sp, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8003ca0:	f88d 2005 	strb.w	r2, [sp, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8003ca4:	9202      	str	r2, [sp, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8003ca6:	9203      	str	r2, [sp, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8003ca8:	9204      	str	r2, [sp, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8003caa:	9205      	str	r2, [sp, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8003cac:	2301      	movs	r3, #1
 8003cae:	9306      	str	r3, [sp, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8003cb0:	9207      	str	r2, [sp, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003cb2:	4669      	mov	r1, sp
 8003cb4:	4806      	ldr	r0, [pc, #24]	@ (8003cd0 <MX_DAC1_Init+0x54>)
 8003cb6:	f002 f8ab 	bl	8005e10 <HAL_DAC_ConfigChannel>
 8003cba:	b928      	cbnz	r0, 8003cc8 <MX_DAC1_Init+0x4c>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8003cbc:	b00d      	add	sp, #52	@ 0x34
 8003cbe:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8003cc2:	f000 fa57 	bl	8004174 <Error_Handler>
 8003cc6:	e7e6      	b.n	8003c96 <MX_DAC1_Init+0x1a>
    Error_Handler();
 8003cc8:	f000 fa54 	bl	8004174 <Error_Handler>
}
 8003ccc:	e7f6      	b.n	8003cbc <MX_DAC1_Init+0x40>
 8003cce:	bf00      	nop
 8003cd0:	200057f4 	.word	0x200057f4
 8003cd4:	50000800 	.word	0x50000800

08003cd8 <MX_DAC2_Init>:
/* DAC2 init function */
void MX_DAC2_Init(void)
{
 8003cd8:	b500      	push	{lr}
 8003cda:	b08d      	sub	sp, #52	@ 0x34

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8003cdc:	2230      	movs	r2, #48	@ 0x30
 8003cde:	2100      	movs	r1, #0
 8003ce0:	4668      	mov	r0, sp
 8003ce2:	f007 faf7 	bl	800b2d4 <memset>

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 8003ce6:	4811      	ldr	r0, [pc, #68]	@ (8003d2c <MX_DAC2_Init+0x54>)
 8003ce8:	4b11      	ldr	r3, [pc, #68]	@ (8003d30 <MX_DAC2_Init+0x58>)
 8003cea:	6003      	str	r3, [r0, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8003cec:	f001 ffe0 	bl	8005cb0 <HAL_DAC_Init>
 8003cf0:	b9a8      	cbnz	r0, 8003d1e <MX_DAC2_Init+0x46>
    Error_Handler();
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8003cf2:	2302      	movs	r3, #2
 8003cf4:	9300      	str	r3, [sp, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f88d 2004 	strb.w	r2, [sp, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8003cfc:	f88d 2005 	strb.w	r2, [sp, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8003d00:	9202      	str	r2, [sp, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8003d02:	9203      	str	r2, [sp, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8003d04:	9204      	str	r2, [sp, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8003d06:	9205      	str	r2, [sp, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	9306      	str	r3, [sp, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8003d0c:	9207      	str	r2, [sp, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003d0e:	4669      	mov	r1, sp
 8003d10:	4806      	ldr	r0, [pc, #24]	@ (8003d2c <MX_DAC2_Init+0x54>)
 8003d12:	f002 f87d 	bl	8005e10 <HAL_DAC_ConfigChannel>
 8003d16:	b928      	cbnz	r0, 8003d24 <MX_DAC2_Init+0x4c>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 8003d18:	b00d      	add	sp, #52	@ 0x34
 8003d1a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8003d1e:	f000 fa29 	bl	8004174 <Error_Handler>
 8003d22:	e7e6      	b.n	8003cf2 <MX_DAC2_Init+0x1a>
    Error_Handler();
 8003d24:	f000 fa26 	bl	8004174 <Error_Handler>
}
 8003d28:	e7f6      	b.n	8003d18 <MX_DAC2_Init+0x40>
 8003d2a:	bf00      	nop
 8003d2c:	200057e0 	.word	0x200057e0
 8003d30:	50000c00 	.word	0x50000c00

08003d34 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8003d34:	b530      	push	{r4, r5, lr}
 8003d36:	b08b      	sub	sp, #44	@ 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d38:	2300      	movs	r3, #0
 8003d3a:	9305      	str	r3, [sp, #20]
 8003d3c:	9306      	str	r3, [sp, #24]
 8003d3e:	9307      	str	r3, [sp, #28]
 8003d40:	9308      	str	r3, [sp, #32]
 8003d42:	9309      	str	r3, [sp, #36]	@ 0x24
  if(dacHandle->Instance==DAC1)
 8003d44:	6803      	ldr	r3, [r0, #0]
 8003d46:	4a33      	ldr	r2, [pc, #204]	@ (8003e14 <HAL_DAC_MspInit+0xe0>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d004      	beq.n	8003d56 <HAL_DAC_MspInit+0x22>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
  else if(dacHandle->Instance==DAC2)
 8003d4c:	4a32      	ldr	r2, [pc, #200]	@ (8003e18 <HAL_DAC_MspInit+0xe4>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d03b      	beq.n	8003dca <HAL_DAC_MspInit+0x96>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 8003d52:	b00b      	add	sp, #44	@ 0x2c
 8003d54:	bd30      	pop	{r4, r5, pc}
 8003d56:	4604      	mov	r4, r0
    __HAL_RCC_DAC1_CLK_ENABLE();
 8003d58:	4b30      	ldr	r3, [pc, #192]	@ (8003e1c <HAL_DAC_MspInit+0xe8>)
 8003d5a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003d5c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003d60:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003d62:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003d64:	f402 3280 	and.w	r2, r2, #65536	@ 0x10000
 8003d68:	9201      	str	r2, [sp, #4]
 8003d6a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d6c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003d6e:	f042 0201 	orr.w	r2, r2, #1
 8003d72:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003d74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d76:	f003 0301 	and.w	r3, r3, #1
 8003d7a:	9302      	str	r3, [sp, #8]
 8003d7c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = MCU_DAC1_Pin;
 8003d7e:	2510      	movs	r5, #16
 8003d80:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003d82:	2303      	movs	r3, #3
 8003d84:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(MCU_DAC1_GPIO_Port, &GPIO_InitStruct);
 8003d86:	a905      	add	r1, sp, #20
 8003d88:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003d8c:	f002 fb86 	bl	800649c <HAL_GPIO_Init>
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 8003d90:	4823      	ldr	r0, [pc, #140]	@ (8003e20 <HAL_DAC_MspInit+0xec>)
 8003d92:	4b24      	ldr	r3, [pc, #144]	@ (8003e24 <HAL_DAC_MspInit+0xf0>)
 8003d94:	6003      	str	r3, [r0, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 8003d96:	2306      	movs	r3, #6
 8003d98:	6043      	str	r3, [r0, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003d9a:	6085      	str	r5, [r0, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	60c3      	str	r3, [r0, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003da0:	2280      	movs	r2, #128	@ 0x80
 8003da2:	6102      	str	r2, [r0, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003da4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003da8:	6142      	str	r2, [r0, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003daa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003dae:	6182      	str	r2, [r0, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8003db0:	2220      	movs	r2, #32
 8003db2:	61c2      	str	r2, [r0, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8003db4:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8003db6:	f002 f987 	bl	80060c8 <HAL_DMA_Init>
 8003dba:	b918      	cbnz	r0, 8003dc4 <HAL_DAC_MspInit+0x90>
    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8003dbc:	4b18      	ldr	r3, [pc, #96]	@ (8003e20 <HAL_DAC_MspInit+0xec>)
 8003dbe:	60a3      	str	r3, [r4, #8]
 8003dc0:	629c      	str	r4, [r3, #40]	@ 0x28
 8003dc2:	e7c6      	b.n	8003d52 <HAL_DAC_MspInit+0x1e>
      Error_Handler();
 8003dc4:	f000 f9d6 	bl	8004174 <Error_Handler>
 8003dc8:	e7f8      	b.n	8003dbc <HAL_DAC_MspInit+0x88>
    __HAL_RCC_DAC2_CLK_ENABLE();
 8003dca:	4b14      	ldr	r3, [pc, #80]	@ (8003e1c <HAL_DAC_MspInit+0xe8>)
 8003dcc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003dce:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8003dd2:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003dd4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003dd6:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8003dda:	9203      	str	r2, [sp, #12]
 8003ddc:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dde:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003de0:	f042 0201 	orr.w	r2, r2, #1
 8003de4:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003de6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003de8:	f003 0301 	and.w	r3, r3, #1
 8003dec:	9304      	str	r3, [sp, #16]
 8003dee:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = MCU_DAC2_Pin;
 8003df0:	2340      	movs	r3, #64	@ 0x40
 8003df2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003df4:	2303      	movs	r3, #3
 8003df6:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(MCU_DAC2_GPIO_Port, &GPIO_InitStruct);
 8003df8:	a905      	add	r1, sp, #20
 8003dfa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003dfe:	f002 fb4d 	bl	800649c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 0, 0);
 8003e02:	2200      	movs	r2, #0
 8003e04:	4611      	mov	r1, r2
 8003e06:	2037      	movs	r0, #55	@ 0x37
 8003e08:	f001 ff26 	bl	8005c58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 8003e0c:	2037      	movs	r0, #55	@ 0x37
 8003e0e:	f001 ff33 	bl	8005c78 <HAL_NVIC_EnableIRQ>
}
 8003e12:	e79e      	b.n	8003d52 <HAL_DAC_MspInit+0x1e>
 8003e14:	50000800 	.word	0x50000800
 8003e18:	50000c00 	.word	0x50000c00
 8003e1c:	40021000 	.word	0x40021000
 8003e20:	20005780 	.word	0x20005780
 8003e24:	40020008 	.word	0x40020008

08003e28 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003e28:	b500      	push	{lr}
 8003e2a:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8003e2c:	4b1a      	ldr	r3, [pc, #104]	@ (8003e98 <MX_DMA_Init+0x70>)
 8003e2e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003e30:	f042 0204 	orr.w	r2, r2, #4
 8003e34:	649a      	str	r2, [r3, #72]	@ 0x48
 8003e36:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003e38:	f002 0204 	and.w	r2, r2, #4
 8003e3c:	9200      	str	r2, [sp, #0]
 8003e3e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003e40:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003e42:	f042 0201 	orr.w	r2, r2, #1
 8003e46:	649a      	str	r2, [r3, #72]	@ 0x48
 8003e48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e4a:	f003 0301 	and.w	r3, r3, #1
 8003e4e:	9301      	str	r3, [sp, #4]
 8003e50:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003e52:	2200      	movs	r2, #0
 8003e54:	4611      	mov	r1, r2
 8003e56:	200b      	movs	r0, #11
 8003e58:	f001 fefe 	bl	8005c58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003e5c:	200b      	movs	r0, #11
 8003e5e:	f001 ff0b 	bl	8005c78 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8003e62:	2200      	movs	r2, #0
 8003e64:	4611      	mov	r1, r2
 8003e66:	200c      	movs	r0, #12
 8003e68:	f001 fef6 	bl	8005c58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8003e6c:	200c      	movs	r0, #12
 8003e6e:	f001 ff03 	bl	8005c78 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8003e72:	2200      	movs	r2, #0
 8003e74:	4611      	mov	r1, r2
 8003e76:	200d      	movs	r0, #13
 8003e78:	f001 feee 	bl	8005c58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8003e7c:	200d      	movs	r0, #13
 8003e7e:	f001 fefb 	bl	8005c78 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8003e82:	2200      	movs	r2, #0
 8003e84:	4611      	mov	r1, r2
 8003e86:	200e      	movs	r0, #14
 8003e88:	f001 fee6 	bl	8005c58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8003e8c:	200e      	movs	r0, #14
 8003e8e:	f001 fef3 	bl	8005c78 <HAL_NVIC_EnableIRQ>

}
 8003e92:	b003      	add	sp, #12
 8003e94:	f85d fb04 	ldr.w	pc, [sp], #4
 8003e98:	40021000 	.word	0x40021000

08003e9c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ea0:	b08a      	sub	sp, #40	@ 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ea2:	2400      	movs	r4, #0
 8003ea4:	9405      	str	r4, [sp, #20]
 8003ea6:	9406      	str	r4, [sp, #24]
 8003ea8:	9407      	str	r4, [sp, #28]
 8003eaa:	9408      	str	r4, [sp, #32]
 8003eac:	9409      	str	r4, [sp, #36]	@ 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003eae:	4b43      	ldr	r3, [pc, #268]	@ (8003fbc <MX_GPIO_Init+0x120>)
 8003eb0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003eb2:	f042 0204 	orr.w	r2, r2, #4
 8003eb6:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003eb8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003eba:	f002 0204 	and.w	r2, r2, #4
 8003ebe:	9201      	str	r2, [sp, #4]
 8003ec0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003ec2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003ec4:	f042 0220 	orr.w	r2, r2, #32
 8003ec8:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003eca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003ecc:	f002 0220 	and.w	r2, r2, #32
 8003ed0:	9202      	str	r2, [sp, #8]
 8003ed2:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ed4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003ed6:	f042 0201 	orr.w	r2, r2, #1
 8003eda:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003edc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003ede:	f002 0201 	and.w	r2, r2, #1
 8003ee2:	9203      	str	r2, [sp, #12]
 8003ee4:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ee6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003ee8:	f042 0202 	orr.w	r2, r2, #2
 8003eec:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003eee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ef0:	f003 0302 	and.w	r3, r3, #2
 8003ef4:	9304      	str	r3, [sp, #16]
 8003ef6:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ON_BOARD_LED_GPIO_Port, ON_BOARD_LED_Pin, GPIO_PIN_SET);
 8003ef8:	f8df 80c8 	ldr.w	r8, [pc, #200]	@ 8003fc4 <MX_GPIO_Init+0x128>
 8003efc:	2201      	movs	r2, #1
 8003efe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003f02:	4640      	mov	r0, r8
 8003f04:	f002 fc42 	bl	800678c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_PIN_GPIO_Port, TEST_PIN_Pin, GPIO_PIN_RESET);
 8003f08:	4e2d      	ldr	r6, [pc, #180]	@ (8003fc0 <MX_GPIO_Init+0x124>)
 8003f0a:	4622      	mov	r2, r4
 8003f0c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003f10:	4630      	mov	r0, r6
 8003f12:	f002 fc3b 	bl	800678c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 8003f16:	2201      	movs	r2, #1
 8003f18:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003f1c:	4630      	mov	r0, r6
 8003f1e:	f002 fc35 	bl	800678c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MT_PH_GPIO_Port, MT_PH_Pin, GPIO_PIN_RESET);
 8003f22:	4622      	mov	r2, r4
 8003f24:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003f28:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003f2c:	f002 fc2e 	bl	800678c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin, GPIO_PIN_SET);
 8003f30:	2201      	movs	r2, #1
 8003f32:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003f36:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003f3a:	f002 fc27 	bl	800678c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ON_BOARD_LED_Pin;
 8003f3e:	f44f 5700 	mov.w	r7, #8192	@ 0x2000
 8003f42:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f44:	2501      	movs	r5, #1
 8003f46:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f48:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f4a:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(ON_BOARD_LED_GPIO_Port, &GPIO_InitStruct);
 8003f4c:	a905      	add	r1, sp, #20
 8003f4e:	4640      	mov	r0, r8
 8003f50:	f002 faa4 	bl	800649c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TEST_PIN_Pin;
 8003f54:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f56:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f58:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003f5a:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(TEST_PIN_GPIO_Port, &GPIO_InitStruct);
 8003f5c:	a905      	add	r1, sp, #20
 8003f5e:	4630      	mov	r0, r6
 8003f60:	f002 fa9c 	bl	800649c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED3_Pin;
 8003f64:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f68:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f6a:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f6c:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f6e:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 8003f70:	a905      	add	r1, sp, #20
 8003f72:	4630      	mov	r0, r6
 8003f74:	f002 fa92 	bl	800649c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MT_PH_Pin;
 8003f78:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003f7c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f7e:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f80:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f82:	2303      	movs	r3, #3
 8003f84:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(MT_PH_GPIO_Port, &GPIO_InitStruct);
 8003f86:	a905      	add	r1, sp, #20
 8003f88:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003f8c:	f002 fa86 	bl	800649c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8003f90:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8003f94:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f96:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f98:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f9a:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f9c:	a905      	add	r1, sp, #20
 8003f9e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003fa2:	f002 fa7b 	bl	800649c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = BTN3_Pin|BTN1_Pin|BTN2_Pin;
 8003fa6:	2338      	movs	r3, #56	@ 0x38
 8003fa8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003faa:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003fac:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fae:	a905      	add	r1, sp, #20
 8003fb0:	4630      	mov	r0, r6
 8003fb2:	f002 fa73 	bl	800649c <HAL_GPIO_Init>

}
 8003fb6:	b00a      	add	sp, #40	@ 0x28
 8003fb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003fbc:	40021000 	.word	0x40021000
 8003fc0:	48000400 	.word	0x48000400
 8003fc4:	48000800 	.word	0x48000800

08003fc8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003fc8:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003fca:	4812      	ldr	r0, [pc, #72]	@ (8004014 <MX_I2C1_Init+0x4c>)
 8003fcc:	4b12      	ldr	r3, [pc, #72]	@ (8004018 <MX_I2C1_Init+0x50>)
 8003fce:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x10802D9B;
 8003fd0:	4b12      	ldr	r3, [pc, #72]	@ (800401c <MX_I2C1_Init+0x54>)
 8003fd2:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003fd8:	2201      	movs	r2, #1
 8003fda:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003fdc:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003fde:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003fe0:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003fe2:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003fe4:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003fe6:	f002 fd74 	bl	8006ad2 <HAL_I2C_Init>
 8003fea:	b950      	cbnz	r0, 8004002 <MX_I2C1_Init+0x3a>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003fec:	2100      	movs	r1, #0
 8003fee:	4809      	ldr	r0, [pc, #36]	@ (8004014 <MX_I2C1_Init+0x4c>)
 8003ff0:	f002 ff46 	bl	8006e80 <HAL_I2CEx_ConfigAnalogFilter>
 8003ff4:	b940      	cbnz	r0, 8004008 <MX_I2C1_Init+0x40>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003ff6:	2100      	movs	r1, #0
 8003ff8:	4806      	ldr	r0, [pc, #24]	@ (8004014 <MX_I2C1_Init+0x4c>)
 8003ffa:	f002 ff6f 	bl	8006edc <HAL_I2CEx_ConfigDigitalFilter>
 8003ffe:	b930      	cbnz	r0, 800400e <MX_I2C1_Init+0x46>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004000:	bd08      	pop	{r3, pc}
    Error_Handler();
 8004002:	f000 f8b7 	bl	8004174 <Error_Handler>
 8004006:	e7f1      	b.n	8003fec <MX_I2C1_Init+0x24>
    Error_Handler();
 8004008:	f000 f8b4 	bl	8004174 <Error_Handler>
 800400c:	e7f3      	b.n	8003ff6 <MX_I2C1_Init+0x2e>
    Error_Handler();
 800400e:	f000 f8b1 	bl	8004174 <Error_Handler>
}
 8004012:	e7f5      	b.n	8004000 <MX_I2C1_Init+0x38>
 8004014:	20005808 	.word	0x20005808
 8004018:	40005400 	.word	0x40005400
 800401c:	10802d9b 	.word	0x10802d9b

08004020 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004024:	b09e      	sub	sp, #120	@ 0x78
 8004026:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004028:	2100      	movs	r1, #0
 800402a:	9119      	str	r1, [sp, #100]	@ 0x64
 800402c:	911a      	str	r1, [sp, #104]	@ 0x68
 800402e:	911b      	str	r1, [sp, #108]	@ 0x6c
 8004030:	911c      	str	r1, [sp, #112]	@ 0x70
 8004032:	911d      	str	r1, [sp, #116]	@ 0x74
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004034:	2254      	movs	r2, #84	@ 0x54
 8004036:	a804      	add	r0, sp, #16
 8004038:	f007 f94c 	bl	800b2d4 <memset>
  if(i2cHandle->Instance==I2C1)
 800403c:	6822      	ldr	r2, [r4, #0]
 800403e:	4b27      	ldr	r3, [pc, #156]	@ (80040dc <HAL_I2C_MspInit+0xbc>)
 8004040:	429a      	cmp	r2, r3
 8004042:	d002      	beq.n	800404a <HAL_I2C_MspInit+0x2a>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8004044:	b01e      	add	sp, #120	@ 0x78
 8004046:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800404a:	2340      	movs	r3, #64	@ 0x40
 800404c:	9304      	str	r3, [sp, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800404e:	a804      	add	r0, sp, #16
 8004050:	f003 fc06 	bl	8007860 <HAL_RCCEx_PeriphCLKConfig>
 8004054:	2800      	cmp	r0, #0
 8004056:	d13e      	bne.n	80040d6 <HAL_I2C_MspInit+0xb6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004058:	4c21      	ldr	r4, [pc, #132]	@ (80040e0 <HAL_I2C_MspInit+0xc0>)
 800405a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800405c:	f043 0301 	orr.w	r3, r3, #1
 8004060:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8004062:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8004064:	f003 0301 	and.w	r3, r3, #1
 8004068:	9301      	str	r3, [sp, #4]
 800406a:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800406c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800406e:	f043 0302 	orr.w	r3, r3, #2
 8004072:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8004074:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8004076:	f003 0302 	and.w	r3, r3, #2
 800407a:	9302      	str	r3, [sp, #8]
 800407c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800407e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004082:	9319      	str	r3, [sp, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004084:	f04f 0812 	mov.w	r8, #18
 8004088:	f8cd 8068 	str.w	r8, [sp, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800408c:	2700      	movs	r7, #0
 800408e:	971b      	str	r7, [sp, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004090:	2603      	movs	r6, #3
 8004092:	961c      	str	r6, [sp, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004094:	2504      	movs	r5, #4
 8004096:	951d      	str	r5, [sp, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004098:	a919      	add	r1, sp, #100	@ 0x64
 800409a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800409e:	f002 f9fd 	bl	800649c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80040a2:	2380      	movs	r3, #128	@ 0x80
 80040a4:	9319      	str	r3, [sp, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80040a6:	f8cd 8068 	str.w	r8, [sp, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040aa:	971b      	str	r7, [sp, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040ac:	961c      	str	r6, [sp, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80040ae:	951d      	str	r5, [sp, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040b0:	a919      	add	r1, sp, #100	@ 0x64
 80040b2:	480c      	ldr	r0, [pc, #48]	@ (80040e4 <HAL_I2C_MspInit+0xc4>)
 80040b4:	f002 f9f2 	bl	800649c <HAL_GPIO_Init>
    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB7);
 80040b8:	4a0b      	ldr	r2, [pc, #44]	@ (80040e8 <HAL_I2C_MspInit+0xc8>)
 80040ba:	6853      	ldr	r3, [r2, #4]
 80040bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040c0:	6053      	str	r3, [r2, #4]
    __HAL_RCC_I2C1_CLK_ENABLE();
 80040c2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80040c4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80040c8:	65a3      	str	r3, [r4, #88]	@ 0x58
 80040ca:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80040cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80040d0:	9303      	str	r3, [sp, #12]
 80040d2:	9b03      	ldr	r3, [sp, #12]
}
 80040d4:	e7b6      	b.n	8004044 <HAL_I2C_MspInit+0x24>
      Error_Handler();
 80040d6:	f000 f84d 	bl	8004174 <Error_Handler>
 80040da:	e7bd      	b.n	8004058 <HAL_I2C_MspInit+0x38>
 80040dc:	40005400 	.word	0x40005400
 80040e0:	40021000 	.word	0x40021000
 80040e4:	48000400 	.word	0x48000400
 80040e8:	40010000 	.word	0x40010000

080040ec <logInit>:
  log_buf_list.buf_length_max = LOG_LIST_BUF_MAX;
  log_buf_list.buf_index      = 0;
  log_buf_list.buf            = buf_list;
#endif

  is_init = true;
 80040ec:	2001      	movs	r0, #1
 80040ee:	4b01      	ldr	r3, [pc, #4]	@ (80040f4 <logInit+0x8>)
 80040f0:	7018      	strb	r0, [r3, #0]
  cliAdd("log", cliCmd);
#endif
#endif

  return true;
}
 80040f2:	4770      	bx	lr
 80040f4:	20005962 	.word	0x20005962

080040f8 <logOpen>:
  is_boot_log = enable;
#endif
}

bool logOpen(uint8_t ch, uint32_t baud)
{
 80040f8:	b510      	push	{r4, lr}
  log_ch   = ch;
 80040fa:	4b05      	ldr	r3, [pc, #20]	@ (8004110 <logOpen+0x18>)
 80040fc:	7018      	strb	r0, [r3, #0]
  log_baud = baud;
 80040fe:	4b05      	ldr	r3, [pc, #20]	@ (8004114 <logOpen+0x1c>)
 8004100:	6019      	str	r1, [r3, #0]
  is_open  = true;
 8004102:	4c05      	ldr	r4, [pc, #20]	@ (8004118 <logOpen+0x20>)
 8004104:	2301      	movs	r3, #1
 8004106:	7023      	strb	r3, [r4, #0]

  is_open = uartOpen(ch, baud);
 8004108:	f7fe fb22 	bl	8002750 <uartOpen>
 800410c:	7020      	strb	r0, [r4, #0]

  return is_open;
}
 800410e:	bd10      	pop	{r4, pc}
 8004110:	20005960 	.word	0x20005960
 8004114:	2000595c 	.word	0x2000595c
 8004118:	20005961 	.word	0x20005961

0800411c <logPrintf>:
  return true;
}
#endif

void logPrintf(const char *fmt, ...)
{
 800411c:	b40f      	push	{r0, r1, r2, r3}
 800411e:	b500      	push	{lr}
 8004120:	b083      	sub	sp, #12
#endif

  va_list args;
  int len;

  if (is_init != true) return;
 8004122:	4b0f      	ldr	r3, [pc, #60]	@ (8004160 <logPrintf+0x44>)
 8004124:	781b      	ldrb	r3, [r3, #0]
 8004126:	b923      	cbnz	r3, 8004132 <logPrintf+0x16>
  va_end(args);

#ifdef _USE_HW_RTOS
  unLock();
#endif
}
 8004128:	b003      	add	sp, #12
 800412a:	f85d eb04 	ldr.w	lr, [sp], #4
 800412e:	b004      	add	sp, #16
 8004130:	4770      	bx	lr
  va_start(args, fmt);
 8004132:	ab05      	add	r3, sp, #20
 8004134:	9301      	str	r3, [sp, #4]
  len = vsnprintf(print_buf, 256, fmt, args);
 8004136:	9a04      	ldr	r2, [sp, #16]
 8004138:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800413c:	4809      	ldr	r0, [pc, #36]	@ (8004164 <logPrintf+0x48>)
 800413e:	f007 f8bb 	bl	800b2b8 <vsniprintf>
  if (is_open == true && is_enable == true)
 8004142:	4b09      	ldr	r3, [pc, #36]	@ (8004168 <logPrintf+0x4c>)
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d0ee      	beq.n	8004128 <logPrintf+0xc>
 800414a:	4b08      	ldr	r3, [pc, #32]	@ (800416c <logPrintf+0x50>)
 800414c:	781b      	ldrb	r3, [r3, #0]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d0ea      	beq.n	8004128 <logPrintf+0xc>
    uartWrite(log_ch, (uint8_t *)print_buf, len);
 8004152:	4602      	mov	r2, r0
 8004154:	4903      	ldr	r1, [pc, #12]	@ (8004164 <logPrintf+0x48>)
 8004156:	4b06      	ldr	r3, [pc, #24]	@ (8004170 <logPrintf+0x54>)
 8004158:	7818      	ldrb	r0, [r3, #0]
 800415a:	f7fe fc67 	bl	8002a2c <uartWrite>
  va_end(args);
 800415e:	e7e3      	b.n	8004128 <logPrintf+0xc>
 8004160:	20005962 	.word	0x20005962
 8004164:	2000585c 	.word	0x2000585c
 8004168:	20005961 	.word	0x20005961
 800416c:	2000004c 	.word	0x2000004c
 8004170:	20005960 	.word	0x20005960

08004174 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004174:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004176:	e7fe      	b.n	8004176 <Error_Handler+0x2>

08004178 <SystemClock_Config>:
{
 8004178:	b500      	push	{lr}
 800417a:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800417c:	2238      	movs	r2, #56	@ 0x38
 800417e:	2100      	movs	r1, #0
 8004180:	a806      	add	r0, sp, #24
 8004182:	f007 f8a7 	bl	800b2d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004186:	2000      	movs	r0, #0
 8004188:	9001      	str	r0, [sp, #4]
 800418a:	9002      	str	r0, [sp, #8]
 800418c:	9003      	str	r0, [sp, #12]
 800418e:	9004      	str	r0, [sp, #16]
 8004190:	9005      	str	r0, [sp, #20]
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8004192:	f002 fecf 	bl	8006f34 <HAL_PWREx_ControlVoltageScaling>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004196:	2301      	movs	r3, #1
 8004198:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800419a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800419e:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80041a0:	2302      	movs	r3, #2
 80041a2:	930d      	str	r3, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80041a4:	2203      	movs	r2, #3
 80041a6:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV3;
 80041a8:	920f      	str	r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80041aa:	2255      	movs	r2, #85	@ 0x55
 80041ac:	9210      	str	r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80041ae:	9311      	str	r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80041b0:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80041b2:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80041b4:	a806      	add	r0, sp, #24
 80041b6:	f002 ff77 	bl	80070a8 <HAL_RCC_OscConfig>
 80041ba:	b980      	cbnz	r0, 80041de <SystemClock_Config+0x66>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80041bc:	230f      	movs	r3, #15
 80041be:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80041c0:	2303      	movs	r3, #3
 80041c2:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80041c4:	2300      	movs	r3, #0
 80041c6:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80041c8:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80041ca:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80041cc:	2104      	movs	r1, #4
 80041ce:	eb0d 0001 	add.w	r0, sp, r1
 80041d2:	f003 fa1f 	bl	8007614 <HAL_RCC_ClockConfig>
 80041d6:	b920      	cbnz	r0, 80041e2 <SystemClock_Config+0x6a>
}
 80041d8:	b015      	add	sp, #84	@ 0x54
 80041da:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80041de:	f7ff ffc9 	bl	8004174 <Error_Handler>
    Error_Handler();
 80041e2:	f7ff ffc7 	bl	8004174 <Error_Handler>

080041e6 <main>:
{
 80041e6:	b508      	push	{r3, lr}
  HAL_Init();
 80041e8:	f000 fc62 	bl	8004ab0 <HAL_Init>
  SystemClock_Config();
 80041ec:	f7ff ffc4 	bl	8004178 <SystemClock_Config>
  MX_GPIO_Init();
 80041f0:	f7ff fe54 	bl	8003e9c <MX_GPIO_Init>
  MX_DMA_Init();
 80041f4:	f7ff fe18 	bl	8003e28 <MX_DMA_Init>
  MX_DAC1_Init();
 80041f8:	f7ff fd40 	bl	8003c7c <MX_DAC1_Init>
  MX_USART1_UART_Init();
 80041fc:	f000 fa7a 	bl	80046f4 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 8004200:	f000 f8e8 	bl	80043d4 <MX_TIM6_Init>
  MX_I2C1_Init();
 8004204:	f7ff fee0 	bl	8003fc8 <MX_I2C1_Init>
  MX_ADC1_Init();
 8004208:	f7ff f818 	bl	800323c <MX_ADC1_Init>
  MX_TIM8_Init();
 800420c:	f000 f934 	bl	8004478 <MX_TIM8_Init>
  MX_USART3_UART_Init();
 8004210:	f000 faa4 	bl	800475c <MX_USART3_UART_Init>
  MX_TIM7_Init();
 8004214:	f000 f908 	bl	8004428 <MX_TIM7_Init>
  MX_DAC2_Init();
 8004218:	f7ff fd5e 	bl	8003cd8 <MX_DAC2_Init>
  MX_TIM1_Init();
 800421c:	f000 f9e8 	bl	80045f0 <MX_TIM1_Init>
  hwInit();
 8004220:	f7fe ffbc 	bl	800319c <hwInit>
  apInit();
 8004224:	f7fc ff16 	bl	8001054 <apInit>
  apMain();
 8004228:	f7fc ff4c 	bl	80010c4 <apMain>
  while (1)
 800422c:	e7fe      	b.n	800422c <main+0x46>
	...

08004230 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004230:	b500      	push	{lr}
 8004232:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004234:	4b0b      	ldr	r3, [pc, #44]	@ (8004264 <HAL_MspInit+0x34>)
 8004236:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004238:	f042 0201 	orr.w	r2, r2, #1
 800423c:	661a      	str	r2, [r3, #96]	@ 0x60
 800423e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004240:	f002 0201 	and.w	r2, r2, #1
 8004244:	9200      	str	r2, [sp, #0]
 8004246:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004248:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800424a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800424e:	659a      	str	r2, [r3, #88]	@ 0x58
 8004250:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004252:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004256:	9301      	str	r3, [sp, #4]
 8004258:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800425a:	f002 fef1 	bl	8007040 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800425e:	b003      	add	sp, #12
 8004260:	f85d fb04 	ldr.w	pc, [sp], #4
 8004264:	40021000 	.word	0x40021000

08004268 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004268:	e7fe      	b.n	8004268 <NMI_Handler>

0800426a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800426a:	e7fe      	b.n	800426a <HardFault_Handler>

0800426c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800426c:	e7fe      	b.n	800426c <MemManage_Handler>

0800426e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800426e:	e7fe      	b.n	800426e <BusFault_Handler>

08004270 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004270:	e7fe      	b.n	8004270 <UsageFault_Handler>

08004272 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004272:	4770      	bx	lr

08004274 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004274:	4770      	bx	lr

08004276 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004276:	4770      	bx	lr

08004278 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004278:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800427a:	f000 fc29 	bl	8004ad0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800427e:	bd08      	pop	{r3, pc}

08004280 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004280:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8004282:	4802      	ldr	r0, [pc, #8]	@ (800428c <DMA1_Channel1_IRQHandler+0xc>)
 8004284:	f002 f8a7 	bl	80063d6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004288:	bd08      	pop	{r3, pc}
 800428a:	bf00      	nop
 800428c:	20005780 	.word	0x20005780

08004290 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8004290:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8004292:	4802      	ldr	r0, [pc, #8]	@ (800429c <DMA1_Channel2_IRQHandler+0xc>)
 8004294:	f002 f89f 	bl	80063d6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8004298:	bd08      	pop	{r3, pc}
 800429a:	bf00      	nop
 800429c:	20005b58 	.word	0x20005b58

080042a0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80042a0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80042a2:	4802      	ldr	r0, [pc, #8]	@ (80042ac <DMA1_Channel3_IRQHandler+0xc>)
 80042a4:	f002 f897 	bl	80063d6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80042a8:	bd08      	pop	{r3, pc}
 80042aa:	bf00      	nop
 80042ac:	20005af8 	.word	0x20005af8

080042b0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80042b0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80042b2:	4802      	ldr	r0, [pc, #8]	@ (80042bc <DMA1_Channel4_IRQHandler+0xc>)
 80042b4:	f002 f88f 	bl	80063d6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80042b8:	bd08      	pop	{r3, pc}
 80042ba:	bf00      	nop
 80042bc:	20005a98 	.word	0x20005a98

080042c0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80042c0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80042c2:	4802      	ldr	r0, [pc, #8]	@ (80042cc <ADC1_2_IRQHandler+0xc>)
 80042c4:	f000 fdac 	bl	8004e20 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80042c8:	bd08      	pop	{r3, pc}
 80042ca:	bf00      	nop
 80042cc:	20005084 	.word	0x20005084

080042d0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80042d0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80042d2:	4802      	ldr	r0, [pc, #8]	@ (80042dc <TIM1_UP_TIM16_IRQHandler+0xc>)
 80042d4:	f003 feab 	bl	800802e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80042d8:	bd08      	pop	{r3, pc}
 80042da:	bf00      	nop
 80042dc:	20005a4c 	.word	0x20005a4c

080042e0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 80042e0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80042e2:	4802      	ldr	r0, [pc, #8]	@ (80042ec <USART3_IRQHandler+0xc>)
 80042e4:	f004 fcb8 	bl	8008c58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80042e8:	bd08      	pop	{r3, pc}
 80042ea:	bf00      	nop
 80042ec:	20005bb8 	.word	0x20005bb8

080042f0 <TIM7_DAC_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt, DAC2 and DAC4 channel underrun error interrupts.
  */
void TIM7_DAC_IRQHandler(void)
{
 80042f0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM7_DAC_IRQn 0 */

  /* USER CODE END TIM7_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80042f2:	4803      	ldr	r0, [pc, #12]	@ (8004300 <TIM7_DAC_IRQHandler+0x10>)
 80042f4:	f003 fe9b 	bl	800802e <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac2);
 80042f8:	4802      	ldr	r0, [pc, #8]	@ (8004304 <TIM7_DAC_IRQHandler+0x14>)
 80042fa:	f001 fd53 	bl	8005da4 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM7_DAC_IRQn 1 */

  /* USER CODE END TIM7_DAC_IRQn 1 */
}
 80042fe:	bd08      	pop	{r3, pc}
 8004300:	200059b4 	.word	0x200059b4
 8004304:	200057e0 	.word	0x200057e0

08004308 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8004308:	2001      	movs	r0, #1
 800430a:	4770      	bx	lr

0800430c <_kill>:

int _kill(int pid, int sig)
{
 800430c:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800430e:	f007 f871 	bl	800b3f4 <__errno>
 8004312:	2316      	movs	r3, #22
 8004314:	6003      	str	r3, [r0, #0]
  return -1;
}
 8004316:	f04f 30ff 	mov.w	r0, #4294967295
 800431a:	bd08      	pop	{r3, pc}

0800431c <_exit>:

void _exit (int status)
{
 800431c:	b508      	push	{r3, lr}
  _kill(status, -1);
 800431e:	f04f 31ff 	mov.w	r1, #4294967295
 8004322:	f7ff fff3 	bl	800430c <_kill>
  while (1) {}    /* Make sure we hang here */
 8004326:	e7fe      	b.n	8004326 <_exit+0xa>

08004328 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004328:	b570      	push	{r4, r5, r6, lr}
 800432a:	460c      	mov	r4, r1
 800432c:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800432e:	2500      	movs	r5, #0
 8004330:	e006      	b.n	8004340 <_read+0x18>
  {
    *ptr++ = __io_getchar();
 8004332:	f3af 8000 	nop.w
 8004336:	4621      	mov	r1, r4
 8004338:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800433c:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 800433e:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004340:	42b5      	cmp	r5, r6
 8004342:	dbf6      	blt.n	8004332 <_read+0xa>
  }

  return len;
}
 8004344:	4630      	mov	r0, r6
 8004346:	bd70      	pop	{r4, r5, r6, pc}

08004348 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004348:	b510      	push	{r4, lr}
 800434a:	4614      	mov	r4, r2
  (void)file;

  HAL_UART_Transmit(&huart1, (const uint8_t *)ptr, len, 100);
 800434c:	2364      	movs	r3, #100	@ 0x64
 800434e:	b292      	uxth	r2, r2
 8004350:	4802      	ldr	r0, [pc, #8]	@ (800435c <_write+0x14>)
 8004352:	f005 f8f5 	bl	8009540 <HAL_UART_Transmit>

  return len;
}
 8004356:	4620      	mov	r0, r4
 8004358:	bd10      	pop	{r4, pc}
 800435a:	bf00      	nop
 800435c:	20005c4c 	.word	0x20005c4c

08004360 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8004360:	f04f 30ff 	mov.w	r0, #4294967295
 8004364:	4770      	bx	lr

08004366 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8004366:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800436a:	604b      	str	r3, [r1, #4]
  return 0;
}
 800436c:	2000      	movs	r0, #0
 800436e:	4770      	bx	lr

08004370 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8004370:	2001      	movs	r0, #1
 8004372:	4770      	bx	lr

08004374 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8004374:	2000      	movs	r0, #0
 8004376:	4770      	bx	lr

08004378 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004378:	b510      	push	{r4, lr}
 800437a:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800437c:	4a0c      	ldr	r2, [pc, #48]	@ (80043b0 <_sbrk+0x38>)
 800437e:	490d      	ldr	r1, [pc, #52]	@ (80043b4 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004380:	480d      	ldr	r0, [pc, #52]	@ (80043b8 <_sbrk+0x40>)
 8004382:	6800      	ldr	r0, [r0, #0]
 8004384:	b140      	cbz	r0, 8004398 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004386:	480c      	ldr	r0, [pc, #48]	@ (80043b8 <_sbrk+0x40>)
 8004388:	6800      	ldr	r0, [r0, #0]
 800438a:	4403      	add	r3, r0
 800438c:	1a52      	subs	r2, r2, r1
 800438e:	4293      	cmp	r3, r2
 8004390:	d806      	bhi.n	80043a0 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8004392:	4a09      	ldr	r2, [pc, #36]	@ (80043b8 <_sbrk+0x40>)
 8004394:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8004396:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8004398:	4807      	ldr	r0, [pc, #28]	@ (80043b8 <_sbrk+0x40>)
 800439a:	4c08      	ldr	r4, [pc, #32]	@ (80043bc <_sbrk+0x44>)
 800439c:	6004      	str	r4, [r0, #0]
 800439e:	e7f2      	b.n	8004386 <_sbrk+0xe>
    errno = ENOMEM;
 80043a0:	f007 f828 	bl	800b3f4 <__errno>
 80043a4:	230c      	movs	r3, #12
 80043a6:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80043a8:	f04f 30ff 	mov.w	r0, #4294967295
 80043ac:	e7f3      	b.n	8004396 <_sbrk+0x1e>
 80043ae:	bf00      	nop
 80043b0:	20020000 	.word	0x20020000
 80043b4:	00000400 	.word	0x00000400
 80043b8:	20005964 	.word	0x20005964
 80043bc:	20005e30 	.word	0x20005e30

080043c0 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80043c0:	4a03      	ldr	r2, [pc, #12]	@ (80043d0 <SystemInit+0x10>)
 80043c2:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80043c6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80043ca:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80043ce:	4770      	bx	lr
 80043d0:	e000ed00 	.word	0xe000ed00

080043d4 <MX_TIM6_Init>:
  HAL_TIM_MspPostInit(&htim1);

}
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80043d4:	b500      	push	{lr}
 80043d6:	b085      	sub	sp, #20

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80043d8:	2300      	movs	r3, #0
 80043da:	9301      	str	r3, [sp, #4]
 80043dc:	9302      	str	r3, [sp, #8]
 80043de:	9303      	str	r3, [sp, #12]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80043e0:	480f      	ldr	r0, [pc, #60]	@ (8004420 <MX_TIM6_Init+0x4c>)
 80043e2:	4a10      	ldr	r2, [pc, #64]	@ (8004424 <MX_TIM6_Init+0x50>)
 80043e4:	6002      	str	r2, [r0, #0]
  htim6.Init.Prescaler = 17-1;
 80043e6:	2210      	movs	r2, #16
 80043e8:	6042      	str	r2, [r0, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80043ea:	6083      	str	r3, [r0, #8]
  htim6.Init.Period = 624;
 80043ec:	f44f 721c 	mov.w	r2, #624	@ 0x270
 80043f0:	60c2      	str	r2, [r0, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80043f2:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80043f4:	f003 ff88 	bl	8008308 <HAL_TIM_Base_Init>
 80043f8:	b958      	cbnz	r0, 8004412 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80043fa:	2320      	movs	r3, #32
 80043fc:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80043fe:	2300      	movs	r3, #0
 8004400:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004402:	a901      	add	r1, sp, #4
 8004404:	4806      	ldr	r0, [pc, #24]	@ (8004420 <MX_TIM6_Init+0x4c>)
 8004406:	f004 fa47 	bl	8008898 <HAL_TIMEx_MasterConfigSynchronization>
 800440a:	b928      	cbnz	r0, 8004418 <MX_TIM6_Init+0x44>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800440c:	b005      	add	sp, #20
 800440e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8004412:	f7ff feaf 	bl	8004174 <Error_Handler>
 8004416:	e7f0      	b.n	80043fa <MX_TIM6_Init+0x26>
    Error_Handler();
 8004418:	f7ff feac 	bl	8004174 <Error_Handler>
}
 800441c:	e7f6      	b.n	800440c <MX_TIM6_Init+0x38>
 800441e:	bf00      	nop
 8004420:	20005a00 	.word	0x20005a00
 8004424:	40001000 	.word	0x40001000

08004428 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8004428:	b500      	push	{lr}
 800442a:	b085      	sub	sp, #20

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800442c:	2300      	movs	r3, #0
 800442e:	9301      	str	r3, [sp, #4]
 8004430:	9302      	str	r3, [sp, #8]
 8004432:	9303      	str	r3, [sp, #12]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8004434:	480e      	ldr	r0, [pc, #56]	@ (8004470 <MX_TIM7_Init+0x48>)
 8004436:	4a0f      	ldr	r2, [pc, #60]	@ (8004474 <MX_TIM7_Init+0x4c>)
 8004438:	6002      	str	r2, [r0, #0]
  htim7.Init.Prescaler = 170-1;
 800443a:	22a9      	movs	r2, #169	@ 0xa9
 800443c:	6042      	str	r2, [r0, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800443e:	6083      	str	r3, [r0, #8]
  htim7.Init.Period = 99;
 8004440:	2263      	movs	r2, #99	@ 0x63
 8004442:	60c2      	str	r2, [r0, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004444:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004446:	f003 ff5f 	bl	8008308 <HAL_TIM_Base_Init>
 800444a:	b950      	cbnz	r0, 8004462 <MX_TIM7_Init+0x3a>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800444c:	2300      	movs	r3, #0
 800444e:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004450:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004452:	a901      	add	r1, sp, #4
 8004454:	4806      	ldr	r0, [pc, #24]	@ (8004470 <MX_TIM7_Init+0x48>)
 8004456:	f004 fa1f 	bl	8008898 <HAL_TIMEx_MasterConfigSynchronization>
 800445a:	b928      	cbnz	r0, 8004468 <MX_TIM7_Init+0x40>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800445c:	b005      	add	sp, #20
 800445e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8004462:	f7ff fe87 	bl	8004174 <Error_Handler>
 8004466:	e7f1      	b.n	800444c <MX_TIM7_Init+0x24>
    Error_Handler();
 8004468:	f7ff fe84 	bl	8004174 <Error_Handler>
}
 800446c:	e7f6      	b.n	800445c <MX_TIM7_Init+0x34>
 800446e:	bf00      	nop
 8004470:	200059b4 	.word	0x200059b4
 8004474:	40001400 	.word	0x40001400

08004478 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8004478:	b500      	push	{lr}
 800447a:	b089      	sub	sp, #36	@ 0x24

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800447c:	2300      	movs	r3, #0
 800447e:	9304      	str	r3, [sp, #16]
 8004480:	9305      	str	r3, [sp, #20]
 8004482:	9306      	str	r3, [sp, #24]
 8004484:	9307      	str	r3, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004486:	9301      	str	r3, [sp, #4]
 8004488:	9302      	str	r3, [sp, #8]
 800448a:	9303      	str	r3, [sp, #12]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800448c:	4815      	ldr	r0, [pc, #84]	@ (80044e4 <MX_TIM8_Init+0x6c>)
 800448e:	4a16      	ldr	r2, [pc, #88]	@ (80044e8 <MX_TIM8_Init+0x70>)
 8004490:	6002      	str	r2, [r0, #0]
  htim8.Init.Prescaler = 170-1;
 8004492:	22a9      	movs	r2, #169	@ 0xa9
 8004494:	6042      	str	r2, [r0, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004496:	6083      	str	r3, [r0, #8]
  htim8.Init.Period = 99;
 8004498:	2263      	movs	r2, #99	@ 0x63
 800449a:	60c2      	str	r2, [r0, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800449c:	6103      	str	r3, [r0, #16]
  htim8.Init.RepetitionCounter = 0;
 800449e:	6143      	str	r3, [r0, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80044a0:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80044a2:	f003 ff31 	bl	8008308 <HAL_TIM_Base_Init>
 80044a6:	b9a0      	cbnz	r0, 80044d2 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80044a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80044ac:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80044ae:	a904      	add	r1, sp, #16
 80044b0:	480c      	ldr	r0, [pc, #48]	@ (80044e4 <MX_TIM8_Init+0x6c>)
 80044b2:	f004 f881 	bl	80085b8 <HAL_TIM_ConfigClockSource>
 80044b6:	b978      	cbnz	r0, 80044d8 <MX_TIM8_Init+0x60>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80044b8:	2320      	movs	r3, #32
 80044ba:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80044bc:	2300      	movs	r3, #0
 80044be:	9302      	str	r3, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80044c0:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80044c2:	a901      	add	r1, sp, #4
 80044c4:	4807      	ldr	r0, [pc, #28]	@ (80044e4 <MX_TIM8_Init+0x6c>)
 80044c6:	f004 f9e7 	bl	8008898 <HAL_TIMEx_MasterConfigSynchronization>
 80044ca:	b940      	cbnz	r0, 80044de <MX_TIM8_Init+0x66>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80044cc:	b009      	add	sp, #36	@ 0x24
 80044ce:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80044d2:	f7ff fe4f 	bl	8004174 <Error_Handler>
 80044d6:	e7e7      	b.n	80044a8 <MX_TIM8_Init+0x30>
    Error_Handler();
 80044d8:	f7ff fe4c 	bl	8004174 <Error_Handler>
 80044dc:	e7ec      	b.n	80044b8 <MX_TIM8_Init+0x40>
    Error_Handler();
 80044de:	f7ff fe49 	bl	8004174 <Error_Handler>
}
 80044e2:	e7f3      	b.n	80044cc <MX_TIM8_Init+0x54>
 80044e4:	20005968 	.word	0x20005968
 80044e8:	40013400 	.word	0x40013400

080044ec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80044ec:	b500      	push	{lr}
 80044ee:	b085      	sub	sp, #20

  if(tim_baseHandle->Instance==TIM1)
 80044f0:	6803      	ldr	r3, [r0, #0]
 80044f2:	4a25      	ldr	r2, [pc, #148]	@ (8004588 <HAL_TIM_Base_MspInit+0x9c>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d00b      	beq.n	8004510 <HAL_TIM_Base_MspInit+0x24>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM6)
 80044f8:	4a24      	ldr	r2, [pc, #144]	@ (800458c <HAL_TIM_Base_MspInit+0xa0>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d01b      	beq.n	8004536 <HAL_TIM_Base_MspInit+0x4a>
    __HAL_RCC_TIM6_CLK_ENABLE();
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM7)
 80044fe:	4a24      	ldr	r2, [pc, #144]	@ (8004590 <HAL_TIM_Base_MspInit+0xa4>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d023      	beq.n	800454c <HAL_TIM_Base_MspInit+0x60>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM8)
 8004504:	4a23      	ldr	r2, [pc, #140]	@ (8004594 <HAL_TIM_Base_MspInit+0xa8>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d033      	beq.n	8004572 <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800450a:	b005      	add	sp, #20
 800450c:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004510:	4b21      	ldr	r3, [pc, #132]	@ (8004598 <HAL_TIM_Base_MspInit+0xac>)
 8004512:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004514:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004518:	661a      	str	r2, [r3, #96]	@ 0x60
 800451a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800451c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004520:	9300      	str	r3, [sp, #0]
 8004522:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8004524:	2200      	movs	r2, #0
 8004526:	4611      	mov	r1, r2
 8004528:	2019      	movs	r0, #25
 800452a:	f001 fb95 	bl	8005c58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800452e:	2019      	movs	r0, #25
 8004530:	f001 fba2 	bl	8005c78 <HAL_NVIC_EnableIRQ>
 8004534:	e7e9      	b.n	800450a <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004536:	4b18      	ldr	r3, [pc, #96]	@ (8004598 <HAL_TIM_Base_MspInit+0xac>)
 8004538:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800453a:	f042 0210 	orr.w	r2, r2, #16
 800453e:	659a      	str	r2, [r3, #88]	@ 0x58
 8004540:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004542:	f003 0310 	and.w	r3, r3, #16
 8004546:	9301      	str	r3, [sp, #4]
 8004548:	9b01      	ldr	r3, [sp, #4]
 800454a:	e7de      	b.n	800450a <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800454c:	4b12      	ldr	r3, [pc, #72]	@ (8004598 <HAL_TIM_Base_MspInit+0xac>)
 800454e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004550:	f042 0220 	orr.w	r2, r2, #32
 8004554:	659a      	str	r2, [r3, #88]	@ 0x58
 8004556:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004558:	f003 0320 	and.w	r3, r3, #32
 800455c:	9302      	str	r3, [sp, #8]
 800455e:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 0, 0);
 8004560:	2200      	movs	r2, #0
 8004562:	4611      	mov	r1, r2
 8004564:	2037      	movs	r0, #55	@ 0x37
 8004566:	f001 fb77 	bl	8005c58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 800456a:	2037      	movs	r0, #55	@ 0x37
 800456c:	f001 fb84 	bl	8005c78 <HAL_NVIC_EnableIRQ>
 8004570:	e7cb      	b.n	800450a <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004572:	4b09      	ldr	r3, [pc, #36]	@ (8004598 <HAL_TIM_Base_MspInit+0xac>)
 8004574:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004576:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800457a:	661a      	str	r2, [r3, #96]	@ 0x60
 800457c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800457e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004582:	9303      	str	r3, [sp, #12]
 8004584:	9b03      	ldr	r3, [sp, #12]
}
 8004586:	e7c0      	b.n	800450a <HAL_TIM_Base_MspInit+0x1e>
 8004588:	40012c00 	.word	0x40012c00
 800458c:	40001000 	.word	0x40001000
 8004590:	40001400 	.word	0x40001400
 8004594:	40013400 	.word	0x40013400
 8004598:	40021000 	.word	0x40021000

0800459c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800459c:	b500      	push	{lr}
 800459e:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045a0:	2300      	movs	r3, #0
 80045a2:	9301      	str	r3, [sp, #4]
 80045a4:	9302      	str	r3, [sp, #8]
 80045a6:	9303      	str	r3, [sp, #12]
 80045a8:	9304      	str	r3, [sp, #16]
 80045aa:	9305      	str	r3, [sp, #20]
  if(timHandle->Instance==TIM1)
 80045ac:	6802      	ldr	r2, [r0, #0]
 80045ae:	4b0f      	ldr	r3, [pc, #60]	@ (80045ec <HAL_TIM_MspPostInit+0x50>)
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d002      	beq.n	80045ba <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80045b4:	b007      	add	sp, #28
 80045b6:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045ba:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 80045be:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80045c0:	f042 0201 	orr.w	r2, r2, #1
 80045c4:	64da      	str	r2, [r3, #76]	@ 0x4c
 80045c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045c8:	f003 0301 	and.w	r3, r3, #1
 80045cc:	9300      	str	r3, [sp, #0]
 80045ce:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = MT_EN_Pin;
 80045d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80045d4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045d6:	2302      	movs	r3, #2
 80045d8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80045da:	2306      	movs	r3, #6
 80045dc:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(MT_EN_GPIO_Port, &GPIO_InitStruct);
 80045de:	a901      	add	r1, sp, #4
 80045e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80045e4:	f001 ff5a 	bl	800649c <HAL_GPIO_Init>
}
 80045e8:	e7e4      	b.n	80045b4 <HAL_TIM_MspPostInit+0x18>
 80045ea:	bf00      	nop
 80045ec:	40012c00 	.word	0x40012c00

080045f0 <MX_TIM1_Init>:
{
 80045f0:	b510      	push	{r4, lr}
 80045f2:	b09c      	sub	sp, #112	@ 0x70
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80045f4:	2400      	movs	r4, #0
 80045f6:	9418      	str	r4, [sp, #96]	@ 0x60
 80045f8:	9419      	str	r4, [sp, #100]	@ 0x64
 80045fa:	941a      	str	r4, [sp, #104]	@ 0x68
 80045fc:	941b      	str	r4, [sp, #108]	@ 0x6c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80045fe:	9415      	str	r4, [sp, #84]	@ 0x54
 8004600:	9416      	str	r4, [sp, #88]	@ 0x58
 8004602:	9417      	str	r4, [sp, #92]	@ 0x5c
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004604:	940e      	str	r4, [sp, #56]	@ 0x38
 8004606:	940f      	str	r4, [sp, #60]	@ 0x3c
 8004608:	9410      	str	r4, [sp, #64]	@ 0x40
 800460a:	9411      	str	r4, [sp, #68]	@ 0x44
 800460c:	9412      	str	r4, [sp, #72]	@ 0x48
 800460e:	9413      	str	r4, [sp, #76]	@ 0x4c
 8004610:	9414      	str	r4, [sp, #80]	@ 0x50
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004612:	2234      	movs	r2, #52	@ 0x34
 8004614:	4621      	mov	r1, r4
 8004616:	a801      	add	r0, sp, #4
 8004618:	f006 fe5c 	bl	800b2d4 <memset>
  htim1.Instance = TIM1;
 800461c:	4833      	ldr	r0, [pc, #204]	@ (80046ec <MX_TIM1_Init+0xfc>)
 800461e:	4b34      	ldr	r3, [pc, #208]	@ (80046f0 <MX_TIM1_Init+0x100>)
 8004620:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 1-1;
 8004622:	6044      	str	r4, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8004624:	2320      	movs	r3, #32
 8004626:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 8499;
 8004628:	f242 1333 	movw	r3, #8499	@ 0x2133
 800462c:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800462e:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8004630:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004632:	2380      	movs	r3, #128	@ 0x80
 8004634:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004636:	f003 fe67 	bl	8008308 <HAL_TIM_Base_Init>
 800463a:	2800      	cmp	r0, #0
 800463c:	d144      	bne.n	80046c8 <MX_TIM1_Init+0xd8>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800463e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004642:	9318      	str	r3, [sp, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004644:	a918      	add	r1, sp, #96	@ 0x60
 8004646:	4829      	ldr	r0, [pc, #164]	@ (80046ec <MX_TIM1_Init+0xfc>)
 8004648:	f003 ffb6 	bl	80085b8 <HAL_TIM_ConfigClockSource>
 800464c:	2800      	cmp	r0, #0
 800464e:	d13e      	bne.n	80046ce <MX_TIM1_Init+0xde>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004650:	4826      	ldr	r0, [pc, #152]	@ (80046ec <MX_TIM1_Init+0xfc>)
 8004652:	f003 fe89 	bl	8008368 <HAL_TIM_PWM_Init>
 8004656:	2800      	cmp	r0, #0
 8004658:	d13c      	bne.n	80046d4 <MX_TIM1_Init+0xe4>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800465a:	2320      	movs	r3, #32
 800465c:	9315      	str	r3, [sp, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 800465e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004662:	9316      	str	r3, [sp, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004664:	2300      	movs	r3, #0
 8004666:	9317      	str	r3, [sp, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004668:	a915      	add	r1, sp, #84	@ 0x54
 800466a:	4820      	ldr	r0, [pc, #128]	@ (80046ec <MX_TIM1_Init+0xfc>)
 800466c:	f004 f914 	bl	8008898 <HAL_TIMEx_MasterConfigSynchronization>
 8004670:	2800      	cmp	r0, #0
 8004672:	d132      	bne.n	80046da <MX_TIM1_Init+0xea>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004674:	2360      	movs	r3, #96	@ 0x60
 8004676:	930e      	str	r3, [sp, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8004678:	2200      	movs	r2, #0
 800467a:	920f      	str	r2, [sp, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800467c:	9210      	str	r2, [sp, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800467e:	9211      	str	r2, [sp, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004680:	9212      	str	r2, [sp, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004682:	9213      	str	r2, [sp, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004684:	9214      	str	r2, [sp, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004686:	a90e      	add	r1, sp, #56	@ 0x38
 8004688:	4818      	ldr	r0, [pc, #96]	@ (80046ec <MX_TIM1_Init+0xfc>)
 800468a:	f003 feeb 	bl	8008464 <HAL_TIM_PWM_ConfigChannel>
 800468e:	bb38      	cbnz	r0, 80046e0 <MX_TIM1_Init+0xf0>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004690:	2300      	movs	r3, #0
 8004692:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004694:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004696:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004698:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800469a:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800469c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80046a0:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80046a2:	9307      	str	r3, [sp, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80046a4:	9308      	str	r3, [sp, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80046a6:	9309      	str	r3, [sp, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80046a8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80046ac:	920a      	str	r2, [sp, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80046ae:	930b      	str	r3, [sp, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80046b0:	930c      	str	r3, [sp, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80046b2:	930d      	str	r3, [sp, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80046b4:	a901      	add	r1, sp, #4
 80046b6:	480d      	ldr	r0, [pc, #52]	@ (80046ec <MX_TIM1_Init+0xfc>)
 80046b8:	f004 f944 	bl	8008944 <HAL_TIMEx_ConfigBreakDeadTime>
 80046bc:	b998      	cbnz	r0, 80046e6 <MX_TIM1_Init+0xf6>
  HAL_TIM_MspPostInit(&htim1);
 80046be:	480b      	ldr	r0, [pc, #44]	@ (80046ec <MX_TIM1_Init+0xfc>)
 80046c0:	f7ff ff6c 	bl	800459c <HAL_TIM_MspPostInit>
}
 80046c4:	b01c      	add	sp, #112	@ 0x70
 80046c6:	bd10      	pop	{r4, pc}
    Error_Handler();
 80046c8:	f7ff fd54 	bl	8004174 <Error_Handler>
 80046cc:	e7b7      	b.n	800463e <MX_TIM1_Init+0x4e>
    Error_Handler();
 80046ce:	f7ff fd51 	bl	8004174 <Error_Handler>
 80046d2:	e7bd      	b.n	8004650 <MX_TIM1_Init+0x60>
    Error_Handler();
 80046d4:	f7ff fd4e 	bl	8004174 <Error_Handler>
 80046d8:	e7bf      	b.n	800465a <MX_TIM1_Init+0x6a>
    Error_Handler();
 80046da:	f7ff fd4b 	bl	8004174 <Error_Handler>
 80046de:	e7c9      	b.n	8004674 <MX_TIM1_Init+0x84>
    Error_Handler();
 80046e0:	f7ff fd48 	bl	8004174 <Error_Handler>
 80046e4:	e7d4      	b.n	8004690 <MX_TIM1_Init+0xa0>
    Error_Handler();
 80046e6:	f7ff fd45 	bl	8004174 <Error_Handler>
 80046ea:	e7e8      	b.n	80046be <MX_TIM1_Init+0xce>
 80046ec:	20005a4c 	.word	0x20005a4c
 80046f0:	40012c00 	.word	0x40012c00

080046f4 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80046f4:	b508      	push	{r3, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80046f6:	4817      	ldr	r0, [pc, #92]	@ (8004754 <MX_USART1_UART_Init+0x60>)
 80046f8:	4b17      	ldr	r3, [pc, #92]	@ (8004758 <MX_USART1_UART_Init+0x64>)
 80046fa:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 80046fc:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8004700:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004702:	2300      	movs	r3, #0
 8004704:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004706:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004708:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800470a:	220c      	movs	r2, #12
 800470c:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800470e:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004710:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004712:	6203      	str	r3, [r0, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004714:	6243      	str	r3, [r0, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004716:	6283      	str	r3, [r0, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004718:	f004 ffe0 	bl	80096dc <HAL_UART_Init>
 800471c:	b970      	cbnz	r0, 800473c <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800471e:	2100      	movs	r1, #0
 8004720:	480c      	ldr	r0, [pc, #48]	@ (8004754 <MX_USART1_UART_Init+0x60>)
 8004722:	f005 f918 	bl	8009956 <HAL_UARTEx_SetTxFifoThreshold>
 8004726:	b960      	cbnz	r0, 8004742 <MX_USART1_UART_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004728:	2100      	movs	r1, #0
 800472a:	480a      	ldr	r0, [pc, #40]	@ (8004754 <MX_USART1_UART_Init+0x60>)
 800472c:	f005 f938 	bl	80099a0 <HAL_UARTEx_SetRxFifoThreshold>
 8004730:	b950      	cbnz	r0, 8004748 <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8004732:	4808      	ldr	r0, [pc, #32]	@ (8004754 <MX_USART1_UART_Init+0x60>)
 8004734:	f005 f8f0 	bl	8009918 <HAL_UARTEx_DisableFifoMode>
 8004738:	b948      	cbnz	r0, 800474e <MX_USART1_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800473a:	bd08      	pop	{r3, pc}
    Error_Handler();
 800473c:	f7ff fd1a 	bl	8004174 <Error_Handler>
 8004740:	e7ed      	b.n	800471e <MX_USART1_UART_Init+0x2a>
    Error_Handler();
 8004742:	f7ff fd17 	bl	8004174 <Error_Handler>
 8004746:	e7ef      	b.n	8004728 <MX_USART1_UART_Init+0x34>
    Error_Handler();
 8004748:	f7ff fd14 	bl	8004174 <Error_Handler>
 800474c:	e7f1      	b.n	8004732 <MX_USART1_UART_Init+0x3e>
    Error_Handler();
 800474e:	f7ff fd11 	bl	8004174 <Error_Handler>
}
 8004752:	e7f2      	b.n	800473a <MX_USART1_UART_Init+0x46>
 8004754:	20005c4c 	.word	0x20005c4c
 8004758:	40013800 	.word	0x40013800

0800475c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800475c:	b508      	push	{r3, lr}
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800475e:	4817      	ldr	r0, [pc, #92]	@ (80047bc <MX_USART3_UART_Init+0x60>)
 8004760:	4b17      	ldr	r3, [pc, #92]	@ (80047c0 <MX_USART3_UART_Init+0x64>)
 8004762:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 8004764:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8004768:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800476a:	2300      	movs	r3, #0
 800476c:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800476e:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004770:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004772:	220c      	movs	r2, #12
 8004774:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004776:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004778:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800477a:	6203      	str	r3, [r0, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800477c:	6243      	str	r3, [r0, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800477e:	6283      	str	r3, [r0, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004780:	f004 ffac 	bl	80096dc <HAL_UART_Init>
 8004784:	b970      	cbnz	r0, 80047a4 <MX_USART3_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004786:	2100      	movs	r1, #0
 8004788:	480c      	ldr	r0, [pc, #48]	@ (80047bc <MX_USART3_UART_Init+0x60>)
 800478a:	f005 f8e4 	bl	8009956 <HAL_UARTEx_SetTxFifoThreshold>
 800478e:	b960      	cbnz	r0, 80047aa <MX_USART3_UART_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004790:	2100      	movs	r1, #0
 8004792:	480a      	ldr	r0, [pc, #40]	@ (80047bc <MX_USART3_UART_Init+0x60>)
 8004794:	f005 f904 	bl	80099a0 <HAL_UARTEx_SetRxFifoThreshold>
 8004798:	b950      	cbnz	r0, 80047b0 <MX_USART3_UART_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800479a:	4808      	ldr	r0, [pc, #32]	@ (80047bc <MX_USART3_UART_Init+0x60>)
 800479c:	f005 f8bc 	bl	8009918 <HAL_UARTEx_DisableFifoMode>
 80047a0:	b948      	cbnz	r0, 80047b6 <MX_USART3_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80047a2:	bd08      	pop	{r3, pc}
    Error_Handler();
 80047a4:	f7ff fce6 	bl	8004174 <Error_Handler>
 80047a8:	e7ed      	b.n	8004786 <MX_USART3_UART_Init+0x2a>
    Error_Handler();
 80047aa:	f7ff fce3 	bl	8004174 <Error_Handler>
 80047ae:	e7ef      	b.n	8004790 <MX_USART3_UART_Init+0x34>
    Error_Handler();
 80047b0:	f7ff fce0 	bl	8004174 <Error_Handler>
 80047b4:	e7f1      	b.n	800479a <MX_USART3_UART_Init+0x3e>
    Error_Handler();
 80047b6:	f7ff fcdd 	bl	8004174 <Error_Handler>
}
 80047ba:	e7f2      	b.n	80047a2 <MX_USART3_UART_Init+0x46>
 80047bc:	20005bb8 	.word	0x20005bb8
 80047c0:	40004800 	.word	0x40004800

080047c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80047c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047c6:	b0a1      	sub	sp, #132	@ 0x84
 80047c8:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047ca:	2100      	movs	r1, #0
 80047cc:	911b      	str	r1, [sp, #108]	@ 0x6c
 80047ce:	911c      	str	r1, [sp, #112]	@ 0x70
 80047d0:	911d      	str	r1, [sp, #116]	@ 0x74
 80047d2:	911e      	str	r1, [sp, #120]	@ 0x78
 80047d4:	911f      	str	r1, [sp, #124]	@ 0x7c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80047d6:	2254      	movs	r2, #84	@ 0x54
 80047d8:	a806      	add	r0, sp, #24
 80047da:	f006 fd7b 	bl	800b2d4 <memset>
  if(uartHandle->Instance==USART1)
 80047de:	6823      	ldr	r3, [r4, #0]
 80047e0:	4a62      	ldr	r2, [pc, #392]	@ (800496c <HAL_UART_MspInit+0x1a8>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d004      	beq.n	80047f0 <HAL_UART_MspInit+0x2c>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(uartHandle->Instance==USART3)
 80047e6:	4a62      	ldr	r2, [pc, #392]	@ (8004970 <HAL_UART_MspInit+0x1ac>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d059      	beq.n	80048a0 <HAL_UART_MspInit+0xdc>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80047ec:	b021      	add	sp, #132	@ 0x84
 80047ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80047f0:	2301      	movs	r3, #1
 80047f2:	9306      	str	r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80047f4:	a806      	add	r0, sp, #24
 80047f6:	f003 f833 	bl	8007860 <HAL_RCCEx_PeriphCLKConfig>
 80047fa:	2800      	cmp	r0, #0
 80047fc:	d14a      	bne.n	8004894 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART1_CLK_ENABLE();
 80047fe:	4b5d      	ldr	r3, [pc, #372]	@ (8004974 <HAL_UART_MspInit+0x1b0>)
 8004800:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004802:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004806:	661a      	str	r2, [r3, #96]	@ 0x60
 8004808:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800480a:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 800480e:	9201      	str	r2, [sp, #4]
 8004810:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004812:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004814:	f042 0201 	orr.w	r2, r2, #1
 8004818:	64da      	str	r2, [r3, #76]	@ 0x4c
 800481a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800481c:	f002 0201 	and.w	r2, r2, #1
 8004820:	9202      	str	r2, [sp, #8]
 8004822:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004824:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004826:	f042 0202 	orr.w	r2, r2, #2
 800482a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800482c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800482e:	f003 0302 	and.w	r3, r3, #2
 8004832:	9303      	str	r3, [sp, #12]
 8004834:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004836:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800483a:	931b      	str	r3, [sp, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800483c:	2702      	movs	r7, #2
 800483e:	971c      	str	r7, [sp, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004840:	2500      	movs	r5, #0
 8004842:	951d      	str	r5, [sp, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004844:	951e      	str	r5, [sp, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004846:	2607      	movs	r6, #7
 8004848:	961f      	str	r6, [sp, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800484a:	a91b      	add	r1, sp, #108	@ 0x6c
 800484c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004850:	f001 fe24 	bl	800649c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004854:	2340      	movs	r3, #64	@ 0x40
 8004856:	931b      	str	r3, [sp, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004858:	971c      	str	r7, [sp, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800485a:	951d      	str	r5, [sp, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800485c:	951e      	str	r5, [sp, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800485e:	961f      	str	r6, [sp, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004860:	a91b      	add	r1, sp, #108	@ 0x6c
 8004862:	4845      	ldr	r0, [pc, #276]	@ (8004978 <HAL_UART_MspInit+0x1b4>)
 8004864:	f001 fe1a 	bl	800649c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel2;
 8004868:	4844      	ldr	r0, [pc, #272]	@ (800497c <HAL_UART_MspInit+0x1b8>)
 800486a:	4b45      	ldr	r3, [pc, #276]	@ (8004980 <HAL_UART_MspInit+0x1bc>)
 800486c:	6003      	str	r3, [r0, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800486e:	2318      	movs	r3, #24
 8004870:	6043      	str	r3, [r0, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004872:	6085      	str	r5, [r0, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004874:	60c5      	str	r5, [r0, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004876:	2380      	movs	r3, #128	@ 0x80
 8004878:	6103      	str	r3, [r0, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800487a:	6145      	str	r5, [r0, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800487c:	6185      	str	r5, [r0, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800487e:	2320      	movs	r3, #32
 8004880:	61c3      	str	r3, [r0, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004882:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004884:	f001 fc20 	bl	80060c8 <HAL_DMA_Init>
 8004888:	b938      	cbnz	r0, 800489a <HAL_UART_MspInit+0xd6>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800488a:	4b3c      	ldr	r3, [pc, #240]	@ (800497c <HAL_UART_MspInit+0x1b8>)
 800488c:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
 8004890:	629c      	str	r4, [r3, #40]	@ 0x28
 8004892:	e7ab      	b.n	80047ec <HAL_UART_MspInit+0x28>
      Error_Handler();
 8004894:	f7ff fc6e 	bl	8004174 <Error_Handler>
 8004898:	e7b1      	b.n	80047fe <HAL_UART_MspInit+0x3a>
      Error_Handler();
 800489a:	f7ff fc6b 	bl	8004174 <Error_Handler>
 800489e:	e7f4      	b.n	800488a <HAL_UART_MspInit+0xc6>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80048a0:	2304      	movs	r3, #4
 80048a2:	9306      	str	r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80048a4:	a806      	add	r0, sp, #24
 80048a6:	f002 ffdb 	bl	8007860 <HAL_RCCEx_PeriphCLKConfig>
 80048aa:	2800      	cmp	r0, #0
 80048ac:	d154      	bne.n	8004958 <HAL_UART_MspInit+0x194>
    __HAL_RCC_USART3_CLK_ENABLE();
 80048ae:	4b31      	ldr	r3, [pc, #196]	@ (8004974 <HAL_UART_MspInit+0x1b0>)
 80048b0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80048b2:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80048b6:	659a      	str	r2, [r3, #88]	@ 0x58
 80048b8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80048ba:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 80048be:	9204      	str	r2, [sp, #16]
 80048c0:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80048c2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80048c4:	f042 0202 	orr.w	r2, r2, #2
 80048c8:	64da      	str	r2, [r3, #76]	@ 0x4c
 80048ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048cc:	f003 0302 	and.w	r3, r3, #2
 80048d0:	9305      	str	r3, [sp, #20]
 80048d2:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_8;
 80048d4:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 80048d8:	931b      	str	r3, [sp, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048da:	2302      	movs	r3, #2
 80048dc:	931c      	str	r3, [sp, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048de:	2500      	movs	r5, #0
 80048e0:	951d      	str	r5, [sp, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048e2:	2303      	movs	r3, #3
 80048e4:	931e      	str	r3, [sp, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80048e6:	2307      	movs	r3, #7
 80048e8:	931f      	str	r3, [sp, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048ea:	a91b      	add	r1, sp, #108	@ 0x6c
 80048ec:	4822      	ldr	r0, [pc, #136]	@ (8004978 <HAL_UART_MspInit+0x1b4>)
 80048ee:	f001 fdd5 	bl	800649c <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Channel3;
 80048f2:	4824      	ldr	r0, [pc, #144]	@ (8004984 <HAL_UART_MspInit+0x1c0>)
 80048f4:	4b24      	ldr	r3, [pc, #144]	@ (8004988 <HAL_UART_MspInit+0x1c4>)
 80048f6:	6003      	str	r3, [r0, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80048f8:	231d      	movs	r3, #29
 80048fa:	6043      	str	r3, [r0, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80048fc:	2310      	movs	r3, #16
 80048fe:	6083      	str	r3, [r0, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004900:	60c5      	str	r5, [r0, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004902:	2380      	movs	r3, #128	@ 0x80
 8004904:	6103      	str	r3, [r0, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004906:	6145      	str	r5, [r0, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004908:	6185      	str	r5, [r0, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800490a:	61c5      	str	r5, [r0, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800490c:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800490e:	f001 fbdb 	bl	80060c8 <HAL_DMA_Init>
 8004912:	bb20      	cbnz	r0, 800495e <HAL_UART_MspInit+0x19a>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8004914:	4b1b      	ldr	r3, [pc, #108]	@ (8004984 <HAL_UART_MspInit+0x1c0>)
 8004916:	67e3      	str	r3, [r4, #124]	@ 0x7c
 8004918:	629c      	str	r4, [r3, #40]	@ 0x28
    hdma_usart3_rx.Instance = DMA1_Channel4;
 800491a:	481c      	ldr	r0, [pc, #112]	@ (800498c <HAL_UART_MspInit+0x1c8>)
 800491c:	4b1c      	ldr	r3, [pc, #112]	@ (8004990 <HAL_UART_MspInit+0x1cc>)
 800491e:	6003      	str	r3, [r0, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8004920:	231c      	movs	r3, #28
 8004922:	6043      	str	r3, [r0, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004924:	2300      	movs	r3, #0
 8004926:	6083      	str	r3, [r0, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004928:	60c3      	str	r3, [r0, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800492a:	2280      	movs	r2, #128	@ 0x80
 800492c:	6102      	str	r2, [r0, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800492e:	6143      	str	r3, [r0, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004930:	6183      	str	r3, [r0, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8004932:	2220      	movs	r2, #32
 8004934:	61c2      	str	r2, [r0, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004936:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8004938:	f001 fbc6 	bl	80060c8 <HAL_DMA_Init>
 800493c:	b990      	cbnz	r0, 8004964 <HAL_UART_MspInit+0x1a0>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800493e:	4b13      	ldr	r3, [pc, #76]	@ (800498c <HAL_UART_MspInit+0x1c8>)
 8004940:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
 8004944:	629c      	str	r4, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8004946:	2200      	movs	r2, #0
 8004948:	4611      	mov	r1, r2
 800494a:	2027      	movs	r0, #39	@ 0x27
 800494c:	f001 f984 	bl	8005c58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004950:	2027      	movs	r0, #39	@ 0x27
 8004952:	f001 f991 	bl	8005c78 <HAL_NVIC_EnableIRQ>
}
 8004956:	e749      	b.n	80047ec <HAL_UART_MspInit+0x28>
      Error_Handler();
 8004958:	f7ff fc0c 	bl	8004174 <Error_Handler>
 800495c:	e7a7      	b.n	80048ae <HAL_UART_MspInit+0xea>
      Error_Handler();
 800495e:	f7ff fc09 	bl	8004174 <Error_Handler>
 8004962:	e7d7      	b.n	8004914 <HAL_UART_MspInit+0x150>
      Error_Handler();
 8004964:	f7ff fc06 	bl	8004174 <Error_Handler>
 8004968:	e7e9      	b.n	800493e <HAL_UART_MspInit+0x17a>
 800496a:	bf00      	nop
 800496c:	40013800 	.word	0x40013800
 8004970:	40004800 	.word	0x40004800
 8004974:	40021000 	.word	0x40021000
 8004978:	48000400 	.word	0x48000400
 800497c:	20005b58 	.word	0x20005b58
 8004980:	4002001c 	.word	0x4002001c
 8004984:	20005af8 	.word	0x20005af8
 8004988:	40020030 	.word	0x40020030
 800498c:	20005a98 	.word	0x20005a98
 8004990:	40020044 	.word	0x40020044

08004994 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8004994:	b510      	push	{r4, lr}
 8004996:	4604      	mov	r4, r0

  if(uartHandle->Instance==USART1)
 8004998:	6803      	ldr	r3, [r0, #0]
 800499a:	4a19      	ldr	r2, [pc, #100]	@ (8004a00 <HAL_UART_MspDeInit+0x6c>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d003      	beq.n	80049a8 <HAL_UART_MspDeInit+0x14>
    HAL_DMA_DeInit(uartHandle->hdmarx);
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
  else if(uartHandle->Instance==USART3)
 80049a0:	4a18      	ldr	r2, [pc, #96]	@ (8004a04 <HAL_UART_MspDeInit+0x70>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d015      	beq.n	80049d2 <HAL_UART_MspDeInit+0x3e>
    HAL_NVIC_DisableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }
}
 80049a6:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_DISABLE();
 80049a8:	f502 4258 	add.w	r2, r2, #55296	@ 0xd800
 80049ac:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 80049ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80049b2:	6613      	str	r3, [r2, #96]	@ 0x60
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_10);
 80049b4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80049b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80049bc:	f001 fe58 	bl	8006670 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 80049c0:	2140      	movs	r1, #64	@ 0x40
 80049c2:	4811      	ldr	r0, [pc, #68]	@ (8004a08 <HAL_UART_MspDeInit+0x74>)
 80049c4:	f001 fe54 	bl	8006670 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 80049c8:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 80049cc:	f001 fbe8 	bl	80061a0 <HAL_DMA_DeInit>
 80049d0:	e7e9      	b.n	80049a6 <HAL_UART_MspDeInit+0x12>
    __HAL_RCC_USART3_CLK_DISABLE();
 80049d2:	f502 32e4 	add.w	r2, r2, #116736	@ 0x1c800
 80049d6:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 80049d8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80049dc:	6593      	str	r3, [r2, #88]	@ 0x58
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10|GPIO_PIN_8);
 80049de:	f44f 61a0 	mov.w	r1, #1280	@ 0x500
 80049e2:	4809      	ldr	r0, [pc, #36]	@ (8004a08 <HAL_UART_MspDeInit+0x74>)
 80049e4:	f001 fe44 	bl	8006670 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 80049e8:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 80049ea:	f001 fbd9 	bl	80061a0 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 80049ee:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 80049f2:	f001 fbd5 	bl	80061a0 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART3_IRQn);
 80049f6:	2027      	movs	r0, #39	@ 0x27
 80049f8:	f001 f942 	bl	8005c80 <HAL_NVIC_DisableIRQ>
}
 80049fc:	e7d3      	b.n	80049a6 <HAL_UART_MspDeInit+0x12>
 80049fe:	bf00      	nop
 8004a00:	40013800 	.word	0x40013800
 8004a04:	40004800 	.word	0x40004800
 8004a08:	48000400 	.word	0x48000400

08004a0c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004a0c:	480d      	ldr	r0, [pc, #52]	@ (8004a44 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004a0e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8004a10:	f7ff fcd6 	bl	80043c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004a14:	480c      	ldr	r0, [pc, #48]	@ (8004a48 <LoopForever+0x6>)
  ldr r1, =_edata
 8004a16:	490d      	ldr	r1, [pc, #52]	@ (8004a4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8004a18:	4a0d      	ldr	r2, [pc, #52]	@ (8004a50 <LoopForever+0xe>)
  movs r3, #0
 8004a1a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8004a1c:	e002      	b.n	8004a24 <LoopCopyDataInit>

08004a1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004a1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004a20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004a22:	3304      	adds	r3, #4

08004a24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004a24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004a26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004a28:	d3f9      	bcc.n	8004a1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004a2a:	4a0a      	ldr	r2, [pc, #40]	@ (8004a54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004a2c:	4c0a      	ldr	r4, [pc, #40]	@ (8004a58 <LoopForever+0x16>)
  movs r3, #0
 8004a2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004a30:	e001      	b.n	8004a36 <LoopFillZerobss>

08004a32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004a32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004a34:	3204      	adds	r2, #4

08004a36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004a36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004a38:	d3fb      	bcc.n	8004a32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004a3a:	f006 fce1 	bl	800b400 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004a3e:	f7ff fbd2 	bl	80041e6 <main>

08004a42 <LoopForever>:

LoopForever:
    b LoopForever
 8004a42:	e7fe      	b.n	8004a42 <LoopForever>
  ldr   r0, =_estack
 8004a44:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004a48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004a4c:	20000224 	.word	0x20000224
  ldr r2, =_sidata
 8004a50:	08016620 	.word	0x08016620
  ldr r2, =_sbss
 8004a54:	20000240 	.word	0x20000240
  ldr r4, =_ebss
 8004a58:	20005e30 	.word	0x20005e30

08004a5c <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004a5c:	e7fe      	b.n	8004a5c <ADC3_IRQHandler>
	...

08004a60 <HAL_InitTick>:
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8004a60:	4b10      	ldr	r3, [pc, #64]	@ (8004aa4 <HAL_InitTick+0x44>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	b90b      	cbnz	r3, 8004a6a <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8004a66:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8004a68:	4770      	bx	lr
{
 8004a6a:	b510      	push	{r4, lr}
 8004a6c:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004a6e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004a72:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a76:	4a0c      	ldr	r2, [pc, #48]	@ (8004aa8 <HAL_InitTick+0x48>)
 8004a78:	6810      	ldr	r0, [r2, #0]
 8004a7a:	fbb0 f0f3 	udiv	r0, r0, r3
 8004a7e:	f001 f903 	bl	8005c88 <HAL_SYSTICK_Config>
 8004a82:	b968      	cbnz	r0, 8004aa0 <HAL_InitTick+0x40>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004a84:	2c0f      	cmp	r4, #15
 8004a86:	d901      	bls.n	8004a8c <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 8004a88:	2001      	movs	r0, #1
 8004a8a:	e00a      	b.n	8004aa2 <HAL_InitTick+0x42>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	4621      	mov	r1, r4
 8004a90:	f04f 30ff 	mov.w	r0, #4294967295
 8004a94:	f001 f8e0 	bl	8005c58 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004a98:	4b04      	ldr	r3, [pc, #16]	@ (8004aac <HAL_InitTick+0x4c>)
 8004a9a:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 8004a9c:	2000      	movs	r0, #0
 8004a9e:	e000      	b.n	8004aa2 <HAL_InitTick+0x42>
      status = HAL_ERROR;
 8004aa0:	2001      	movs	r0, #1
}
 8004aa2:	bd10      	pop	{r4, pc}
 8004aa4:	20000054 	.word	0x20000054
 8004aa8:	20000050 	.word	0x20000050
 8004aac:	20000058 	.word	0x20000058

08004ab0 <HAL_Init>:
{
 8004ab0:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004ab2:	2003      	movs	r0, #3
 8004ab4:	f001 f8be 	bl	8005c34 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004ab8:	200f      	movs	r0, #15
 8004aba:	f7ff ffd1 	bl	8004a60 <HAL_InitTick>
 8004abe:	b110      	cbz	r0, 8004ac6 <HAL_Init+0x16>
    status = HAL_ERROR;
 8004ac0:	2401      	movs	r4, #1
}
 8004ac2:	4620      	mov	r0, r4
 8004ac4:	bd10      	pop	{r4, pc}
 8004ac6:	4604      	mov	r4, r0
    HAL_MspInit();
 8004ac8:	f7ff fbb2 	bl	8004230 <HAL_MspInit>
 8004acc:	e7f9      	b.n	8004ac2 <HAL_Init+0x12>
	...

08004ad0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8004ad0:	4a03      	ldr	r2, [pc, #12]	@ (8004ae0 <HAL_IncTick+0x10>)
 8004ad2:	6813      	ldr	r3, [r2, #0]
 8004ad4:	4903      	ldr	r1, [pc, #12]	@ (8004ae4 <HAL_IncTick+0x14>)
 8004ad6:	6809      	ldr	r1, [r1, #0]
 8004ad8:	440b      	add	r3, r1
 8004ada:	6013      	str	r3, [r2, #0]
}
 8004adc:	4770      	bx	lr
 8004ade:	bf00      	nop
 8004ae0:	20005ce0 	.word	0x20005ce0
 8004ae4:	20000054 	.word	0x20000054

08004ae8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004ae8:	4b01      	ldr	r3, [pc, #4]	@ (8004af0 <HAL_GetTick+0x8>)
 8004aea:	6818      	ldr	r0, [r3, #0]
}
 8004aec:	4770      	bx	lr
 8004aee:	bf00      	nop
 8004af0:	20005ce0 	.word	0x20005ce0

08004af4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004af4:	b538      	push	{r3, r4, r5, lr}
 8004af6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004af8:	f7ff fff6 	bl	8004ae8 <HAL_GetTick>
 8004afc:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004afe:	f1b4 3fff 	cmp.w	r4, #4294967295
 8004b02:	d002      	beq.n	8004b0a <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8004b04:	4b04      	ldr	r3, [pc, #16]	@ (8004b18 <HAL_Delay+0x24>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004b0a:	f7ff ffed 	bl	8004ae8 <HAL_GetTick>
 8004b0e:	1b40      	subs	r0, r0, r5
 8004b10:	42a0      	cmp	r0, r4
 8004b12:	d3fa      	bcc.n	8004b0a <HAL_Delay+0x16>
  {
  }
}
 8004b14:	bd38      	pop	{r3, r4, r5, pc}
 8004b16:	bf00      	nop
 8004b18:	20000054 	.word	0x20000054

08004b1c <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004b1c:	b410      	push	{r4}
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8004b1e:	3030      	adds	r0, #48	@ 0x30
 8004b20:	0a0b      	lsrs	r3, r1, #8
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	f003 030c 	and.w	r3, r3, #12
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004b28:	58c4      	ldr	r4, [r0, r3]
 8004b2a:	f001 011f 	and.w	r1, r1, #31
 8004b2e:	f04f 0c1f 	mov.w	ip, #31
 8004b32:	fa0c fc01 	lsl.w	ip, ip, r1
 8004b36:	ea24 0c0c 	bic.w	ip, r4, ip
 8004b3a:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8004b3e:	408a      	lsls	r2, r1
 8004b40:	ea4c 0202 	orr.w	r2, ip, r2
 8004b44:	50c2      	str	r2, [r0, r3]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004b46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b4a:	4770      	bx	lr

08004b4c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004b4c:	b410      	push	{r4}
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004b4e:	3014      	adds	r0, #20
 8004b50:	0e4b      	lsrs	r3, r1, #25
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	f003 0304 	and.w	r3, r3, #4
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004b58:	58c4      	ldr	r4, [r0, r3]
 8004b5a:	f3c1 5104 	ubfx	r1, r1, #20, #5
 8004b5e:	f04f 0c07 	mov.w	ip, #7
 8004b62:	fa0c fc01 	lsl.w	ip, ip, r1
 8004b66:	ea24 0c0c 	bic.w	ip, r4, ip
 8004b6a:	408a      	lsls	r2, r1
 8004b6c:	ea4c 0202 	orr.w	r2, ip, r2
 8004b70:	50c2      	str	r2, [r0, r3]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004b72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b76:	4770      	bx	lr

08004b78 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004b78:	b530      	push	{r4, r5, lr}
 8004b7a:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8004b80:	2800      	cmp	r0, #0
 8004b82:	f000 8132 	beq.w	8004dea <HAL_ADC_Init+0x272>
 8004b86:	4604      	mov	r4, r0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004b88:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8004b8a:	b313      	cbz	r3, 8004bd2 <HAL_ADC_Init+0x5a>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004b8c:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004b8e:	689a      	ldr	r2, [r3, #8]
 8004b90:	f012 5f00 	tst.w	r2, #536870912	@ 0x20000000
 8004b94:	d005      	beq.n	8004ba2 <HAL_ADC_Init+0x2a>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004b96:	689a      	ldr	r2, [r3, #8]
 8004b98:	f022 4220 	bic.w	r2, r2, #2684354560	@ 0xa0000000
 8004b9c:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8004ba0:	609a      	str	r2, [r3, #8]
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004ba2:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004ba4:	6893      	ldr	r3, [r2, #8]
 8004ba6:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8004baa:	d11f      	bne.n	8004bec <HAL_ADC_Init+0x74>
  MODIFY_REG(ADCx->CR,
 8004bac:	6893      	ldr	r3, [r2, #8]
 8004bae:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8004bb2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004bb6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004bba:	6093      	str	r3, [r2, #8]
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004bbc:	4b8c      	ldr	r3, [pc, #560]	@ (8004df0 <HAL_ADC_Init+0x278>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	099b      	lsrs	r3, r3, #6
 8004bc2:	4a8c      	ldr	r2, [pc, #560]	@ (8004df4 <HAL_ADC_Init+0x27c>)
 8004bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8004bc8:	099b      	lsrs	r3, r3, #6
 8004bca:	3301      	adds	r3, #1
 8004bcc:	005b      	lsls	r3, r3, #1
 8004bce:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8004bd0:	e009      	b.n	8004be6 <HAL_ADC_Init+0x6e>
    HAL_ADC_MspInit(hadc);
 8004bd2:	f7fe fbc9 	bl	8003368 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	6623      	str	r3, [r4, #96]	@ 0x60
    hadc->Lock = HAL_UNLOCKED;
 8004bda:	f884 3058 	strb.w	r3, [r4, #88]	@ 0x58
 8004bde:	e7d5      	b.n	8004b8c <HAL_ADC_Init+0x14>
    {
      wait_loop_index--;
 8004be0:	9b01      	ldr	r3, [sp, #4]
 8004be2:	3b01      	subs	r3, #1
 8004be4:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8004be6:	9b01      	ldr	r3, [sp, #4]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d1f9      	bne.n	8004be0 <HAL_ADC_Init+0x68>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004bec:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004bee:	6893      	ldr	r3, [r2, #8]
 8004bf0:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8004bf4:	d13d      	bne.n	8004c72 <HAL_ADC_Init+0xfa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bf6:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8004bf8:	f043 0310 	orr.w	r3, r3, #16
 8004bfc:	65e3      	str	r3, [r4, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004bfe:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8004c00:	f043 0301 	orr.w	r3, r3, #1
 8004c04:	6623      	str	r3, [r4, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004c06:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004c08:	6893      	ldr	r3, [r2, #8]
 8004c0a:	f013 0304 	ands.w	r3, r3, #4
 8004c0e:	d000      	beq.n	8004c12 <HAL_ADC_Init+0x9a>
 8004c10:	2301      	movs	r3, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004c12:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8004c14:	f011 0f10 	tst.w	r1, #16
 8004c18:	f040 80e0 	bne.w	8004ddc <HAL_ADC_Init+0x264>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	f040 80dd 	bne.w	8004ddc <HAL_ADC_Init+0x264>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004c22:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8004c24:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004c28:	f043 0302 	orr.w	r3, r3, #2
 8004c2c:	65e3      	str	r3, [r4, #92]	@ 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004c2e:	6893      	ldr	r3, [r2, #8]
 8004c30:	f013 0f01 	tst.w	r3, #1
 8004c34:	d13e      	bne.n	8004cb4 <HAL_ADC_Init+0x13c>
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004c36:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 8004c3a:	d01c      	beq.n	8004c76 <HAL_ADC_Init+0xfe>
 8004c3c:	4b6e      	ldr	r3, [pc, #440]	@ (8004df8 <HAL_ADC_Init+0x280>)
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d019      	beq.n	8004c76 <HAL_ADC_Init+0xfe>
 8004c42:	4b6e      	ldr	r3, [pc, #440]	@ (8004dfc <HAL_ADC_Init+0x284>)
 8004c44:	6899      	ldr	r1, [r3, #8]
 8004c46:	f011 0101 	ands.w	r1, r1, #1
 8004c4a:	d000      	beq.n	8004c4e <HAL_ADC_Init+0xd6>
 8004c4c:	2101      	movs	r1, #1
 8004c4e:	4b6c      	ldr	r3, [pc, #432]	@ (8004e00 <HAL_ADC_Init+0x288>)
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	f013 0301 	ands.w	r3, r3, #1
 8004c56:	d000      	beq.n	8004c5a <HAL_ADC_Init+0xe2>
 8004c58:	2301      	movs	r3, #1
 8004c5a:	430b      	orrs	r3, r1
 8004c5c:	4969      	ldr	r1, [pc, #420]	@ (8004e04 <HAL_ADC_Init+0x28c>)
 8004c5e:	6889      	ldr	r1, [r1, #8]
 8004c60:	f011 0101 	ands.w	r1, r1, #1
 8004c64:	d000      	beq.n	8004c68 <HAL_ADC_Init+0xf0>
 8004c66:	2101      	movs	r1, #1
 8004c68:	430b      	orrs	r3, r1
 8004c6a:	bf0c      	ite	eq
 8004c6c:	2301      	moveq	r3, #1
 8004c6e:	2300      	movne	r3, #0
 8004c70:	e012      	b.n	8004c98 <HAL_ADC_Init+0x120>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c72:	2000      	movs	r0, #0
 8004c74:	e7c8      	b.n	8004c08 <HAL_ADC_Init+0x90>
 8004c76:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004c7a:	6899      	ldr	r1, [r3, #8]
 8004c7c:	f011 0101 	ands.w	r1, r1, #1
 8004c80:	d000      	beq.n	8004c84 <HAL_ADC_Init+0x10c>
 8004c82:	2101      	movs	r1, #1
 8004c84:	4b5c      	ldr	r3, [pc, #368]	@ (8004df8 <HAL_ADC_Init+0x280>)
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	f013 0301 	ands.w	r3, r3, #1
 8004c8c:	d000      	beq.n	8004c90 <HAL_ADC_Init+0x118>
 8004c8e:	2301      	movs	r3, #1
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004c90:	430b      	orrs	r3, r1
 8004c92:	bf0c      	ite	eq
 8004c94:	2301      	moveq	r3, #1
 8004c96:	2300      	movne	r3, #0
 8004c98:	b163      	cbz	r3, 8004cb4 <HAL_ADC_Init+0x13c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004c9a:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 8004c9e:	d06c      	beq.n	8004d7a <HAL_ADC_Init+0x202>
 8004ca0:	4b55      	ldr	r3, [pc, #340]	@ (8004df8 <HAL_ADC_Init+0x280>)
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d067      	beq.n	8004d76 <HAL_ADC_Init+0x1fe>
 8004ca6:	4958      	ldr	r1, [pc, #352]	@ (8004e08 <HAL_ADC_Init+0x290>)
 8004ca8:	6863      	ldr	r3, [r4, #4]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004caa:	688a      	ldr	r2, [r1, #8]
 8004cac:	f422 127c 	bic.w	r2, r2, #4128768	@ 0x3f0000
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	608b      	str	r3, [r1, #8]
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004cb4:	7f62      	ldrb	r2, [r4, #29]
                 hadc->Init.Overrun                                                     |
 8004cb6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004cb8:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                 hadc->Init.DataAlign                                                   |
 8004cbc:	68e2      	ldr	r2, [r4, #12]
                 hadc->Init.Overrun                                                     |
 8004cbe:	4313      	orrs	r3, r2
                 hadc->Init.Resolution                                                  |
 8004cc0:	68a2      	ldr	r2, [r4, #8]
                 hadc->Init.DataAlign                                                   |
 8004cc2:	4313      	orrs	r3, r2
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004cc4:	f894 2024 	ldrb.w	r2, [r4, #36]	@ 0x24
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004cc8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004ccc:	2a01      	cmp	r2, #1
 8004cce:	d056      	beq.n	8004d7e <HAL_ADC_Init+0x206>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004cd0:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8004cd2:	b122      	cbz	r2, 8004cde <HAL_ADC_Init+0x166>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004cd4:	f402 7278 	and.w	r2, r2, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8004cd8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004cda:	430a      	orrs	r2, r1
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004cdc:	4313      	orrs	r3, r2
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004cde:	6821      	ldr	r1, [r4, #0]
 8004ce0:	68cd      	ldr	r5, [r1, #12]
 8004ce2:	4a4a      	ldr	r2, [pc, #296]	@ (8004e0c <HAL_ADC_Init+0x294>)
 8004ce4:	402a      	ands	r2, r5
 8004ce6:	431a      	orrs	r2, r3
 8004ce8:	60ca      	str	r2, [r1, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004cea:	6822      	ldr	r2, [r4, #0]
 8004cec:	6913      	ldr	r3, [r2, #16]
 8004cee:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8004cf2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004cf4:	430b      	orrs	r3, r1
 8004cf6:	6113      	str	r3, [r2, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004cf8:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004cfa:	6893      	ldr	r3, [r2, #8]
 8004cfc:	f013 0308 	ands.w	r3, r3, #8
 8004d00:	d000      	beq.n	8004d04 <HAL_ADC_Init+0x18c>
 8004d02:	2301      	movs	r3, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004d04:	bb43      	cbnz	r3, 8004d58 <HAL_ADC_Init+0x1e0>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004d06:	7f23      	ldrb	r3, [r4, #28]
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004d08:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 8004d0c:	0049      	lsls	r1, r1, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004d0e:	ea41 3183 	orr.w	r1, r1, r3, lsl #14

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004d12:	68d3      	ldr	r3, [r2, #12]
 8004d14:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004d18:	f023 0302 	bic.w	r3, r3, #2
 8004d1c:	430b      	orrs	r3, r1
 8004d1e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8004d20:	6923      	ldr	r3, [r4, #16]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d030      	beq.n	8004d88 <HAL_ADC_Init+0x210>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004d26:	6822      	ldr	r2, [r4, #0]
 8004d28:	6913      	ldr	r3, [r2, #16]
 8004d2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d2e:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004d30:	6822      	ldr	r2, [r4, #0]
 8004d32:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 8004d36:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004d3a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004d3e:	6921      	ldr	r1, [r4, #16]
 8004d40:	430b      	orrs	r3, r1
 8004d42:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8004d46:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d02b      	beq.n	8004da6 <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004d4e:	6822      	ldr	r2, [r4, #0]
 8004d50:	6913      	ldr	r3, [r2, #16]
 8004d52:	f023 0301 	bic.w	r3, r3, #1
 8004d56:	6113      	str	r3, [r2, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004d58:	6963      	ldr	r3, [r4, #20]
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d035      	beq.n	8004dca <HAL_ADC_Init+0x252>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004d5e:	6822      	ldr	r2, [r4, #0]
 8004d60:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8004d62:	f023 030f 	bic.w	r3, r3, #15
 8004d66:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004d68:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8004d6a:	f023 0303 	bic.w	r3, r3, #3
 8004d6e:	f043 0301 	orr.w	r3, r3, #1
 8004d72:	65e3      	str	r3, [r4, #92]	@ 0x5c
 8004d74:	e037      	b.n	8004de6 <HAL_ADC_Init+0x26e>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004d76:	4926      	ldr	r1, [pc, #152]	@ (8004e10 <HAL_ADC_Init+0x298>)
 8004d78:	e796      	b.n	8004ca8 <HAL_ADC_Init+0x130>
 8004d7a:	4925      	ldr	r1, [pc, #148]	@ (8004e10 <HAL_ADC_Init+0x298>)
 8004d7c:	e794      	b.n	8004ca8 <HAL_ADC_Init+0x130>
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004d7e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8004d80:	3a01      	subs	r2, #1
 8004d82:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8004d86:	e7a3      	b.n	8004cd0 <HAL_ADC_Init+0x158>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004d88:	6822      	ldr	r2, [r4, #0]
 8004d8a:	6913      	ldr	r3, [r2, #16]
 8004d8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d90:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004d92:	6822      	ldr	r2, [r4, #0]
 8004d94:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 8004d98:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004d9c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004da0:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8004da4:	e7cf      	b.n	8004d46 <HAL_ADC_Init+0x1ce>
        MODIFY_REG(hadc->Instance->CFGR2,
 8004da6:	6821      	ldr	r1, [r4, #0]
 8004da8:	690b      	ldr	r3, [r1, #16]
 8004daa:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004dae:	f023 0304 	bic.w	r3, r3, #4
 8004db2:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8004db4:	6ca5      	ldr	r5, [r4, #72]	@ 0x48
 8004db6:	432a      	orrs	r2, r5
 8004db8:	6ce5      	ldr	r5, [r4, #76]	@ 0x4c
 8004dba:	432a      	orrs	r2, r5
 8004dbc:	6d25      	ldr	r5, [r4, #80]	@ 0x50
 8004dbe:	432a      	orrs	r2, r5
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	f043 0301 	orr.w	r3, r3, #1
 8004dc6:	610b      	str	r3, [r1, #16]
 8004dc8:	e7c6      	b.n	8004d58 <HAL_ADC_Init+0x1e0>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004dca:	6821      	ldr	r1, [r4, #0]
 8004dcc:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 8004dce:	f023 030f 	bic.w	r3, r3, #15
 8004dd2:	6a22      	ldr	r2, [r4, #32]
 8004dd4:	3a01      	subs	r2, #1
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	630b      	str	r3, [r1, #48]	@ 0x30
 8004dda:	e7c5      	b.n	8004d68 <HAL_ADC_Init+0x1f0>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ddc:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8004dde:	f043 0310 	orr.w	r3, r3, #16
 8004de2:	65e3      	str	r3, [r4, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004de4:	2001      	movs	r0, #1
  }

  /* Return function status */
  return tmp_hal_status;
}
 8004de6:	b003      	add	sp, #12
 8004de8:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8004dea:	2001      	movs	r0, #1
 8004dec:	e7fb      	b.n	8004de6 <HAL_ADC_Init+0x26e>
 8004dee:	bf00      	nop
 8004df0:	20000050 	.word	0x20000050
 8004df4:	053e2d63 	.word	0x053e2d63
 8004df8:	50000100 	.word	0x50000100
 8004dfc:	50000400 	.word	0x50000400
 8004e00:	50000500 	.word	0x50000500
 8004e04:	50000600 	.word	0x50000600
 8004e08:	50000700 	.word	0x50000700
 8004e0c:	fff04007 	.word	0xfff04007
 8004e10:	50000300 	.word	0x50000300

08004e14 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004e14:	6803      	ldr	r3, [r0, #0]
 8004e16:	6c18      	ldr	r0, [r3, #64]	@ 0x40
}
 8004e18:	4770      	bx	lr

08004e1a <HAL_ADC_LevelOutOfWindowCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004e1a:	4770      	bx	lr

08004e1c <HAL_ADC_ErrorCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004e1c:	4770      	bx	lr
	...

08004e20 <HAL_ADC_IRQHandler>:
{
 8004e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e22:	4604      	mov	r4, r0
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004e24:	6803      	ldr	r3, [r0, #0]
 8004e26:	681e      	ldr	r6, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004e28:	685f      	ldr	r7, [r3, #4]
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004e2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e2e:	d049      	beq.n	8004ec4 <HAL_ADC_IRQHandler+0xa4>
 8004e30:	4a98      	ldr	r2, [pc, #608]	@ (8005094 <HAL_ADC_IRQHandler+0x274>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d044      	beq.n	8004ec0 <HAL_ADC_IRQHandler+0xa0>
 8004e36:	4b98      	ldr	r3, [pc, #608]	@ (8005098 <HAL_ADC_IRQHandler+0x278>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004e38:	689d      	ldr	r5, [r3, #8]
 8004e3a:	f005 051f 	and.w	r5, r5, #31
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8004e3e:	f016 0f02 	tst.w	r6, #2
 8004e42:	d010      	beq.n	8004e66 <HAL_ADC_IRQHandler+0x46>
 8004e44:	f017 0f02 	tst.w	r7, #2
 8004e48:	d00d      	beq.n	8004e66 <HAL_ADC_IRQHandler+0x46>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004e4a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8004e4c:	f013 0f10 	tst.w	r3, #16
 8004e50:	d103      	bne.n	8004e5a <HAL_ADC_IRQHandler+0x3a>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8004e52:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8004e54:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004e58:	65e3      	str	r3, [r4, #92]	@ 0x5c
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8004e5a:	4620      	mov	r0, r4
 8004e5c:	f000 fdaa 	bl	80059b4 <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8004e60:	6823      	ldr	r3, [r4, #0]
 8004e62:	2202      	movs	r2, #2
 8004e64:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004e66:	f016 0f04 	tst.w	r6, #4
 8004e6a:	d002      	beq.n	8004e72 <HAL_ADC_IRQHandler+0x52>
 8004e6c:	f017 0f04 	tst.w	r7, #4
 8004e70:	d105      	bne.n	8004e7e <HAL_ADC_IRQHandler+0x5e>
 8004e72:	f016 0f08 	tst.w	r6, #8
 8004e76:	d058      	beq.n	8004f2a <HAL_ADC_IRQHandler+0x10a>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004e78:	f017 0f08 	tst.w	r7, #8
 8004e7c:	d055      	beq.n	8004f2a <HAL_ADC_IRQHandler+0x10a>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004e7e:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8004e80:	f013 0f10 	tst.w	r3, #16
 8004e84:	d103      	bne.n	8004e8e <HAL_ADC_IRQHandler+0x6e>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004e86:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8004e88:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004e8c:	65e3      	str	r3, [r4, #92]	@ 0x5c
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004e8e:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004e90:	68da      	ldr	r2, [r3, #12]
 8004e92:	f412 6f40 	tst.w	r2, #3072	@ 0xc00
 8004e96:	d142      	bne.n	8004f1e <HAL_ADC_IRQHandler+0xfe>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004e98:	4a7e      	ldr	r2, [pc, #504]	@ (8005094 <HAL_ADC_IRQHandler+0x274>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d017      	beq.n	8004ece <HAL_ADC_IRQHandler+0xae>
 8004e9e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d010      	beq.n	8004ec8 <HAL_ADC_IRQHandler+0xa8>
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d013      	beq.n	8004ed4 <HAL_ADC_IRQHandler+0xb4>
 8004eac:	2d09      	cmp	r5, #9
 8004eae:	d805      	bhi.n	8004ebc <HAL_ADC_IRQHandler+0x9c>
 8004eb0:	f240 2121 	movw	r1, #545	@ 0x221
 8004eb4:	40e9      	lsrs	r1, r5
 8004eb6:	f011 0f01 	tst.w	r1, #1
 8004eba:	d10b      	bne.n	8004ed4 <HAL_ADC_IRQHandler+0xb4>
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004ebc:	68d2      	ldr	r2, [r2, #12]
 8004ebe:	e00a      	b.n	8004ed6 <HAL_ADC_IRQHandler+0xb6>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004ec0:	4b76      	ldr	r3, [pc, #472]	@ (800509c <HAL_ADC_IRQHandler+0x27c>)
 8004ec2:	e7b9      	b.n	8004e38 <HAL_ADC_IRQHandler+0x18>
 8004ec4:	4b75      	ldr	r3, [pc, #468]	@ (800509c <HAL_ADC_IRQHandler+0x27c>)
 8004ec6:	e7b7      	b.n	8004e38 <HAL_ADC_IRQHandler+0x18>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004ec8:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 8004ecc:	e7ec      	b.n	8004ea8 <HAL_ADC_IRQHandler+0x88>
 8004ece:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8004ed2:	e7e9      	b.n	8004ea8 <HAL_ADC_IRQHandler+0x88>
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004ed4:	68da      	ldr	r2, [r3, #12]
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8004ed6:	f412 5f00 	tst.w	r2, #8192	@ 0x2000
 8004eda:	d120      	bne.n	8004f1e <HAL_ADC_IRQHandler+0xfe>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	f012 0f08 	tst.w	r2, #8
 8004ee2:	d01c      	beq.n	8004f1e <HAL_ADC_IRQHandler+0xfe>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004ee4:	689a      	ldr	r2, [r3, #8]
 8004ee6:	f012 0f04 	tst.w	r2, #4
 8004eea:	d110      	bne.n	8004f0e <HAL_ADC_IRQHandler+0xee>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004eec:	685a      	ldr	r2, [r3, #4]
 8004eee:	f022 020c 	bic.w	r2, r2, #12
 8004ef2:	605a      	str	r2, [r3, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004ef4:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8004ef6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004efa:	65e3      	str	r3, [r4, #92]	@ 0x5c
            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004efc:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8004efe:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 8004f02:	d10c      	bne.n	8004f1e <HAL_ADC_IRQHandler+0xfe>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004f04:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8004f06:	f043 0301 	orr.w	r3, r3, #1
 8004f0a:	65e3      	str	r3, [r4, #92]	@ 0x5c
 8004f0c:	e007      	b.n	8004f1e <HAL_ADC_IRQHandler+0xfe>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f0e:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8004f10:	f043 0310 	orr.w	r3, r3, #16
 8004f14:	65e3      	str	r3, [r4, #92]	@ 0x5c
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f16:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8004f18:	f043 0301 	orr.w	r3, r3, #1
 8004f1c:	6623      	str	r3, [r4, #96]	@ 0x60
    HAL_ADC_ConvCpltCallback(hadc);
 8004f1e:	4620      	mov	r0, r4
 8004f20:	f7fc fca6 	bl	8001870 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004f24:	6823      	ldr	r3, [r4, #0]
 8004f26:	220c      	movs	r2, #12
 8004f28:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004f2a:	f016 0f20 	tst.w	r6, #32
 8004f2e:	d002      	beq.n	8004f36 <HAL_ADC_IRQHandler+0x116>
 8004f30:	f017 0f20 	tst.w	r7, #32
 8004f34:	d105      	bne.n	8004f42 <HAL_ADC_IRQHandler+0x122>
 8004f36:	f016 0f40 	tst.w	r6, #64	@ 0x40
 8004f3a:	d063      	beq.n	8005004 <HAL_ADC_IRQHandler+0x1e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004f3c:	f017 0f40 	tst.w	r7, #64	@ 0x40
 8004f40:	d060      	beq.n	8005004 <HAL_ADC_IRQHandler+0x1e4>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004f42:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8004f44:	f013 0f10 	tst.w	r3, #16
 8004f48:	d103      	bne.n	8004f52 <HAL_ADC_IRQHandler+0x132>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004f4a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8004f4c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004f50:	65e3      	str	r3, [r4, #92]	@ 0x5c
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8004f52:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8004f54:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004f56:	f412 7fc0 	tst.w	r2, #384	@ 0x180
 8004f5a:	d116      	bne.n	8004f8a <HAL_ADC_IRQHandler+0x16a>
 8004f5c:	2101      	movs	r1, #1
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004f5e:	68da      	ldr	r2, [r3, #12]
 8004f60:	f412 6f40 	tst.w	r2, #3072	@ 0xc00
 8004f64:	d113      	bne.n	8004f8e <HAL_ADC_IRQHandler+0x16e>
 8004f66:	2001      	movs	r0, #1
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004f68:	4a4a      	ldr	r2, [pc, #296]	@ (8005094 <HAL_ADC_IRQHandler+0x274>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d014      	beq.n	8004f98 <HAL_ADC_IRQHandler+0x178>
 8004f6e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d00d      	beq.n	8004f92 <HAL_ADC_IRQHandler+0x172>
 8004f76:	461a      	mov	r2, r3
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d010      	beq.n	8004f9e <HAL_ADC_IRQHandler+0x17e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004f7c:	b17d      	cbz	r5, 8004f9e <HAL_ADC_IRQHandler+0x17e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8004f7e:	2d06      	cmp	r5, #6
 8004f80:	d00d      	beq.n	8004f9e <HAL_ADC_IRQHandler+0x17e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8004f82:	2d07      	cmp	r5, #7
 8004f84:	d00b      	beq.n	8004f9e <HAL_ADC_IRQHandler+0x17e>
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004f86:	68d2      	ldr	r2, [r2, #12]
 8004f88:	e00a      	b.n	8004fa0 <HAL_ADC_IRQHandler+0x180>
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8004f8a:	2100      	movs	r1, #0
 8004f8c:	e7e7      	b.n	8004f5e <HAL_ADC_IRQHandler+0x13e>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004f8e:	2000      	movs	r0, #0
 8004f90:	e7ea      	b.n	8004f68 <HAL_ADC_IRQHandler+0x148>
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004f92:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 8004f96:	e7ef      	b.n	8004f78 <HAL_ADC_IRQHandler+0x158>
 8004f98:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8004f9c:	e7ec      	b.n	8004f78 <HAL_ADC_IRQHandler+0x158>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004f9e:	68da      	ldr	r2, [r3, #12]
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8004fa0:	b351      	cbz	r1, 8004ff8 <HAL_ADC_IRQHandler+0x1d8>
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8004fa2:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8004fa6:	d003      	beq.n	8004fb0 <HAL_ADC_IRQHandler+0x190>
 8004fa8:	b330      	cbz	r0, 8004ff8 <HAL_ADC_IRQHandler+0x1d8>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8004faa:	f412 5f00 	tst.w	r2, #8192	@ 0x2000
 8004fae:	d123      	bne.n	8004ff8 <HAL_ADC_IRQHandler+0x1d8>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8004fb0:	6819      	ldr	r1, [r3, #0]
 8004fb2:	f011 0f40 	tst.w	r1, #64	@ 0x40
 8004fb6:	d01f      	beq.n	8004ff8 <HAL_ADC_IRQHandler+0x1d8>
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8004fb8:	f412 1f00 	tst.w	r2, #2097152	@ 0x200000
 8004fbc:	d11c      	bne.n	8004ff8 <HAL_ADC_IRQHandler+0x1d8>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004fbe:	689a      	ldr	r2, [r3, #8]
 8004fc0:	f012 0f08 	tst.w	r2, #8
 8004fc4:	d110      	bne.n	8004fe8 <HAL_ADC_IRQHandler+0x1c8>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8004fc6:	685a      	ldr	r2, [r3, #4]
 8004fc8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004fcc:	605a      	str	r2, [r3, #4]
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8004fce:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8004fd0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004fd4:	65e3      	str	r3, [r4, #92]	@ 0x5c
              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8004fd6:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8004fd8:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8004fdc:	d10c      	bne.n	8004ff8 <HAL_ADC_IRQHandler+0x1d8>
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004fde:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8004fe0:	f043 0301 	orr.w	r3, r3, #1
 8004fe4:	65e3      	str	r3, [r4, #92]	@ 0x5c
 8004fe6:	e007      	b.n	8004ff8 <HAL_ADC_IRQHandler+0x1d8>
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004fe8:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8004fea:	f043 0310 	orr.w	r3, r3, #16
 8004fee:	65e3      	str	r3, [r4, #92]	@ 0x5c
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ff0:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8004ff2:	f043 0301 	orr.w	r3, r3, #1
 8004ff6:	6623      	str	r3, [r4, #96]	@ 0x60
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004ff8:	4620      	mov	r0, r4
 8004ffa:	f000 fcd7 	bl	80059ac <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8004ffe:	6823      	ldr	r3, [r4, #0]
 8005000:	2260      	movs	r2, #96	@ 0x60
 8005002:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8005004:	f016 0f80 	tst.w	r6, #128	@ 0x80
 8005008:	d002      	beq.n	8005010 <HAL_ADC_IRQHandler+0x1f0>
 800500a:	f017 0f80 	tst.w	r7, #128	@ 0x80
 800500e:	d136      	bne.n	800507e <HAL_ADC_IRQHandler+0x25e>
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8005010:	f416 7f80 	tst.w	r6, #256	@ 0x100
 8005014:	d002      	beq.n	800501c <HAL_ADC_IRQHandler+0x1fc>
 8005016:	f417 7f80 	tst.w	r7, #256	@ 0x100
 800501a:	d141      	bne.n	80050a0 <HAL_ADC_IRQHandler+0x280>
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800501c:	f416 7f00 	tst.w	r6, #512	@ 0x200
 8005020:	d002      	beq.n	8005028 <HAL_ADC_IRQHandler+0x208>
 8005022:	f417 7f00 	tst.w	r7, #512	@ 0x200
 8005026:	d147      	bne.n	80050b8 <HAL_ADC_IRQHandler+0x298>
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8005028:	f016 0f10 	tst.w	r6, #16
 800502c:	d020      	beq.n	8005070 <HAL_ADC_IRQHandler+0x250>
 800502e:	f017 0f10 	tst.w	r7, #16
 8005032:	d01d      	beq.n	8005070 <HAL_ADC_IRQHandler+0x250>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8005034:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005036:	b16b      	cbz	r3, 8005054 <HAL_ADC_IRQHandler+0x234>
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8005038:	2d00      	cmp	r5, #0
 800503a:	d04d      	beq.n	80050d8 <HAL_ADC_IRQHandler+0x2b8>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800503c:	6823      	ldr	r3, [r4, #0]
 800503e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005042:	d047      	beq.n	80050d4 <HAL_ADC_IRQHandler+0x2b4>
 8005044:	4a13      	ldr	r2, [pc, #76]	@ (8005094 <HAL_ADC_IRQHandler+0x274>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d042      	beq.n	80050d0 <HAL_ADC_IRQHandler+0x2b0>
 800504a:	4b13      	ldr	r3, [pc, #76]	@ (8005098 <HAL_ADC_IRQHandler+0x278>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	f413 4f60 	tst.w	r3, #57344	@ 0xe000
 8005052:	d00a      	beq.n	800506a <HAL_ADC_IRQHandler+0x24a>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8005054:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8005056:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800505a:	65e3      	str	r3, [r4, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800505c:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 800505e:	f043 0302 	orr.w	r3, r3, #2
 8005062:	6623      	str	r3, [r4, #96]	@ 0x60
      HAL_ADC_ErrorCallback(hadc);
 8005064:	4620      	mov	r0, r4
 8005066:	f7ff fed9 	bl	8004e1c <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800506a:	6823      	ldr	r3, [r4, #0]
 800506c:	2210      	movs	r2, #16
 800506e:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8005070:	f416 6f80 	tst.w	r6, #1024	@ 0x400
 8005074:	d002      	beq.n	800507c <HAL_ADC_IRQHandler+0x25c>
 8005076:	f417 6f80 	tst.w	r7, #1024	@ 0x400
 800507a:	d133      	bne.n	80050e4 <HAL_ADC_IRQHandler+0x2c4>
}
 800507c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800507e:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8005080:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005084:	65e3      	str	r3, [r4, #92]	@ 0x5c
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005086:	4620      	mov	r0, r4
 8005088:	f7ff fec7 	bl	8004e1a <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800508c:	6823      	ldr	r3, [r4, #0]
 800508e:	2280      	movs	r2, #128	@ 0x80
 8005090:	601a      	str	r2, [r3, #0]
 8005092:	e7bd      	b.n	8005010 <HAL_ADC_IRQHandler+0x1f0>
 8005094:	50000100 	.word	0x50000100
 8005098:	50000700 	.word	0x50000700
 800509c:	50000300 	.word	0x50000300
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80050a0:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80050a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050a6:	65e3      	str	r3, [r4, #92]	@ 0x5c
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80050a8:	4620      	mov	r0, r4
 80050aa:	f000 fc81 	bl	80059b0 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80050ae:	6823      	ldr	r3, [r4, #0]
 80050b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80050b4:	601a      	str	r2, [r3, #0]
 80050b6:	e7b1      	b.n	800501c <HAL_ADC_IRQHandler+0x1fc>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80050b8:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80050ba:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80050be:	65e3      	str	r3, [r4, #92]	@ 0x5c
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80050c0:	4620      	mov	r0, r4
 80050c2:	f000 fc76 	bl	80059b2 <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80050c6:	6823      	ldr	r3, [r4, #0]
 80050c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80050cc:	601a      	str	r2, [r3, #0]
 80050ce:	e7ab      	b.n	8005028 <HAL_ADC_IRQHandler+0x208>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80050d0:	4b0c      	ldr	r3, [pc, #48]	@ (8005104 <HAL_ADC_IRQHandler+0x2e4>)
 80050d2:	e7bb      	b.n	800504c <HAL_ADC_IRQHandler+0x22c>
 80050d4:	4b0b      	ldr	r3, [pc, #44]	@ (8005104 <HAL_ADC_IRQHandler+0x2e4>)
 80050d6:	e7b9      	b.n	800504c <HAL_ADC_IRQHandler+0x22c>
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80050d8:	6823      	ldr	r3, [r4, #0]
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	f013 0f01 	tst.w	r3, #1
 80050e0:	d0c3      	beq.n	800506a <HAL_ADC_IRQHandler+0x24a>
 80050e2:	e7b7      	b.n	8005054 <HAL_ADC_IRQHandler+0x234>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80050e4:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80050e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80050ea:	65e3      	str	r3, [r4, #92]	@ 0x5c
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80050ec:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80050ee:	f043 0308 	orr.w	r3, r3, #8
 80050f2:	6623      	str	r3, [r4, #96]	@ 0x60
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80050f4:	6823      	ldr	r3, [r4, #0]
 80050f6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80050fa:	601a      	str	r2, [r3, #0]
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80050fc:	4620      	mov	r0, r4
 80050fe:	f000 fc56 	bl	80059ae <HAL_ADCEx_InjectedQueueOverflowCallback>
}
 8005102:	e7bb      	b.n	800507c <HAL_ADC_IRQHandler+0x25c>
 8005104:	50000300 	.word	0x50000300

08005108 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8005108:	b5f0      	push	{r4, r5, r6, r7, lr}
 800510a:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800510c:	2300      	movs	r3, #0
 800510e:	9301      	str	r3, [sp, #4]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005110:	f890 3058 	ldrb.w	r3, [r0, #88]	@ 0x58
 8005114:	2b01      	cmp	r3, #1
 8005116:	f000 8242 	beq.w	800559e <HAL_ADC_ConfigChannel+0x496>
 800511a:	4604      	mov	r4, r0
 800511c:	460d      	mov	r5, r1
 800511e:	2301      	movs	r3, #1
 8005120:	f880 3058 	strb.w	r3, [r0, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005124:	6800      	ldr	r0, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005126:	6883      	ldr	r3, [r0, #8]
 8005128:	f013 0f04 	tst.w	r3, #4
 800512c:	d009      	beq.n	8005142 <HAL_ADC_ConfigChannel+0x3a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800512e:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8005130:	f043 0320 	orr.w	r3, r3, #32
 8005134:	65e3      	str	r3, [r4, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005136:	2001      	movs	r0, #1
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005138:	2300      	movs	r3, #0
 800513a:	f884 3058 	strb.w	r3, [r4, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
}
 800513e:	b003      	add	sp, #12
 8005140:	bdf0      	pop	{r4, r5, r6, r7, pc}
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8005142:	680a      	ldr	r2, [r1, #0]
 8005144:	6849      	ldr	r1, [r1, #4]
 8005146:	f7ff fce9 	bl	8004b1c <LL_ADC_REG_SetSequencerRanks>
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800514a:	6820      	ldr	r0, [r4, #0]
 800514c:	6883      	ldr	r3, [r0, #8]
 800514e:	f013 0304 	ands.w	r3, r3, #4
 8005152:	d000      	beq.n	8005156 <HAL_ADC_ConfigChannel+0x4e>
 8005154:	2301      	movs	r3, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005156:	6886      	ldr	r6, [r0, #8]
 8005158:	f016 0608 	ands.w	r6, r6, #8
 800515c:	d000      	beq.n	8005160 <HAL_ADC_ConfigChannel+0x58>
 800515e:	2601      	movs	r6, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005160:	2b00      	cmp	r3, #0
 8005162:	d13e      	bne.n	80051e2 <HAL_ADC_ConfigChannel+0xda>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005164:	2e00      	cmp	r6, #0
 8005166:	d13c      	bne.n	80051e2 <HAL_ADC_ConfigChannel+0xda>
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005168:	68aa      	ldr	r2, [r5, #8]
 800516a:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 800516e:	d078      	beq.n	8005262 <HAL_ADC_ConfigChannel+0x15a>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8005170:	6829      	ldr	r1, [r5, #0]
 8005172:	f7ff fceb 	bl	8004b4c <LL_ADC_SetChannelSamplingTime>
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8005176:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005178:	6953      	ldr	r3, [r2, #20]
 800517a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800517e:	6153      	str	r3, [r2, #20]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8005180:	6969      	ldr	r1, [r5, #20]
 8005182:	6822      	ldr	r2, [r4, #0]
 8005184:	68d3      	ldr	r3, [r2, #12]
 8005186:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800518a:	005b      	lsls	r3, r3, #1
 800518c:	4099      	lsls	r1, r3
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800518e:	6928      	ldr	r0, [r5, #16]
 8005190:	2804      	cmp	r0, #4
 8005192:	d073      	beq.n	800527c <HAL_ADC_ConfigChannel+0x174>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005194:	3260      	adds	r2, #96	@ 0x60
  MODIFY_REG(*preg,
 8005196:	f852 7020 	ldr.w	r7, [r2, r0, lsl #2]
 800519a:	4bab      	ldr	r3, [pc, #684]	@ (8005448 <HAL_ADC_ConfigChannel+0x340>)
 800519c:	403b      	ands	r3, r7
 800519e:	682f      	ldr	r7, [r5, #0]
 80051a0:	f007 4cf8 	and.w	ip, r7, #2080374784	@ 0x7c000000
 80051a4:	ea41 010c 	orr.w	r1, r1, ip
 80051a8:	430b      	orrs	r3, r1
 80051aa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80051ae:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80051b2:	6823      	ldr	r3, [r4, #0]
 80051b4:	6928      	ldr	r0, [r5, #16]
 80051b6:	69aa      	ldr	r2, [r5, #24]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80051b8:	3360      	adds	r3, #96	@ 0x60
  MODIFY_REG(*preg,
 80051ba:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
 80051be:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 80051c2:	430a      	orrs	r2, r1
 80051c4:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80051c8:	6823      	ldr	r3, [r4, #0]
 80051ca:	6929      	ldr	r1, [r5, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80051cc:	7f2a      	ldrb	r2, [r5, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80051ce:	2a01      	cmp	r2, #1
 80051d0:	d051      	beq.n	8005276 <HAL_ADC_ConfigChannel+0x16e>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80051d2:	3360      	adds	r3, #96	@ 0x60
  MODIFY_REG(*preg,
 80051d4:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 80051d8:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 80051dc:	4332      	orrs	r2, r6
 80051de:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80051e2:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80051e4:	6893      	ldr	r3, [r2, #8]
 80051e6:	f013 0f01 	tst.w	r3, #1
 80051ea:	d116      	bne.n	800521a <HAL_ADC_ConfigChannel+0x112>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80051ec:	682b      	ldr	r3, [r5, #0]
 80051ee:	68e8      	ldr	r0, [r5, #12]
  MODIFY_REG(ADCx->DIFSEL,
 80051f0:	f8d2 10b0 	ldr.w	r1, [r2, #176]	@ 0xb0
 80051f4:	f3c3 0612 	ubfx	r6, r3, #0, #19
 80051f8:	ea21 0106 	bic.w	r1, r1, r6
 80051fc:	f000 0618 	and.w	r6, r0, #24
 8005200:	4892      	ldr	r0, [pc, #584]	@ (800544c <HAL_ADC_ConfigChannel+0x344>)
 8005202:	40f0      	lsrs	r0, r6
 8005204:	4003      	ands	r3, r0
 8005206:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800520a:	430b      	orrs	r3, r1
 800520c:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005210:	68ea      	ldr	r2, [r5, #12]
 8005212:	4b8f      	ldr	r3, [pc, #572]	@ (8005450 <HAL_ADC_ConfigChannel+0x348>)
 8005214:	429a      	cmp	r2, r3
 8005216:	f000 8099 	beq.w	800534c <HAL_ADC_ConfigChannel+0x244>
    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800521a:	682b      	ldr	r3, [r5, #0]
 800521c:	4a8d      	ldr	r2, [pc, #564]	@ (8005454 <HAL_ADC_ConfigChannel+0x34c>)
 800521e:	4213      	tst	r3, r2
 8005220:	f000 81b7 	beq.w	8005592 <HAL_ADC_ConfigChannel+0x48a>
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005224:	6822      	ldr	r2, [r4, #0]
 8005226:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 800522a:	f000 8150 	beq.w	80054ce <HAL_ADC_ConfigChannel+0x3c6>
 800522e:	498a      	ldr	r1, [pc, #552]	@ (8005458 <HAL_ADC_ConfigChannel+0x350>)
 8005230:	428a      	cmp	r2, r1
 8005232:	f000 8149 	beq.w	80054c8 <HAL_ADC_ConfigChannel+0x3c0>
 8005236:	4989      	ldr	r1, [pc, #548]	@ (800545c <HAL_ADC_ConfigChannel+0x354>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8005238:	6889      	ldr	r1, [r1, #8]
 800523a:	f001 70e0 	and.w	r0, r1, #29360128	@ 0x1c00000
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800523e:	4d88      	ldr	r5, [pc, #544]	@ (8005460 <HAL_ADC_ConfigChannel+0x358>)
 8005240:	42ab      	cmp	r3, r5
 8005242:	f000 8146 	beq.w	80054d2 <HAL_ADC_ConfigChannel+0x3ca>
 8005246:	4d87      	ldr	r5, [pc, #540]	@ (8005464 <HAL_ADC_ConfigChannel+0x35c>)
 8005248:	42ab      	cmp	r3, r5
 800524a:	f000 8142 	beq.w	80054d2 <HAL_ADC_ConfigChannel+0x3ca>
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800524e:	4d86      	ldr	r5, [pc, #536]	@ (8005468 <HAL_ADC_ConfigChannel+0x360>)
 8005250:	42ab      	cmp	r3, r5
 8005252:	f000 8171 	beq.w	8005538 <HAL_ADC_ConfigChannel+0x430>
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005256:	4d85      	ldr	r5, [pc, #532]	@ (800546c <HAL_ADC_ConfigChannel+0x364>)
 8005258:	42ab      	cmp	r3, r5
 800525a:	f000 8185 	beq.w	8005568 <HAL_ADC_ConfigChannel+0x460>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800525e:	2000      	movs	r0, #0
 8005260:	e76a      	b.n	8005138 <HAL_ADC_ConfigChannel+0x30>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005262:	2200      	movs	r2, #0
 8005264:	6829      	ldr	r1, [r5, #0]
 8005266:	f7ff fc71 	bl	8004b4c <LL_ADC_SetChannelSamplingTime>
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800526a:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800526c:	6953      	ldr	r3, [r2, #20]
 800526e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005272:	6153      	str	r3, [r2, #20]
}
 8005274:	e784      	b.n	8005180 <HAL_ADC_ConfigChannel+0x78>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8005276:	f04f 7600 	mov.w	r6, #33554432	@ 0x2000000
 800527a:	e7aa      	b.n	80051d2 <HAL_ADC_ConfigChannel+0xca>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800527c:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 800527e:	6e11      	ldr	r1, [r2, #96]	@ 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005280:	f3c1 6184 	ubfx	r1, r1, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005284:	682b      	ldr	r3, [r5, #0]
 8005286:	f3c3 0012 	ubfx	r0, r3, #0, #19
 800528a:	bb80      	cbnz	r0, 80052ee <HAL_ADC_ConfigChannel+0x1e6>
 800528c:	f3c3 6384 	ubfx	r3, r3, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005290:	4299      	cmp	r1, r3
 8005292:	d034      	beq.n	80052fe <HAL_ADC_ConfigChannel+0x1f6>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005294:	6821      	ldr	r1, [r4, #0]
 8005296:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8005298:	6e4a      	ldr	r2, [r1, #100]	@ 0x64
 800529a:	f3c2 6284 	ubfx	r2, r2, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800529e:	682b      	ldr	r3, [r5, #0]
 80052a0:	f3c3 0012 	ubfx	r0, r3, #0, #19
 80052a4:	bb80      	cbnz	r0, 8005308 <HAL_ADC_ConfigChannel+0x200>
 80052a6:	f3c3 6384 	ubfx	r3, r3, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d034      	beq.n	8005318 <HAL_ADC_ConfigChannel+0x210>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80052ae:	6821      	ldr	r1, [r4, #0]
 80052b0:	6e8b      	ldr	r3, [r1, #104]	@ 0x68
 80052b2:	6e8a      	ldr	r2, [r1, #104]	@ 0x68
 80052b4:	f3c2 6284 	ubfx	r2, r2, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80052b8:	682b      	ldr	r3, [r5, #0]
 80052ba:	f3c3 0012 	ubfx	r0, r3, #0, #19
 80052be:	bb80      	cbnz	r0, 8005322 <HAL_ADC_ConfigChannel+0x21a>
 80052c0:	f3c3 6384 	ubfx	r3, r3, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d034      	beq.n	8005332 <HAL_ADC_ConfigChannel+0x22a>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80052c8:	6821      	ldr	r1, [r4, #0]
 80052ca:	6ecb      	ldr	r3, [r1, #108]	@ 0x6c
 80052cc:	6eca      	ldr	r2, [r1, #108]	@ 0x6c
 80052ce:	f3c2 6284 	ubfx	r2, r2, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80052d2:	682b      	ldr	r3, [r5, #0]
 80052d4:	f3c3 0012 	ubfx	r0, r3, #0, #19
 80052d8:	bb80      	cbnz	r0, 800533c <HAL_ADC_ConfigChannel+0x234>
 80052da:	f3c3 6384 	ubfx	r3, r3, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80052de:	429a      	cmp	r2, r3
 80052e0:	f47f af7f 	bne.w	80051e2 <HAL_ADC_ConfigChannel+0xda>
  MODIFY_REG(*preg,
 80052e4:	6ecb      	ldr	r3, [r1, #108]	@ 0x6c
 80052e6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80052ea:	66cb      	str	r3, [r1, #108]	@ 0x6c
}
 80052ec:	e779      	b.n	80051e2 <HAL_ADC_ConfigChannel+0xda>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052ee:	fa93 f3a3 	rbit	r3, r3
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80052f2:	b113      	cbz	r3, 80052fa <HAL_ADC_ConfigChannel+0x1f2>
  {
    return 32U;
  }
  return __builtin_clz(value);
 80052f4:	fab3 f383 	clz	r3, r3
 80052f8:	e7ca      	b.n	8005290 <HAL_ADC_ConfigChannel+0x188>
    return 32U;
 80052fa:	2320      	movs	r3, #32
 80052fc:	e7c8      	b.n	8005290 <HAL_ADC_ConfigChannel+0x188>
  MODIFY_REG(*preg,
 80052fe:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 8005300:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005304:	6613      	str	r3, [r2, #96]	@ 0x60
}
 8005306:	e7c5      	b.n	8005294 <HAL_ADC_ConfigChannel+0x18c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005308:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 800530c:	b113      	cbz	r3, 8005314 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 800530e:	fab3 f383 	clz	r3, r3
 8005312:	e7ca      	b.n	80052aa <HAL_ADC_ConfigChannel+0x1a2>
    return 32U;
 8005314:	2320      	movs	r3, #32
 8005316:	e7c8      	b.n	80052aa <HAL_ADC_ConfigChannel+0x1a2>
  MODIFY_REG(*preg,
 8005318:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 800531a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800531e:	664b      	str	r3, [r1, #100]	@ 0x64
}
 8005320:	e7c5      	b.n	80052ae <HAL_ADC_ConfigChannel+0x1a6>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005322:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8005326:	b113      	cbz	r3, 800532e <HAL_ADC_ConfigChannel+0x226>
  return __builtin_clz(value);
 8005328:	fab3 f383 	clz	r3, r3
 800532c:	e7ca      	b.n	80052c4 <HAL_ADC_ConfigChannel+0x1bc>
    return 32U;
 800532e:	2320      	movs	r3, #32
 8005330:	e7c8      	b.n	80052c4 <HAL_ADC_ConfigChannel+0x1bc>
  MODIFY_REG(*preg,
 8005332:	6e8b      	ldr	r3, [r1, #104]	@ 0x68
 8005334:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005338:	668b      	str	r3, [r1, #104]	@ 0x68
}
 800533a:	e7c5      	b.n	80052c8 <HAL_ADC_ConfigChannel+0x1c0>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800533c:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8005340:	b113      	cbz	r3, 8005348 <HAL_ADC_ConfigChannel+0x240>
  return __builtin_clz(value);
 8005342:	fab3 f383 	clz	r3, r3
 8005346:	e7ca      	b.n	80052de <HAL_ADC_ConfigChannel+0x1d6>
    return 32U;
 8005348:	2320      	movs	r3, #32
 800534a:	e7c8      	b.n	80052de <HAL_ADC_ConfigChannel+0x1d6>
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800534c:	6820      	ldr	r0, [r4, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800534e:	682b      	ldr	r3, [r5, #0]
 8005350:	f3c3 0612 	ubfx	r6, r3, #0, #19
 8005354:	bb26      	cbnz	r6, 80053a0 <HAL_ADC_ConfigChannel+0x298>
 8005356:	0e9a      	lsrs	r2, r3, #26
 8005358:	3201      	adds	r2, #1
 800535a:	f002 021f 	and.w	r2, r2, #31
 800535e:	2a09      	cmp	r2, #9
 8005360:	bf8c      	ite	hi
 8005362:	2200      	movhi	r2, #0
 8005364:	2201      	movls	r2, #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005366:	2a00      	cmp	r2, #0
 8005368:	d052      	beq.n	8005410 <HAL_ADC_ConfigChannel+0x308>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800536a:	bb46      	cbnz	r6, 80053be <HAL_ADC_ConfigChannel+0x2b6>
 800536c:	0e99      	lsrs	r1, r3, #26
 800536e:	3101      	adds	r1, #1
 8005370:	0689      	lsls	r1, r1, #26
 8005372:	f001 41f8 	and.w	r1, r1, #2080374784	@ 0x7c000000
 8005376:	bb76      	cbnz	r6, 80053d6 <HAL_ADC_ConfigChannel+0x2ce>
 8005378:	0e9f      	lsrs	r7, r3, #26
 800537a:	3701      	adds	r7, #1
 800537c:	f007 071f 	and.w	r7, r7, #31
 8005380:	2201      	movs	r2, #1
 8005382:	40ba      	lsls	r2, r7
 8005384:	4311      	orrs	r1, r2
 8005386:	bbae      	cbnz	r6, 80053f4 <HAL_ADC_ConfigChannel+0x2ec>
 8005388:	0e9b      	lsrs	r3, r3, #26
 800538a:	3301      	adds	r3, #1
 800538c:	f003 031f 	and.w	r3, r3, #31
 8005390:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005394:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005396:	4319      	orrs	r1, r3
 8005398:	68aa      	ldr	r2, [r5, #8]
 800539a:	f7ff fbd7 	bl	8004b4c <LL_ADC_SetChannelSamplingTime>
 800539e:	e73c      	b.n	800521a <HAL_ADC_ConfigChannel+0x112>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053a0:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 80053a4:	b14a      	cbz	r2, 80053ba <HAL_ADC_ConfigChannel+0x2b2>
  return __builtin_clz(value);
 80053a6:	fab2 f282 	clz	r2, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80053aa:	3201      	adds	r2, #1
 80053ac:	f002 021f 	and.w	r2, r2, #31
 80053b0:	2a09      	cmp	r2, #9
 80053b2:	bf8c      	ite	hi
 80053b4:	2200      	movhi	r2, #0
 80053b6:	2201      	movls	r2, #1
 80053b8:	e7d5      	b.n	8005366 <HAL_ADC_ConfigChannel+0x25e>
    return 32U;
 80053ba:	2220      	movs	r2, #32
 80053bc:	e7f5      	b.n	80053aa <HAL_ADC_ConfigChannel+0x2a2>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053be:	fa93 f1a3 	rbit	r1, r3
  if (value == 0U)
 80053c2:	b131      	cbz	r1, 80053d2 <HAL_ADC_ConfigChannel+0x2ca>
  return __builtin_clz(value);
 80053c4:	fab1 f181 	clz	r1, r1
 80053c8:	3101      	adds	r1, #1
 80053ca:	0689      	lsls	r1, r1, #26
 80053cc:	f001 41f8 	and.w	r1, r1, #2080374784	@ 0x7c000000
 80053d0:	e7d1      	b.n	8005376 <HAL_ADC_ConfigChannel+0x26e>
    return 32U;
 80053d2:	2120      	movs	r1, #32
 80053d4:	e7f8      	b.n	80053c8 <HAL_ADC_ConfigChannel+0x2c0>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053d6:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 80053da:	b14a      	cbz	r2, 80053f0 <HAL_ADC_ConfigChannel+0x2e8>
  return __builtin_clz(value);
 80053dc:	fab2 f282 	clz	r2, r2
 80053e0:	3201      	adds	r2, #1
 80053e2:	f002 021f 	and.w	r2, r2, #31
 80053e6:	f04f 0c01 	mov.w	ip, #1
 80053ea:	fa0c f202 	lsl.w	r2, ip, r2
 80053ee:	e7c9      	b.n	8005384 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 80053f0:	2220      	movs	r2, #32
 80053f2:	e7f5      	b.n	80053e0 <HAL_ADC_ConfigChannel+0x2d8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053f4:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 80053f8:	b143      	cbz	r3, 800540c <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 80053fa:	fab3 f383 	clz	r3, r3
 80053fe:	3301      	adds	r3, #1
 8005400:	f003 031f 	and.w	r3, r3, #31
 8005404:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005408:	051b      	lsls	r3, r3, #20
 800540a:	e7c4      	b.n	8005396 <HAL_ADC_ConfigChannel+0x28e>
    return 32U;
 800540c:	2320      	movs	r3, #32
 800540e:	e7f6      	b.n	80053fe <HAL_ADC_ConfigChannel+0x2f6>
 8005410:	bb76      	cbnz	r6, 8005470 <HAL_ADC_ConfigChannel+0x368>
 8005412:	0e99      	lsrs	r1, r3, #26
 8005414:	3101      	adds	r1, #1
 8005416:	0689      	lsls	r1, r1, #26
 8005418:	f001 41f8 	and.w	r1, r1, #2080374784	@ 0x7c000000
 800541c:	bba6      	cbnz	r6, 8005488 <HAL_ADC_ConfigChannel+0x380>
 800541e:	0e9f      	lsrs	r7, r3, #26
 8005420:	3701      	adds	r7, #1
 8005422:	f007 071f 	and.w	r7, r7, #31
 8005426:	2201      	movs	r2, #1
 8005428:	40ba      	lsls	r2, r7
 800542a:	4311      	orrs	r1, r2
 800542c:	bbde      	cbnz	r6, 80054a6 <HAL_ADC_ConfigChannel+0x39e>
 800542e:	0e9b      	lsrs	r3, r3, #26
 8005430:	3301      	adds	r3, #1
 8005432:	f003 031f 	and.w	r3, r3, #31
 8005436:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800543a:	3b1e      	subs	r3, #30
 800543c:	051b      	lsls	r3, r3, #20
 800543e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005442:	4319      	orrs	r1, r3
 8005444:	e7a8      	b.n	8005398 <HAL_ADC_ConfigChannel+0x290>
 8005446:	bf00      	nop
 8005448:	03fff000 	.word	0x03fff000
 800544c:	0007ffff 	.word	0x0007ffff
 8005450:	407f0000 	.word	0x407f0000
 8005454:	80080000 	.word	0x80080000
 8005458:	50000100 	.word	0x50000100
 800545c:	50000700 	.word	0x50000700
 8005460:	c3210000 	.word	0xc3210000
 8005464:	90c00010 	.word	0x90c00010
 8005468:	c7520000 	.word	0xc7520000
 800546c:	cb840000 	.word	0xcb840000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005470:	fa93 f1a3 	rbit	r1, r3
  if (value == 0U)
 8005474:	b131      	cbz	r1, 8005484 <HAL_ADC_ConfigChannel+0x37c>
  return __builtin_clz(value);
 8005476:	fab1 f181 	clz	r1, r1
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800547a:	3101      	adds	r1, #1
 800547c:	0689      	lsls	r1, r1, #26
 800547e:	f001 41f8 	and.w	r1, r1, #2080374784	@ 0x7c000000
 8005482:	e7cb      	b.n	800541c <HAL_ADC_ConfigChannel+0x314>
    return 32U;
 8005484:	2120      	movs	r1, #32
 8005486:	e7f8      	b.n	800547a <HAL_ADC_ConfigChannel+0x372>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005488:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 800548c:	b14a      	cbz	r2, 80054a2 <HAL_ADC_ConfigChannel+0x39a>
  return __builtin_clz(value);
 800548e:	fab2 f282 	clz	r2, r2
 8005492:	3201      	adds	r2, #1
 8005494:	f002 021f 	and.w	r2, r2, #31
 8005498:	f04f 0c01 	mov.w	ip, #1
 800549c:	fa0c f202 	lsl.w	r2, ip, r2
 80054a0:	e7c3      	b.n	800542a <HAL_ADC_ConfigChannel+0x322>
    return 32U;
 80054a2:	2220      	movs	r2, #32
 80054a4:	e7f5      	b.n	8005492 <HAL_ADC_ConfigChannel+0x38a>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054a6:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 80054aa:	b15b      	cbz	r3, 80054c4 <HAL_ADC_ConfigChannel+0x3bc>
  return __builtin_clz(value);
 80054ac:	fab3 f383 	clz	r3, r3
 80054b0:	3301      	adds	r3, #1
 80054b2:	f003 031f 	and.w	r3, r3, #31
 80054b6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80054ba:	3b1e      	subs	r3, #30
 80054bc:	051b      	lsls	r3, r3, #20
 80054be:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80054c2:	e7be      	b.n	8005442 <HAL_ADC_ConfigChannel+0x33a>
    return 32U;
 80054c4:	2320      	movs	r3, #32
 80054c6:	e7f3      	b.n	80054b0 <HAL_ADC_ConfigChannel+0x3a8>
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80054c8:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 80054cc:	e6b4      	b.n	8005238 <HAL_ADC_ConfigChannel+0x130>
 80054ce:	4935      	ldr	r1, [pc, #212]	@ (80055a4 <HAL_ADC_ConfigChannel+0x49c>)
 80054d0:	e6b2      	b.n	8005238 <HAL_ADC_ConfigChannel+0x130>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80054d2:	f411 0f00 	tst.w	r1, #8388608	@ 0x800000
 80054d6:	f47f aeba 	bne.w	800524e <HAL_ADC_ConfigChannel+0x146>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80054da:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 80054de:	d004      	beq.n	80054ea <HAL_ADC_ConfigChannel+0x3e2>
 80054e0:	4b31      	ldr	r3, [pc, #196]	@ (80055a8 <HAL_ADC_ConfigChannel+0x4a0>)
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d001      	beq.n	80054ea <HAL_ADC_ConfigChannel+0x3e2>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80054e6:	2000      	movs	r0, #0
 80054e8:	e626      	b.n	8005138 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80054ea:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 80054ee:	d019      	beq.n	8005524 <HAL_ADC_ConfigChannel+0x41c>
 80054f0:	4b2e      	ldr	r3, [pc, #184]	@ (80055ac <HAL_ADC_ConfigChannel+0x4a4>)
 80054f2:	429a      	cmp	r2, r3
 80054f4:	d014      	beq.n	8005520 <HAL_ADC_ConfigChannel+0x418>
 80054f6:	4a2e      	ldr	r2, [pc, #184]	@ (80055b0 <HAL_ADC_ConfigChannel+0x4a8>)
 80054f8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80054fc:	6893      	ldr	r3, [r2, #8]
 80054fe:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 8005502:	4318      	orrs	r0, r3
 8005504:	6090      	str	r0, [r2, #8]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005506:	4b2b      	ldr	r3, [pc, #172]	@ (80055b4 <HAL_ADC_ConfigChannel+0x4ac>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	099b      	lsrs	r3, r3, #6
 800550c:	4a2a      	ldr	r2, [pc, #168]	@ (80055b8 <HAL_ADC_ConfigChannel+0x4b0>)
 800550e:	fba2 2303 	umull	r2, r3, r2, r3
 8005512:	099b      	lsrs	r3, r3, #6
 8005514:	3301      	adds	r3, #1
 8005516:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 800551e:	e006      	b.n	800552e <HAL_ADC_ConfigChannel+0x426>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005520:	4a20      	ldr	r2, [pc, #128]	@ (80055a4 <HAL_ADC_ConfigChannel+0x49c>)
 8005522:	e7e9      	b.n	80054f8 <HAL_ADC_ConfigChannel+0x3f0>
 8005524:	4a1f      	ldr	r2, [pc, #124]	@ (80055a4 <HAL_ADC_ConfigChannel+0x49c>)
 8005526:	e7e7      	b.n	80054f8 <HAL_ADC_ConfigChannel+0x3f0>
            wait_loop_index--;
 8005528:	9b01      	ldr	r3, [sp, #4]
 800552a:	3b01      	subs	r3, #1
 800552c:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 800552e:	9b01      	ldr	r3, [sp, #4]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d1f9      	bne.n	8005528 <HAL_ADC_ConfigChannel+0x420>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005534:	2000      	movs	r0, #0
 8005536:	e5ff      	b.n	8005138 <HAL_ADC_ConfigChannel+0x30>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005538:	f011 7f80 	tst.w	r1, #16777216	@ 0x1000000
 800553c:	f47f ae8b 	bne.w	8005256 <HAL_ADC_ConfigChannel+0x14e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005540:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 8005544:	d00e      	beq.n	8005564 <HAL_ADC_ConfigChannel+0x45c>
 8005546:	4b19      	ldr	r3, [pc, #100]	@ (80055ac <HAL_ADC_ConfigChannel+0x4a4>)
 8005548:	429a      	cmp	r2, r3
 800554a:	d009      	beq.n	8005560 <HAL_ADC_ConfigChannel+0x458>
 800554c:	4a18      	ldr	r2, [pc, #96]	@ (80055b0 <HAL_ADC_ConfigChannel+0x4a8>)
 800554e:	f040 7080 	orr.w	r0, r0, #16777216	@ 0x1000000
 8005552:	6893      	ldr	r3, [r2, #8]
 8005554:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 8005558:	4318      	orrs	r0, r3
 800555a:	6090      	str	r0, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800555c:	2000      	movs	r0, #0
}
 800555e:	e5eb      	b.n	8005138 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005560:	4a10      	ldr	r2, [pc, #64]	@ (80055a4 <HAL_ADC_ConfigChannel+0x49c>)
 8005562:	e7f4      	b.n	800554e <HAL_ADC_ConfigChannel+0x446>
 8005564:	4a0f      	ldr	r2, [pc, #60]	@ (80055a4 <HAL_ADC_ConfigChannel+0x49c>)
 8005566:	e7f2      	b.n	800554e <HAL_ADC_ConfigChannel+0x446>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005568:	f411 0f80 	tst.w	r1, #4194304	@ 0x400000
 800556c:	d113      	bne.n	8005596 <HAL_ADC_ConfigChannel+0x48e>
        if (ADC_VREFINT_INSTANCE(hadc))
 800556e:	4b0f      	ldr	r3, [pc, #60]	@ (80055ac <HAL_ADC_ConfigChannel+0x4a4>)
 8005570:	429a      	cmp	r2, r3
 8005572:	d012      	beq.n	800559a <HAL_ADC_ConfigChannel+0x492>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005574:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 8005578:	d009      	beq.n	800558e <HAL_ADC_ConfigChannel+0x486>
 800557a:	490d      	ldr	r1, [pc, #52]	@ (80055b0 <HAL_ADC_ConfigChannel+0x4a8>)
 800557c:	f440 0380 	orr.w	r3, r0, #4194304	@ 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005580:	688a      	ldr	r2, [r1, #8]
 8005582:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8005586:	4313      	orrs	r3, r2
 8005588:	608b      	str	r3, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800558a:	2000      	movs	r0, #0
}
 800558c:	e5d4      	b.n	8005138 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800558e:	4905      	ldr	r1, [pc, #20]	@ (80055a4 <HAL_ADC_ConfigChannel+0x49c>)
 8005590:	e7f4      	b.n	800557c <HAL_ADC_ConfigChannel+0x474>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005592:	2000      	movs	r0, #0
 8005594:	e5d0      	b.n	8005138 <HAL_ADC_ConfigChannel+0x30>
 8005596:	2000      	movs	r0, #0
 8005598:	e5ce      	b.n	8005138 <HAL_ADC_ConfigChannel+0x30>
 800559a:	2000      	movs	r0, #0
 800559c:	e5cc      	b.n	8005138 <HAL_ADC_ConfigChannel+0x30>
  __HAL_LOCK(hadc);
 800559e:	2002      	movs	r0, #2
 80055a0:	e5cd      	b.n	800513e <HAL_ADC_ConfigChannel+0x36>
 80055a2:	bf00      	nop
 80055a4:	50000300 	.word	0x50000300
 80055a8:	50000600 	.word	0x50000600
 80055ac:	50000100 	.word	0x50000100
 80055b0:	50000700 	.word	0x50000700
 80055b4:	20000050 	.word	0x20000050
 80055b8:	053e2d63 	.word	0x053e2d63

080055bc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80055bc:	b530      	push	{r4, r5, lr}
 80055be:	b083      	sub	sp, #12
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80055c0:	2300      	movs	r3, #0
 80055c2:	9301      	str	r3, [sp, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80055c4:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80055c6:	689a      	ldr	r2, [r3, #8]
 80055c8:	f012 0f01 	tst.w	r2, #1
 80055cc:	d163      	bne.n	8005696 <ADC_Enable+0xda>
 80055ce:	4604      	mov	r4, r0
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80055d0:	6899      	ldr	r1, [r3, #8]
 80055d2:	4a32      	ldr	r2, [pc, #200]	@ (800569c <ADC_Enable+0xe0>)
 80055d4:	4211      	tst	r1, r2
 80055d6:	d120      	bne.n	800561a <ADC_Enable+0x5e>
  MODIFY_REG(ADCx->CR,
 80055d8:	689a      	ldr	r2, [r3, #8]
 80055da:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80055de:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 80055e2:	f042 0201 	orr.w	r2, r2, #1
 80055e6:	609a      	str	r2, [r3, #8]
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80055e8:	6803      	ldr	r3, [r0, #0]
 80055ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80055ee:	d020      	beq.n	8005632 <ADC_Enable+0x76>
 80055f0:	4a2b      	ldr	r2, [pc, #172]	@ (80056a0 <ADC_Enable+0xe4>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d01b      	beq.n	800562e <ADC_Enable+0x72>
 80055f6:	4b2b      	ldr	r3, [pc, #172]	@ (80056a4 <ADC_Enable+0xe8>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 80055fe:	d020      	beq.n	8005642 <ADC_Enable+0x86>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005600:	4b29      	ldr	r3, [pc, #164]	@ (80056a8 <ADC_Enable+0xec>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	099b      	lsrs	r3, r3, #6
 8005606:	4a29      	ldr	r2, [pc, #164]	@ (80056ac <ADC_Enable+0xf0>)
 8005608:	fba2 2303 	umull	r2, r3, r2, r3
 800560c:	099b      	lsrs	r3, r3, #6
 800560e:	3301      	adds	r3, #1
 8005610:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8005618:	e010      	b.n	800563c <ADC_Enable+0x80>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800561a:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 800561c:	f043 0310 	orr.w	r3, r3, #16
 8005620:	65c3      	str	r3, [r0, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005622:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8005624:	f043 0301 	orr.w	r3, r3, #1
 8005628:	6603      	str	r3, [r0, #96]	@ 0x60
      return HAL_ERROR;
 800562a:	2001      	movs	r0, #1
 800562c:	e034      	b.n	8005698 <ADC_Enable+0xdc>
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800562e:	4b20      	ldr	r3, [pc, #128]	@ (80056b0 <ADC_Enable+0xf4>)
 8005630:	e7e2      	b.n	80055f8 <ADC_Enable+0x3c>
 8005632:	4b1f      	ldr	r3, [pc, #124]	@ (80056b0 <ADC_Enable+0xf4>)
 8005634:	e7e0      	b.n	80055f8 <ADC_Enable+0x3c>
      {
        wait_loop_index--;
 8005636:	9b01      	ldr	r3, [sp, #4]
 8005638:	3b01      	subs	r3, #1
 800563a:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 800563c:	9b01      	ldr	r3, [sp, #4]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d1f9      	bne.n	8005636 <ADC_Enable+0x7a>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005642:	f7ff fa51 	bl	8004ae8 <HAL_GetTick>
 8005646:	4605      	mov	r5, r0

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005648:	6823      	ldr	r3, [r4, #0]
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	f012 0f01 	tst.w	r2, #1
 8005650:	d11f      	bne.n	8005692 <ADC_Enable+0xd6>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005652:	689a      	ldr	r2, [r3, #8]
 8005654:	f012 0f01 	tst.w	r2, #1
 8005658:	d107      	bne.n	800566a <ADC_Enable+0xae>
  MODIFY_REG(ADCx->CR,
 800565a:	689a      	ldr	r2, [r3, #8]
 800565c:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8005660:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8005664:	f042 0201 	orr.w	r2, r2, #1
 8005668:	609a      	str	r2, [r3, #8]
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
      {
        LL_ADC_Enable(hadc->Instance);
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800566a:	f7ff fa3d 	bl	8004ae8 <HAL_GetTick>
 800566e:	1b43      	subs	r3, r0, r5
 8005670:	2b02      	cmp	r3, #2
 8005672:	d9e9      	bls.n	8005648 <ADC_Enable+0x8c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005674:	6823      	ldr	r3, [r4, #0]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f013 0f01 	tst.w	r3, #1
 800567c:	d1e4      	bne.n	8005648 <ADC_Enable+0x8c>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800567e:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8005680:	f043 0310 	orr.w	r3, r3, #16
 8005684:	65e3      	str	r3, [r4, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005686:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8005688:	f043 0301 	orr.w	r3, r3, #1
 800568c:	6623      	str	r3, [r4, #96]	@ 0x60

          return HAL_ERROR;
 800568e:	2001      	movs	r0, #1
 8005690:	e002      	b.n	8005698 <ADC_Enable+0xdc>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005692:	2000      	movs	r0, #0
 8005694:	e000      	b.n	8005698 <ADC_Enable+0xdc>
 8005696:	2000      	movs	r0, #0
}
 8005698:	b003      	add	sp, #12
 800569a:	bd30      	pop	{r4, r5, pc}
 800569c:	8000003f 	.word	0x8000003f
 80056a0:	50000100 	.word	0x50000100
 80056a4:	50000700 	.word	0x50000700
 80056a8:	20000050 	.word	0x20000050
 80056ac:	053e2d63 	.word	0x053e2d63
 80056b0:	50000300 	.word	0x50000300

080056b4 <HAL_ADC_Start_IT>:
{
 80056b4:	b538      	push	{r3, r4, r5, lr}
 80056b6:	4604      	mov	r4, r0
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80056b8:	6803      	ldr	r3, [r0, #0]
 80056ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80056be:	f000 8084 	beq.w	80057ca <HAL_ADC_Start_IT+0x116>
 80056c2:	4a6b      	ldr	r2, [pc, #428]	@ (8005870 <HAL_ADC_Start_IT+0x1bc>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d07d      	beq.n	80057c4 <HAL_ADC_Start_IT+0x110>
 80056c8:	4a6a      	ldr	r2, [pc, #424]	@ (8005874 <HAL_ADC_Start_IT+0x1c0>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80056ca:	6895      	ldr	r5, [r2, #8]
 80056cc:	f005 051f 	and.w	r5, r5, #31
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	f013 0f04 	tst.w	r3, #4
 80056d6:	f040 80c7 	bne.w	8005868 <HAL_ADC_Start_IT+0x1b4>
    __HAL_LOCK(hadc);
 80056da:	f894 3058 	ldrb.w	r3, [r4, #88]	@ 0x58
 80056de:	2b01      	cmp	r3, #1
 80056e0:	f000 80c4 	beq.w	800586c <HAL_ADC_Start_IT+0x1b8>
 80056e4:	2301      	movs	r3, #1
 80056e6:	f884 3058 	strb.w	r3, [r4, #88]	@ 0x58
    tmp_hal_status = ADC_Enable(hadc);
 80056ea:	4620      	mov	r0, r4
 80056ec:	f7ff ff66 	bl	80055bc <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80056f0:	2800      	cmp	r0, #0
 80056f2:	f040 80b5 	bne.w	8005860 <HAL_ADC_Start_IT+0x1ac>
      ADC_STATE_CLR_SET(hadc->State,
 80056f6:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80056f8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80056fc:	f023 0301 	bic.w	r3, r3, #1
 8005700:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005704:	65e3      	str	r3, [r4, #92]	@ 0x5c
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005706:	6823      	ldr	r3, [r4, #0]
 8005708:	4a59      	ldr	r2, [pc, #356]	@ (8005870 <HAL_ADC_Start_IT+0x1bc>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d062      	beq.n	80057d4 <HAL_ADC_Start_IT+0x120>
 800570e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005712:	4293      	cmp	r3, r2
 8005714:	d05b      	beq.n	80057ce <HAL_ADC_Start_IT+0x11a>
 8005716:	461a      	mov	r2, r3
 8005718:	4293      	cmp	r3, r2
 800571a:	d000      	beq.n	800571e <HAL_ADC_Start_IT+0x6a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800571c:	b91d      	cbnz	r5, 8005726 <HAL_ADC_Start_IT+0x72>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800571e:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8005720:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8005724:	65e2      	str	r2, [r4, #92]	@ 0x5c
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8005726:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8005728:	f412 5f80 	tst.w	r2, #4096	@ 0x1000
 800572c:	d055      	beq.n	80057da <HAL_ADC_Start_IT+0x126>
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800572e:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8005730:	f022 0206 	bic.w	r2, r2, #6
 8005734:	6622      	str	r2, [r4, #96]	@ 0x60
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005736:	221c      	movs	r2, #28
 8005738:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hadc);
 800573a:	2300      	movs	r3, #0
 800573c:	f884 3058 	strb.w	r3, [r4, #88]	@ 0x58
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8005740:	6822      	ldr	r2, [r4, #0]
 8005742:	6853      	ldr	r3, [r2, #4]
 8005744:	f023 031c 	bic.w	r3, r3, #28
 8005748:	6053      	str	r3, [r2, #4]
      switch (hadc->Init.EOCSelection)
 800574a:	69a3      	ldr	r3, [r4, #24]
 800574c:	2b08      	cmp	r3, #8
 800574e:	d047      	beq.n	80057e0 <HAL_ADC_Start_IT+0x12c>
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8005750:	6822      	ldr	r2, [r4, #0]
 8005752:	6853      	ldr	r3, [r2, #4]
 8005754:	f043 0304 	orr.w	r3, r3, #4
 8005758:	6053      	str	r3, [r2, #4]
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800575a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800575c:	b923      	cbnz	r3, 8005768 <HAL_ADC_Start_IT+0xb4>
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800575e:	6822      	ldr	r2, [r4, #0]
 8005760:	6853      	ldr	r3, [r2, #4]
 8005762:	f043 0310 	orr.w	r3, r3, #16
 8005766:	6053      	str	r3, [r2, #4]
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005768:	6823      	ldr	r3, [r4, #0]
 800576a:	4a41      	ldr	r2, [pc, #260]	@ (8005870 <HAL_ADC_Start_IT+0x1bc>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d040      	beq.n	80057f2 <HAL_ADC_Start_IT+0x13e>
 8005770:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005774:	4293      	cmp	r3, r2
 8005776:	d039      	beq.n	80057ec <HAL_ADC_Start_IT+0x138>
 8005778:	461a      	mov	r2, r3
 800577a:	4293      	cmp	r3, r2
 800577c:	d03c      	beq.n	80057f8 <HAL_ADC_Start_IT+0x144>
 800577e:	2d09      	cmp	r5, #9
 8005780:	d805      	bhi.n	800578e <HAL_ADC_Start_IT+0xda>
 8005782:	f240 2121 	movw	r1, #545	@ 0x221
 8005786:	40e9      	lsrs	r1, r5
 8005788:	f011 0f01 	tst.w	r1, #1
 800578c:	d134      	bne.n	80057f8 <HAL_ADC_Start_IT+0x144>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800578e:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8005790:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8005794:	65e1      	str	r1, [r4, #92]	@ 0x5c
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8005796:	68d2      	ldr	r2, [r2, #12]
 8005798:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 800579c:	d065      	beq.n	800586a <HAL_ADC_Start_IT+0x1b6>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800579e:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80057a0:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 80057a4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80057a8:	65e2      	str	r2, [r4, #92]	@ 0x5c
          switch (hadc->Init.EOCSelection)
 80057aa:	69a2      	ldr	r2, [r4, #24]
 80057ac:	2a08      	cmp	r2, #8
 80057ae:	d04d      	beq.n	800584c <HAL_ADC_Start_IT+0x198>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80057b0:	685a      	ldr	r2, [r3, #4]
 80057b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80057b6:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80057b8:	6822      	ldr	r2, [r4, #0]
 80057ba:	6853      	ldr	r3, [r2, #4]
 80057bc:	f043 0320 	orr.w	r3, r3, #32
 80057c0:	6053      	str	r3, [r2, #4]
              break;
 80057c2:	e052      	b.n	800586a <HAL_ADC_Start_IT+0x1b6>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80057c4:	f502 7200 	add.w	r2, r2, #512	@ 0x200
 80057c8:	e77f      	b.n	80056ca <HAL_ADC_Start_IT+0x16>
 80057ca:	4a2b      	ldr	r2, [pc, #172]	@ (8005878 <HAL_ADC_Start_IT+0x1c4>)
 80057cc:	e77d      	b.n	80056ca <HAL_ADC_Start_IT+0x16>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80057ce:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 80057d2:	e7a1      	b.n	8005718 <HAL_ADC_Start_IT+0x64>
 80057d4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80057d8:	e79e      	b.n	8005718 <HAL_ADC_Start_IT+0x64>
        ADC_CLEAR_ERRORCODE(hadc);
 80057da:	2200      	movs	r2, #0
 80057dc:	6622      	str	r2, [r4, #96]	@ 0x60
 80057de:	e7aa      	b.n	8005736 <HAL_ADC_Start_IT+0x82>
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 80057e0:	6822      	ldr	r2, [r4, #0]
 80057e2:	6853      	ldr	r3, [r2, #4]
 80057e4:	f043 0308 	orr.w	r3, r3, #8
 80057e8:	6053      	str	r3, [r2, #4]
          break;
 80057ea:	e7b6      	b.n	800575a <HAL_ADC_Start_IT+0xa6>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80057ec:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 80057f0:	e7c3      	b.n	800577a <HAL_ADC_Start_IT+0xc6>
 80057f2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80057f6:	e7c0      	b.n	800577a <HAL_ADC_Start_IT+0xc6>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80057f8:	68da      	ldr	r2, [r3, #12]
 80057fa:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 80057fe:	d011      	beq.n	8005824 <HAL_ADC_Start_IT+0x170>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005800:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8005802:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8005806:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800580a:	65e2      	str	r2, [r4, #92]	@ 0x5c
          switch (hadc->Init.EOCSelection)
 800580c:	69a2      	ldr	r2, [r4, #24]
 800580e:	2a08      	cmp	r2, #8
 8005810:	d012      	beq.n	8005838 <HAL_ADC_Start_IT+0x184>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8005812:	685a      	ldr	r2, [r3, #4]
 8005814:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005818:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 800581a:	6822      	ldr	r2, [r4, #0]
 800581c:	6853      	ldr	r3, [r2, #4]
 800581e:	f043 0320 	orr.w	r3, r3, #32
 8005822:	6053      	str	r3, [r2, #4]
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005824:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8005826:	6893      	ldr	r3, [r2, #8]
 8005828:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800582c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005830:	f043 0304 	orr.w	r3, r3, #4
 8005834:	6093      	str	r3, [r2, #8]
}
 8005836:	e018      	b.n	800586a <HAL_ADC_Start_IT+0x1b6>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8005838:	685a      	ldr	r2, [r3, #4]
 800583a:	f022 0220 	bic.w	r2, r2, #32
 800583e:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8005840:	6822      	ldr	r2, [r4, #0]
 8005842:	6853      	ldr	r3, [r2, #4]
 8005844:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005848:	6053      	str	r3, [r2, #4]
              break;
 800584a:	e7eb      	b.n	8005824 <HAL_ADC_Start_IT+0x170>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800584c:	685a      	ldr	r2, [r3, #4]
 800584e:	f022 0220 	bic.w	r2, r2, #32
 8005852:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8005854:	6822      	ldr	r2, [r4, #0]
 8005856:	6853      	ldr	r3, [r2, #4]
 8005858:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800585c:	6053      	str	r3, [r2, #4]
              break;
 800585e:	e004      	b.n	800586a <HAL_ADC_Start_IT+0x1b6>
      __HAL_UNLOCK(hadc);
 8005860:	2300      	movs	r3, #0
 8005862:	f884 3058 	strb.w	r3, [r4, #88]	@ 0x58
 8005866:	e000      	b.n	800586a <HAL_ADC_Start_IT+0x1b6>
    tmp_hal_status = HAL_BUSY;
 8005868:	2002      	movs	r0, #2
}
 800586a:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_LOCK(hadc);
 800586c:	2002      	movs	r0, #2
 800586e:	e7fc      	b.n	800586a <HAL_ADC_Start_IT+0x1b6>
 8005870:	50000100 	.word	0x50000100
 8005874:	50000700 	.word	0x50000700
 8005878:	50000300 	.word	0x50000300

0800587c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800587c:	b538      	push	{r3, r4, r5, lr}
 800587e:	4604      	mov	r4, r0
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005880:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8005882:	6893      	ldr	r3, [r2, #8]
 8005884:	f013 0302 	ands.w	r3, r3, #2
 8005888:	d000      	beq.n	800588c <ADC_Disable+0x10>
 800588a:	2301      	movs	r3, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800588c:	6891      	ldr	r1, [r2, #8]
 800588e:	f011 0f01 	tst.w	r1, #1
 8005892:	d039      	beq.n	8005908 <ADC_Disable+0x8c>

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
      && (tmp_adc_is_disable_on_going == 0UL)
 8005894:	2b00      	cmp	r3, #0
 8005896:	d139      	bne.n	800590c <ADC_Disable+0x90>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005898:	6893      	ldr	r3, [r2, #8]
 800589a:	f003 030d 	and.w	r3, r3, #13
 800589e:	2b01      	cmp	r3, #1
 80058a0:	d009      	beq.n	80058b6 <ADC_Disable+0x3a>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80058a2:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80058a4:	f043 0310 	orr.w	r3, r3, #16
 80058a8:	65e3      	str	r3, [r4, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80058aa:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80058ac:	f043 0301 	orr.w	r3, r3, #1
 80058b0:	6623      	str	r3, [r4, #96]	@ 0x60

      return HAL_ERROR;
 80058b2:	2001      	movs	r0, #1
 80058b4:	e029      	b.n	800590a <ADC_Disable+0x8e>
  MODIFY_REG(ADCx->CR,
 80058b6:	6893      	ldr	r3, [r2, #8]
 80058b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80058bc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80058c0:	f043 0302 	orr.w	r3, r3, #2
 80058c4:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80058c6:	6823      	ldr	r3, [r4, #0]
 80058c8:	2203      	movs	r2, #3
 80058ca:	601a      	str	r2, [r3, #0]
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80058cc:	f7ff f90c 	bl	8004ae8 <HAL_GetTick>
 80058d0:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80058d2:	6823      	ldr	r3, [r4, #0]
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	f013 0f01 	tst.w	r3, #1
 80058da:	d013      	beq.n	8005904 <ADC_Disable+0x88>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80058dc:	f7ff f904 	bl	8004ae8 <HAL_GetTick>
 80058e0:	1b40      	subs	r0, r0, r5
 80058e2:	2802      	cmp	r0, #2
 80058e4:	d9f5      	bls.n	80058d2 <ADC_Disable+0x56>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80058e6:	6823      	ldr	r3, [r4, #0]
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	f013 0f01 	tst.w	r3, #1
 80058ee:	d0f0      	beq.n	80058d2 <ADC_Disable+0x56>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80058f0:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80058f2:	f043 0310 	orr.w	r3, r3, #16
 80058f6:	65e3      	str	r3, [r4, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80058f8:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80058fa:	f043 0301 	orr.w	r3, r3, #1
 80058fe:	6623      	str	r3, [r4, #96]	@ 0x60

          return HAL_ERROR;
 8005900:	2001      	movs	r0, #1
 8005902:	e002      	b.n	800590a <ADC_Disable+0x8e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005904:	2000      	movs	r0, #0
 8005906:	e000      	b.n	800590a <ADC_Disable+0x8e>
 8005908:	2000      	movs	r0, #0
}
 800590a:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 800590c:	2000      	movs	r0, #0
 800590e:	e7fc      	b.n	800590a <ADC_Disable+0x8e>

08005910 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8005910:	b530      	push	{r4, r5, lr}
 8005912:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005914:	2300      	movs	r3, #0
 8005916:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005918:	f890 3058 	ldrb.w	r3, [r0, #88]	@ 0x58
 800591c:	2b01      	cmp	r3, #1
 800591e:	d041      	beq.n	80059a4 <HAL_ADCEx_Calibration_Start+0x94>
 8005920:	4604      	mov	r4, r0
 8005922:	460d      	mov	r5, r1
 8005924:	2301      	movs	r3, #1
 8005926:	f880 3058 	strb.w	r3, [r0, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800592a:	f7ff ffa7 	bl	800587c <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800592e:	bb80      	cbnz	r0, 8005992 <HAL_ADCEx_Calibration_Start+0x82>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005930:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8005932:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005936:	f023 0302 	bic.w	r3, r3, #2
 800593a:	f043 0302 	orr.w	r3, r3, #2
 800593e:	65e3      	str	r3, [r4, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8005940:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8005942:	6893      	ldr	r3, [r2, #8]
 8005944:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8005948:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800594c:	f005 4580 	and.w	r5, r5, #1073741824	@ 0x40000000
 8005950:	432b      	orrs	r3, r5
 8005952:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005956:	6093      	str	r3, [r2, #8]

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005958:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	2b00      	cmp	r3, #0
 800595e:	db06      	blt.n	800596e <HAL_ADCEx_Calibration_Start+0x5e>
        return HAL_ERROR;
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005960:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8005962:	f023 0303 	bic.w	r3, r3, #3
 8005966:	f043 0301 	orr.w	r3, r3, #1
 800596a:	65e3      	str	r3, [r4, #92]	@ 0x5c
 800596c:	e015      	b.n	800599a <HAL_ADCEx_Calibration_Start+0x8a>
      wait_loop_index++;
 800596e:	9b01      	ldr	r3, [sp, #4]
 8005970:	3301      	adds	r3, #1
 8005972:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005974:	9a01      	ldr	r2, [sp, #4]
 8005976:	4b0c      	ldr	r3, [pc, #48]	@ (80059a8 <HAL_ADCEx_Calibration_Start+0x98>)
 8005978:	429a      	cmp	r2, r3
 800597a:	d9ed      	bls.n	8005958 <HAL_ADCEx_Calibration_Start+0x48>
        ADC_STATE_CLR_SET(hadc->State,
 800597c:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800597e:	f023 0312 	bic.w	r3, r3, #18
 8005982:	f043 0310 	orr.w	r3, r3, #16
 8005986:	65e3      	str	r3, [r4, #92]	@ 0x5c
        __HAL_UNLOCK(hadc);
 8005988:	2300      	movs	r3, #0
 800598a:	f884 3058 	strb.w	r3, [r4, #88]	@ 0x58
        return HAL_ERROR;
 800598e:	2001      	movs	r0, #1
 8005990:	e006      	b.n	80059a0 <HAL_ADCEx_Calibration_Start+0x90>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005992:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8005994:	f043 0310 	orr.w	r3, r3, #16
 8005998:	65e3      	str	r3, [r4, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800599a:	2300      	movs	r3, #0
 800599c:	f884 3058 	strb.w	r3, [r4, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
}
 80059a0:	b003      	add	sp, #12
 80059a2:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hadc);
 80059a4:	2002      	movs	r0, #2
 80059a6:	e7fb      	b.n	80059a0 <HAL_ADCEx_Calibration_Start+0x90>
 80059a8:	0004de01 	.word	0x0004de01

080059ac <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80059ac:	4770      	bx	lr

080059ae <HAL_ADCEx_InjectedQueueOverflowCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80059ae:	4770      	bx	lr

080059b0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80059b0:	4770      	bx	lr

080059b2 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80059b2:	4770      	bx	lr

080059b4 <HAL_ADCEx_EndOfSamplingCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80059b4:	4770      	bx	lr
	...

080059b8 <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80059b8:	f890 2058 	ldrb.w	r2, [r0, #88]	@ 0x58
 80059bc:	2a01      	cmp	r2, #1
 80059be:	f000 80d6 	beq.w	8005b6e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
{
 80059c2:	b410      	push	{r4}
 80059c4:	b09d      	sub	sp, #116	@ 0x74
 80059c6:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 80059c8:	2201      	movs	r2, #1
 80059ca:	f880 2058 	strb.w	r2, [r0, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80059ce:	2200      	movs	r2, #0
 80059d0:	9218      	str	r2, [sp, #96]	@ 0x60
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80059d2:	9219      	str	r2, [sp, #100]	@ 0x64

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80059d4:	6800      	ldr	r0, [r0, #0]
 80059d6:	f1b0 4fa0 	cmp.w	r0, #1342177280	@ 0x50000000
 80059da:	d047      	beq.n	8005a6c <HAL_ADCEx_MultiModeConfigChannel+0xb4>
 80059dc:	4a65      	ldr	r2, [pc, #404]	@ (8005b74 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80059de:	4290      	cmp	r0, r2
 80059e0:	d047      	beq.n	8005a72 <HAL_ADCEx_MultiModeConfigChannel+0xba>
 80059e2:	2200      	movs	r2, #0
 80059e4:	9201      	str	r2, [sp, #4]

  if (tmp_hadc_slave.Instance == NULL)
 80059e6:	9a01      	ldr	r2, [sp, #4]
 80059e8:	2a00      	cmp	r2, #0
 80059ea:	d046      	beq.n	8005a7a <HAL_ADCEx_MultiModeConfigChannel+0xc2>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80059ec:	6892      	ldr	r2, [r2, #8]
 80059ee:	f012 0204 	ands.w	r2, r2, #4
 80059f2:	d000      	beq.n	80059f6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80059f4:	2201      	movs	r2, #1
 80059f6:	6884      	ldr	r4, [r0, #8]
 80059f8:	f014 0f04 	tst.w	r4, #4
 80059fc:	f040 80a7 	bne.w	8005b4e <HAL_ADCEx_MultiModeConfigChannel+0x196>
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8005a00:	2a00      	cmp	r2, #0
 8005a02:	f040 80a4 	bne.w	8005b4e <HAL_ADCEx_MultiModeConfigChannel+0x196>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005a06:	f1b0 4fa0 	cmp.w	r0, #1342177280	@ 0x50000000
 8005a0a:	d042      	beq.n	8005a92 <HAL_ADCEx_MultiModeConfigChannel+0xda>
 8005a0c:	4a5a      	ldr	r2, [pc, #360]	@ (8005b78 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005a0e:	4290      	cmp	r0, r2
 8005a10:	d03c      	beq.n	8005a8c <HAL_ADCEx_MultiModeConfigChannel+0xd4>
 8005a12:	4a5a      	ldr	r2, [pc, #360]	@ (8005b7c <HAL_ADCEx_MultiModeConfigChannel+0x1c4>)

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005a14:	6808      	ldr	r0, [r1, #0]
 8005a16:	2800      	cmp	r0, #0
 8005a18:	d05c      	beq.n	8005ad4 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005a1a:	6890      	ldr	r0, [r2, #8]
 8005a1c:	f420 4060 	bic.w	r0, r0, #57344	@ 0xe000
 8005a20:	684c      	ldr	r4, [r1, #4]
 8005a22:	f893 c038 	ldrb.w	ip, [r3, #56]	@ 0x38
 8005a26:	ea44 344c 	orr.w	r4, r4, ip, lsl #13
 8005a2a:	4320      	orrs	r0, r4
 8005a2c:	6090      	str	r0, [r2, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005a2e:	6818      	ldr	r0, [r3, #0]
 8005a30:	f1b0 4fa0 	cmp.w	r0, #1342177280	@ 0x50000000
 8005a34:	d02f      	beq.n	8005a96 <HAL_ADCEx_MultiModeConfigChannel+0xde>
 8005a36:	4c50      	ldr	r4, [pc, #320]	@ (8005b78 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005a38:	42a0      	cmp	r0, r4
 8005a3a:	d02c      	beq.n	8005a96 <HAL_ADCEx_MultiModeConfigChannel+0xde>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005a3c:	484d      	ldr	r0, [pc, #308]	@ (8005b74 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8005a3e:	6884      	ldr	r4, [r0, #8]
 8005a40:	f014 0401 	ands.w	r4, r4, #1
 8005a44:	d000      	beq.n	8005a48 <HAL_ADCEx_MultiModeConfigChannel+0x90>
 8005a46:	2401      	movs	r4, #1
 8005a48:	484d      	ldr	r0, [pc, #308]	@ (8005b80 <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 8005a4a:	6880      	ldr	r0, [r0, #8]
 8005a4c:	f010 0001 	ands.w	r0, r0, #1
 8005a50:	d000      	beq.n	8005a54 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8005a52:	2001      	movs	r0, #1
 8005a54:	4320      	orrs	r0, r4
 8005a56:	4c4b      	ldr	r4, [pc, #300]	@ (8005b84 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8005a58:	68a4      	ldr	r4, [r4, #8]
 8005a5a:	f014 0401 	ands.w	r4, r4, #1
 8005a5e:	d000      	beq.n	8005a62 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8005a60:	2401      	movs	r4, #1
 8005a62:	4320      	orrs	r0, r4
 8005a64:	bf0c      	ite	eq
 8005a66:	2001      	moveq	r0, #1
 8005a68:	2000      	movne	r0, #0
 8005a6a:	e025      	b.n	8005ab8 <HAL_ADCEx_MultiModeConfigChannel+0x100>
  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8005a6c:	4a42      	ldr	r2, [pc, #264]	@ (8005b78 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005a6e:	9201      	str	r2, [sp, #4]
 8005a70:	e7b9      	b.n	80059e6 <HAL_ADCEx_MultiModeConfigChannel+0x2e>
 8005a72:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8005a76:	9201      	str	r2, [sp, #4]
 8005a78:	e7b5      	b.n	80059e6 <HAL_ADCEx_MultiModeConfigChannel+0x2e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005a7a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005a7c:	f042 0220 	orr.w	r2, r2, #32
 8005a80:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_UNLOCK(hadc);
 8005a82:	2200      	movs	r2, #0
 8005a84:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    return HAL_ERROR;
 8005a88:	2001      	movs	r0, #1
 8005a8a:	e068      	b.n	8005b5e <HAL_ADCEx_MultiModeConfigChannel+0x1a6>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005a8c:	f502 7200 	add.w	r2, r2, #512	@ 0x200
 8005a90:	e7c0      	b.n	8005a14 <HAL_ADCEx_MultiModeConfigChannel+0x5c>
 8005a92:	4a3d      	ldr	r2, [pc, #244]	@ (8005b88 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8005a94:	e7be      	b.n	8005a14 <HAL_ADCEx_MultiModeConfigChannel+0x5c>
 8005a96:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005a9a:	6884      	ldr	r4, [r0, #8]
 8005a9c:	f014 0401 	ands.w	r4, r4, #1
 8005aa0:	d000      	beq.n	8005aa4 <HAL_ADCEx_MultiModeConfigChannel+0xec>
 8005aa2:	2401      	movs	r4, #1
 8005aa4:	4834      	ldr	r0, [pc, #208]	@ (8005b78 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005aa6:	6880      	ldr	r0, [r0, #8]
 8005aa8:	f010 0001 	ands.w	r0, r0, #1
 8005aac:	d000      	beq.n	8005ab0 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 8005aae:	2001      	movs	r0, #1
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005ab0:	4320      	orrs	r0, r4
 8005ab2:	bf0c      	ite	eq
 8005ab4:	2001      	moveq	r0, #1
 8005ab6:	2000      	movne	r0, #0
 8005ab8:	2800      	cmp	r0, #0
 8005aba:	d054      	beq.n	8005b66 <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005abc:	6890      	ldr	r0, [r2, #8]
 8005abe:	f420 6071 	bic.w	r0, r0, #3856	@ 0xf10
 8005ac2:	f020 000f 	bic.w	r0, r0, #15
 8005ac6:	680c      	ldr	r4, [r1, #0]
 8005ac8:	6889      	ldr	r1, [r1, #8]
 8005aca:	4321      	orrs	r1, r4
 8005acc:	4308      	orrs	r0, r1
 8005ace:	6090      	str	r0, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005ad0:	2000      	movs	r0, #0
 8005ad2:	e041      	b.n	8005b58 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005ad4:	6891      	ldr	r1, [r2, #8]
 8005ad6:	f421 4160 	bic.w	r1, r1, #57344	@ 0xe000
 8005ada:	6091      	str	r1, [r2, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005adc:	6819      	ldr	r1, [r3, #0]
 8005ade:	f1b1 4fa0 	cmp.w	r1, #1342177280	@ 0x50000000
 8005ae2:	d01a      	beq.n	8005b1a <HAL_ADCEx_MultiModeConfigChannel+0x162>
 8005ae4:	4824      	ldr	r0, [pc, #144]	@ (8005b78 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005ae6:	4281      	cmp	r1, r0
 8005ae8:	d017      	beq.n	8005b1a <HAL_ADCEx_MultiModeConfigChannel+0x162>
 8005aea:	4922      	ldr	r1, [pc, #136]	@ (8005b74 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8005aec:	6888      	ldr	r0, [r1, #8]
 8005aee:	f010 0001 	ands.w	r0, r0, #1
 8005af2:	d000      	beq.n	8005af6 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8005af4:	2001      	movs	r0, #1
 8005af6:	4922      	ldr	r1, [pc, #136]	@ (8005b80 <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 8005af8:	6889      	ldr	r1, [r1, #8]
 8005afa:	f011 0101 	ands.w	r1, r1, #1
 8005afe:	d000      	beq.n	8005b02 <HAL_ADCEx_MultiModeConfigChannel+0x14a>
 8005b00:	2101      	movs	r1, #1
 8005b02:	4301      	orrs	r1, r0
 8005b04:	481f      	ldr	r0, [pc, #124]	@ (8005b84 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8005b06:	6880      	ldr	r0, [r0, #8]
 8005b08:	f010 0001 	ands.w	r0, r0, #1
 8005b0c:	d000      	beq.n	8005b10 <HAL_ADCEx_MultiModeConfigChannel+0x158>
 8005b0e:	2001      	movs	r0, #1
 8005b10:	4301      	orrs	r1, r0
 8005b12:	bf0c      	ite	eq
 8005b14:	2101      	moveq	r1, #1
 8005b16:	2100      	movne	r1, #0
 8005b18:	e010      	b.n	8005b3c <HAL_ADCEx_MultiModeConfigChannel+0x184>
 8005b1a:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
 8005b1e:	6888      	ldr	r0, [r1, #8]
 8005b20:	f010 0001 	ands.w	r0, r0, #1
 8005b24:	d000      	beq.n	8005b28 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8005b26:	2001      	movs	r0, #1
 8005b28:	4913      	ldr	r1, [pc, #76]	@ (8005b78 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005b2a:	6889      	ldr	r1, [r1, #8]
 8005b2c:	f011 0101 	ands.w	r1, r1, #1
 8005b30:	d000      	beq.n	8005b34 <HAL_ADCEx_MultiModeConfigChannel+0x17c>
 8005b32:	2101      	movs	r1, #1
 8005b34:	4301      	orrs	r1, r0
 8005b36:	bf0c      	ite	eq
 8005b38:	2101      	moveq	r1, #1
 8005b3a:	2100      	movne	r1, #0
 8005b3c:	b1a9      	cbz	r1, 8005b6a <HAL_ADCEx_MultiModeConfigChannel+0x1b2>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005b3e:	6891      	ldr	r1, [r2, #8]
 8005b40:	f421 6171 	bic.w	r1, r1, #3856	@ 0xf10
 8005b44:	f021 010f 	bic.w	r1, r1, #15
 8005b48:	6091      	str	r1, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005b4a:	2000      	movs	r0, #0
 8005b4c:	e004      	b.n	8005b58 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005b4e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005b50:	f042 0220 	orr.w	r2, r2, #32
 8005b54:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005b56:	2001      	movs	r0, #1
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005b58:	2200      	movs	r2, #0
 8005b5a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
}
 8005b5e:	b01d      	add	sp, #116	@ 0x74
 8005b60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b64:	4770      	bx	lr
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005b66:	2000      	movs	r0, #0
 8005b68:	e7f6      	b.n	8005b58 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
 8005b6a:	2000      	movs	r0, #0
 8005b6c:	e7f4      	b.n	8005b58 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  __HAL_LOCK(hadc);
 8005b6e:	2002      	movs	r0, #2
}
 8005b70:	4770      	bx	lr
 8005b72:	bf00      	nop
 8005b74:	50000400 	.word	0x50000400
 8005b78:	50000100 	.word	0x50000100
 8005b7c:	50000700 	.word	0x50000700
 8005b80:	50000500 	.word	0x50000500
 8005b84:	50000600 	.word	0x50000600
 8005b88:	50000300 	.word	0x50000300

08005b8c <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8005b8c:	2800      	cmp	r0, #0
 8005b8e:	db07      	blt.n	8005ba0 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005b90:	f000 021f 	and.w	r2, r0, #31
 8005b94:	0940      	lsrs	r0, r0, #5
 8005b96:	2301      	movs	r3, #1
 8005b98:	4093      	lsls	r3, r2
 8005b9a:	4a02      	ldr	r2, [pc, #8]	@ (8005ba4 <__NVIC_EnableIRQ+0x18>)
 8005b9c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005ba0:	4770      	bx	lr
 8005ba2:	bf00      	nop
 8005ba4:	e000e100 	.word	0xe000e100

08005ba8 <__NVIC_DisableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8005ba8:	2800      	cmp	r0, #0
 8005baa:	db0c      	blt.n	8005bc6 <__NVIC_DisableIRQ+0x1e>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005bac:	f000 021f 	and.w	r2, r0, #31
 8005bb0:	0940      	lsrs	r0, r0, #5
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	4093      	lsls	r3, r2
 8005bb6:	3020      	adds	r0, #32
 8005bb8:	4a03      	ldr	r2, [pc, #12]	@ (8005bc8 <__NVIC_DisableIRQ+0x20>)
 8005bba:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8005bbe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005bc2:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8005bc6:	4770      	bx	lr
 8005bc8:	e000e100 	.word	0xe000e100

08005bcc <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8005bcc:	2800      	cmp	r0, #0
 8005bce:	db08      	blt.n	8005be2 <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005bd0:	0109      	lsls	r1, r1, #4
 8005bd2:	b2c9      	uxtb	r1, r1
 8005bd4:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8005bd8:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8005bdc:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8005be0:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005be2:	f000 000f 	and.w	r0, r0, #15
 8005be6:	0109      	lsls	r1, r1, #4
 8005be8:	b2c9      	uxtb	r1, r1
 8005bea:	4b01      	ldr	r3, [pc, #4]	@ (8005bf0 <__NVIC_SetPriority+0x24>)
 8005bec:	5419      	strb	r1, [r3, r0]
  }
}
 8005bee:	4770      	bx	lr
 8005bf0:	e000ed14 	.word	0xe000ed14

08005bf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005bf4:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005bf6:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005bfa:	f1c0 0c07 	rsb	ip, r0, #7
 8005bfe:	f1bc 0f04 	cmp.w	ip, #4
 8005c02:	bf28      	it	cs
 8005c04:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005c08:	1d03      	adds	r3, r0, #4
 8005c0a:	2b06      	cmp	r3, #6
 8005c0c:	d90f      	bls.n	8005c2e <NVIC_EncodePriority+0x3a>
 8005c0e:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c10:	f04f 3eff 	mov.w	lr, #4294967295
 8005c14:	fa0e f00c 	lsl.w	r0, lr, ip
 8005c18:	ea21 0100 	bic.w	r1, r1, r0
 8005c1c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005c1e:	fa0e fe03 	lsl.w	lr, lr, r3
 8005c22:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8005c26:	ea41 0002 	orr.w	r0, r1, r2
 8005c2a:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005c2e:	2300      	movs	r3, #0
 8005c30:	e7ee      	b.n	8005c10 <NVIC_EncodePriority+0x1c>
	...

08005c34 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005c34:	4a07      	ldr	r2, [pc, #28]	@ (8005c54 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8005c36:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005c38:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005c3c:	041b      	lsls	r3, r3, #16
 8005c3e:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005c40:	0200      	lsls	r0, r0, #8
 8005c42:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005c46:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8005c48:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005c4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8005c50:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8005c52:	4770      	bx	lr
 8005c54:	e000ed00 	.word	0xe000ed00

08005c58 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005c58:	b510      	push	{r4, lr}
 8005c5a:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005c5c:	4b05      	ldr	r3, [pc, #20]	@ (8005c74 <HAL_NVIC_SetPriority+0x1c>)
 8005c5e:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005c60:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8005c64:	f7ff ffc6 	bl	8005bf4 <NVIC_EncodePriority>
 8005c68:	4601      	mov	r1, r0
 8005c6a:	4620      	mov	r0, r4
 8005c6c:	f7ff ffae 	bl	8005bcc <__NVIC_SetPriority>
}
 8005c70:	bd10      	pop	{r4, pc}
 8005c72:	bf00      	nop
 8005c74:	e000ed00 	.word	0xe000ed00

08005c78 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c78:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005c7a:	f7ff ff87 	bl	8005b8c <__NVIC_EnableIRQ>
}
 8005c7e:	bd08      	pop	{r3, pc}

08005c80 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005c80:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005c82:	f7ff ff91 	bl	8005ba8 <__NVIC_DisableIRQ>
}
 8005c86:	bd08      	pop	{r3, pc}

08005c88 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005c88:	3801      	subs	r0, #1
 8005c8a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8005c8e:	d20b      	bcs.n	8005ca8 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005c90:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005c94:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c96:	4a05      	ldr	r2, [pc, #20]	@ (8005cac <HAL_SYSTICK_Config+0x24>)
 8005c98:	21f0      	movs	r1, #240	@ 0xf0
 8005c9a:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005c9e:	2000      	movs	r0, #0
 8005ca0:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005ca2:	2207      	movs	r2, #7
 8005ca4:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005ca6:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8005ca8:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8005caa:	4770      	bx	lr
 8005cac:	e000ed00 	.word	0xe000ed00

08005cb0 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005cb0:	b170      	cbz	r0, 8005cd0 <HAL_DAC_Init+0x20>
{
 8005cb2:	b510      	push	{r4, lr}
 8005cb4:	4604      	mov	r4, r0
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005cb6:	7903      	ldrb	r3, [r0, #4]
 8005cb8:	b133      	cbz	r3, 8005cc8 <HAL_DAC_Init+0x18>
    HAL_DAC_MspInit(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005cba:	2302      	movs	r3, #2
 8005cbc:	7123      	strb	r3, [r4, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005cbe:	2000      	movs	r0, #0
 8005cc0:	6120      	str	r0, [r4, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	7123      	strb	r3, [r4, #4]

  /* Return function status */
  return HAL_OK;
}
 8005cc6:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8005cc8:	7143      	strb	r3, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8005cca:	f7fe f833 	bl	8003d34 <HAL_DAC_MspInit>
 8005cce:	e7f4      	b.n	8005cba <HAL_DAC_Init+0xa>
    return HAL_ERROR;
 8005cd0:	2001      	movs	r0, #1
}
 8005cd2:	4770      	bx	lr

08005cd4 <HAL_DAC_Start>:
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005cd4:	2800      	cmp	r0, #0
 8005cd6:	d040      	beq.n	8005d5a <HAL_DAC_Start+0x86>
 8005cd8:	4602      	mov	r2, r0

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005cda:	7943      	ldrb	r3, [r0, #5]
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d03e      	beq.n	8005d5e <HAL_DAC_Start+0x8a>
{
 8005ce0:	b430      	push	{r4, r5}
 8005ce2:	b082      	sub	sp, #8
  __HAL_LOCK(hdac);
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	7143      	strb	r3, [r0, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005ce8:	2002      	movs	r0, #2
 8005cea:	7110      	strb	r0, [r2, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8005cec:	6815      	ldr	r5, [r2, #0]
 8005cee:	682c      	ldr	r4, [r5, #0]
 8005cf0:	f001 0010 	and.w	r0, r1, #16
 8005cf4:	4083      	lsls	r3, r0
 8005cf6:	4323      	orrs	r3, r4
 8005cf8:	602b      	str	r3, [r5, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  /* Wait loop initialization and execution */
  /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed 32 */
  /*       bits register capacity and handle low frequency. */
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005cfa:	4b1a      	ldr	r3, [pc, #104]	@ (8005d64 <HAL_DAC_Start+0x90>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	099b      	lsrs	r3, r3, #6
 8005d00:	4c19      	ldr	r4, [pc, #100]	@ (8005d68 <HAL_DAC_Start+0x94>)
 8005d02:	fba4 4303 	umull	r4, r3, r4, r3
 8005d06:	099b      	lsrs	r3, r3, #6
 8005d08:	3301      	adds	r3, #1
 8005d0a:	9301      	str	r3, [sp, #4]
  while (wait_loop_index != 0UL)
 8005d0c:	e002      	b.n	8005d14 <HAL_DAC_Start+0x40>
  {
    wait_loop_index--;
 8005d0e:	9b01      	ldr	r3, [sp, #4]
 8005d10:	3b01      	subs	r3, #1
 8005d12:	9301      	str	r3, [sp, #4]
  while (wait_loop_index != 0UL)
 8005d14:	9b01      	ldr	r3, [sp, #4]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d1f9      	bne.n	8005d0e <HAL_DAC_Start+0x3a>
  }

  if (Channel == DAC_CHANNEL_1)
 8005d1a:	b989      	cbnz	r1, 8005d40 <HAL_DAC_Start+0x6c>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8005d1c:	6811      	ldr	r1, [r2, #0]
 8005d1e:	680b      	ldr	r3, [r1, #0]
 8005d20:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8005d24:	2b02      	cmp	r3, #2
 8005d26:	d006      	beq.n	8005d36 <HAL_DAC_Start+0x62>
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	7113      	strb	r3, [r2, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005d2c:	2000      	movs	r0, #0
 8005d2e:	7150      	strb	r0, [r2, #5]

  /* Return function status */
  return HAL_OK;
}
 8005d30:	b002      	add	sp, #8
 8005d32:	bc30      	pop	{r4, r5}
 8005d34:	4770      	bx	lr
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8005d36:	684b      	ldr	r3, [r1, #4]
 8005d38:	f043 0301 	orr.w	r3, r3, #1
 8005d3c:	604b      	str	r3, [r1, #4]
 8005d3e:	e7f3      	b.n	8005d28 <HAL_DAC_Start+0x54>
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8005d40:	6814      	ldr	r4, [r2, #0]
 8005d42:	6821      	ldr	r1, [r4, #0]
 8005d44:	f401 1178 	and.w	r1, r1, #4063232	@ 0x3e0000
 8005d48:	2302      	movs	r3, #2
 8005d4a:	4083      	lsls	r3, r0
 8005d4c:	4299      	cmp	r1, r3
 8005d4e:	d1eb      	bne.n	8005d28 <HAL_DAC_Start+0x54>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8005d50:	6863      	ldr	r3, [r4, #4]
 8005d52:	f043 0302 	orr.w	r3, r3, #2
 8005d56:	6063      	str	r3, [r4, #4]
 8005d58:	e7e6      	b.n	8005d28 <HAL_DAC_Start+0x54>
    return HAL_ERROR;
 8005d5a:	2001      	movs	r0, #1
 8005d5c:	4770      	bx	lr
  __HAL_LOCK(hdac);
 8005d5e:	2002      	movs	r0, #2
}
 8005d60:	4770      	bx	lr
 8005d62:	bf00      	nop
 8005d64:	20000050 	.word	0x20000050
 8005d68:	053e2d63 	.word	0x053e2d63

08005d6c <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8005d6c:	b410      	push	{r4}
 8005d6e:	b083      	sub	sp, #12
  __IO uint32_t tmp = 0UL;
 8005d70:	2400      	movs	r4, #0
 8005d72:	9401      	str	r4, [sp, #4]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005d74:	b198      	cbz	r0, 8005d9e <HAL_DAC_SetValue+0x32>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8005d76:	6800      	ldr	r0, [r0, #0]
 8005d78:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8005d7a:	9001      	str	r0, [sp, #4]
  if (Channel == DAC_CHANNEL_1)
 8005d7c:	b951      	cbnz	r1, 8005d94 <HAL_DAC_SetValue+0x28>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8005d7e:	9901      	ldr	r1, [sp, #4]
 8005d80:	440a      	add	r2, r1
 8005d82:	3208      	adds	r2, #8
 8005d84:	9201      	str	r2, [sp, #4]
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8005d86:	9a01      	ldr	r2, [sp, #4]
 8005d88:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8005d8a:	2000      	movs	r0, #0
}
 8005d8c:	b003      	add	sp, #12
 8005d8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d92:	4770      	bx	lr
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8005d94:	9901      	ldr	r1, [sp, #4]
 8005d96:	440a      	add	r2, r1
 8005d98:	3214      	adds	r2, #20
 8005d9a:	9201      	str	r2, [sp, #4]
 8005d9c:	e7f3      	b.n	8005d86 <HAL_DAC_SetValue+0x1a>
    return HAL_ERROR;
 8005d9e:	2001      	movs	r0, #1
 8005da0:	e7f4      	b.n	8005d8c <HAL_DAC_SetValue+0x20>

08005da2 <HAL_DAC_DMAUnderrunCallbackCh1>:
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8005da2:	4770      	bx	lr

08005da4 <HAL_DAC_IRQHandler>:
{
 8005da4:	b570      	push	{r4, r5, r6, lr}
 8005da6:	4604      	mov	r4, r0
  uint32_t itsource = hdac->Instance->CR;
 8005da8:	6803      	ldr	r3, [r0, #0]
 8005daa:	681d      	ldr	r5, [r3, #0]
  uint32_t itflag   = hdac->Instance->SR;
 8005dac:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8005dae:	f415 5f00 	tst.w	r5, #8192	@ 0x2000
 8005db2:	d002      	beq.n	8005dba <HAL_DAC_IRQHandler+0x16>
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8005db4:	f416 5f00 	tst.w	r6, #8192	@ 0x2000
 8005db8:	d106      	bne.n	8005dc8 <HAL_DAC_IRQHandler+0x24>
  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8005dba:	f015 5f00 	tst.w	r5, #536870912	@ 0x20000000
 8005dbe:	d002      	beq.n	8005dc6 <HAL_DAC_IRQHandler+0x22>
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8005dc0:	f016 5f00 	tst.w	r6, #536870912	@ 0x20000000
 8005dc4:	d111      	bne.n	8005dea <HAL_DAC_IRQHandler+0x46>
}
 8005dc6:	bd70      	pop	{r4, r5, r6, pc}
      hdac->State = HAL_DAC_STATE_ERROR;
 8005dc8:	2204      	movs	r2, #4
 8005dca:	7102      	strb	r2, [r0, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8005dcc:	6902      	ldr	r2, [r0, #16]
 8005dce:	f042 0201 	orr.w	r2, r2, #1
 8005dd2:	6102      	str	r2, [r0, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8005dd4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005dd8:	635a      	str	r2, [r3, #52]	@ 0x34
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8005dda:	6802      	ldr	r2, [r0, #0]
 8005ddc:	6813      	ldr	r3, [r2, #0]
 8005dde:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005de2:	6013      	str	r3, [r2, #0]
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8005de4:	f7ff ffdd 	bl	8005da2 <HAL_DAC_DMAUnderrunCallbackCh1>
 8005de8:	e7e7      	b.n	8005dba <HAL_DAC_IRQHandler+0x16>
      hdac->State = HAL_DAC_STATE_ERROR;
 8005dea:	2304      	movs	r3, #4
 8005dec:	7123      	strb	r3, [r4, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8005dee:	6923      	ldr	r3, [r4, #16]
 8005df0:	f043 0302 	orr.w	r3, r3, #2
 8005df4:	6123      	str	r3, [r4, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8005df6:	6823      	ldr	r3, [r4, #0]
 8005df8:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8005dfc:	635a      	str	r2, [r3, #52]	@ 0x34
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8005dfe:	6822      	ldr	r2, [r4, #0]
 8005e00:	6813      	ldr	r3, [r2, #0]
 8005e02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005e06:	6013      	str	r3, [r2, #0]
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8005e08:	4620      	mov	r0, r4
 8005e0a:	f000 f903 	bl	8006014 <HAL_DACEx_DMAUnderrunCallbackCh2>
}
 8005e0e:	e7da      	b.n	8005dc6 <HAL_DAC_IRQHandler+0x22>

08005e10 <HAL_DAC_ConfigChannel>:
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8005e10:	2800      	cmp	r0, #0
 8005e12:	f000 80f4 	beq.w	8005ffe <HAL_DAC_ConfigChannel+0x1ee>
{
 8005e16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e1a:	460c      	mov	r4, r1
 8005e1c:	4615      	mov	r5, r2
 8005e1e:	4606      	mov	r6, r0
  if ((hdac == NULL) || (sConfig == NULL))
 8005e20:	2900      	cmp	r1, #0
 8005e22:	f000 80ee 	beq.w	8006002 <HAL_DAC_ConfigChannel+0x1f2>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005e26:	7943      	ldrb	r3, [r0, #5]
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	f000 80ec 	beq.w	8006006 <HAL_DAC_ConfigChannel+0x1f6>
 8005e2e:	2301      	movs	r3, #1
 8005e30:	7143      	strb	r3, [r0, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005e32:	2302      	movs	r3, #2
 8005e34:	7103      	strb	r3, [r0, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005e36:	688b      	ldr	r3, [r1, #8]
 8005e38:	2b04      	cmp	r3, #4
 8005e3a:	d016      	beq.n	8005e6a <HAL_DAC_ConfigChannel+0x5a>
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005e3c:	69e3      	ldr	r3, [r4, #28]
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	d05e      	beq.n	8005f00 <HAL_DAC_ConfigChannel+0xf0>
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8005e42:	6833      	ldr	r3, [r6, #0]
 8005e44:	6bdf      	ldr	r7, [r3, #60]	@ 0x3c
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005e46:	f005 0510 	and.w	r5, r5, #16
 8005e4a:	2307      	movs	r3, #7
 8005e4c:	40ab      	lsls	r3, r5
 8005e4e:	ea27 0703 	bic.w	r7, r7, r3
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005e52:	69a3      	ldr	r3, [r4, #24]
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d060      	beq.n	8005f1a <HAL_DAC_ConfigChannel+0x10a>
  {
    connectOnChip = 0x00000000UL;
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8005e58:	2b02      	cmp	r3, #2
 8005e5a:	f000 80b8 	beq.w	8005fce <HAL_DAC_ConfigChannel+0x1be>
  {
    connectOnChip = DAC_MCR_MODE1_0;
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8005e5e:	6963      	ldr	r3, [r4, #20]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	f040 80b6 	bne.w	8005fd2 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8005e66:	2101      	movs	r1, #1
 8005e68:	e058      	b.n	8005f1c <HAL_DAC_ConfigChannel+0x10c>
    tickstart = HAL_GetTick();
 8005e6a:	f7fe fe3d 	bl	8004ae8 <HAL_GetTick>
 8005e6e:	4607      	mov	r7, r0
    if (Channel == DAC_CHANNEL_1)
 8005e70:	b19d      	cbz	r5, 8005e9a <HAL_DAC_ConfigChannel+0x8a>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005e72:	6833      	ldr	r3, [r6, #0]
 8005e74:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e76:	2a00      	cmp	r2, #0
 8005e78:	da3f      	bge.n	8005efa <HAL_DAC_ConfigChannel+0xea>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005e7a:	f7fe fe35 	bl	8004ae8 <HAL_GetTick>
 8005e7e:	1bc0      	subs	r0, r0, r7
 8005e80:	2801      	cmp	r0, #1
 8005e82:	d9f6      	bls.n	8005e72 <HAL_DAC_ConfigChannel+0x62>
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005e84:	6833      	ldr	r3, [r6, #0]
 8005e86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	daf2      	bge.n	8005e72 <HAL_DAC_ConfigChannel+0x62>
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005e8c:	6933      	ldr	r3, [r6, #16]
 8005e8e:	f043 0308 	orr.w	r3, r3, #8
 8005e92:	6133      	str	r3, [r6, #16]
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005e94:	2003      	movs	r0, #3
 8005e96:	7130      	strb	r0, [r6, #4]
            return HAL_TIMEOUT;
 8005e98:	e097      	b.n	8005fca <HAL_DAC_ConfigChannel+0x1ba>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005e9a:	6833      	ldr	r3, [r6, #0]
 8005e9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e9e:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 8005ea2:	d010      	beq.n	8005ec6 <HAL_DAC_ConfigChannel+0xb6>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005ea4:	f7fe fe20 	bl	8004ae8 <HAL_GetTick>
 8005ea8:	1bc0      	subs	r0, r0, r7
 8005eaa:	2801      	cmp	r0, #1
 8005eac:	d9f5      	bls.n	8005e9a <HAL_DAC_ConfigChannel+0x8a>
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005eae:	6833      	ldr	r3, [r6, #0]
 8005eb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005eb2:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8005eb6:	d0f0      	beq.n	8005e9a <HAL_DAC_ConfigChannel+0x8a>
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005eb8:	6933      	ldr	r3, [r6, #16]
 8005eba:	f043 0308 	orr.w	r3, r3, #8
 8005ebe:	6133      	str	r3, [r6, #16]
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005ec0:	2003      	movs	r0, #3
 8005ec2:	7130      	strb	r0, [r6, #4]
            return HAL_TIMEOUT;
 8005ec4:	e081      	b.n	8005fca <HAL_DAC_ConfigChannel+0x1ba>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005ec6:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8005ec8:	641a      	str	r2, [r3, #64]	@ 0x40
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005eca:	6830      	ldr	r0, [r6, #0]
 8005ecc:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8005ece:	f005 0210 	and.w	r2, r5, #16
 8005ed2:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8005ed6:	4091      	lsls	r1, r2
 8005ed8:	ea23 0301 	bic.w	r3, r3, r1
 8005edc:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8005ede:	4091      	lsls	r1, r2
 8005ee0:	430b      	orrs	r3, r1
 8005ee2:	6483      	str	r3, [r0, #72]	@ 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005ee4:	6830      	ldr	r0, [r6, #0]
 8005ee6:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8005ee8:	21ff      	movs	r1, #255	@ 0xff
 8005eea:	4091      	lsls	r1, r2
 8005eec:	ea23 0301 	bic.w	r3, r3, r1
 8005ef0:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005ef2:	4091      	lsls	r1, r2
 8005ef4:	430b      	orrs	r3, r1
 8005ef6:	64c3      	str	r3, [r0, #76]	@ 0x4c
 8005ef8:	e7a0      	b.n	8005e3c <HAL_DAC_ConfigChannel+0x2c>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005efa:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8005efc:	645a      	str	r2, [r3, #68]	@ 0x44
 8005efe:	e7e4      	b.n	8005eca <HAL_DAC_ConfigChannel+0xba>
    tmpreg1 = hdac->Instance->CCR;
 8005f00:	6831      	ldr	r1, [r6, #0]
 8005f02:	6b8a      	ldr	r2, [r1, #56]	@ 0x38
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005f04:	f005 0010 	and.w	r0, r5, #16
 8005f08:	231f      	movs	r3, #31
 8005f0a:	4083      	lsls	r3, r0
 8005f0c:	ea22 0203 	bic.w	r2, r2, r3
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8005f10:	6a23      	ldr	r3, [r4, #32]
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005f12:	4083      	lsls	r3, r0
 8005f14:	4313      	orrs	r3, r2
    hdac->Instance->CCR = tmpreg1;
 8005f16:	638b      	str	r3, [r1, #56]	@ 0x38
 8005f18:	e793      	b.n	8005e42 <HAL_DAC_ConfigChannel+0x32>
    connectOnChip = 0x00000000UL;
 8005f1a:	2100      	movs	r1, #0
    else
    {
      connectOnChip = 0x00000000UL;
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005f1c:	68a3      	ldr	r3, [r4, #8]
 8005f1e:	6962      	ldr	r2, [r4, #20]
 8005f20:	4313      	orrs	r3, r2
 8005f22:	430b      	orrs	r3, r1
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8005f24:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005f28:	40aa      	lsls	r2, r5
 8005f2a:	ea27 0702 	bic.w	r7, r7, r2
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8005f2e:	7922      	ldrb	r2, [r4, #4]
 8005f30:	2a01      	cmp	r2, #1
 8005f32:	d050      	beq.n	8005fd6 <HAL_DAC_ConfigChannel+0x1c6>
 8005f34:	2200      	movs	r2, #0
 8005f36:	4313      	orrs	r3, r2
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8005f38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f3c:	40aa      	lsls	r2, r5
 8005f3e:	ea27 0702 	bic.w	r7, r7, r2
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8005f42:	7962      	ldrb	r2, [r4, #5]
 8005f44:	2a01      	cmp	r2, #1
 8005f46:	d049      	beq.n	8005fdc <HAL_DAC_ConfigChannel+0x1cc>
 8005f48:	f04f 0800 	mov.w	r8, #0
 8005f4c:	ea48 0803 	orr.w	r8, r8, r3
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8005f50:	f427 4740 	bic.w	r7, r7, #49152	@ 0xc000
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8005f54:	6823      	ldr	r3, [r4, #0]
 8005f56:	2b02      	cmp	r3, #2
 8005f58:	d043      	beq.n	8005fe2 <HAL_DAC_ConfigChannel+0x1d2>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8005f5a:	431f      	orrs	r7, r3
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005f5c:	fa08 f805 	lsl.w	r8, r8, r5
 8005f60:	ea48 0707 	orr.w	r7, r8, r7
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8005f64:	6832      	ldr	r2, [r6, #0]
 8005f66:	63d7      	str	r7, [r2, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005f68:	6831      	ldr	r1, [r6, #0]
 8005f6a:	680b      	ldr	r3, [r1, #0]
 8005f6c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005f70:	40aa      	lsls	r2, r5
 8005f72:	ea23 0302 	bic.w	r3, r3, r2
 8005f76:	600b      	str	r3, [r1, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005f78:	6831      	ldr	r1, [r6, #0]
 8005f7a:	680a      	ldr	r2, [r1, #0]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005f7c:	f640 73fe 	movw	r3, #4094	@ 0xffe
 8005f80:	40ab      	lsls	r3, r5
 8005f82:	ea22 0203 	bic.w	r2, r2, r3
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005f86:	68e3      	ldr	r3, [r4, #12]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005f88:	40ab      	lsls	r3, r5
 8005f8a:	4313      	orrs	r3, r2
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005f8c:	600b      	str	r3, [r1, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005f8e:	6831      	ldr	r1, [r6, #0]
 8005f90:	680b      	ldr	r3, [r1, #0]
 8005f92:	22c0      	movs	r2, #192	@ 0xc0
 8005f94:	40aa      	lsls	r2, r5
 8005f96:	ea23 0302 	bic.w	r3, r3, r2
 8005f9a:	600b      	str	r3, [r1, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8005f9c:	68e3      	ldr	r3, [r4, #12]
 8005f9e:	f3c3 0283 	ubfx	r2, r3, #2, #4
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8005fa2:	6923      	ldr	r3, [r4, #16]
 8005fa4:	089b      	lsrs	r3, r3, #2
 8005fa6:	021b      	lsls	r3, r3, #8
 8005fa8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005fac:	4313      	orrs	r3, r2
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8005fae:	6830      	ldr	r0, [r6, #0]
 8005fb0:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 8005fb2:	f640 710f 	movw	r1, #3855	@ 0xf0f
 8005fb6:	40a9      	lsls	r1, r5
 8005fb8:	ea22 0201 	bic.w	r2, r2, r1
 8005fbc:	40ab      	lsls	r3, r5
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	6603      	str	r3, [r0, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	7133      	strb	r3, [r6, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005fc6:	2000      	movs	r0, #0
 8005fc8:	7170      	strb	r0, [r6, #5]

  /* Return function status */
  return status;
}
 8005fca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    connectOnChip = DAC_MCR_MODE1_0;
 8005fce:	2101      	movs	r1, #1
 8005fd0:	e7a4      	b.n	8005f1c <HAL_DAC_ConfigChannel+0x10c>
      connectOnChip = 0x00000000UL;
 8005fd2:	2100      	movs	r1, #0
 8005fd4:	e7a2      	b.n	8005f1c <HAL_DAC_ConfigChannel+0x10c>
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8005fd6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005fda:	e7ac      	b.n	8005f36 <HAL_DAC_ConfigChannel+0x126>
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8005fdc:	f44f 7800 	mov.w	r8, #512	@ 0x200
 8005fe0:	e7b4      	b.n	8005f4c <HAL_DAC_ConfigChannel+0x13c>
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8005fe2:	f001 fc13 	bl	800780c <HAL_RCC_GetHCLKFreq>
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8005fe6:	4b09      	ldr	r3, [pc, #36]	@ (800600c <HAL_DAC_ConfigChannel+0x1fc>)
 8005fe8:	4298      	cmp	r0, r3
 8005fea:	d902      	bls.n	8005ff2 <HAL_DAC_ConfigChannel+0x1e2>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8005fec:	f447 4700 	orr.w	r7, r7, #32768	@ 0x8000
 8005ff0:	e7b4      	b.n	8005f5c <HAL_DAC_ConfigChannel+0x14c>
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8005ff2:	4b07      	ldr	r3, [pc, #28]	@ (8006010 <HAL_DAC_ConfigChannel+0x200>)
 8005ff4:	4298      	cmp	r0, r3
 8005ff6:	d9b1      	bls.n	8005f5c <HAL_DAC_ConfigChannel+0x14c>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8005ff8:	f447 4780 	orr.w	r7, r7, #16384	@ 0x4000
 8005ffc:	e7ae      	b.n	8005f5c <HAL_DAC_ConfigChannel+0x14c>
    return HAL_ERROR;
 8005ffe:	2001      	movs	r0, #1
}
 8006000:	4770      	bx	lr
    return HAL_ERROR;
 8006002:	2001      	movs	r0, #1
 8006004:	e7e1      	b.n	8005fca <HAL_DAC_ConfigChannel+0x1ba>
  __HAL_LOCK(hdac);
 8006006:	2002      	movs	r0, #2
 8006008:	e7df      	b.n	8005fca <HAL_DAC_ConfigChannel+0x1ba>
 800600a:	bf00      	nop
 800600c:	09896800 	.word	0x09896800
 8006010:	04c4b400 	.word	0x04c4b400

08006014 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8006014:	4770      	bx	lr

08006016 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006016:	b430      	push	{r4, r5}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006018:	6cc4      	ldr	r4, [r0, #76]	@ 0x4c
 800601a:	6d05      	ldr	r5, [r0, #80]	@ 0x50
 800601c:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800601e:	6d44      	ldr	r4, [r0, #84]	@ 0x54
 8006020:	b114      	cbz	r4, 8006028 <DMA_SetConfig+0x12>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006022:	6d84      	ldr	r4, [r0, #88]	@ 0x58
 8006024:	6dc5      	ldr	r5, [r0, #92]	@ 0x5c
 8006026:	6065      	str	r5, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006028:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 800602a:	f004 0c1f 	and.w	ip, r4, #31
 800602e:	2401      	movs	r4, #1
 8006030:	fa04 f40c 	lsl.w	r4, r4, ip
 8006034:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 8006036:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006038:	6804      	ldr	r4, [r0, #0]
 800603a:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800603c:	6883      	ldr	r3, [r0, #8]
 800603e:	2b10      	cmp	r3, #16
 8006040:	d005      	beq.n	800604e <DMA_SetConfig+0x38>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8006042:	6803      	ldr	r3, [r0, #0]
 8006044:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8006046:	6803      	ldr	r3, [r0, #0]
 8006048:	60da      	str	r2, [r3, #12]
  }
}
 800604a:	bc30      	pop	{r4, r5}
 800604c:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 800604e:	6803      	ldr	r3, [r0, #0]
 8006050:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8006052:	6803      	ldr	r3, [r0, #0]
 8006054:	60d9      	str	r1, [r3, #12]
 8006056:	e7f8      	b.n	800604a <DMA_SetConfig+0x34>

08006058 <DMA_CalcDMAMUXChannelBaseAndMask>:
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006058:	6803      	ldr	r3, [r0, #0]
 800605a:	4a0c      	ldr	r2, [pc, #48]	@ (800608c <DMA_CalcDMAMUXChannelBaseAndMask+0x34>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d813      	bhi.n	8006088 <DMA_CalcDMAMUXChannelBaseAndMask+0x30>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8006060:	490b      	ldr	r1, [pc, #44]	@ (8006090 <DMA_CalcDMAMUXChannelBaseAndMask+0x38>)
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006062:	b2db      	uxtb	r3, r3
 8006064:	3b08      	subs	r3, #8
 8006066:	4a0b      	ldr	r2, [pc, #44]	@ (8006094 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>)
 8006068:	fba2 2303 	umull	r2, r3, r2, r3
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800606c:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 800606e:	f022 0203 	bic.w	r2, r2, #3
 8006072:	440a      	add	r2, r1
 8006074:	6482      	str	r2, [r0, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006076:	4a08      	ldr	r2, [pc, #32]	@ (8006098 <DMA_CalcDMAMUXChannelBaseAndMask+0x40>)
 8006078:	64c2      	str	r2, [r0, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800607a:	f3c3 1304 	ubfx	r3, r3, #4, #5
 800607e:	2201      	movs	r2, #1
 8006080:	fa02 f303 	lsl.w	r3, r2, r3
 8006084:	6503      	str	r3, [r0, #80]	@ 0x50
}
 8006086:	4770      	bx	lr
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8006088:	4904      	ldr	r1, [pc, #16]	@ (800609c <DMA_CalcDMAMUXChannelBaseAndMask+0x44>)
 800608a:	e7ea      	b.n	8006062 <DMA_CalcDMAMUXChannelBaseAndMask+0xa>
 800608c:	40020407 	.word	0x40020407
 8006090:	40020800 	.word	0x40020800
 8006094:	cccccccd 	.word	0xcccccccd
 8006098:	40020880 	.word	0x40020880
 800609c:	40020820 	.word	0x40020820

080060a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80060a0:	7903      	ldrb	r3, [r0, #4]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80060a2:	4a07      	ldr	r2, [pc, #28]	@ (80060c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x20>)
 80060a4:	441a      	add	r2, r3
 80060a6:	0092      	lsls	r2, r2, #2
 80060a8:	6542      	str	r2, [r0, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80060aa:	4a06      	ldr	r2, [pc, #24]	@ (80060c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 80060ac:	6582      	str	r2, [r0, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80060ae:	3b01      	subs	r3, #1
 80060b0:	f003 031f 	and.w	r3, r3, #31
 80060b4:	2201      	movs	r2, #1
 80060b6:	fa02 f303 	lsl.w	r3, r2, r3
 80060ba:	65c3      	str	r3, [r0, #92]	@ 0x5c
}
 80060bc:	4770      	bx	lr
 80060be:	bf00      	nop
 80060c0:	1000823f 	.word	0x1000823f
 80060c4:	40020940 	.word	0x40020940

080060c8 <HAL_DMA_Init>:
  if (hdma == NULL)
 80060c8:	2800      	cmp	r0, #0
 80060ca:	d05b      	beq.n	8006184 <HAL_DMA_Init+0xbc>
{
 80060cc:	b510      	push	{r4, lr}
 80060ce:	4604      	mov	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80060d0:	6801      	ldr	r1, [r0, #0]
 80060d2:	4b2d      	ldr	r3, [pc, #180]	@ (8006188 <HAL_DMA_Init+0xc0>)
 80060d4:	4299      	cmp	r1, r3
 80060d6:	d83d      	bhi.n	8006154 <HAL_DMA_Init+0x8c>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80060d8:	4b2c      	ldr	r3, [pc, #176]	@ (800618c <HAL_DMA_Init+0xc4>)
 80060da:	440b      	add	r3, r1
 80060dc:	4a2c      	ldr	r2, [pc, #176]	@ (8006190 <HAL_DMA_Init+0xc8>)
 80060de:	fba2 2303 	umull	r2, r3, r2, r3
 80060e2:	091b      	lsrs	r3, r3, #4
 80060e4:	009b      	lsls	r3, r3, #2
 80060e6:	6443      	str	r3, [r0, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80060e8:	4b2a      	ldr	r3, [pc, #168]	@ (8006194 <HAL_DMA_Init+0xcc>)
 80060ea:	6403      	str	r3, [r0, #64]	@ 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 80060ec:	2302      	movs	r3, #2
 80060ee:	f884 3025 	strb.w	r3, [r4, #37]	@ 0x25
  tmp = hdma->Instance->CCR;
 80060f2:	680a      	ldr	r2, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80060f4:	f422 42ff 	bic.w	r2, r2, #32640	@ 0x7f80
 80060f8:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmp |=  hdma->Init.Direction        |
 80060fc:	68a3      	ldr	r3, [r4, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80060fe:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Direction        |
 8006100:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006102:	6920      	ldr	r0, [r4, #16]
 8006104:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006106:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006108:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800610a:	69a0      	ldr	r0, [r4, #24]
 800610c:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 800610e:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006110:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8006112:	6a20      	ldr	r0, [r4, #32]
 8006114:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 8006116:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;
 8006118:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800611a:	4620      	mov	r0, r4
 800611c:	f7ff ff9c 	bl	8006058 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006120:	68a3      	ldr	r3, [r4, #8]
 8006122:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006126:	d020      	beq.n	800616a <HAL_DMA_Init+0xa2>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006128:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800612a:	7922      	ldrb	r2, [r4, #4]
 800612c:	601a      	str	r2, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800612e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8006130:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8006132:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006134:	6863      	ldr	r3, [r4, #4]
 8006136:	3b01      	subs	r3, #1
 8006138:	2b03      	cmp	r3, #3
 800613a:	d919      	bls.n	8006170 <HAL_DMA_Init+0xa8>
    hdma->DMAmuxRequestGen = 0U;
 800613c:	2300      	movs	r3, #0
 800613e:	6563      	str	r3, [r4, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8006140:	65a3      	str	r3, [r4, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006142:	65e3      	str	r3, [r4, #92]	@ 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006144:	2000      	movs	r0, #0
 8006146:	63e0      	str	r0, [r4, #60]	@ 0x3c
  hdma->State  = HAL_DMA_STATE_READY;
 8006148:	2301      	movs	r3, #1
 800614a:	f884 3025 	strb.w	r3, [r4, #37]	@ 0x25
  hdma->Lock = HAL_UNLOCKED;
 800614e:	f884 0024 	strb.w	r0, [r4, #36]	@ 0x24
}
 8006152:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8006154:	4b10      	ldr	r3, [pc, #64]	@ (8006198 <HAL_DMA_Init+0xd0>)
 8006156:	440b      	add	r3, r1
 8006158:	4a0d      	ldr	r2, [pc, #52]	@ (8006190 <HAL_DMA_Init+0xc8>)
 800615a:	fba2 2303 	umull	r2, r3, r2, r3
 800615e:	091b      	lsrs	r3, r3, #4
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	6443      	str	r3, [r0, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8006164:	4b0d      	ldr	r3, [pc, #52]	@ (800619c <HAL_DMA_Init+0xd4>)
 8006166:	6403      	str	r3, [r0, #64]	@ 0x40
 8006168:	e7c0      	b.n	80060ec <HAL_DMA_Init+0x24>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800616a:	2300      	movs	r3, #0
 800616c:	6063      	str	r3, [r4, #4]
 800616e:	e7db      	b.n	8006128 <HAL_DMA_Init+0x60>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006170:	4620      	mov	r0, r4
 8006172:	f7ff ff95 	bl	80060a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006176:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8006178:	2200      	movs	r2, #0
 800617a:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800617c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800617e:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8006180:	605a      	str	r2, [r3, #4]
 8006182:	e7df      	b.n	8006144 <HAL_DMA_Init+0x7c>
    return HAL_ERROR;
 8006184:	2001      	movs	r0, #1
}
 8006186:	4770      	bx	lr
 8006188:	40020407 	.word	0x40020407
 800618c:	bffdfff8 	.word	0xbffdfff8
 8006190:	cccccccd 	.word	0xcccccccd
 8006194:	40020000 	.word	0x40020000
 8006198:	bffdfbf8 	.word	0xbffdfbf8
 800619c:	40020400 	.word	0x40020400

080061a0 <HAL_DMA_DeInit>:
  if (NULL == hdma)
 80061a0:	2800      	cmp	r0, #0
 80061a2:	d04b      	beq.n	800623c <HAL_DMA_DeInit+0x9c>
{
 80061a4:	b538      	push	{r3, r4, r5, lr}
 80061a6:	4604      	mov	r4, r0
  __HAL_DMA_DISABLE(hdma);
 80061a8:	6802      	ldr	r2, [r0, #0]
 80061aa:	6813      	ldr	r3, [r2, #0]
 80061ac:	f023 0301 	bic.w	r3, r3, #1
 80061b0:	6013      	str	r3, [r2, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80061b2:	6802      	ldr	r2, [r0, #0]
 80061b4:	4b22      	ldr	r3, [pc, #136]	@ (8006240 <HAL_DMA_DeInit+0xa0>)
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d82c      	bhi.n	8006214 <HAL_DMA_DeInit+0x74>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80061ba:	4b22      	ldr	r3, [pc, #136]	@ (8006244 <HAL_DMA_DeInit+0xa4>)
 80061bc:	4413      	add	r3, r2
 80061be:	4922      	ldr	r1, [pc, #136]	@ (8006248 <HAL_DMA_DeInit+0xa8>)
 80061c0:	fba1 1303 	umull	r1, r3, r1, r3
 80061c4:	091b      	lsrs	r3, r3, #4
 80061c6:	009b      	lsls	r3, r3, #2
 80061c8:	6443      	str	r3, [r0, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80061ca:	4b20      	ldr	r3, [pc, #128]	@ (800624c <HAL_DMA_DeInit+0xac>)
 80061cc:	6403      	str	r3, [r0, #64]	@ 0x40
  hdma->Instance->CCR  = 0;
 80061ce:	2500      	movs	r5, #0
 80061d0:	6015      	str	r5, [r2, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80061d2:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80061d4:	f003 021f 	and.w	r2, r3, #31
 80061d8:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 80061da:	2301      	movs	r3, #1
 80061dc:	4093      	lsls	r3, r2
 80061de:	604b      	str	r3, [r1, #4]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80061e0:	4620      	mov	r0, r4
 80061e2:	f7ff ff39 	bl	8006058 <DMA_CalcDMAMUXChannelBaseAndMask>
  hdma->DMAmuxChannel->CCR = 0;
 80061e6:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80061e8:	601d      	str	r5, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80061ea:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80061ec:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 80061ee:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80061f0:	6863      	ldr	r3, [r4, #4]
 80061f2:	3b01      	subs	r3, #1
 80061f4:	2b03      	cmp	r3, #3
 80061f6:	d918      	bls.n	800622a <HAL_DMA_DeInit+0x8a>
  hdma->DMAmuxRequestGen = 0U;
 80061f8:	2000      	movs	r0, #0
 80061fa:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 80061fc:	65a0      	str	r0, [r4, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 80061fe:	65e0      	str	r0, [r4, #92]	@ 0x5c
  hdma->XferCpltCallback = NULL;
 8006200:	62e0      	str	r0, [r4, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8006202:	6320      	str	r0, [r4, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8006204:	6360      	str	r0, [r4, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8006206:	63a0      	str	r0, [r4, #56]	@ 0x38
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006208:	63e0      	str	r0, [r4, #60]	@ 0x3c
  hdma->State = HAL_DMA_STATE_RESET;
 800620a:	f884 0025 	strb.w	r0, [r4, #37]	@ 0x25
  __HAL_UNLOCK(hdma);
 800620e:	f884 0024 	strb.w	r0, [r4, #36]	@ 0x24
}
 8006212:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8006214:	4b0e      	ldr	r3, [pc, #56]	@ (8006250 <HAL_DMA_DeInit+0xb0>)
 8006216:	4413      	add	r3, r2
 8006218:	490b      	ldr	r1, [pc, #44]	@ (8006248 <HAL_DMA_DeInit+0xa8>)
 800621a:	fba1 1303 	umull	r1, r3, r1, r3
 800621e:	091b      	lsrs	r3, r3, #4
 8006220:	009b      	lsls	r3, r3, #2
 8006222:	6443      	str	r3, [r0, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8006224:	4b0b      	ldr	r3, [pc, #44]	@ (8006254 <HAL_DMA_DeInit+0xb4>)
 8006226:	6403      	str	r3, [r0, #64]	@ 0x40
 8006228:	e7d1      	b.n	80061ce <HAL_DMA_DeInit+0x2e>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800622a:	4620      	mov	r0, r4
 800622c:	f7ff ff38 	bl	80060a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006230:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8006232:	601d      	str	r5, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006234:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006236:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8006238:	605a      	str	r2, [r3, #4]
 800623a:	e7dd      	b.n	80061f8 <HAL_DMA_DeInit+0x58>
    return HAL_ERROR;
 800623c:	2001      	movs	r0, #1
}
 800623e:	4770      	bx	lr
 8006240:	40020407 	.word	0x40020407
 8006244:	bffdfff8 	.word	0xbffdfff8
 8006248:	cccccccd 	.word	0xcccccccd
 800624c:	40020000 	.word	0x40020000
 8006250:	bffdfbf8 	.word	0xbffdfbf8
 8006254:	40020400 	.word	0x40020400

08006258 <HAL_DMA_Start_IT>:
{
 8006258:	b538      	push	{r3, r4, r5, lr}
 800625a:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 800625c:	f890 0024 	ldrb.w	r0, [r0, #36]	@ 0x24
 8006260:	2801      	cmp	r0, #1
 8006262:	d041      	beq.n	80062e8 <HAL_DMA_Start_IT+0x90>
 8006264:	2001      	movs	r0, #1
 8006266:	f884 0024 	strb.w	r0, [r4, #36]	@ 0x24
  if (HAL_DMA_STATE_READY == hdma->State)
 800626a:	f894 0025 	ldrb.w	r0, [r4, #37]	@ 0x25
 800626e:	b2c0      	uxtb	r0, r0
 8006270:	2801      	cmp	r0, #1
 8006272:	d004      	beq.n	800627e <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);
 8006274:	2300      	movs	r3, #0
 8006276:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
    status = HAL_BUSY;
 800627a:	2002      	movs	r0, #2
}
 800627c:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 800627e:	2002      	movs	r0, #2
 8006280:	f884 0025 	strb.w	r0, [r4, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006284:	2000      	movs	r0, #0
 8006286:	63e0      	str	r0, [r4, #60]	@ 0x3c
    __HAL_DMA_DISABLE(hdma);
 8006288:	6825      	ldr	r5, [r4, #0]
 800628a:	6828      	ldr	r0, [r5, #0]
 800628c:	f020 0001 	bic.w	r0, r0, #1
 8006290:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006292:	4620      	mov	r0, r4
 8006294:	f7ff febf 	bl	8006016 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8006298:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800629a:	b1d3      	cbz	r3, 80062d2 <HAL_DMA_Start_IT+0x7a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800629c:	6822      	ldr	r2, [r4, #0]
 800629e:	6813      	ldr	r3, [r2, #0]
 80062a0:	f043 030e 	orr.w	r3, r3, #14
 80062a4:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80062a6:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80062a8:	681a      	ldr	r2, [r3, #0]
 80062aa:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
 80062ae:	d003      	beq.n	80062b8 <HAL_DMA_Start_IT+0x60>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80062b6:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 80062b8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80062ba:	b11b      	cbz	r3, 80062c4 <HAL_DMA_Start_IT+0x6c>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80062bc:	681a      	ldr	r2, [r3, #0]
 80062be:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80062c2:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 80062c4:	6822      	ldr	r2, [r4, #0]
 80062c6:	6813      	ldr	r3, [r2, #0]
 80062c8:	f043 0301 	orr.w	r3, r3, #1
 80062cc:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062ce:	2000      	movs	r0, #0
 80062d0:	e7d4      	b.n	800627c <HAL_DMA_Start_IT+0x24>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80062d2:	6822      	ldr	r2, [r4, #0]
 80062d4:	6813      	ldr	r3, [r2, #0]
 80062d6:	f023 0304 	bic.w	r3, r3, #4
 80062da:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80062dc:	6822      	ldr	r2, [r4, #0]
 80062de:	6813      	ldr	r3, [r2, #0]
 80062e0:	f043 030a 	orr.w	r3, r3, #10
 80062e4:	6013      	str	r3, [r2, #0]
 80062e6:	e7de      	b.n	80062a6 <HAL_DMA_Start_IT+0x4e>
  __HAL_LOCK(hdma);
 80062e8:	2002      	movs	r0, #2
 80062ea:	e7c7      	b.n	800627c <HAL_DMA_Start_IT+0x24>

080062ec <HAL_DMA_Abort>:
{
 80062ec:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80062ee:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 80062f2:	b2d2      	uxtb	r2, r2
 80062f4:	2a02      	cmp	r2, #2
 80062f6:	d009      	beq.n	800630c <HAL_DMA_Abort+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80062f8:	2204      	movs	r2, #4
 80062fa:	63c2      	str	r2, [r0, #60]	@ 0x3c
    status = HAL_ERROR;
 80062fc:	2001      	movs	r0, #1
  hdma->State = HAL_DMA_STATE_READY;
 80062fe:	2201      	movs	r2, #1
 8006300:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  __HAL_UNLOCK(hdma);
 8006304:	2200      	movs	r2, #0
 8006306:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 800630a:	4770      	bx	lr
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800630c:	6801      	ldr	r1, [r0, #0]
 800630e:	680a      	ldr	r2, [r1, #0]
 8006310:	f022 020e 	bic.w	r2, r2, #14
 8006314:	600a      	str	r2, [r1, #0]
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006316:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8006318:	680a      	ldr	r2, [r1, #0]
 800631a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800631e:	600a      	str	r2, [r1, #0]
     __HAL_DMA_DISABLE(hdma);
 8006320:	6801      	ldr	r1, [r0, #0]
 8006322:	680a      	ldr	r2, [r1, #0]
 8006324:	f022 0201 	bic.w	r2, r2, #1
 8006328:	600a      	str	r2, [r1, #0]
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800632a:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 800632c:	f002 011f 	and.w	r1, r2, #31
 8006330:	6c00      	ldr	r0, [r0, #64]	@ 0x40
 8006332:	2201      	movs	r2, #1
 8006334:	408a      	lsls	r2, r1
 8006336:	6042      	str	r2, [r0, #4]
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006338:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800633a:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800633c:	6051      	str	r1, [r2, #4]
     if (hdma->DMAmuxRequestGen != 0U)
 800633e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006340:	b142      	cbz	r2, 8006354 <HAL_DMA_Abort+0x68>
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006342:	6811      	ldr	r1, [r2, #0]
 8006344:	f421 7180 	bic.w	r1, r1, #256	@ 0x100
 8006348:	6011      	str	r1, [r2, #0]
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800634a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800634c:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800634e:	6051      	str	r1, [r2, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006350:	2000      	movs	r0, #0
 8006352:	e7d4      	b.n	80062fe <HAL_DMA_Abort+0x12>
 8006354:	2000      	movs	r0, #0
 8006356:	e7d2      	b.n	80062fe <HAL_DMA_Abort+0x12>

08006358 <HAL_DMA_Abort_IT>:
{
 8006358:	b508      	push	{r3, lr}
  if (HAL_DMA_STATE_BUSY != hdma->State)
 800635a:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 800635e:	b2db      	uxtb	r3, r3
 8006360:	2b02      	cmp	r3, #2
 8006362:	d009      	beq.n	8006378 <HAL_DMA_Abort_IT+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006364:	2304      	movs	r3, #4
 8006366:	63c3      	str	r3, [r0, #60]	@ 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8006368:	2301      	movs	r3, #1
 800636a:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 800636e:	2200      	movs	r2, #0
 8006370:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
    status = HAL_ERROR;
 8006374:	4618      	mov	r0, r3
}
 8006376:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006378:	6802      	ldr	r2, [r0, #0]
 800637a:	6813      	ldr	r3, [r2, #0]
 800637c:	f023 030e 	bic.w	r3, r3, #14
 8006380:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8006382:	6802      	ldr	r2, [r0, #0]
 8006384:	6813      	ldr	r3, [r2, #0]
 8006386:	f023 0301 	bic.w	r3, r3, #1
 800638a:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800638c:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 800638e:	6813      	ldr	r3, [r2, #0]
 8006390:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006394:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006396:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8006398:	f003 021f 	and.w	r2, r3, #31
 800639c:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 800639e:	2301      	movs	r3, #1
 80063a0:	4093      	lsls	r3, r2
 80063a2:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80063a4:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 80063a6:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 80063a8:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 80063aa:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80063ac:	b133      	cbz	r3, 80063bc <HAL_DMA_Abort_IT+0x64>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80063ae:	681a      	ldr	r2, [r3, #0]
 80063b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80063b4:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80063b6:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 80063b8:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 80063ba:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80063bc:	2301      	movs	r3, #1
 80063be:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 80063c2:	2300      	movs	r3, #0
 80063c4:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    if (hdma->XferAbortCallback != NULL)
 80063c8:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80063ca:	b113      	cbz	r3, 80063d2 <HAL_DMA_Abort_IT+0x7a>
      hdma->XferAbortCallback(hdma);
 80063cc:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80063ce:	2000      	movs	r0, #0
 80063d0:	e7d1      	b.n	8006376 <HAL_DMA_Abort_IT+0x1e>
 80063d2:	2000      	movs	r0, #0
 80063d4:	e7cf      	b.n	8006376 <HAL_DMA_Abort_IT+0x1e>

080063d6 <HAL_DMA_IRQHandler>:
{
 80063d6:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80063d8:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80063da:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80063dc:	6804      	ldr	r4, [r0, #0]
 80063de:	6825      	ldr	r5, [r4, #0]
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80063e0:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80063e2:	f003 031f 	and.w	r3, r3, #31
 80063e6:	2204      	movs	r2, #4
 80063e8:	409a      	lsls	r2, r3
 80063ea:	420a      	tst	r2, r1
 80063ec:	d015      	beq.n	800641a <HAL_DMA_IRQHandler+0x44>
 80063ee:	f015 0f04 	tst.w	r5, #4
 80063f2:	d012      	beq.n	800641a <HAL_DMA_IRQHandler+0x44>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80063f4:	6823      	ldr	r3, [r4, #0]
 80063f6:	f013 0f20 	tst.w	r3, #32
 80063fa:	d103      	bne.n	8006404 <HAL_DMA_IRQHandler+0x2e>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80063fc:	6823      	ldr	r3, [r4, #0]
 80063fe:	f023 0304 	bic.w	r3, r3, #4
 8006402:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8006404:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8006406:	f003 021f 	and.w	r2, r3, #31
 800640a:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 800640c:	2304      	movs	r3, #4
 800640e:	4093      	lsls	r3, r2
 8006410:	604b      	str	r3, [r1, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 8006412:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8006414:	b103      	cbz	r3, 8006418 <HAL_DMA_IRQHandler+0x42>
      hdma->XferHalfCpltCallback(hdma);
 8006416:	4798      	blx	r3
}
 8006418:	bd38      	pop	{r3, r4, r5, pc}
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800641a:	2202      	movs	r2, #2
 800641c:	409a      	lsls	r2, r3
 800641e:	420a      	tst	r2, r1
 8006420:	d01c      	beq.n	800645c <HAL_DMA_IRQHandler+0x86>
           && (0U != (source_it & DMA_IT_TC)))
 8006422:	f015 0f02 	tst.w	r5, #2
 8006426:	d019      	beq.n	800645c <HAL_DMA_IRQHandler+0x86>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006428:	6823      	ldr	r3, [r4, #0]
 800642a:	f013 0f20 	tst.w	r3, #32
 800642e:	d106      	bne.n	800643e <HAL_DMA_IRQHandler+0x68>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006430:	6823      	ldr	r3, [r4, #0]
 8006432:	f023 030a 	bic.w	r3, r3, #10
 8006436:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8006438:	2301      	movs	r3, #1
 800643a:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800643e:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8006440:	f003 021f 	and.w	r2, r3, #31
 8006444:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8006446:	2302      	movs	r3, #2
 8006448:	4093      	lsls	r3, r2
 800644a:	604b      	str	r3, [r1, #4]
    __HAL_UNLOCK(hdma);
 800644c:	2300      	movs	r3, #0
 800644e:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    if (hdma->XferCpltCallback != NULL)
 8006452:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8006454:	2b00      	cmp	r3, #0
 8006456:	d0df      	beq.n	8006418 <HAL_DMA_IRQHandler+0x42>
      hdma->XferCpltCallback(hdma);
 8006458:	4798      	blx	r3
 800645a:	e7dd      	b.n	8006418 <HAL_DMA_IRQHandler+0x42>
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800645c:	2208      	movs	r2, #8
 800645e:	fa02 f303 	lsl.w	r3, r2, r3
 8006462:	420b      	tst	r3, r1
 8006464:	d0d8      	beq.n	8006418 <HAL_DMA_IRQHandler+0x42>
           && (0U != (source_it & DMA_IT_TE)))
 8006466:	f015 0f08 	tst.w	r5, #8
 800646a:	d0d5      	beq.n	8006418 <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800646c:	6823      	ldr	r3, [r4, #0]
 800646e:	f023 030e 	bic.w	r3, r3, #14
 8006472:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006474:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8006476:	f003 031f 	and.w	r3, r3, #31
 800647a:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 800647c:	2201      	movs	r2, #1
 800647e:	fa02 f303 	lsl.w	r3, r2, r3
 8006482:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006484:	63c2      	str	r2, [r0, #60]	@ 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8006486:	f880 2025 	strb.w	r2, [r0, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 800648a:	2300      	movs	r3, #0
 800648c:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    if (hdma->XferErrorCallback != NULL)
 8006490:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8006492:	2b00      	cmp	r3, #0
 8006494:	d0c0      	beq.n	8006418 <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 8006496:	4798      	blx	r3
  return;
 8006498:	e7be      	b.n	8006418 <HAL_DMA_IRQHandler+0x42>
	...

0800649c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800649c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800649e:	b083      	sub	sp, #12
  uint32_t position = 0x00U;
 80064a0:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80064a2:	e062      	b.n	800656a <HAL_GPIO_Init+0xce>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80064a4:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80064a6:	005e      	lsls	r6, r3, #1
 80064a8:	2403      	movs	r4, #3
 80064aa:	40b4      	lsls	r4, r6
 80064ac:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80064b0:	68cc      	ldr	r4, [r1, #12]
 80064b2:	40b4      	lsls	r4, r6
 80064b4:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 80064b6:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80064b8:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80064ba:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80064be:	684c      	ldr	r4, [r1, #4]
 80064c0:	f3c4 1400 	ubfx	r4, r4, #4, #1
 80064c4:	409c      	lsls	r4, r3
 80064c6:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 80064c8:	6044      	str	r4, [r0, #4]
 80064ca:	e05f      	b.n	800658c <HAL_GPIO_Init+0xf0>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80064cc:	08dd      	lsrs	r5, r3, #3
 80064ce:	3508      	adds	r5, #8
 80064d0:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80064d4:	f003 0c07 	and.w	ip, r3, #7
 80064d8:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80064dc:	f04f 0e0f 	mov.w	lr, #15
 80064e0:	fa0e fe0c 	lsl.w	lr, lr, ip
 80064e4:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80064e8:	690c      	ldr	r4, [r1, #16]
 80064ea:	fa04 f40c 	lsl.w	r4, r4, ip
 80064ee:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 80064f2:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 80064f6:	e060      	b.n	80065ba <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80064f8:	2405      	movs	r4, #5
 80064fa:	e000      	b.n	80064fe <HAL_GPIO_Init+0x62>
 80064fc:	2400      	movs	r4, #0
 80064fe:	fa04 f40e 	lsl.w	r4, r4, lr
 8006502:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006504:	f10c 0c02 	add.w	ip, ip, #2
 8006508:	4d55      	ldr	r5, [pc, #340]	@ (8006660 <HAL_GPIO_Init+0x1c4>)
 800650a:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800650e:	4c55      	ldr	r4, [pc, #340]	@ (8006664 <HAL_GPIO_Init+0x1c8>)
 8006510:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 8006512:	43d4      	mvns	r4, r2
 8006514:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006518:	684f      	ldr	r7, [r1, #4]
 800651a:	f417 1f80 	tst.w	r7, #1048576	@ 0x100000
 800651e:	d001      	beq.n	8006524 <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 8006520:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8006524:	4d4f      	ldr	r5, [pc, #316]	@ (8006664 <HAL_GPIO_Init+0x1c8>)
 8006526:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR1;
 8006528:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 800652a:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800652e:	684f      	ldr	r7, [r1, #4]
 8006530:	f417 1f00 	tst.w	r7, #2097152	@ 0x200000
 8006534:	d001      	beq.n	800653a <HAL_GPIO_Init+0x9e>
        {
          temp |= iocurrent;
 8006536:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 800653a:	4d4a      	ldr	r5, [pc, #296]	@ (8006664 <HAL_GPIO_Init+0x1c8>)
 800653c:	60ee      	str	r6, [r5, #12]

        temp = EXTI->EMR1;
 800653e:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8006540:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006544:	684f      	ldr	r7, [r1, #4]
 8006546:	f417 3f00 	tst.w	r7, #131072	@ 0x20000
 800654a:	d001      	beq.n	8006550 <HAL_GPIO_Init+0xb4>
        {
          temp |= iocurrent;
 800654c:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 8006550:	4d44      	ldr	r5, [pc, #272]	@ (8006664 <HAL_GPIO_Init+0x1c8>)
 8006552:	606e      	str	r6, [r5, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006554:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 8006556:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006558:	684e      	ldr	r6, [r1, #4]
 800655a:	f416 3f80 	tst.w	r6, #65536	@ 0x10000
 800655e:	d001      	beq.n	8006564 <HAL_GPIO_Init+0xc8>
        {
          temp |= iocurrent;
 8006560:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->IMR1 = temp;
 8006564:	4a3f      	ldr	r2, [pc, #252]	@ (8006664 <HAL_GPIO_Init+0x1c8>)
 8006566:	6014      	str	r4, [r2, #0]
      }
    }

    position++;
 8006568:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 800656a:	680a      	ldr	r2, [r1, #0]
 800656c:	fa32 f403 	lsrs.w	r4, r2, r3
 8006570:	d074      	beq.n	800665c <HAL_GPIO_Init+0x1c0>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006572:	f04f 0c01 	mov.w	ip, #1
 8006576:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 800657a:	ea1c 0202 	ands.w	r2, ip, r2
 800657e:	d0f3      	beq.n	8006568 <HAL_GPIO_Init+0xcc>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006580:	684c      	ldr	r4, [r1, #4]
 8006582:	f004 0403 	and.w	r4, r4, #3
 8006586:	3c01      	subs	r4, #1
 8006588:	2c01      	cmp	r4, #1
 800658a:	d98b      	bls.n	80064a4 <HAL_GPIO_Init+0x8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800658c:	684c      	ldr	r4, [r1, #4]
 800658e:	f004 0403 	and.w	r4, r4, #3
 8006592:	2c03      	cmp	r4, #3
 8006594:	d00c      	beq.n	80065b0 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8006596:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006598:	005d      	lsls	r5, r3, #1
 800659a:	f04f 0c03 	mov.w	ip, #3
 800659e:	fa0c fc05 	lsl.w	ip, ip, r5
 80065a2:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80065a6:	688c      	ldr	r4, [r1, #8]
 80065a8:	40ac      	lsls	r4, r5
 80065aa:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 80065ae:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80065b0:	684c      	ldr	r4, [r1, #4]
 80065b2:	f004 0403 	and.w	r4, r4, #3
 80065b6:	2c02      	cmp	r4, #2
 80065b8:	d088      	beq.n	80064cc <HAL_GPIO_Init+0x30>
      temp = GPIOx->MODER;
 80065ba:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80065bc:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80065c0:	f04f 0c03 	mov.w	ip, #3
 80065c4:	fa0c fc0e 	lsl.w	ip, ip, lr
 80065c8:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80065cc:	684c      	ldr	r4, [r1, #4]
 80065ce:	f004 0403 	and.w	r4, r4, #3
 80065d2:	fa04 f40e 	lsl.w	r4, r4, lr
 80065d6:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 80065da:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80065dc:	684c      	ldr	r4, [r1, #4]
 80065de:	f414 3f40 	tst.w	r4, #196608	@ 0x30000
 80065e2:	d0c1      	beq.n	8006568 <HAL_GPIO_Init+0xcc>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80065e4:	4c20      	ldr	r4, [pc, #128]	@ (8006668 <HAL_GPIO_Init+0x1cc>)
 80065e6:	6e25      	ldr	r5, [r4, #96]	@ 0x60
 80065e8:	f045 0501 	orr.w	r5, r5, #1
 80065ec:	6625      	str	r5, [r4, #96]	@ 0x60
 80065ee:	6e24      	ldr	r4, [r4, #96]	@ 0x60
 80065f0:	f004 0401 	and.w	r4, r4, #1
 80065f4:	9401      	str	r4, [sp, #4]
 80065f6:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80065f8:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 80065fc:	f10c 0502 	add.w	r5, ip, #2
 8006600:	4c17      	ldr	r4, [pc, #92]	@ (8006660 <HAL_GPIO_Init+0x1c4>)
 8006602:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006606:	f003 0e03 	and.w	lr, r3, #3
 800660a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800660e:	240f      	movs	r4, #15
 8006610:	fa04 f40e 	lsl.w	r4, r4, lr
 8006614:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006618:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
 800661c:	f43f af6e 	beq.w	80064fc <HAL_GPIO_Init+0x60>
 8006620:	4c12      	ldr	r4, [pc, #72]	@ (800666c <HAL_GPIO_Init+0x1d0>)
 8006622:	42a0      	cmp	r0, r4
 8006624:	d012      	beq.n	800664c <HAL_GPIO_Init+0x1b0>
 8006626:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800662a:	42a0      	cmp	r0, r4
 800662c:	d010      	beq.n	8006650 <HAL_GPIO_Init+0x1b4>
 800662e:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8006632:	42a0      	cmp	r0, r4
 8006634:	d00e      	beq.n	8006654 <HAL_GPIO_Init+0x1b8>
 8006636:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800663a:	42a0      	cmp	r0, r4
 800663c:	d00c      	beq.n	8006658 <HAL_GPIO_Init+0x1bc>
 800663e:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8006642:	42a0      	cmp	r0, r4
 8006644:	f43f af58 	beq.w	80064f8 <HAL_GPIO_Init+0x5c>
 8006648:	2406      	movs	r4, #6
 800664a:	e758      	b.n	80064fe <HAL_GPIO_Init+0x62>
 800664c:	2401      	movs	r4, #1
 800664e:	e756      	b.n	80064fe <HAL_GPIO_Init+0x62>
 8006650:	2402      	movs	r4, #2
 8006652:	e754      	b.n	80064fe <HAL_GPIO_Init+0x62>
 8006654:	2403      	movs	r4, #3
 8006656:	e752      	b.n	80064fe <HAL_GPIO_Init+0x62>
 8006658:	2404      	movs	r4, #4
 800665a:	e750      	b.n	80064fe <HAL_GPIO_Init+0x62>
  }
}
 800665c:	b003      	add	sp, #12
 800665e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006660:	40010000 	.word	0x40010000
 8006664:	40010400 	.word	0x40010400
 8006668:	40021000 	.word	0x40021000
 800666c:	48000400 	.word	0x48000400

08006670 <HAL_GPIO_DeInit>:
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00U;
 8006670:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8006672:	fa31 f203 	lsrs.w	r2, r1, r3
 8006676:	f000 8081 	beq.w	800677c <HAL_GPIO_DeInit+0x10c>
{
 800667a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800667c:	e02e      	b.n	80066dc <HAL_GPIO_DeInit+0x6c>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800667e:	2505      	movs	r5, #5
 8006680:	e000      	b.n	8006684 <HAL_GPIO_DeInit+0x14>
 8006682:	2500      	movs	r5, #0
 8006684:	fa05 f50c 	lsl.w	r5, r5, ip
 8006688:	42a5      	cmp	r5, r4
 800668a:	d05b      	beq.n	8006744 <HAL_GPIO_DeInit+0xd4>
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800668c:	6804      	ldr	r4, [r0, #0]
 800668e:	005d      	lsls	r5, r3, #1
 8006690:	f04f 0c03 	mov.w	ip, #3
 8006694:	fa0c fc05 	lsl.w	ip, ip, r5
 8006698:	ea44 040c 	orr.w	r4, r4, ip
 800669c:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 800669e:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 80066a2:	f10e 0e08 	add.w	lr, lr, #8
 80066a6:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 80066aa:	f003 0607 	and.w	r6, r3, #7
 80066ae:	00b6      	lsls	r6, r6, #2
 80066b0:	250f      	movs	r5, #15
 80066b2:	40b5      	lsls	r5, r6
 80066b4:	ea24 0405 	bic.w	r4, r4, r5
 80066b8:	f840 402e 	str.w	r4, [r0, lr, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80066bc:	68c4      	ldr	r4, [r0, #12]
 80066be:	ea24 040c 	bic.w	r4, r4, ip
 80066c2:	60c4      	str	r4, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 80066c4:	6844      	ldr	r4, [r0, #4]
 80066c6:	ea24 0202 	bic.w	r2, r4, r2
 80066ca:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80066cc:	6882      	ldr	r2, [r0, #8]
 80066ce:	ea22 020c 	bic.w	r2, r2, ip
 80066d2:	6082      	str	r2, [r0, #8]
    }

    position++;
 80066d4:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0U)
 80066d6:	fa31 f203 	lsrs.w	r2, r1, r3
 80066da:	d04e      	beq.n	800677a <HAL_GPIO_DeInit+0x10a>
    iocurrent = (GPIO_Pin) & (1UL << position);
 80066dc:	2201      	movs	r2, #1
 80066de:	409a      	lsls	r2, r3
    if (iocurrent != 0x00u)
 80066e0:	ea12 0701 	ands.w	r7, r2, r1
 80066e4:	d0f6      	beq.n	80066d4 <HAL_GPIO_DeInit+0x64>
      tmp = SYSCFG->EXTICR[position >> 2U];
 80066e6:	ea4f 0e93 	mov.w	lr, r3, lsr #2
 80066ea:	f10e 0502 	add.w	r5, lr, #2
 80066ee:	4c24      	ldr	r4, [pc, #144]	@ (8006780 <HAL_GPIO_DeInit+0x110>)
 80066f0:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80066f4:	f003 0c03 	and.w	ip, r3, #3
 80066f8:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80066fc:	250f      	movs	r5, #15
 80066fe:	fa05 f60c 	lsl.w	r6, r5, ip
 8006702:	4034      	ands	r4, r6
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8006704:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
 8006708:	d0bb      	beq.n	8006682 <HAL_GPIO_DeInit+0x12>
 800670a:	4d1e      	ldr	r5, [pc, #120]	@ (8006784 <HAL_GPIO_DeInit+0x114>)
 800670c:	42a8      	cmp	r0, r5
 800670e:	d011      	beq.n	8006734 <HAL_GPIO_DeInit+0xc4>
 8006710:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006714:	42a8      	cmp	r0, r5
 8006716:	d00f      	beq.n	8006738 <HAL_GPIO_DeInit+0xc8>
 8006718:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800671c:	42a8      	cmp	r0, r5
 800671e:	d00d      	beq.n	800673c <HAL_GPIO_DeInit+0xcc>
 8006720:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006724:	42a8      	cmp	r0, r5
 8006726:	d00b      	beq.n	8006740 <HAL_GPIO_DeInit+0xd0>
 8006728:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800672c:	42a8      	cmp	r0, r5
 800672e:	d0a6      	beq.n	800667e <HAL_GPIO_DeInit+0xe>
 8006730:	2506      	movs	r5, #6
 8006732:	e7a7      	b.n	8006684 <HAL_GPIO_DeInit+0x14>
 8006734:	2501      	movs	r5, #1
 8006736:	e7a5      	b.n	8006684 <HAL_GPIO_DeInit+0x14>
 8006738:	2502      	movs	r5, #2
 800673a:	e7a3      	b.n	8006684 <HAL_GPIO_DeInit+0x14>
 800673c:	2503      	movs	r5, #3
 800673e:	e7a1      	b.n	8006684 <HAL_GPIO_DeInit+0x14>
 8006740:	2504      	movs	r5, #4
 8006742:	e79f      	b.n	8006684 <HAL_GPIO_DeInit+0x14>
        EXTI->IMR1 &= ~(iocurrent);
 8006744:	4c10      	ldr	r4, [pc, #64]	@ (8006788 <HAL_GPIO_DeInit+0x118>)
 8006746:	6825      	ldr	r5, [r4, #0]
 8006748:	ea25 0507 	bic.w	r5, r5, r7
 800674c:	6025      	str	r5, [r4, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800674e:	6865      	ldr	r5, [r4, #4]
 8006750:	ea25 0507 	bic.w	r5, r5, r7
 8006754:	6065      	str	r5, [r4, #4]
        EXTI->FTSR1 &= ~(iocurrent);
 8006756:	68e5      	ldr	r5, [r4, #12]
 8006758:	ea25 0507 	bic.w	r5, r5, r7
 800675c:	60e5      	str	r5, [r4, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 800675e:	68a5      	ldr	r5, [r4, #8]
 8006760:	ea25 0507 	bic.w	r5, r5, r7
 8006764:	60a5      	str	r5, [r4, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8006766:	4f06      	ldr	r7, [pc, #24]	@ (8006780 <HAL_GPIO_DeInit+0x110>)
 8006768:	f10e 0402 	add.w	r4, lr, #2
 800676c:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8006770:	ea25 0506 	bic.w	r5, r5, r6
 8006774:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
 8006778:	e788      	b.n	800668c <HAL_GPIO_DeInit+0x1c>
  }
}
 800677a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800677c:	4770      	bx	lr
 800677e:	bf00      	nop
 8006780:	40010000 	.word	0x40010000
 8006784:	48000400 	.word	0x48000400
 8006788:	40010400 	.word	0x40010400

0800678c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800678c:	b10a      	cbz	r2, 8006792 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800678e:	6181      	str	r1, [r0, #24]
 8006790:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006792:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 8006794:	4770      	bx	lr

08006796 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006796:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006798:	ea01 0203 	and.w	r2, r1, r3
 800679c:	ea21 0103 	bic.w	r1, r1, r3
 80067a0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80067a4:	6181      	str	r1, [r0, #24]
}
 80067a6:	4770      	bx	lr

080067a8 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80067a8:	6803      	ldr	r3, [r0, #0]
 80067aa:	699a      	ldr	r2, [r3, #24]
 80067ac:	f012 0f02 	tst.w	r2, #2
 80067b0:	d001      	beq.n	80067b6 <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 80067b2:	2200      	movs	r2, #0
 80067b4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80067b6:	6803      	ldr	r3, [r0, #0]
 80067b8:	699a      	ldr	r2, [r3, #24]
 80067ba:	f012 0f01 	tst.w	r2, #1
 80067be:	d103      	bne.n	80067c8 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80067c0:	699a      	ldr	r2, [r3, #24]
 80067c2:	f042 0201 	orr.w	r2, r2, #1
 80067c6:	619a      	str	r2, [r3, #24]
  }
}
 80067c8:	4770      	bx	lr

080067ca <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80067ca:	b410      	push	{r4}
 80067cc:	9c01      	ldr	r4, [sp, #4]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80067ce:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80067d2:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80067d6:	4319      	orrs	r1, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80067d8:	4321      	orrs	r1, r4
 80067da:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80067de:	6802      	ldr	r2, [r0, #0]
 80067e0:	6853      	ldr	r3, [r2, #4]
 80067e2:	0d64      	lsrs	r4, r4, #21
 80067e4:	f404 6480 	and.w	r4, r4, #1024	@ 0x400
 80067e8:	f044 747f 	orr.w	r4, r4, #66846720	@ 0x3fc0000
 80067ec:	f444 3458 	orr.w	r4, r4, #221184	@ 0x36000
 80067f0:	f444 747f 	orr.w	r4, r4, #1020	@ 0x3fc
 80067f4:	f044 0403 	orr.w	r4, r4, #3
 80067f8:	ea23 0304 	bic.w	r3, r3, r4
 80067fc:	430b      	orrs	r3, r1
 80067fe:	6053      	str	r3, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006800:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006804:	4770      	bx	lr

08006806 <I2C_IsErrorOccurred>:
{
 8006806:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800680a:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 800680c:	6803      	ldr	r3, [r0, #0]
 800680e:	699e      	ldr	r6, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006810:	f016 0610 	ands.w	r6, r6, #16
 8006814:	d07c      	beq.n	8006910 <I2C_IsErrorOccurred+0x10a>
 8006816:	460d      	mov	r5, r1
 8006818:	4690      	mov	r8, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800681a:	2210      	movs	r2, #16
 800681c:	61da      	str	r2, [r3, #28]
  uint32_t error_code = 0;
 800681e:	2600      	movs	r6, #0
  HAL_StatusTypeDef status = HAL_OK;
 8006820:	4637      	mov	r7, r6
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006822:	6823      	ldr	r3, [r4, #0]
 8006824:	6998      	ldr	r0, [r3, #24]
 8006826:	f010 0f20 	tst.w	r0, #32
 800682a:	d130      	bne.n	800688e <I2C_IsErrorOccurred+0x88>
 800682c:	bb7f      	cbnz	r7, 800688e <I2C_IsErrorOccurred+0x88>
      if (Timeout != HAL_MAX_DELAY)
 800682e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8006832:	d0f6      	beq.n	8006822 <I2C_IsErrorOccurred+0x1c>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006834:	f7fe f958 	bl	8004ae8 <HAL_GetTick>
 8006838:	eba0 0008 	sub.w	r0, r0, r8
 800683c:	42a8      	cmp	r0, r5
 800683e:	d801      	bhi.n	8006844 <I2C_IsErrorOccurred+0x3e>
 8006840:	2d00      	cmp	r5, #0
 8006842:	d1ee      	bne.n	8006822 <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006844:	6821      	ldr	r1, [r4, #0]
 8006846:	684b      	ldr	r3, [r1, #4]
 8006848:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          tmp2 = hi2c->Mode;
 800684c:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
 8006850:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006852:	6988      	ldr	r0, [r1, #24]
 8006854:	f410 4f00 	tst.w	r0, #32768	@ 0x8000
 8006858:	d002      	beq.n	8006860 <I2C_IsErrorOccurred+0x5a>
 800685a:	b90b      	cbnz	r3, 8006860 <I2C_IsErrorOccurred+0x5a>
              (tmp1 != I2C_CR2_STOP) && \
 800685c:	2a20      	cmp	r2, #32
 800685e:	d10e      	bne.n	800687e <I2C_IsErrorOccurred+0x78>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006860:	6823      	ldr	r3, [r4, #0]
 8006862:	699b      	ldr	r3, [r3, #24]
 8006864:	f013 0f20 	tst.w	r3, #32
 8006868:	d1db      	bne.n	8006822 <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800686a:	f7fe f93d 	bl	8004ae8 <HAL_GetTick>
 800686e:	eba0 0008 	sub.w	r0, r0, r8
 8006872:	2819      	cmp	r0, #25
 8006874:	d9f4      	bls.n	8006860 <I2C_IsErrorOccurred+0x5a>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006876:	f046 0620 	orr.w	r6, r6, #32
              status = HAL_ERROR;
 800687a:	2701      	movs	r7, #1
              break;
 800687c:	e7d1      	b.n	8006822 <I2C_IsErrorOccurred+0x1c>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800687e:	684b      	ldr	r3, [r1, #4]
 8006880:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006884:	604b      	str	r3, [r1, #4]
            tickstart = HAL_GetTick();
 8006886:	f7fe f92f 	bl	8004ae8 <HAL_GetTick>
 800688a:	4680      	mov	r8, r0
 800688c:	e7e8      	b.n	8006860 <I2C_IsErrorOccurred+0x5a>
    if (status == HAL_OK)
 800688e:	b90f      	cbnz	r7, 8006894 <I2C_IsErrorOccurred+0x8e>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006890:	2220      	movs	r2, #32
 8006892:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 8006894:	f046 0604 	orr.w	r6, r6, #4
    status = HAL_ERROR;
 8006898:	2501      	movs	r5, #1
  itflag = hi2c->Instance->ISR;
 800689a:	6822      	ldr	r2, [r4, #0]
 800689c:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800689e:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80068a2:	d005      	beq.n	80068b0 <I2C_IsErrorOccurred+0xaa>
    error_code |= HAL_I2C_ERROR_BERR;
 80068a4:	f046 0601 	orr.w	r6, r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80068a8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80068ac:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 80068ae:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80068b0:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 80068b4:	d006      	beq.n	80068c4 <I2C_IsErrorOccurred+0xbe>
    error_code |= HAL_I2C_ERROR_OVR;
 80068b6:	f046 0608 	orr.w	r6, r6, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80068ba:	6822      	ldr	r2, [r4, #0]
 80068bc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80068c0:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 80068c2:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80068c4:	f413 7f00 	tst.w	r3, #512	@ 0x200
 80068c8:	d024      	beq.n	8006914 <I2C_IsErrorOccurred+0x10e>
    error_code |= HAL_I2C_ERROR_ARLO;
 80068ca:	f046 0602 	orr.w	r6, r6, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80068ce:	6823      	ldr	r3, [r4, #0]
 80068d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80068d4:	61da      	str	r2, [r3, #28]
    status = HAL_ERROR;
 80068d6:	2501      	movs	r5, #1
    I2C_Flush_TXDR(hi2c);
 80068d8:	4620      	mov	r0, r4
 80068da:	f7ff ff65 	bl	80067a8 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80068de:	6822      	ldr	r2, [r4, #0]
 80068e0:	6853      	ldr	r3, [r2, #4]
 80068e2:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 80068e6:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 80068ea:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 80068ee:	f023 0301 	bic.w	r3, r3, #1
 80068f2:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 80068f4:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80068f6:	4333      	orrs	r3, r6
 80068f8:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80068fa:	2320      	movs	r3, #32
 80068fc:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006900:	2300      	movs	r3, #0
 8006902:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 8006906:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800690a:	4628      	mov	r0, r5
 800690c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8006910:	2500      	movs	r5, #0
 8006912:	e7c2      	b.n	800689a <I2C_IsErrorOccurred+0x94>
  if (status != HAL_OK)
 8006914:	2d00      	cmp	r5, #0
 8006916:	d0f8      	beq.n	800690a <I2C_IsErrorOccurred+0x104>
 8006918:	e7de      	b.n	80068d8 <I2C_IsErrorOccurred+0xd2>

0800691a <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800691a:	b570      	push	{r4, r5, r6, lr}
 800691c:	4604      	mov	r4, r0
 800691e:	460d      	mov	r5, r1
 8006920:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006922:	6823      	ldr	r3, [r4, #0]
 8006924:	699b      	ldr	r3, [r3, #24]
 8006926:	f013 0f02 	tst.w	r3, #2
 800692a:	d122      	bne.n	8006972 <I2C_WaitOnTXISFlagUntilTimeout+0x58>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800692c:	4632      	mov	r2, r6
 800692e:	4629      	mov	r1, r5
 8006930:	4620      	mov	r0, r4
 8006932:	f7ff ff68 	bl	8006806 <I2C_IsErrorOccurred>
 8006936:	b9f0      	cbnz	r0, 8006976 <I2C_WaitOnTXISFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 8006938:	f1b5 3fff 	cmp.w	r5, #4294967295
 800693c:	d0f1      	beq.n	8006922 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800693e:	f7fe f8d3 	bl	8004ae8 <HAL_GetTick>
 8006942:	1b80      	subs	r0, r0, r6
 8006944:	42a8      	cmp	r0, r5
 8006946:	d801      	bhi.n	800694c <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8006948:	2d00      	cmp	r5, #0
 800694a:	d1ea      	bne.n	8006922 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800694c:	6823      	ldr	r3, [r4, #0]
 800694e:	699b      	ldr	r3, [r3, #24]
 8006950:	f013 0f02 	tst.w	r3, #2
 8006954:	d1e5      	bne.n	8006922 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006956:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8006958:	f043 0320 	orr.w	r3, r3, #32
 800695c:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800695e:	2320      	movs	r3, #32
 8006960:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006964:	2300      	movs	r3, #0
 8006966:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
 800696a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
          return HAL_ERROR;
 800696e:	2001      	movs	r0, #1
 8006970:	e000      	b.n	8006974 <I2C_WaitOnTXISFlagUntilTimeout+0x5a>
  return HAL_OK;
 8006972:	2000      	movs	r0, #0
}
 8006974:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8006976:	2001      	movs	r0, #1
 8006978:	e7fc      	b.n	8006974 <I2C_WaitOnTXISFlagUntilTimeout+0x5a>

0800697a <I2C_WaitOnFlagUntilTimeout>:
{
 800697a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800697e:	4605      	mov	r5, r0
 8006980:	4688      	mov	r8, r1
 8006982:	4617      	mov	r7, r2
 8006984:	461e      	mov	r6, r3
 8006986:	f8dd 9020 	ldr.w	r9, [sp, #32]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800698a:	682b      	ldr	r3, [r5, #0]
 800698c:	699c      	ldr	r4, [r3, #24]
 800698e:	ea38 0404 	bics.w	r4, r8, r4
 8006992:	bf0c      	ite	eq
 8006994:	2301      	moveq	r3, #1
 8006996:	2300      	movne	r3, #0
 8006998:	42bb      	cmp	r3, r7
 800699a:	d127      	bne.n	80069ec <I2C_WaitOnFlagUntilTimeout+0x72>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800699c:	464a      	mov	r2, r9
 800699e:	4631      	mov	r1, r6
 80069a0:	4628      	mov	r0, r5
 80069a2:	f7ff ff30 	bl	8006806 <I2C_IsErrorOccurred>
 80069a6:	bb20      	cbnz	r0, 80069f2 <I2C_WaitOnFlagUntilTimeout+0x78>
    if (Timeout != HAL_MAX_DELAY)
 80069a8:	f1b6 3fff 	cmp.w	r6, #4294967295
 80069ac:	d0ed      	beq.n	800698a <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069ae:	f7fe f89b 	bl	8004ae8 <HAL_GetTick>
 80069b2:	eba0 0009 	sub.w	r0, r0, r9
 80069b6:	42b0      	cmp	r0, r6
 80069b8:	d801      	bhi.n	80069be <I2C_WaitOnFlagUntilTimeout+0x44>
 80069ba:	2e00      	cmp	r6, #0
 80069bc:	d1e5      	bne.n	800698a <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80069be:	682b      	ldr	r3, [r5, #0]
 80069c0:	699b      	ldr	r3, [r3, #24]
 80069c2:	ea38 0303 	bics.w	r3, r8, r3
 80069c6:	bf0c      	ite	eq
 80069c8:	2301      	moveq	r3, #1
 80069ca:	2300      	movne	r3, #0
 80069cc:	42bb      	cmp	r3, r7
 80069ce:	d1dc      	bne.n	800698a <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80069d0:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 80069d2:	f043 0320 	orr.w	r3, r3, #32
 80069d6:	646b      	str	r3, [r5, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80069d8:	2320      	movs	r3, #32
 80069da:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80069de:	2300      	movs	r3, #0
 80069e0:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
 80069e4:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
          return HAL_ERROR;
 80069e8:	2001      	movs	r0, #1
 80069ea:	e000      	b.n	80069ee <I2C_WaitOnFlagUntilTimeout+0x74>
  return HAL_OK;
 80069ec:	2000      	movs	r0, #0
}
 80069ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return HAL_ERROR;
 80069f2:	2001      	movs	r0, #1
 80069f4:	e7fb      	b.n	80069ee <I2C_WaitOnFlagUntilTimeout+0x74>
	...

080069f8 <I2C_RequestMemoryWrite>:
{
 80069f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069fc:	b082      	sub	sp, #8
 80069fe:	4604      	mov	r4, r0
 8006a00:	4690      	mov	r8, r2
 8006a02:	461d      	mov	r5, r3
 8006a04:	9e08      	ldr	r6, [sp, #32]
 8006a06:	9f09      	ldr	r7, [sp, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006a08:	4b19      	ldr	r3, [pc, #100]	@ (8006a70 <I2C_RequestMemoryWrite+0x78>)
 8006a0a:	9300      	str	r3, [sp, #0]
 8006a0c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006a10:	b2ea      	uxtb	r2, r5
 8006a12:	f7ff feda 	bl	80067ca <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a16:	463a      	mov	r2, r7
 8006a18:	4631      	mov	r1, r6
 8006a1a:	4620      	mov	r0, r4
 8006a1c:	f7ff ff7d 	bl	800691a <I2C_WaitOnTXISFlagUntilTimeout>
 8006a20:	b9f8      	cbnz	r0, 8006a62 <I2C_RequestMemoryWrite+0x6a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006a22:	2d01      	cmp	r5, #1
 8006a24:	d10e      	bne.n	8006a44 <I2C_RequestMemoryWrite+0x4c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006a26:	6823      	ldr	r3, [r4, #0]
 8006a28:	fa5f f288 	uxtb.w	r2, r8
 8006a2c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006a2e:	9700      	str	r7, [sp, #0]
 8006a30:	4633      	mov	r3, r6
 8006a32:	2200      	movs	r2, #0
 8006a34:	2180      	movs	r1, #128	@ 0x80
 8006a36:	4620      	mov	r0, r4
 8006a38:	f7ff ff9f 	bl	800697a <I2C_WaitOnFlagUntilTimeout>
 8006a3c:	b9a8      	cbnz	r0, 8006a6a <I2C_RequestMemoryWrite+0x72>
}
 8006a3e:	b002      	add	sp, #8
 8006a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006a44:	6823      	ldr	r3, [r4, #0]
 8006a46:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8006a4a:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a4c:	463a      	mov	r2, r7
 8006a4e:	4631      	mov	r1, r6
 8006a50:	4620      	mov	r0, r4
 8006a52:	f7ff ff62 	bl	800691a <I2C_WaitOnTXISFlagUntilTimeout>
 8006a56:	b930      	cbnz	r0, 8006a66 <I2C_RequestMemoryWrite+0x6e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006a58:	6823      	ldr	r3, [r4, #0]
 8006a5a:	fa5f f288 	uxtb.w	r2, r8
 8006a5e:	629a      	str	r2, [r3, #40]	@ 0x28
 8006a60:	e7e5      	b.n	8006a2e <I2C_RequestMemoryWrite+0x36>
    return HAL_ERROR;
 8006a62:	2001      	movs	r0, #1
 8006a64:	e7eb      	b.n	8006a3e <I2C_RequestMemoryWrite+0x46>
      return HAL_ERROR;
 8006a66:	2001      	movs	r0, #1
 8006a68:	e7e9      	b.n	8006a3e <I2C_RequestMemoryWrite+0x46>
    return HAL_ERROR;
 8006a6a:	2001      	movs	r0, #1
 8006a6c:	e7e7      	b.n	8006a3e <I2C_RequestMemoryWrite+0x46>
 8006a6e:	bf00      	nop
 8006a70:	80002000 	.word	0x80002000

08006a74 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8006a74:	b570      	push	{r4, r5, r6, lr}
 8006a76:	4604      	mov	r4, r0
 8006a78:	460d      	mov	r5, r1
 8006a7a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a7c:	e004      	b.n	8006a88 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006a7e:	6823      	ldr	r3, [r4, #0]
 8006a80:	699b      	ldr	r3, [r3, #24]
 8006a82:	f013 0f20 	tst.w	r3, #32
 8006a86:	d012      	beq.n	8006aae <I2C_WaitOnSTOPFlagUntilTimeout+0x3a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a88:	6823      	ldr	r3, [r4, #0]
 8006a8a:	699b      	ldr	r3, [r3, #24]
 8006a8c:	f013 0f20 	tst.w	r3, #32
 8006a90:	d11b      	bne.n	8006aca <I2C_WaitOnSTOPFlagUntilTimeout+0x56>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a92:	4632      	mov	r2, r6
 8006a94:	4629      	mov	r1, r5
 8006a96:	4620      	mov	r0, r4
 8006a98:	f7ff feb5 	bl	8006806 <I2C_IsErrorOccurred>
 8006a9c:	b9b8      	cbnz	r0, 8006ace <I2C_WaitOnSTOPFlagUntilTimeout+0x5a>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a9e:	f7fe f823 	bl	8004ae8 <HAL_GetTick>
 8006aa2:	1b80      	subs	r0, r0, r6
 8006aa4:	42a8      	cmp	r0, r5
 8006aa6:	d8ea      	bhi.n	8006a7e <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
 8006aa8:	2d00      	cmp	r5, #0
 8006aaa:	d1ed      	bne.n	8006a88 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
 8006aac:	e7e7      	b.n	8006a7e <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006aae:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8006ab0:	f043 0320 	orr.w	r3, r3, #32
 8006ab4:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006ab6:	2320      	movs	r3, #32
 8006ab8:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006abc:	2300      	movs	r3, #0
 8006abe:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        __HAL_UNLOCK(hi2c);
 8006ac2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        return HAL_ERROR;
 8006ac6:	2001      	movs	r0, #1
 8006ac8:	e000      	b.n	8006acc <I2C_WaitOnSTOPFlagUntilTimeout+0x58>
  return HAL_OK;
 8006aca:	2000      	movs	r0, #0
}
 8006acc:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8006ace:	2001      	movs	r0, #1
 8006ad0:	e7fc      	b.n	8006acc <I2C_WaitOnSTOPFlagUntilTimeout+0x58>

08006ad2 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8006ad2:	2800      	cmp	r0, #0
 8006ad4:	d05f      	beq.n	8006b96 <HAL_I2C_Init+0xc4>
{
 8006ad6:	b510      	push	{r4, lr}
 8006ad8:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006ada:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d048      	beq.n	8006b74 <HAL_I2C_Init+0xa2>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8006ae2:	2324      	movs	r3, #36	@ 0x24
 8006ae4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 8006ae8:	6822      	ldr	r2, [r4, #0]
 8006aea:	6813      	ldr	r3, [r2, #0]
 8006aec:	f023 0301 	bic.w	r3, r3, #1
 8006af0:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006af2:	6863      	ldr	r3, [r4, #4]
 8006af4:	6822      	ldr	r2, [r4, #0]
 8006af6:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8006afa:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006afc:	6822      	ldr	r2, [r4, #0]
 8006afe:	6893      	ldr	r3, [r2, #8]
 8006b00:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006b04:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006b06:	68e3      	ldr	r3, [r4, #12]
 8006b08:	2b01      	cmp	r3, #1
 8006b0a:	d038      	beq.n	8006b7e <HAL_I2C_Init+0xac>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006b0c:	68a3      	ldr	r3, [r4, #8]
 8006b0e:	6822      	ldr	r2, [r4, #0]
 8006b10:	f443 4304 	orr.w	r3, r3, #33792	@ 0x8400
 8006b14:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006b16:	68e3      	ldr	r3, [r4, #12]
 8006b18:	2b02      	cmp	r3, #2
 8006b1a:	d036      	beq.n	8006b8a <HAL_I2C_Init+0xb8>
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006b1c:	6822      	ldr	r2, [r4, #0]
 8006b1e:	6853      	ldr	r3, [r2, #4]
 8006b20:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006b24:	6053      	str	r3, [r2, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006b26:	6822      	ldr	r2, [r4, #0]
 8006b28:	6853      	ldr	r3, [r2, #4]
 8006b2a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006b2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b32:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006b34:	6822      	ldr	r2, [r4, #0]
 8006b36:	68d3      	ldr	r3, [r2, #12]
 8006b38:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006b3c:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006b3e:	6923      	ldr	r3, [r4, #16]
 8006b40:	6962      	ldr	r2, [r4, #20]
 8006b42:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006b44:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006b46:	6822      	ldr	r2, [r4, #0]
 8006b48:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006b4c:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006b4e:	69e3      	ldr	r3, [r4, #28]
 8006b50:	6a21      	ldr	r1, [r4, #32]
 8006b52:	6822      	ldr	r2, [r4, #0]
 8006b54:	430b      	orrs	r3, r1
 8006b56:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8006b58:	6822      	ldr	r2, [r4, #0]
 8006b5a:	6813      	ldr	r3, [r2, #0]
 8006b5c:	f043 0301 	orr.w	r3, r3, #1
 8006b60:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b62:	2000      	movs	r0, #0
 8006b64:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006b66:	2320      	movs	r3, #32
 8006b68:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006b6c:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b6e:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 8006b72:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8006b74:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 8006b78:	f7fd fa52 	bl	8004020 <HAL_I2C_MspInit>
 8006b7c:	e7b1      	b.n	8006ae2 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006b7e:	68a3      	ldr	r3, [r4, #8]
 8006b80:	6822      	ldr	r2, [r4, #0]
 8006b82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b86:	6093      	str	r3, [r2, #8]
 8006b88:	e7c5      	b.n	8006b16 <HAL_I2C_Init+0x44>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006b8a:	6822      	ldr	r2, [r4, #0]
 8006b8c:	6853      	ldr	r3, [r2, #4]
 8006b8e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8006b92:	6053      	str	r3, [r2, #4]
 8006b94:	e7c7      	b.n	8006b26 <HAL_I2C_Init+0x54>
    return HAL_ERROR;
 8006b96:	2001      	movs	r0, #1
}
 8006b98:	4770      	bx	lr

08006b9a <HAL_I2C_Mem_Write>:
{
 8006b9a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b9e:	b083      	sub	sp, #12
 8006ba0:	460e      	mov	r6, r1
 8006ba2:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 8006ba6:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ba8:	f890 1041 	ldrb.w	r1, [r0, #65]	@ 0x41
 8006bac:	b2c9      	uxtb	r1, r1
 8006bae:	2920      	cmp	r1, #32
 8006bb0:	f040 80bb 	bne.w	8006d2a <HAL_I2C_Mem_Write+0x190>
 8006bb4:	4604      	mov	r4, r0
 8006bb6:	4690      	mov	r8, r2
 8006bb8:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 8006bba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006bbc:	b1cb      	cbz	r3, 8006bf2 <HAL_I2C_Mem_Write+0x58>
 8006bbe:	f1ba 0f00 	cmp.w	sl, #0
 8006bc2:	d016      	beq.n	8006bf2 <HAL_I2C_Mem_Write+0x58>
    __HAL_LOCK(hi2c);
 8006bc4:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	f000 80b2 	beq.w	8006d32 <HAL_I2C_Mem_Write+0x198>
 8006bce:	f04f 0b01 	mov.w	fp, #1
 8006bd2:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 8006bd6:	f7fd ff87 	bl	8004ae8 <HAL_GetTick>
 8006bda:	4607      	mov	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006bdc:	9000      	str	r0, [sp, #0]
 8006bde:	2319      	movs	r3, #25
 8006be0:	465a      	mov	r2, fp
 8006be2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006be6:	4620      	mov	r0, r4
 8006be8:	f7ff fec7 	bl	800697a <I2C_WaitOnFlagUntilTimeout>
 8006bec:	b130      	cbz	r0, 8006bfc <HAL_I2C_Mem_Write+0x62>
      return HAL_ERROR;
 8006bee:	2001      	movs	r0, #1
 8006bf0:	e09c      	b.n	8006d2c <HAL_I2C_Mem_Write+0x192>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006bf2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006bf6:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 8006bf8:	2001      	movs	r0, #1
 8006bfa:	e097      	b.n	8006d2c <HAL_I2C_Mem_Write+0x192>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006bfc:	2321      	movs	r3, #33	@ 0x21
 8006bfe:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006c02:	2340      	movs	r3, #64	@ 0x40
 8006c04:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
 8006c0c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006c0e:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006c10:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006c14:	6363      	str	r3, [r4, #52]	@ 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006c16:	9701      	str	r7, [sp, #4]
 8006c18:	9500      	str	r5, [sp, #0]
 8006c1a:	464b      	mov	r3, r9
 8006c1c:	4642      	mov	r2, r8
 8006c1e:	4631      	mov	r1, r6
 8006c20:	4620      	mov	r0, r4
 8006c22:	f7ff fee9 	bl	80069f8 <I2C_RequestMemoryWrite>
 8006c26:	b970      	cbnz	r0, 8006c46 <HAL_I2C_Mem_Write+0xac>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006c28:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8006c2a:	b29b      	uxth	r3, r3
 8006c2c:	2bff      	cmp	r3, #255	@ 0xff
 8006c2e:	d90f      	bls.n	8006c50 <HAL_I2C_Mem_Write+0xb6>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006c30:	22ff      	movs	r2, #255	@ 0xff
 8006c32:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006c34:	2300      	movs	r3, #0
 8006c36:	9300      	str	r3, [sp, #0]
 8006c38:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006c3c:	4631      	mov	r1, r6
 8006c3e:	4620      	mov	r0, r4
 8006c40:	f7ff fdc3 	bl	80067ca <I2C_TransferConfig>
 8006c44:	e021      	b.n	8006c8a <HAL_I2C_Mem_Write+0xf0>
      __HAL_UNLOCK(hi2c);
 8006c46:	2300      	movs	r3, #0
 8006c48:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8006c4c:	4658      	mov	r0, fp
 8006c4e:	e06d      	b.n	8006d2c <HAL_I2C_Mem_Write+0x192>
      hi2c->XferSize = hi2c->XferCount;
 8006c50:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8006c52:	b292      	uxth	r2, r2
 8006c54:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006c56:	2300      	movs	r3, #0
 8006c58:	9300      	str	r3, [sp, #0]
 8006c5a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006c5e:	b2d2      	uxtb	r2, r2
 8006c60:	4631      	mov	r1, r6
 8006c62:	4620      	mov	r0, r4
 8006c64:	f7ff fdb1 	bl	80067ca <I2C_TransferConfig>
 8006c68:	e00f      	b.n	8006c8a <HAL_I2C_Mem_Write+0xf0>
          hi2c->XferSize = hi2c->XferCount;
 8006c6a:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8006c6c:	b292      	uxth	r2, r2
 8006c6e:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006c70:	2300      	movs	r3, #0
 8006c72:	9300      	str	r3, [sp, #0]
 8006c74:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006c78:	b2d2      	uxtb	r2, r2
 8006c7a:	4631      	mov	r1, r6
 8006c7c:	4620      	mov	r0, r4
 8006c7e:	f7ff fda4 	bl	80067ca <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8006c82:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8006c84:	b29b      	uxth	r3, r3
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d033      	beq.n	8006cf2 <HAL_I2C_Mem_Write+0x158>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c8a:	463a      	mov	r2, r7
 8006c8c:	4629      	mov	r1, r5
 8006c8e:	4620      	mov	r0, r4
 8006c90:	f7ff fe43 	bl	800691a <I2C_WaitOnTXISFlagUntilTimeout>
 8006c94:	2800      	cmp	r0, #0
 8006c96:	d14e      	bne.n	8006d36 <HAL_I2C_Mem_Write+0x19c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006c98:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8006c9a:	6823      	ldr	r3, [r4, #0]
 8006c9c:	7812      	ldrb	r2, [r2, #0]
 8006c9e:	629a      	str	r2, [r3, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8006ca0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006ca2:	3301      	adds	r3, #1
 8006ca4:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8006ca6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8006ca8:	b29b      	uxth	r3, r3
 8006caa:	3b01      	subs	r3, #1
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	8563      	strh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8006cb0:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8006cb2:	3b01      	subs	r3, #1
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006cb8:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8006cba:	b292      	uxth	r2, r2
 8006cbc:	2a00      	cmp	r2, #0
 8006cbe:	d0e0      	beq.n	8006c82 <HAL_I2C_Mem_Write+0xe8>
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d1de      	bne.n	8006c82 <HAL_I2C_Mem_Write+0xe8>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006cc4:	9700      	str	r7, [sp, #0]
 8006cc6:	462b      	mov	r3, r5
 8006cc8:	2200      	movs	r2, #0
 8006cca:	2180      	movs	r1, #128	@ 0x80
 8006ccc:	4620      	mov	r0, r4
 8006cce:	f7ff fe54 	bl	800697a <I2C_WaitOnFlagUntilTimeout>
 8006cd2:	bb90      	cbnz	r0, 8006d3a <HAL_I2C_Mem_Write+0x1a0>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006cd4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	2bff      	cmp	r3, #255	@ 0xff
 8006cda:	d9c6      	bls.n	8006c6a <HAL_I2C_Mem_Write+0xd0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006cdc:	22ff      	movs	r2, #255	@ 0xff
 8006cde:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	9300      	str	r3, [sp, #0]
 8006ce4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006ce8:	4631      	mov	r1, r6
 8006cea:	4620      	mov	r0, r4
 8006cec:	f7ff fd6d 	bl	80067ca <I2C_TransferConfig>
 8006cf0:	e7c7      	b.n	8006c82 <HAL_I2C_Mem_Write+0xe8>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006cf2:	463a      	mov	r2, r7
 8006cf4:	4629      	mov	r1, r5
 8006cf6:	4620      	mov	r0, r4
 8006cf8:	f7ff febc 	bl	8006a74 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006cfc:	b9f8      	cbnz	r0, 8006d3e <HAL_I2C_Mem_Write+0x1a4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006cfe:	6823      	ldr	r3, [r4, #0]
 8006d00:	2220      	movs	r2, #32
 8006d02:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8006d04:	6821      	ldr	r1, [r4, #0]
 8006d06:	684b      	ldr	r3, [r1, #4]
 8006d08:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 8006d0c:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 8006d10:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8006d14:	f023 0301 	bic.w	r3, r3, #1
 8006d18:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006d1a:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 8006d24:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    return HAL_OK;
 8006d28:	e000      	b.n	8006d2c <HAL_I2C_Mem_Write+0x192>
    return HAL_BUSY;
 8006d2a:	2002      	movs	r0, #2
}
 8006d2c:	b003      	add	sp, #12
 8006d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8006d32:	2002      	movs	r0, #2
 8006d34:	e7fa      	b.n	8006d2c <HAL_I2C_Mem_Write+0x192>
        return HAL_ERROR;
 8006d36:	2001      	movs	r0, #1
 8006d38:	e7f8      	b.n	8006d2c <HAL_I2C_Mem_Write+0x192>
          return HAL_ERROR;
 8006d3a:	2001      	movs	r0, #1
 8006d3c:	e7f6      	b.n	8006d2c <HAL_I2C_Mem_Write+0x192>
      return HAL_ERROR;
 8006d3e:	2001      	movs	r0, #1
 8006d40:	e7f4      	b.n	8006d2c <HAL_I2C_Mem_Write+0x192>

08006d42 <HAL_I2C_IsDeviceReady>:
{
 8006d42:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006d46:	b085      	sub	sp, #20
 8006d48:	461d      	mov	r5, r3
  __IO uint32_t I2C_Trials = 0UL;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d4e:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8006d52:	b2db      	uxtb	r3, r3
 8006d54:	2b20      	cmp	r3, #32
 8006d56:	f040 8089 	bne.w	8006e6c <HAL_I2C_IsDeviceReady+0x12a>
 8006d5a:	4606      	mov	r6, r0
 8006d5c:	4688      	mov	r8, r1
 8006d5e:	4691      	mov	r9, r2
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8006d60:	6803      	ldr	r3, [r0, #0]
 8006d62:	699b      	ldr	r3, [r3, #24]
 8006d64:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8006d68:	f040 8082 	bne.w	8006e70 <HAL_I2C_IsDeviceReady+0x12e>
    __HAL_LOCK(hi2c);
 8006d6c:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8006d70:	2b01      	cmp	r3, #1
 8006d72:	d07f      	beq.n	8006e74 <HAL_I2C_IsDeviceReady+0x132>
 8006d74:	2301      	movs	r3, #1
 8006d76:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006d7a:	2324      	movs	r3, #36	@ 0x24
 8006d7c:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d80:	2300      	movs	r3, #0
 8006d82:	6443      	str	r3, [r0, #68]	@ 0x44
 8006d84:	e041      	b.n	8006e0a <HAL_I2C_IsDeviceReady+0xc8>
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8006d86:	f3c8 0309 	ubfx	r3, r8, #0, #10
 8006d8a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006d8e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8006d92:	e043      	b.n	8006e1c <HAL_I2C_IsDeviceReady+0xda>
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8006d94:	6833      	ldr	r3, [r6, #0]
 8006d96:	699c      	ldr	r4, [r3, #24]
 8006d98:	f3c4 1440 	ubfx	r4, r4, #5, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006d9c:	699b      	ldr	r3, [r3, #24]
 8006d9e:	f3c3 1300 	ubfx	r3, r3, #4, #1
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8006da2:	b9c4      	cbnz	r4, 8006dd6 <HAL_I2C_IsDeviceReady+0x94>
 8006da4:	b9bb      	cbnz	r3, 8006dd6 <HAL_I2C_IsDeviceReady+0x94>
        if (Timeout != HAL_MAX_DELAY)
 8006da6:	f1b5 3fff 	cmp.w	r5, #4294967295
 8006daa:	d0f3      	beq.n	8006d94 <HAL_I2C_IsDeviceReady+0x52>
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006dac:	f7fd fe9c 	bl	8004ae8 <HAL_GetTick>
 8006db0:	1bc0      	subs	r0, r0, r7
 8006db2:	42a8      	cmp	r0, r5
 8006db4:	d801      	bhi.n	8006dba <HAL_I2C_IsDeviceReady+0x78>
 8006db6:	2d00      	cmp	r5, #0
 8006db8:	d1ec      	bne.n	8006d94 <HAL_I2C_IsDeviceReady+0x52>
            hi2c->State = HAL_I2C_STATE_READY;
 8006dba:	2320      	movs	r3, #32
 8006dbc:	f886 3041 	strb.w	r3, [r6, #65]	@ 0x41
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006dc0:	6c73      	ldr	r3, [r6, #68]	@ 0x44
 8006dc2:	f043 0320 	orr.w	r3, r3, #32
 8006dc6:	6473      	str	r3, [r6, #68]	@ 0x44
            __HAL_UNLOCK(hi2c);
 8006dc8:	2300      	movs	r3, #0
 8006dca:	f886 3040 	strb.w	r3, [r6, #64]	@ 0x40
            return HAL_ERROR;
 8006dce:	2001      	movs	r0, #1
}
 8006dd0:	b005      	add	sp, #20
 8006dd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8006dd6:	6833      	ldr	r3, [r6, #0]
 8006dd8:	699b      	ldr	r3, [r3, #24]
 8006dda:	f013 0f10 	tst.w	r3, #16
 8006dde:	d02a      	beq.n	8006e36 <HAL_I2C_IsDeviceReady+0xf4>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8006de0:	9700      	str	r7, [sp, #0]
 8006de2:	462b      	mov	r3, r5
 8006de4:	2200      	movs	r2, #0
 8006de6:	2120      	movs	r1, #32
 8006de8:	4630      	mov	r0, r6
 8006dea:	f7ff fdc6 	bl	800697a <I2C_WaitOnFlagUntilTimeout>
 8006dee:	2800      	cmp	r0, #0
 8006df0:	d144      	bne.n	8006e7c <HAL_I2C_IsDeviceReady+0x13a>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006df2:	6833      	ldr	r3, [r6, #0]
 8006df4:	2210      	movs	r2, #16
 8006df6:	61da      	str	r2, [r3, #28]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006df8:	6833      	ldr	r3, [r6, #0]
 8006dfa:	2220      	movs	r2, #32
 8006dfc:	61da      	str	r2, [r3, #28]
      I2C_Trials++;
 8006dfe:	9b03      	ldr	r3, [sp, #12]
 8006e00:	3301      	adds	r3, #1
 8006e02:	9303      	str	r3, [sp, #12]
    } while (I2C_Trials < Trials);
 8006e04:	9b03      	ldr	r3, [sp, #12]
 8006e06:	454b      	cmp	r3, r9
 8006e08:	d226      	bcs.n	8006e58 <HAL_I2C_IsDeviceReady+0x116>
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8006e0a:	68f3      	ldr	r3, [r6, #12]
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d0ba      	beq.n	8006d86 <HAL_I2C_IsDeviceReady+0x44>
 8006e10:	f3c8 0309 	ubfx	r3, r8, #0, #10
 8006e14:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006e18:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8006e1c:	6832      	ldr	r2, [r6, #0]
 8006e1e:	6053      	str	r3, [r2, #4]
      tickstart = HAL_GetTick();
 8006e20:	f7fd fe62 	bl	8004ae8 <HAL_GetTick>
 8006e24:	4607      	mov	r7, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8006e26:	6833      	ldr	r3, [r6, #0]
 8006e28:	699c      	ldr	r4, [r3, #24]
 8006e2a:	f3c4 1440 	ubfx	r4, r4, #5, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006e2e:	699b      	ldr	r3, [r3, #24]
 8006e30:	f3c3 1300 	ubfx	r3, r3, #4, #1
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8006e34:	e7b5      	b.n	8006da2 <HAL_I2C_IsDeviceReady+0x60>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8006e36:	9700      	str	r7, [sp, #0]
 8006e38:	462b      	mov	r3, r5
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	2120      	movs	r1, #32
 8006e3e:	4630      	mov	r0, r6
 8006e40:	f7ff fd9b 	bl	800697a <I2C_WaitOnFlagUntilTimeout>
 8006e44:	b9c0      	cbnz	r0, 8006e78 <HAL_I2C_IsDeviceReady+0x136>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006e46:	6832      	ldr	r2, [r6, #0]
 8006e48:	2320      	movs	r3, #32
 8006e4a:	61d3      	str	r3, [r2, #28]
        hi2c->State = HAL_I2C_STATE_READY;
 8006e4c:	f886 3041 	strb.w	r3, [r6, #65]	@ 0x41
        __HAL_UNLOCK(hi2c);
 8006e50:	2300      	movs	r3, #0
 8006e52:	f886 3040 	strb.w	r3, [r6, #64]	@ 0x40
        return HAL_OK;
 8006e56:	e7bb      	b.n	8006dd0 <HAL_I2C_IsDeviceReady+0x8e>
    hi2c->State = HAL_I2C_STATE_READY;
 8006e58:	f886 2041 	strb.w	r2, [r6, #65]	@ 0x41
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006e5c:	6c73      	ldr	r3, [r6, #68]	@ 0x44
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	6473      	str	r3, [r6, #68]	@ 0x44
    __HAL_UNLOCK(hi2c);
 8006e62:	2300      	movs	r3, #0
 8006e64:	f886 3040 	strb.w	r3, [r6, #64]	@ 0x40
    return HAL_ERROR;
 8006e68:	2001      	movs	r0, #1
 8006e6a:	e7b1      	b.n	8006dd0 <HAL_I2C_IsDeviceReady+0x8e>
    return HAL_BUSY;
 8006e6c:	2002      	movs	r0, #2
 8006e6e:	e7af      	b.n	8006dd0 <HAL_I2C_IsDeviceReady+0x8e>
      return HAL_BUSY;
 8006e70:	2002      	movs	r0, #2
 8006e72:	e7ad      	b.n	8006dd0 <HAL_I2C_IsDeviceReady+0x8e>
    __HAL_LOCK(hi2c);
 8006e74:	2002      	movs	r0, #2
 8006e76:	e7ab      	b.n	8006dd0 <HAL_I2C_IsDeviceReady+0x8e>
          return HAL_ERROR;
 8006e78:	2001      	movs	r0, #1
 8006e7a:	e7a9      	b.n	8006dd0 <HAL_I2C_IsDeviceReady+0x8e>
          return HAL_ERROR;
 8006e7c:	2001      	movs	r0, #1
 8006e7e:	e7a7      	b.n	8006dd0 <HAL_I2C_IsDeviceReady+0x8e>

08006e80 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006e80:	4603      	mov	r3, r0
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006e82:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8006e86:	b2d2      	uxtb	r2, r2
 8006e88:	2a20      	cmp	r2, #32
 8006e8a:	d123      	bne.n	8006ed4 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006e8c:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8006e90:	2a01      	cmp	r2, #1
 8006e92:	d021      	beq.n	8006ed8 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8006e94:	2201      	movs	r2, #1
 8006e96:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006e9a:	2224      	movs	r2, #36	@ 0x24
 8006e9c:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006ea0:	6800      	ldr	r0, [r0, #0]
 8006ea2:	6802      	ldr	r2, [r0, #0]
 8006ea4:	f022 0201 	bic.w	r2, r2, #1
 8006ea8:	6002      	str	r2, [r0, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006eaa:	6818      	ldr	r0, [r3, #0]
 8006eac:	6802      	ldr	r2, [r0, #0]
 8006eae:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006eb2:	6002      	str	r2, [r0, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006eb4:	6818      	ldr	r0, [r3, #0]
 8006eb6:	6802      	ldr	r2, [r0, #0]
 8006eb8:	4311      	orrs	r1, r2
 8006eba:	6001      	str	r1, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006ebc:	6819      	ldr	r1, [r3, #0]
 8006ebe:	680a      	ldr	r2, [r1, #0]
 8006ec0:	f042 0201 	orr.w	r2, r2, #1
 8006ec4:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006ec6:	2220      	movs	r2, #32
 8006ec8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ecc:	2000      	movs	r0, #0
 8006ece:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40

    return HAL_OK;
 8006ed2:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8006ed4:	2002      	movs	r0, #2
 8006ed6:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8006ed8:	2002      	movs	r0, #2
  }
}
 8006eda:	4770      	bx	lr

08006edc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006edc:	4603      	mov	r3, r0

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ede:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8006ee2:	b2d2      	uxtb	r2, r2
 8006ee4:	2a20      	cmp	r2, #32
 8006ee6:	d121      	bne.n	8006f2c <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ee8:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8006eec:	2a01      	cmp	r2, #1
 8006eee:	d01f      	beq.n	8006f30 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8006ef0:	2201      	movs	r2, #1
 8006ef2:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006ef6:	2224      	movs	r2, #36	@ 0x24
 8006ef8:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006efc:	6800      	ldr	r0, [r0, #0]
 8006efe:	6802      	ldr	r2, [r0, #0]
 8006f00:	f022 0201 	bic.w	r2, r2, #1
 8006f04:	6002      	str	r2, [r0, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006f06:	6818      	ldr	r0, [r3, #0]
 8006f08:	6802      	ldr	r2, [r0, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006f0a:	f422 6270 	bic.w	r2, r2, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006f0e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006f12:	6002      	str	r2, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006f14:	6819      	ldr	r1, [r3, #0]
 8006f16:	680a      	ldr	r2, [r1, #0]
 8006f18:	f042 0201 	orr.w	r2, r2, #1
 8006f1c:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006f1e:	2220      	movs	r2, #32
 8006f20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f24:	2000      	movs	r0, #0
 8006f26:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40

    return HAL_OK;
 8006f2a:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8006f2c:	2002      	movs	r0, #2
 8006f2e:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8006f30:	2002      	movs	r0, #2
  }
}
 8006f32:	4770      	bx	lr

08006f34 <HAL_PWREx_ControlVoltageScaling>:
{
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006f34:	2800      	cmp	r0, #0
 8006f36:	d136      	bne.n	8006fa6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006f38:	4b3e      	ldr	r3, [pc, #248]	@ (8007034 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006f40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f44:	d008      	beq.n	8006f58 <HAL_PWREx_ControlVoltageScaling+0x24>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006f46:	4a3b      	ldr	r2, [pc, #236]	@ (8007034 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8006f48:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
 8006f4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006f50:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006f54:	2000      	movs	r0, #0
 8006f56:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006f58:	4a36      	ldr	r2, [pc, #216]	@ (8007034 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8006f5a:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
 8006f5e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006f62:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006f66:	6813      	ldr	r3, [r2, #0]
 8006f68:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006f6c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006f70:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006f72:	4b31      	ldr	r3, [pc, #196]	@ (8007038 <HAL_PWREx_ControlVoltageScaling+0x104>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	2232      	movs	r2, #50	@ 0x32
 8006f78:	fb02 f303 	mul.w	r3, r2, r3
 8006f7c:	4a2f      	ldr	r2, [pc, #188]	@ (800703c <HAL_PWREx_ControlVoltageScaling+0x108>)
 8006f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8006f82:	0c9b      	lsrs	r3, r3, #18
 8006f84:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006f86:	e000      	b.n	8006f8a <HAL_PWREx_ControlVoltageScaling+0x56>
        wait_loop_index--;
 8006f88:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006f8a:	4a2a      	ldr	r2, [pc, #168]	@ (8007034 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8006f8c:	6952      	ldr	r2, [r2, #20]
 8006f8e:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8006f92:	d001      	beq.n	8006f98 <HAL_PWREx_ControlVoltageScaling+0x64>
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d1f7      	bne.n	8006f88 <HAL_PWREx_ControlVoltageScaling+0x54>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006f98:	4b26      	ldr	r3, [pc, #152]	@ (8007034 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8006f9a:	695b      	ldr	r3, [r3, #20]
 8006f9c:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8006fa0:	d144      	bne.n	800702c <HAL_PWREx_ControlVoltageScaling+0xf8>
  return HAL_OK;
 8006fa2:	2000      	movs	r0, #0
 8006fa4:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006fa6:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8006faa:	d008      	beq.n	8006fbe <HAL_PWREx_ControlVoltageScaling+0x8a>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006fac:	4a21      	ldr	r2, [pc, #132]	@ (8007034 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8006fae:	6813      	ldr	r3, [r2, #0]
 8006fb0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006fb4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006fb8:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8006fba:	2000      	movs	r0, #0
 8006fbc:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006fbe:	4b1d      	ldr	r3, [pc, #116]	@ (8007034 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006fc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006fca:	d008      	beq.n	8006fde <HAL_PWREx_ControlVoltageScaling+0xaa>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006fcc:	4a19      	ldr	r2, [pc, #100]	@ (8007034 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8006fce:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
 8006fd2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006fd6:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  return HAL_OK;
 8006fda:	2000      	movs	r0, #0
 8006fdc:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006fde:	4a15      	ldr	r2, [pc, #84]	@ (8007034 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8006fe0:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
 8006fe4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006fe8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006fec:	6813      	ldr	r3, [r2, #0]
 8006fee:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006ff2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006ff6:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006ff8:	4b0f      	ldr	r3, [pc, #60]	@ (8007038 <HAL_PWREx_ControlVoltageScaling+0x104>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	2232      	movs	r2, #50	@ 0x32
 8006ffe:	fb02 f303 	mul.w	r3, r2, r3
 8007002:	4a0e      	ldr	r2, [pc, #56]	@ (800703c <HAL_PWREx_ControlVoltageScaling+0x108>)
 8007004:	fba2 2303 	umull	r2, r3, r2, r3
 8007008:	0c9b      	lsrs	r3, r3, #18
 800700a:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800700c:	e000      	b.n	8007010 <HAL_PWREx_ControlVoltageScaling+0xdc>
        wait_loop_index--;
 800700e:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007010:	4a08      	ldr	r2, [pc, #32]	@ (8007034 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8007012:	6952      	ldr	r2, [r2, #20]
 8007014:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8007018:	d001      	beq.n	800701e <HAL_PWREx_ControlVoltageScaling+0xea>
 800701a:	2b00      	cmp	r3, #0
 800701c:	d1f7      	bne.n	800700e <HAL_PWREx_ControlVoltageScaling+0xda>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800701e:	4b05      	ldr	r3, [pc, #20]	@ (8007034 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8007020:	695b      	ldr	r3, [r3, #20]
 8007022:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8007026:	d103      	bne.n	8007030 <HAL_PWREx_ControlVoltageScaling+0xfc>
  return HAL_OK;
 8007028:	2000      	movs	r0, #0
 800702a:	4770      	bx	lr
        return HAL_TIMEOUT;
 800702c:	2003      	movs	r0, #3
 800702e:	4770      	bx	lr
        return HAL_TIMEOUT;
 8007030:	2003      	movs	r0, #3
}
 8007032:	4770      	bx	lr
 8007034:	40007000 	.word	0x40007000
 8007038:	20000050 	.word	0x20000050
 800703c:	431bde83 	.word	0x431bde83

08007040 <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8007040:	4a02      	ldr	r2, [pc, #8]	@ (800704c <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 8007042:	6893      	ldr	r3, [r2, #8]
 8007044:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007048:	6093      	str	r3, [r2, #8]
}
 800704a:	4770      	bx	lr
 800704c:	40007000 	.word	0x40007000

08007050 <RCC_GetSysClockFreqFromPLLSource>:
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007050:	4b12      	ldr	r3, [pc, #72]	@ (800709c <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 8007052:	68da      	ldr	r2, [r3, #12]
 8007054:	f002 0203 	and.w	r2, r2, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007058:	68db      	ldr	r3, [r3, #12]
 800705a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800705e:	3301      	adds	r3, #1

  switch (pllsource)
 8007060:	2a03      	cmp	r2, #3
 8007062:	d011      	beq.n	8007088 <RCC_GetSysClockFreqFromPLLSource+0x38>
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007064:	480e      	ldr	r0, [pc, #56]	@ (80070a0 <RCC_GetSysClockFreqFromPLLSource+0x50>)
 8007066:	fbb0 f0f3 	udiv	r0, r0, r3
 800706a:	4b0c      	ldr	r3, [pc, #48]	@ (800709c <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 800706c:	68db      	ldr	r3, [r3, #12]
 800706e:	f3c3 2306 	ubfx	r3, r3, #8, #7
 8007072:	fb03 f000 	mul.w	r0, r3, r0
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007076:	4b09      	ldr	r3, [pc, #36]	@ (800709c <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 8007078:	68db      	ldr	r3, [r3, #12]
 800707a:	f3c3 6341 	ubfx	r3, r3, #25, #2
 800707e:	3301      	adds	r3, #1
 8007080:	005b      	lsls	r3, r3, #1
  sysclockfreq = pllvco/pllr;

  return sysclockfreq;
}
 8007082:	fbb0 f0f3 	udiv	r0, r0, r3
 8007086:	4770      	bx	lr
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007088:	4806      	ldr	r0, [pc, #24]	@ (80070a4 <RCC_GetSysClockFreqFromPLLSource+0x54>)
 800708a:	fbb0 f0f3 	udiv	r0, r0, r3
 800708e:	4b03      	ldr	r3, [pc, #12]	@ (800709c <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 8007090:	68db      	ldr	r3, [r3, #12]
 8007092:	f3c3 2306 	ubfx	r3, r3, #8, #7
 8007096:	fb03 f000 	mul.w	r0, r3, r0
    break;
 800709a:	e7ec      	b.n	8007076 <RCC_GetSysClockFreqFromPLLSource+0x26>
 800709c:	40021000 	.word	0x40021000
 80070a0:	00f42400 	.word	0x00f42400
 80070a4:	00b71b00 	.word	0x00b71b00

080070a8 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 80070a8:	2800      	cmp	r0, #0
 80070aa:	f000 824f 	beq.w	800754c <HAL_RCC_OscConfig+0x4a4>
{
 80070ae:	b570      	push	{r4, r5, r6, lr}
 80070b0:	b082      	sub	sp, #8
 80070b2:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80070b4:	6803      	ldr	r3, [r0, #0]
 80070b6:	f013 0f01 	tst.w	r3, #1
 80070ba:	d037      	beq.n	800712c <HAL_RCC_OscConfig+0x84>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80070bc:	4aa4      	ldr	r2, [pc, #656]	@ (8007350 <HAL_RCC_OscConfig+0x2a8>)
 80070be:	6893      	ldr	r3, [r2, #8]
 80070c0:	f003 030c 	and.w	r3, r3, #12
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80070c4:	68d2      	ldr	r2, [r2, #12]
 80070c6:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80070ca:	2b0c      	cmp	r3, #12
 80070cc:	d023      	beq.n	8007116 <HAL_RCC_OscConfig+0x6e>
 80070ce:	2b08      	cmp	r3, #8
 80070d0:	d023      	beq.n	800711a <HAL_RCC_OscConfig+0x72>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80070d2:	6863      	ldr	r3, [r4, #4]
 80070d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070d8:	d04e      	beq.n	8007178 <HAL_RCC_OscConfig+0xd0>
 80070da:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80070de:	d051      	beq.n	8007184 <HAL_RCC_OscConfig+0xdc>
 80070e0:	4b9b      	ldr	r3, [pc, #620]	@ (8007350 <HAL_RCC_OscConfig+0x2a8>)
 80070e2:	681a      	ldr	r2, [r3, #0]
 80070e4:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80070e8:	601a      	str	r2, [r3, #0]
 80070ea:	681a      	ldr	r2, [r3, #0]
 80070ec:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80070f0:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80070f2:	6863      	ldr	r3, [r4, #4]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d052      	beq.n	800719e <HAL_RCC_OscConfig+0xf6>
        tickstart = HAL_GetTick();
 80070f8:	f7fd fcf6 	bl	8004ae8 <HAL_GetTick>
 80070fc:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80070fe:	4b94      	ldr	r3, [pc, #592]	@ (8007350 <HAL_RCC_OscConfig+0x2a8>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8007106:	d111      	bne.n	800712c <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007108:	f7fd fcee 	bl	8004ae8 <HAL_GetTick>
 800710c:	1b40      	subs	r0, r0, r5
 800710e:	2864      	cmp	r0, #100	@ 0x64
 8007110:	d9f5      	bls.n	80070fe <HAL_RCC_OscConfig+0x56>
            return HAL_TIMEOUT;
 8007112:	2003      	movs	r0, #3
 8007114:	e223      	b.n	800755e <HAL_RCC_OscConfig+0x4b6>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8007116:	2a03      	cmp	r2, #3
 8007118:	d1d9      	bne.n	80070ce <HAL_RCC_OscConfig+0x26>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800711a:	4b8d      	ldr	r3, [pc, #564]	@ (8007350 <HAL_RCC_OscConfig+0x2a8>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8007122:	d003      	beq.n	800712c <HAL_RCC_OscConfig+0x84>
 8007124:	6863      	ldr	r3, [r4, #4]
 8007126:	2b00      	cmp	r3, #0
 8007128:	f000 8212 	beq.w	8007550 <HAL_RCC_OscConfig+0x4a8>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800712c:	6823      	ldr	r3, [r4, #0]
 800712e:	f013 0f02 	tst.w	r3, #2
 8007132:	d05d      	beq.n	80071f0 <HAL_RCC_OscConfig+0x148>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007134:	4a86      	ldr	r2, [pc, #536]	@ (8007350 <HAL_RCC_OscConfig+0x2a8>)
 8007136:	6893      	ldr	r3, [r2, #8]
 8007138:	f003 030c 	and.w	r3, r3, #12
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800713c:	68d2      	ldr	r2, [r2, #12]
 800713e:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007142:	2b0c      	cmp	r3, #12
 8007144:	d03a      	beq.n	80071bc <HAL_RCC_OscConfig+0x114>
 8007146:	2b04      	cmp	r3, #4
 8007148:	d03a      	beq.n	80071c0 <HAL_RCC_OscConfig+0x118>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800714a:	68e3      	ldr	r3, [r4, #12]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d075      	beq.n	800723c <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_ENABLE();
 8007150:	4a7f      	ldr	r2, [pc, #508]	@ (8007350 <HAL_RCC_OscConfig+0x2a8>)
 8007152:	6813      	ldr	r3, [r2, #0]
 8007154:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007158:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800715a:	f7fd fcc5 	bl	8004ae8 <HAL_GetTick>
 800715e:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007160:	4b7b      	ldr	r3, [pc, #492]	@ (8007350 <HAL_RCC_OscConfig+0x2a8>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8007168:	d15f      	bne.n	800722a <HAL_RCC_OscConfig+0x182>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800716a:	f7fd fcbd 	bl	8004ae8 <HAL_GetTick>
 800716e:	1b40      	subs	r0, r0, r5
 8007170:	2802      	cmp	r0, #2
 8007172:	d9f5      	bls.n	8007160 <HAL_RCC_OscConfig+0xb8>
            return HAL_TIMEOUT;
 8007174:	2003      	movs	r0, #3
 8007176:	e1f2      	b.n	800755e <HAL_RCC_OscConfig+0x4b6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007178:	4a75      	ldr	r2, [pc, #468]	@ (8007350 <HAL_RCC_OscConfig+0x2a8>)
 800717a:	6813      	ldr	r3, [r2, #0]
 800717c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007180:	6013      	str	r3, [r2, #0]
 8007182:	e7b6      	b.n	80070f2 <HAL_RCC_OscConfig+0x4a>
 8007184:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007188:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 800718c:	681a      	ldr	r2, [r3, #0]
 800718e:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8007192:	601a      	str	r2, [r3, #0]
 8007194:	681a      	ldr	r2, [r3, #0]
 8007196:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800719a:	601a      	str	r2, [r3, #0]
 800719c:	e7a9      	b.n	80070f2 <HAL_RCC_OscConfig+0x4a>
        tickstart = HAL_GetTick();
 800719e:	f7fd fca3 	bl	8004ae8 <HAL_GetTick>
 80071a2:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80071a4:	4b6a      	ldr	r3, [pc, #424]	@ (8007350 <HAL_RCC_OscConfig+0x2a8>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80071ac:	d0be      	beq.n	800712c <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80071ae:	f7fd fc9b 	bl	8004ae8 <HAL_GetTick>
 80071b2:	1b40      	subs	r0, r0, r5
 80071b4:	2864      	cmp	r0, #100	@ 0x64
 80071b6:	d9f5      	bls.n	80071a4 <HAL_RCC_OscConfig+0xfc>
            return HAL_TIMEOUT;
 80071b8:	2003      	movs	r0, #3
 80071ba:	e1d0      	b.n	800755e <HAL_RCC_OscConfig+0x4b6>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80071bc:	2a02      	cmp	r2, #2
 80071be:	d1c2      	bne.n	8007146 <HAL_RCC_OscConfig+0x9e>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80071c0:	4b63      	ldr	r3, [pc, #396]	@ (8007350 <HAL_RCC_OscConfig+0x2a8>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 80071c8:	d003      	beq.n	80071d2 <HAL_RCC_OscConfig+0x12a>
 80071ca:	68e3      	ldr	r3, [r4, #12]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	f000 81c1 	beq.w	8007554 <HAL_RCC_OscConfig+0x4ac>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071d2:	4a5f      	ldr	r2, [pc, #380]	@ (8007350 <HAL_RCC_OscConfig+0x2a8>)
 80071d4:	6853      	ldr	r3, [r2, #4]
 80071d6:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80071da:	6921      	ldr	r1, [r4, #16]
 80071dc:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80071e0:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80071e2:	4b5c      	ldr	r3, [pc, #368]	@ (8007354 <HAL_RCC_OscConfig+0x2ac>)
 80071e4:	6818      	ldr	r0, [r3, #0]
 80071e6:	f7fd fc3b 	bl	8004a60 <HAL_InitTick>
 80071ea:	2800      	cmp	r0, #0
 80071ec:	f040 81b4 	bne.w	8007558 <HAL_RCC_OscConfig+0x4b0>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80071f0:	6823      	ldr	r3, [r4, #0]
 80071f2:	f013 0f08 	tst.w	r3, #8
 80071f6:	d04c      	beq.n	8007292 <HAL_RCC_OscConfig+0x1ea>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80071f8:	6963      	ldr	r3, [r4, #20]
 80071fa:	b39b      	cbz	r3, 8007264 <HAL_RCC_OscConfig+0x1bc>
      __HAL_RCC_LSI_ENABLE();
 80071fc:	4a54      	ldr	r2, [pc, #336]	@ (8007350 <HAL_RCC_OscConfig+0x2a8>)
 80071fe:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8007202:	f043 0301 	orr.w	r3, r3, #1
 8007206:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      tickstart = HAL_GetTick();
 800720a:	f7fd fc6d 	bl	8004ae8 <HAL_GetTick>
 800720e:	4605      	mov	r5, r0
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007210:	4b4f      	ldr	r3, [pc, #316]	@ (8007350 <HAL_RCC_OscConfig+0x2a8>)
 8007212:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007216:	f013 0f02 	tst.w	r3, #2
 800721a:	d13a      	bne.n	8007292 <HAL_RCC_OscConfig+0x1ea>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800721c:	f7fd fc64 	bl	8004ae8 <HAL_GetTick>
 8007220:	1b40      	subs	r0, r0, r5
 8007222:	2802      	cmp	r0, #2
 8007224:	d9f4      	bls.n	8007210 <HAL_RCC_OscConfig+0x168>
          return HAL_TIMEOUT;
 8007226:	2003      	movs	r0, #3
 8007228:	e199      	b.n	800755e <HAL_RCC_OscConfig+0x4b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800722a:	4a49      	ldr	r2, [pc, #292]	@ (8007350 <HAL_RCC_OscConfig+0x2a8>)
 800722c:	6853      	ldr	r3, [r2, #4]
 800722e:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8007232:	6921      	ldr	r1, [r4, #16]
 8007234:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8007238:	6053      	str	r3, [r2, #4]
 800723a:	e7d9      	b.n	80071f0 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_DISABLE();
 800723c:	4a44      	ldr	r2, [pc, #272]	@ (8007350 <HAL_RCC_OscConfig+0x2a8>)
 800723e:	6813      	ldr	r3, [r2, #0]
 8007240:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007244:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8007246:	f7fd fc4f 	bl	8004ae8 <HAL_GetTick>
 800724a:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800724c:	4b40      	ldr	r3, [pc, #256]	@ (8007350 <HAL_RCC_OscConfig+0x2a8>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8007254:	d0cc      	beq.n	80071f0 <HAL_RCC_OscConfig+0x148>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007256:	f7fd fc47 	bl	8004ae8 <HAL_GetTick>
 800725a:	1b40      	subs	r0, r0, r5
 800725c:	2802      	cmp	r0, #2
 800725e:	d9f5      	bls.n	800724c <HAL_RCC_OscConfig+0x1a4>
            return HAL_TIMEOUT;
 8007260:	2003      	movs	r0, #3
 8007262:	e17c      	b.n	800755e <HAL_RCC_OscConfig+0x4b6>
      __HAL_RCC_LSI_DISABLE();
 8007264:	4a3a      	ldr	r2, [pc, #232]	@ (8007350 <HAL_RCC_OscConfig+0x2a8>)
 8007266:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 800726a:	f023 0301 	bic.w	r3, r3, #1
 800726e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8007272:	f7fd fc39 	bl	8004ae8 <HAL_GetTick>
 8007276:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007278:	4b35      	ldr	r3, [pc, #212]	@ (8007350 <HAL_RCC_OscConfig+0x2a8>)
 800727a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800727e:	f013 0f02 	tst.w	r3, #2
 8007282:	d006      	beq.n	8007292 <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007284:	f7fd fc30 	bl	8004ae8 <HAL_GetTick>
 8007288:	1b40      	subs	r0, r0, r5
 800728a:	2802      	cmp	r0, #2
 800728c:	d9f4      	bls.n	8007278 <HAL_RCC_OscConfig+0x1d0>
          return HAL_TIMEOUT;
 800728e:	2003      	movs	r0, #3
 8007290:	e165      	b.n	800755e <HAL_RCC_OscConfig+0x4b6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007292:	6823      	ldr	r3, [r4, #0]
 8007294:	f013 0f04 	tst.w	r3, #4
 8007298:	f000 8081 	beq.w	800739e <HAL_RCC_OscConfig+0x2f6>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800729c:	4b2c      	ldr	r3, [pc, #176]	@ (8007350 <HAL_RCC_OscConfig+0x2a8>)
 800729e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072a0:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 80072a4:	d136      	bne.n	8007314 <HAL_RCC_OscConfig+0x26c>
      __HAL_RCC_PWR_CLK_ENABLE();
 80072a6:	4b2a      	ldr	r3, [pc, #168]	@ (8007350 <HAL_RCC_OscConfig+0x2a8>)
 80072a8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80072aa:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80072ae:	659a      	str	r2, [r3, #88]	@ 0x58
 80072b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80072b6:	9301      	str	r3, [sp, #4]
 80072b8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80072ba:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80072bc:	4b26      	ldr	r3, [pc, #152]	@ (8007358 <HAL_RCC_OscConfig+0x2b0>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80072c4:	d028      	beq.n	8007318 <HAL_RCC_OscConfig+0x270>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80072c6:	68a3      	ldr	r3, [r4, #8]
 80072c8:	2b01      	cmp	r3, #1
 80072ca:	d039      	beq.n	8007340 <HAL_RCC_OscConfig+0x298>
 80072cc:	2b05      	cmp	r3, #5
 80072ce:	d045      	beq.n	800735c <HAL_RCC_OscConfig+0x2b4>
 80072d0:	4b1f      	ldr	r3, [pc, #124]	@ (8007350 <HAL_RCC_OscConfig+0x2a8>)
 80072d2:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80072d6:	f022 0201 	bic.w	r2, r2, #1
 80072da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 80072de:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80072e2:	f022 0204 	bic.w	r2, r2, #4
 80072e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80072ea:	68a3      	ldr	r3, [r4, #8]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d043      	beq.n	8007378 <HAL_RCC_OscConfig+0x2d0>
      tickstart = HAL_GetTick();
 80072f0:	f7fd fbfa 	bl	8004ae8 <HAL_GetTick>
 80072f4:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80072f6:	4b16      	ldr	r3, [pc, #88]	@ (8007350 <HAL_RCC_OscConfig+0x2a8>)
 80072f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072fc:	f013 0f02 	tst.w	r3, #2
 8007300:	d14c      	bne.n	800739c <HAL_RCC_OscConfig+0x2f4>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007302:	f7fd fbf1 	bl	8004ae8 <HAL_GetTick>
 8007306:	1b80      	subs	r0, r0, r6
 8007308:	f241 3388 	movw	r3, #5000	@ 0x1388
 800730c:	4298      	cmp	r0, r3
 800730e:	d9f2      	bls.n	80072f6 <HAL_RCC_OscConfig+0x24e>
          return HAL_TIMEOUT;
 8007310:	2003      	movs	r0, #3
 8007312:	e124      	b.n	800755e <HAL_RCC_OscConfig+0x4b6>
    FlagStatus       pwrclkchanged = RESET;
 8007314:	2500      	movs	r5, #0
 8007316:	e7d1      	b.n	80072bc <HAL_RCC_OscConfig+0x214>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007318:	4a0f      	ldr	r2, [pc, #60]	@ (8007358 <HAL_RCC_OscConfig+0x2b0>)
 800731a:	6813      	ldr	r3, [r2, #0]
 800731c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007320:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8007322:	f7fd fbe1 	bl	8004ae8 <HAL_GetTick>
 8007326:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007328:	4b0b      	ldr	r3, [pc, #44]	@ (8007358 <HAL_RCC_OscConfig+0x2b0>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8007330:	d1c9      	bne.n	80072c6 <HAL_RCC_OscConfig+0x21e>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007332:	f7fd fbd9 	bl	8004ae8 <HAL_GetTick>
 8007336:	1b80      	subs	r0, r0, r6
 8007338:	2802      	cmp	r0, #2
 800733a:	d9f5      	bls.n	8007328 <HAL_RCC_OscConfig+0x280>
          return HAL_TIMEOUT;
 800733c:	2003      	movs	r0, #3
 800733e:	e10e      	b.n	800755e <HAL_RCC_OscConfig+0x4b6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007340:	4a03      	ldr	r2, [pc, #12]	@ (8007350 <HAL_RCC_OscConfig+0x2a8>)
 8007342:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8007346:	f043 0301 	orr.w	r3, r3, #1
 800734a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800734e:	e7cc      	b.n	80072ea <HAL_RCC_OscConfig+0x242>
 8007350:	40021000 	.word	0x40021000
 8007354:	20000058 	.word	0x20000058
 8007358:	40007000 	.word	0x40007000
 800735c:	4b88      	ldr	r3, [pc, #544]	@ (8007580 <HAL_RCC_OscConfig+0x4d8>)
 800735e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8007362:	f042 0204 	orr.w	r2, r2, #4
 8007366:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 800736a:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800736e:	f042 0201 	orr.w	r2, r2, #1
 8007372:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8007376:	e7b8      	b.n	80072ea <HAL_RCC_OscConfig+0x242>
      tickstart = HAL_GetTick();
 8007378:	f7fd fbb6 	bl	8004ae8 <HAL_GetTick>
 800737c:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800737e:	4b80      	ldr	r3, [pc, #512]	@ (8007580 <HAL_RCC_OscConfig+0x4d8>)
 8007380:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007384:	f013 0f02 	tst.w	r3, #2
 8007388:	d008      	beq.n	800739c <HAL_RCC_OscConfig+0x2f4>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800738a:	f7fd fbad 	bl	8004ae8 <HAL_GetTick>
 800738e:	1b80      	subs	r0, r0, r6
 8007390:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007394:	4298      	cmp	r0, r3
 8007396:	d9f2      	bls.n	800737e <HAL_RCC_OscConfig+0x2d6>
          return HAL_TIMEOUT;
 8007398:	2003      	movs	r0, #3
 800739a:	e0e0      	b.n	800755e <HAL_RCC_OscConfig+0x4b6>
    if (pwrclkchanged == SET)
 800739c:	b9e5      	cbnz	r5, 80073d8 <HAL_RCC_OscConfig+0x330>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800739e:	6823      	ldr	r3, [r4, #0]
 80073a0:	f013 0f20 	tst.w	r3, #32
 80073a4:	d035      	beq.n	8007412 <HAL_RCC_OscConfig+0x36a>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80073a6:	69a3      	ldr	r3, [r4, #24]
 80073a8:	b1e3      	cbz	r3, 80073e4 <HAL_RCC_OscConfig+0x33c>
      __HAL_RCC_HSI48_ENABLE();
 80073aa:	4a75      	ldr	r2, [pc, #468]	@ (8007580 <HAL_RCC_OscConfig+0x4d8>)
 80073ac:	f8d2 3098 	ldr.w	r3, [r2, #152]	@ 0x98
 80073b0:	f043 0301 	orr.w	r3, r3, #1
 80073b4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
      tickstart = HAL_GetTick();
 80073b8:	f7fd fb96 	bl	8004ae8 <HAL_GetTick>
 80073bc:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80073be:	4b70      	ldr	r3, [pc, #448]	@ (8007580 <HAL_RCC_OscConfig+0x4d8>)
 80073c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80073c4:	f013 0f02 	tst.w	r3, #2
 80073c8:	d123      	bne.n	8007412 <HAL_RCC_OscConfig+0x36a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80073ca:	f7fd fb8d 	bl	8004ae8 <HAL_GetTick>
 80073ce:	1b40      	subs	r0, r0, r5
 80073d0:	2802      	cmp	r0, #2
 80073d2:	d9f4      	bls.n	80073be <HAL_RCC_OscConfig+0x316>
          return HAL_TIMEOUT;
 80073d4:	2003      	movs	r0, #3
 80073d6:	e0c2      	b.n	800755e <HAL_RCC_OscConfig+0x4b6>
      __HAL_RCC_PWR_CLK_DISABLE();
 80073d8:	4a69      	ldr	r2, [pc, #420]	@ (8007580 <HAL_RCC_OscConfig+0x4d8>)
 80073da:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 80073dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80073e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80073e2:	e7dc      	b.n	800739e <HAL_RCC_OscConfig+0x2f6>
      __HAL_RCC_HSI48_DISABLE();
 80073e4:	4a66      	ldr	r2, [pc, #408]	@ (8007580 <HAL_RCC_OscConfig+0x4d8>)
 80073e6:	f8d2 3098 	ldr.w	r3, [r2, #152]	@ 0x98
 80073ea:	f023 0301 	bic.w	r3, r3, #1
 80073ee:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
      tickstart = HAL_GetTick();
 80073f2:	f7fd fb79 	bl	8004ae8 <HAL_GetTick>
 80073f6:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80073f8:	4b61      	ldr	r3, [pc, #388]	@ (8007580 <HAL_RCC_OscConfig+0x4d8>)
 80073fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80073fe:	f013 0f02 	tst.w	r3, #2
 8007402:	d006      	beq.n	8007412 <HAL_RCC_OscConfig+0x36a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007404:	f7fd fb70 	bl	8004ae8 <HAL_GetTick>
 8007408:	1b40      	subs	r0, r0, r5
 800740a:	2802      	cmp	r0, #2
 800740c:	d9f4      	bls.n	80073f8 <HAL_RCC_OscConfig+0x350>
          return HAL_TIMEOUT;
 800740e:	2003      	movs	r0, #3
 8007410:	e0a5      	b.n	800755e <HAL_RCC_OscConfig+0x4b6>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007412:	69e3      	ldr	r3, [r4, #28]
 8007414:	2b00      	cmp	r3, #0
 8007416:	f000 80a1 	beq.w	800755c <HAL_RCC_OscConfig+0x4b4>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800741a:	4a59      	ldr	r2, [pc, #356]	@ (8007580 <HAL_RCC_OscConfig+0x4d8>)
 800741c:	6892      	ldr	r2, [r2, #8]
 800741e:	f002 020c 	and.w	r2, r2, #12
 8007422:	2a0c      	cmp	r2, #12
 8007424:	d064      	beq.n	80074f0 <HAL_RCC_OscConfig+0x448>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007426:	2b02      	cmp	r3, #2
 8007428:	d013      	beq.n	8007452 <HAL_RCC_OscConfig+0x3aa>
        __HAL_RCC_PLL_DISABLE();
 800742a:	4a55      	ldr	r2, [pc, #340]	@ (8007580 <HAL_RCC_OscConfig+0x4d8>)
 800742c:	6813      	ldr	r3, [r2, #0]
 800742e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007432:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8007434:	f7fd fb58 	bl	8004ae8 <HAL_GetTick>
 8007438:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800743a:	4b51      	ldr	r3, [pc, #324]	@ (8007580 <HAL_RCC_OscConfig+0x4d8>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8007442:	d04e      	beq.n	80074e2 <HAL_RCC_OscConfig+0x43a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007444:	f7fd fb50 	bl	8004ae8 <HAL_GetTick>
 8007448:	1b00      	subs	r0, r0, r4
 800744a:	2802      	cmp	r0, #2
 800744c:	d9f5      	bls.n	800743a <HAL_RCC_OscConfig+0x392>
            return HAL_TIMEOUT;
 800744e:	2003      	movs	r0, #3
 8007450:	e085      	b.n	800755e <HAL_RCC_OscConfig+0x4b6>
        __HAL_RCC_PLL_DISABLE();
 8007452:	4a4b      	ldr	r2, [pc, #300]	@ (8007580 <HAL_RCC_OscConfig+0x4d8>)
 8007454:	6813      	ldr	r3, [r2, #0]
 8007456:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800745a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800745c:	f7fd fb44 	bl	8004ae8 <HAL_GetTick>
 8007460:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007462:	4b47      	ldr	r3, [pc, #284]	@ (8007580 <HAL_RCC_OscConfig+0x4d8>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800746a:	d006      	beq.n	800747a <HAL_RCC_OscConfig+0x3d2>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800746c:	f7fd fb3c 	bl	8004ae8 <HAL_GetTick>
 8007470:	1b40      	subs	r0, r0, r5
 8007472:	2802      	cmp	r0, #2
 8007474:	d9f5      	bls.n	8007462 <HAL_RCC_OscConfig+0x3ba>
            return HAL_TIMEOUT;
 8007476:	2003      	movs	r0, #3
 8007478:	e071      	b.n	800755e <HAL_RCC_OscConfig+0x4b6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800747a:	4a41      	ldr	r2, [pc, #260]	@ (8007580 <HAL_RCC_OscConfig+0x4d8>)
 800747c:	68d3      	ldr	r3, [r2, #12]
 800747e:	4941      	ldr	r1, [pc, #260]	@ (8007584 <HAL_RCC_OscConfig+0x4dc>)
 8007480:	4019      	ands	r1, r3
 8007482:	6a23      	ldr	r3, [r4, #32]
 8007484:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8007486:	3801      	subs	r0, #1
 8007488:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 800748c:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800748e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8007492:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8007494:	0840      	lsrs	r0, r0, #1
 8007496:	3801      	subs	r0, #1
 8007498:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
 800749c:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800749e:	0840      	lsrs	r0, r0, #1
 80074a0:	3801      	subs	r0, #1
 80074a2:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 80074a6:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80074a8:	ea43 63c0 	orr.w	r3, r3, r0, lsl #27
 80074ac:	4319      	orrs	r1, r3
 80074ae:	60d1      	str	r1, [r2, #12]
        __HAL_RCC_PLL_ENABLE();
 80074b0:	6813      	ldr	r3, [r2, #0]
 80074b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80074b6:	6013      	str	r3, [r2, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80074b8:	68d3      	ldr	r3, [r2, #12]
 80074ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80074be:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 80074c0:	f7fd fb12 	bl	8004ae8 <HAL_GetTick>
 80074c4:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80074c6:	4b2e      	ldr	r3, [pc, #184]	@ (8007580 <HAL_RCC_OscConfig+0x4d8>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80074ce:	d106      	bne.n	80074de <HAL_RCC_OscConfig+0x436>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074d0:	f7fd fb0a 	bl	8004ae8 <HAL_GetTick>
 80074d4:	1b00      	subs	r0, r0, r4
 80074d6:	2802      	cmp	r0, #2
 80074d8:	d9f5      	bls.n	80074c6 <HAL_RCC_OscConfig+0x41e>
            return HAL_TIMEOUT;
 80074da:	2003      	movs	r0, #3
 80074dc:	e03f      	b.n	800755e <HAL_RCC_OscConfig+0x4b6>
  return HAL_OK;
 80074de:	2000      	movs	r0, #0
 80074e0:	e03d      	b.n	800755e <HAL_RCC_OscConfig+0x4b6>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80074e2:	4a27      	ldr	r2, [pc, #156]	@ (8007580 <HAL_RCC_OscConfig+0x4d8>)
 80074e4:	68d1      	ldr	r1, [r2, #12]
 80074e6:	4b28      	ldr	r3, [pc, #160]	@ (8007588 <HAL_RCC_OscConfig+0x4e0>)
 80074e8:	400b      	ands	r3, r1
 80074ea:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 80074ec:	2000      	movs	r0, #0
 80074ee:	e036      	b.n	800755e <HAL_RCC_OscConfig+0x4b6>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80074f0:	2b01      	cmp	r3, #1
 80074f2:	d036      	beq.n	8007562 <HAL_RCC_OscConfig+0x4ba>
      temp_pllckcfg = RCC->PLLCFGR;
 80074f4:	4b22      	ldr	r3, [pc, #136]	@ (8007580 <HAL_RCC_OscConfig+0x4d8>)
 80074f6:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80074f8:	f003 0103 	and.w	r1, r3, #3
 80074fc:	6a22      	ldr	r2, [r4, #32]
 80074fe:	4291      	cmp	r1, r2
 8007500:	d131      	bne.n	8007566 <HAL_RCC_OscConfig+0x4be>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007502:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007506:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8007508:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800750a:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 800750e:	d12c      	bne.n	800756a <HAL_RCC_OscConfig+0x4c2>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007510:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8007514:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007516:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 800751a:	d128      	bne.n	800756e <HAL_RCC_OscConfig+0x4c6>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800751c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8007520:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007522:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8007526:	d124      	bne.n	8007572 <HAL_RCC_OscConfig+0x4ca>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007528:	f403 01c0 	and.w	r1, r3, #6291456	@ 0x600000
 800752c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800752e:	0852      	lsrs	r2, r2, #1
 8007530:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007532:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8007536:	d11e      	bne.n	8007576 <HAL_RCC_OscConfig+0x4ce>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007538:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 800753c:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800753e:	0852      	lsrs	r2, r2, #1
 8007540:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007542:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8007546:	d118      	bne.n	800757a <HAL_RCC_OscConfig+0x4d2>
  return HAL_OK;
 8007548:	2000      	movs	r0, #0
 800754a:	e008      	b.n	800755e <HAL_RCC_OscConfig+0x4b6>
    return HAL_ERROR;
 800754c:	2001      	movs	r0, #1
}
 800754e:	4770      	bx	lr
        return HAL_ERROR;
 8007550:	2001      	movs	r0, #1
 8007552:	e004      	b.n	800755e <HAL_RCC_OscConfig+0x4b6>
        return HAL_ERROR;
 8007554:	2001      	movs	r0, #1
 8007556:	e002      	b.n	800755e <HAL_RCC_OscConfig+0x4b6>
          return HAL_ERROR;
 8007558:	2001      	movs	r0, #1
 800755a:	e000      	b.n	800755e <HAL_RCC_OscConfig+0x4b6>
  return HAL_OK;
 800755c:	2000      	movs	r0, #0
}
 800755e:	b002      	add	sp, #8
 8007560:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8007562:	2001      	movs	r0, #1
 8007564:	e7fb      	b.n	800755e <HAL_RCC_OscConfig+0x4b6>
        return HAL_ERROR;
 8007566:	2001      	movs	r0, #1
 8007568:	e7f9      	b.n	800755e <HAL_RCC_OscConfig+0x4b6>
 800756a:	2001      	movs	r0, #1
 800756c:	e7f7      	b.n	800755e <HAL_RCC_OscConfig+0x4b6>
 800756e:	2001      	movs	r0, #1
 8007570:	e7f5      	b.n	800755e <HAL_RCC_OscConfig+0x4b6>
 8007572:	2001      	movs	r0, #1
 8007574:	e7f3      	b.n	800755e <HAL_RCC_OscConfig+0x4b6>
 8007576:	2001      	movs	r0, #1
 8007578:	e7f1      	b.n	800755e <HAL_RCC_OscConfig+0x4b6>
 800757a:	2001      	movs	r0, #1
 800757c:	e7ef      	b.n	800755e <HAL_RCC_OscConfig+0x4b6>
 800757e:	bf00      	nop
 8007580:	40021000 	.word	0x40021000
 8007584:	019f800c 	.word	0x019f800c
 8007588:	feeefffc 	.word	0xfeeefffc

0800758c <HAL_RCC_GetSysClockFreq>:
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800758c:	4b1e      	ldr	r3, [pc, #120]	@ (8007608 <HAL_RCC_GetSysClockFreq+0x7c>)
 800758e:	689b      	ldr	r3, [r3, #8]
 8007590:	f003 030c 	and.w	r3, r3, #12
 8007594:	2b04      	cmp	r3, #4
 8007596:	d033      	beq.n	8007600 <HAL_RCC_GetSysClockFreq+0x74>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007598:	4b1b      	ldr	r3, [pc, #108]	@ (8007608 <HAL_RCC_GetSysClockFreq+0x7c>)
 800759a:	689b      	ldr	r3, [r3, #8]
 800759c:	f003 030c 	and.w	r3, r3, #12
 80075a0:	2b08      	cmp	r3, #8
 80075a2:	d02f      	beq.n	8007604 <HAL_RCC_GetSysClockFreq+0x78>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80075a4:	4b18      	ldr	r3, [pc, #96]	@ (8007608 <HAL_RCC_GetSysClockFreq+0x7c>)
 80075a6:	689b      	ldr	r3, [r3, #8]
 80075a8:	f003 030c 	and.w	r3, r3, #12
 80075ac:	2b0c      	cmp	r3, #12
 80075ae:	d001      	beq.n	80075b4 <HAL_RCC_GetSysClockFreq+0x28>
    sysclockfreq = 0U;
 80075b0:	2000      	movs	r0, #0
}
 80075b2:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80075b4:	4b14      	ldr	r3, [pc, #80]	@ (8007608 <HAL_RCC_GetSysClockFreq+0x7c>)
 80075b6:	68da      	ldr	r2, [r3, #12]
 80075b8:	f002 0203 	and.w	r2, r2, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80075bc:	68db      	ldr	r3, [r3, #12]
 80075be:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80075c2:	3301      	adds	r3, #1
    switch (pllsource)
 80075c4:	2a03      	cmp	r2, #3
 80075c6:	d011      	beq.n	80075ec <HAL_RCC_GetSysClockFreq+0x60>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80075c8:	4810      	ldr	r0, [pc, #64]	@ (800760c <HAL_RCC_GetSysClockFreq+0x80>)
 80075ca:	fbb0 f0f3 	udiv	r0, r0, r3
 80075ce:	4b0e      	ldr	r3, [pc, #56]	@ (8007608 <HAL_RCC_GetSysClockFreq+0x7c>)
 80075d0:	68db      	ldr	r3, [r3, #12]
 80075d2:	f3c3 2306 	ubfx	r3, r3, #8, #7
 80075d6:	fb03 f000 	mul.w	r0, r3, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80075da:	4b0b      	ldr	r3, [pc, #44]	@ (8007608 <HAL_RCC_GetSysClockFreq+0x7c>)
 80075dc:	68db      	ldr	r3, [r3, #12]
 80075de:	f3c3 6341 	ubfx	r3, r3, #25, #2
 80075e2:	3301      	adds	r3, #1
 80075e4:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 80075e6:	fbb0 f0f3 	udiv	r0, r0, r3
 80075ea:	4770      	bx	lr
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80075ec:	4808      	ldr	r0, [pc, #32]	@ (8007610 <HAL_RCC_GetSysClockFreq+0x84>)
 80075ee:	fbb0 f0f3 	udiv	r0, r0, r3
 80075f2:	4b05      	ldr	r3, [pc, #20]	@ (8007608 <HAL_RCC_GetSysClockFreq+0x7c>)
 80075f4:	68db      	ldr	r3, [r3, #12]
 80075f6:	f3c3 2306 	ubfx	r3, r3, #8, #7
 80075fa:	fb03 f000 	mul.w	r0, r3, r0
      break;
 80075fe:	e7ec      	b.n	80075da <HAL_RCC_GetSysClockFreq+0x4e>
    sysclockfreq = HSI_VALUE;
 8007600:	4802      	ldr	r0, [pc, #8]	@ (800760c <HAL_RCC_GetSysClockFreq+0x80>)
 8007602:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 8007604:	4802      	ldr	r0, [pc, #8]	@ (8007610 <HAL_RCC_GetSysClockFreq+0x84>)
 8007606:	4770      	bx	lr
 8007608:	40021000 	.word	0x40021000
 800760c:	00f42400 	.word	0x00f42400
 8007610:	00b71b00 	.word	0x00b71b00

08007614 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8007614:	2800      	cmp	r0, #0
 8007616:	f000 80e6 	beq.w	80077e6 <HAL_RCC_ClockConfig+0x1d2>
{
 800761a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800761c:	460c      	mov	r4, r1
 800761e:	4605      	mov	r5, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007620:	4b74      	ldr	r3, [pc, #464]	@ (80077f4 <HAL_RCC_ClockConfig+0x1e0>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f003 030f 	and.w	r3, r3, #15
 8007628:	428b      	cmp	r3, r1
 800762a:	d20b      	bcs.n	8007644 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800762c:	4a71      	ldr	r2, [pc, #452]	@ (80077f4 <HAL_RCC_ClockConfig+0x1e0>)
 800762e:	6813      	ldr	r3, [r2, #0]
 8007630:	f023 030f 	bic.w	r3, r3, #15
 8007634:	430b      	orrs	r3, r1
 8007636:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007638:	6813      	ldr	r3, [r2, #0]
 800763a:	f003 030f 	and.w	r3, r3, #15
 800763e:	428b      	cmp	r3, r1
 8007640:	f040 80d3 	bne.w	80077ea <HAL_RCC_ClockConfig+0x1d6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007644:	682e      	ldr	r6, [r5, #0]
 8007646:	f016 0601 	ands.w	r6, r6, #1
 800764a:	d05f      	beq.n	800770c <HAL_RCC_ClockConfig+0xf8>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800764c:	686b      	ldr	r3, [r5, #4]
 800764e:	2b03      	cmp	r3, #3
 8007650:	d02f      	beq.n	80076b2 <HAL_RCC_ClockConfig+0x9e>
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007652:	2b02      	cmp	r3, #2
 8007654:	d04d      	beq.n	80076f2 <HAL_RCC_ClockConfig+0xde>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007656:	4b68      	ldr	r3, [pc, #416]	@ (80077f8 <HAL_RCC_ClockConfig+0x1e4>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 800765e:	f000 80c6 	beq.w	80077ee <HAL_RCC_ClockConfig+0x1da>
      pllfreq = HAL_RCC_GetSysClockFreq();
 8007662:	f7ff ff93 	bl	800758c <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 8007666:	4b65      	ldr	r3, [pc, #404]	@ (80077fc <HAL_RCC_ClockConfig+0x1e8>)
 8007668:	4298      	cmp	r0, r3
 800766a:	d94d      	bls.n	8007708 <HAL_RCC_ClockConfig+0xf4>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800766c:	4a62      	ldr	r2, [pc, #392]	@ (80077f8 <HAL_RCC_ClockConfig+0x1e4>)
 800766e:	6893      	ldr	r3, [r2, #8]
 8007670:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007674:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007678:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800767a:	2680      	movs	r6, #128	@ 0x80
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800767c:	4a5e      	ldr	r2, [pc, #376]	@ (80077f8 <HAL_RCC_ClockConfig+0x1e4>)
 800767e:	6893      	ldr	r3, [r2, #8]
 8007680:	f023 0303 	bic.w	r3, r3, #3
 8007684:	6869      	ldr	r1, [r5, #4]
 8007686:	430b      	orrs	r3, r1
 8007688:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 800768a:	f7fd fa2d 	bl	8004ae8 <HAL_GetTick>
 800768e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007690:	4b59      	ldr	r3, [pc, #356]	@ (80077f8 <HAL_RCC_ClockConfig+0x1e4>)
 8007692:	689b      	ldr	r3, [r3, #8]
 8007694:	f003 030c 	and.w	r3, r3, #12
 8007698:	686a      	ldr	r2, [r5, #4]
 800769a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800769e:	d035      	beq.n	800770c <HAL_RCC_ClockConfig+0xf8>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80076a0:	f7fd fa22 	bl	8004ae8 <HAL_GetTick>
 80076a4:	1bc0      	subs	r0, r0, r7
 80076a6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80076aa:	4298      	cmp	r0, r3
 80076ac:	d9f0      	bls.n	8007690 <HAL_RCC_ClockConfig+0x7c>
        return HAL_TIMEOUT;
 80076ae:	2003      	movs	r0, #3
 80076b0:	e078      	b.n	80077a4 <HAL_RCC_ClockConfig+0x190>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80076b2:	4b51      	ldr	r3, [pc, #324]	@ (80077f8 <HAL_RCC_ClockConfig+0x1e4>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80076ba:	d101      	bne.n	80076c0 <HAL_RCC_ClockConfig+0xac>
        return HAL_ERROR;
 80076bc:	2001      	movs	r0, #1
 80076be:	e071      	b.n	80077a4 <HAL_RCC_ClockConfig+0x190>
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80076c0:	f7ff fcc6 	bl	8007050 <RCC_GetSysClockFreqFromPLLSource>
      if(pllfreq > 80000000U)
 80076c4:	4b4d      	ldr	r3, [pc, #308]	@ (80077fc <HAL_RCC_ClockConfig+0x1e8>)
 80076c6:	4298      	cmp	r0, r3
 80076c8:	d91a      	bls.n	8007700 <HAL_RCC_ClockConfig+0xec>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80076ca:	4b4b      	ldr	r3, [pc, #300]	@ (80077f8 <HAL_RCC_ClockConfig+0x1e4>)
 80076cc:	689b      	ldr	r3, [r3, #8]
 80076ce:	f013 0ff0 	tst.w	r3, #240	@ 0xf0
 80076d2:	d005      	beq.n	80076e0 <HAL_RCC_ClockConfig+0xcc>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80076d4:	682e      	ldr	r6, [r5, #0]
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80076d6:	f016 0602 	ands.w	r6, r6, #2
 80076da:	d0cf      	beq.n	800767c <HAL_RCC_ClockConfig+0x68>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80076dc:	68ab      	ldr	r3, [r5, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80076de:	b98b      	cbnz	r3, 8007704 <HAL_RCC_ClockConfig+0xf0>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80076e0:	4a45      	ldr	r2, [pc, #276]	@ (80077f8 <HAL_RCC_ClockConfig+0x1e4>)
 80076e2:	6893      	ldr	r3, [r2, #8]
 80076e4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80076e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076ec:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80076ee:	2680      	movs	r6, #128	@ 0x80
 80076f0:	e7c4      	b.n	800767c <HAL_RCC_ClockConfig+0x68>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80076f2:	4b41      	ldr	r3, [pc, #260]	@ (80077f8 <HAL_RCC_ClockConfig+0x1e4>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80076fa:	d1b2      	bne.n	8007662 <HAL_RCC_ClockConfig+0x4e>
          return HAL_ERROR;
 80076fc:	2001      	movs	r0, #1
 80076fe:	e051      	b.n	80077a4 <HAL_RCC_ClockConfig+0x190>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007700:	2600      	movs	r6, #0
 8007702:	e7bb      	b.n	800767c <HAL_RCC_ClockConfig+0x68>
 8007704:	2600      	movs	r6, #0
 8007706:	e7b9      	b.n	800767c <HAL_RCC_ClockConfig+0x68>
 8007708:	2600      	movs	r6, #0
 800770a:	e7b7      	b.n	800767c <HAL_RCC_ClockConfig+0x68>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800770c:	682b      	ldr	r3, [r5, #0]
 800770e:	f013 0f02 	tst.w	r3, #2
 8007712:	d048      	beq.n	80077a6 <HAL_RCC_ClockConfig+0x192>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007714:	f013 0f04 	tst.w	r3, #4
 8007718:	d004      	beq.n	8007724 <HAL_RCC_ClockConfig+0x110>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800771a:	4a37      	ldr	r2, [pc, #220]	@ (80077f8 <HAL_RCC_ClockConfig+0x1e4>)
 800771c:	6893      	ldr	r3, [r2, #8]
 800771e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007722:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007724:	682b      	ldr	r3, [r5, #0]
 8007726:	f013 0f08 	tst.w	r3, #8
 800772a:	d006      	beq.n	800773a <HAL_RCC_ClockConfig+0x126>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800772c:	4a32      	ldr	r2, [pc, #200]	@ (80077f8 <HAL_RCC_ClockConfig+0x1e4>)
 800772e:	6893      	ldr	r3, [r2, #8]
 8007730:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007734:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007738:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800773a:	4a2f      	ldr	r2, [pc, #188]	@ (80077f8 <HAL_RCC_ClockConfig+0x1e4>)
 800773c:	6893      	ldr	r3, [r2, #8]
 800773e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007742:	68a9      	ldr	r1, [r5, #8]
 8007744:	430b      	orrs	r3, r1
 8007746:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007748:	4b2a      	ldr	r3, [pc, #168]	@ (80077f4 <HAL_RCC_ClockConfig+0x1e0>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f003 030f 	and.w	r3, r3, #15
 8007750:	42a3      	cmp	r3, r4
 8007752:	d830      	bhi.n	80077b6 <HAL_RCC_ClockConfig+0x1a2>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007754:	682b      	ldr	r3, [r5, #0]
 8007756:	f013 0f04 	tst.w	r3, #4
 800775a:	d006      	beq.n	800776a <HAL_RCC_ClockConfig+0x156>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800775c:	4a26      	ldr	r2, [pc, #152]	@ (80077f8 <HAL_RCC_ClockConfig+0x1e4>)
 800775e:	6893      	ldr	r3, [r2, #8]
 8007760:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8007764:	68e9      	ldr	r1, [r5, #12]
 8007766:	430b      	orrs	r3, r1
 8007768:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800776a:	682b      	ldr	r3, [r5, #0]
 800776c:	f013 0f08 	tst.w	r3, #8
 8007770:	d007      	beq.n	8007782 <HAL_RCC_ClockConfig+0x16e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007772:	4a21      	ldr	r2, [pc, #132]	@ (80077f8 <HAL_RCC_ClockConfig+0x1e4>)
 8007774:	6893      	ldr	r3, [r2, #8]
 8007776:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 800777a:	6929      	ldr	r1, [r5, #16]
 800777c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8007780:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007782:	f7ff ff03 	bl	800758c <HAL_RCC_GetSysClockFreq>
 8007786:	4b1c      	ldr	r3, [pc, #112]	@ (80077f8 <HAL_RCC_ClockConfig+0x1e4>)
 8007788:	689b      	ldr	r3, [r3, #8]
 800778a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800778e:	4a1c      	ldr	r2, [pc, #112]	@ (8007800 <HAL_RCC_ClockConfig+0x1ec>)
 8007790:	5cd3      	ldrb	r3, [r2, r3]
 8007792:	f003 031f 	and.w	r3, r3, #31
 8007796:	40d8      	lsrs	r0, r3
 8007798:	4b1a      	ldr	r3, [pc, #104]	@ (8007804 <HAL_RCC_ClockConfig+0x1f0>)
 800779a:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 800779c:	4b1a      	ldr	r3, [pc, #104]	@ (8007808 <HAL_RCC_ClockConfig+0x1f4>)
 800779e:	6818      	ldr	r0, [r3, #0]
 80077a0:	f7fd f95e 	bl	8004a60 <HAL_InitTick>
}
 80077a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(hpre == RCC_SYSCLK_DIV2)
 80077a6:	2e80      	cmp	r6, #128	@ 0x80
 80077a8:	d1ce      	bne.n	8007748 <HAL_RCC_ClockConfig+0x134>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80077aa:	4a13      	ldr	r2, [pc, #76]	@ (80077f8 <HAL_RCC_ClockConfig+0x1e4>)
 80077ac:	6893      	ldr	r3, [r2, #8]
 80077ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80077b2:	6093      	str	r3, [r2, #8]
 80077b4:	e7c8      	b.n	8007748 <HAL_RCC_ClockConfig+0x134>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077b6:	4a0f      	ldr	r2, [pc, #60]	@ (80077f4 <HAL_RCC_ClockConfig+0x1e0>)
 80077b8:	6813      	ldr	r3, [r2, #0]
 80077ba:	f023 030f 	bic.w	r3, r3, #15
 80077be:	4323      	orrs	r3, r4
 80077c0:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80077c2:	f7fd f991 	bl	8004ae8 <HAL_GetTick>
 80077c6:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80077c8:	4b0a      	ldr	r3, [pc, #40]	@ (80077f4 <HAL_RCC_ClockConfig+0x1e0>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f003 030f 	and.w	r3, r3, #15
 80077d0:	42a3      	cmp	r3, r4
 80077d2:	d0bf      	beq.n	8007754 <HAL_RCC_ClockConfig+0x140>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80077d4:	f7fd f988 	bl	8004ae8 <HAL_GetTick>
 80077d8:	1b80      	subs	r0, r0, r6
 80077da:	f241 3388 	movw	r3, #5000	@ 0x1388
 80077de:	4298      	cmp	r0, r3
 80077e0:	d9f2      	bls.n	80077c8 <HAL_RCC_ClockConfig+0x1b4>
        return HAL_TIMEOUT;
 80077e2:	2003      	movs	r0, #3
 80077e4:	e7de      	b.n	80077a4 <HAL_RCC_ClockConfig+0x190>
    return HAL_ERROR;
 80077e6:	2001      	movs	r0, #1
}
 80077e8:	4770      	bx	lr
      return HAL_ERROR;
 80077ea:	2001      	movs	r0, #1
 80077ec:	e7da      	b.n	80077a4 <HAL_RCC_ClockConfig+0x190>
          return HAL_ERROR;
 80077ee:	2001      	movs	r0, #1
 80077f0:	e7d8      	b.n	80077a4 <HAL_RCC_ClockConfig+0x190>
 80077f2:	bf00      	nop
 80077f4:	40022000 	.word	0x40022000
 80077f8:	40021000 	.word	0x40021000
 80077fc:	04c4b400 	.word	0x04c4b400
 8007800:	08015dd4 	.word	0x08015dd4
 8007804:	20000050 	.word	0x20000050
 8007808:	20000058 	.word	0x20000058

0800780c <HAL_RCC_GetHCLKFreq>:
}
 800780c:	4b01      	ldr	r3, [pc, #4]	@ (8007814 <HAL_RCC_GetHCLKFreq+0x8>)
 800780e:	6818      	ldr	r0, [r3, #0]
 8007810:	4770      	bx	lr
 8007812:	bf00      	nop
 8007814:	20000050 	.word	0x20000050

08007818 <HAL_RCC_GetPCLK1Freq>:
{
 8007818:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800781a:	f7ff fff7 	bl	800780c <HAL_RCC_GetHCLKFreq>
 800781e:	4b05      	ldr	r3, [pc, #20]	@ (8007834 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8007820:	689b      	ldr	r3, [r3, #8]
 8007822:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8007826:	4a04      	ldr	r2, [pc, #16]	@ (8007838 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007828:	5cd3      	ldrb	r3, [r2, r3]
 800782a:	f003 031f 	and.w	r3, r3, #31
}
 800782e:	40d8      	lsrs	r0, r3
 8007830:	bd08      	pop	{r3, pc}
 8007832:	bf00      	nop
 8007834:	40021000 	.word	0x40021000
 8007838:	08015dcc 	.word	0x08015dcc

0800783c <HAL_RCC_GetPCLK2Freq>:
{
 800783c:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800783e:	f7ff ffe5 	bl	800780c <HAL_RCC_GetHCLKFreq>
 8007842:	4b05      	ldr	r3, [pc, #20]	@ (8007858 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8007844:	689b      	ldr	r3, [r3, #8]
 8007846:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800784a:	4a04      	ldr	r2, [pc, #16]	@ (800785c <HAL_RCC_GetPCLK2Freq+0x20>)
 800784c:	5cd3      	ldrb	r3, [r2, r3]
 800784e:	f003 031f 	and.w	r3, r3, #31
}
 8007852:	40d8      	lsrs	r0, r3
 8007854:	bd08      	pop	{r3, pc}
 8007856:	bf00      	nop
 8007858:	40021000 	.word	0x40021000
 800785c:	08015dcc 	.word	0x08015dcc

08007860 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007860:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007862:	b083      	sub	sp, #12
 8007864:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007866:	6803      	ldr	r3, [r0, #0]
 8007868:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 800786c:	d06e      	beq.n	800794c <HAL_RCCEx_PeriphCLKConfig+0xec>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800786e:	4b35      	ldr	r3, [pc, #212]	@ (8007944 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8007870:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007872:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8007876:	d11e      	bne.n	80078b6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007878:	4b32      	ldr	r3, [pc, #200]	@ (8007944 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800787a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800787c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8007880:	659a      	str	r2, [r3, #88]	@ 0x58
 8007882:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007884:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007888:	9301      	str	r3, [sp, #4]
 800788a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800788c:	2601      	movs	r6, #1
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800788e:	4a2e      	ldr	r2, [pc, #184]	@ (8007948 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007890:	6813      	ldr	r3, [r2, #0]
 8007892:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007896:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007898:	f7fd f926 	bl	8004ae8 <HAL_GetTick>
 800789c:	4605      	mov	r5, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800789e:	4b2a      	ldr	r3, [pc, #168]	@ (8007948 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80078a6:	d108      	bne.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80078a8:	f7fd f91e 	bl	8004ae8 <HAL_GetTick>
 80078ac:	1b40      	subs	r0, r0, r5
 80078ae:	2802      	cmp	r0, #2
 80078b0:	d9f5      	bls.n	800789e <HAL_RCCEx_PeriphCLKConfig+0x3e>
      {
        ret = HAL_TIMEOUT;
 80078b2:	2503      	movs	r5, #3
 80078b4:	e002      	b.n	80078bc <HAL_RCCEx_PeriphCLKConfig+0x5c>
    FlagStatus       pwrclkchanged = RESET;
 80078b6:	2600      	movs	r6, #0
 80078b8:	e7e9      	b.n	800788e <HAL_RCCEx_PeriphCLKConfig+0x2e>
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80078ba:	2500      	movs	r5, #0
        break;
      }
    }

    if(ret == HAL_OK)
 80078bc:	bb45      	cbnz	r5, 8007910 <HAL_RCCEx_PeriphCLKConfig+0xb0>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80078be:	4b21      	ldr	r3, [pc, #132]	@ (8007944 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80078c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80078c4:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 80078c8:	d015      	beq.n	80078f6 <HAL_RCCEx_PeriphCLKConfig+0x96>
 80078ca:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 80078cc:	429a      	cmp	r2, r3
 80078ce:	d012      	beq.n	80078f6 <HAL_RCCEx_PeriphCLKConfig+0x96>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80078d0:	4a1c      	ldr	r2, [pc, #112]	@ (8007944 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80078d2:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80078d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80078da:	f8d2 1090 	ldr.w	r1, [r2, #144]	@ 0x90
 80078de:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 80078e2:	f8c2 1090 	str.w	r1, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80078e6:	f8d2 1090 	ldr.w	r1, [r2, #144]	@ 0x90
 80078ea:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 80078ee:	f8c2 1090 	str.w	r1, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80078f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80078f6:	f013 0f01 	tst.w	r3, #1
 80078fa:	d110      	bne.n	800791e <HAL_RCCEx_PeriphCLKConfig+0xbe>
            break;
          }
        }
      }
      
      if(ret == HAL_OK)
 80078fc:	b945      	cbnz	r5, 8007910 <HAL_RCCEx_PeriphCLKConfig+0xb0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80078fe:	4a11      	ldr	r2, [pc, #68]	@ (8007944 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8007900:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8007904:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007908:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 800790a:	430b      	orrs	r3, r1
 800790c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007910:	b1ee      	cbz	r6, 800794e <HAL_RCCEx_PeriphCLKConfig+0xee>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007912:	4a0c      	ldr	r2, [pc, #48]	@ (8007944 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8007914:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8007916:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800791a:	6593      	str	r3, [r2, #88]	@ 0x58
 800791c:	e017      	b.n	800794e <HAL_RCCEx_PeriphCLKConfig+0xee>
        tickstart = HAL_GetTick();
 800791e:	f7fd f8e3 	bl	8004ae8 <HAL_GetTick>
 8007922:	4607      	mov	r7, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007924:	4b07      	ldr	r3, [pc, #28]	@ (8007944 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8007926:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800792a:	f013 0f02 	tst.w	r3, #2
 800792e:	d1e5      	bne.n	80078fc <HAL_RCCEx_PeriphCLKConfig+0x9c>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007930:	f7fd f8da 	bl	8004ae8 <HAL_GetTick>
 8007934:	1bc0      	subs	r0, r0, r7
 8007936:	f241 3388 	movw	r3, #5000	@ 0x1388
 800793a:	4298      	cmp	r0, r3
 800793c:	d9f2      	bls.n	8007924 <HAL_RCCEx_PeriphCLKConfig+0xc4>
            ret = HAL_TIMEOUT;
 800793e:	2503      	movs	r5, #3
 8007940:	e7dc      	b.n	80078fc <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8007942:	bf00      	nop
 8007944:	40021000 	.word	0x40021000
 8007948:	40007000 	.word	0x40007000
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800794c:	2500      	movs	r5, #0
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800794e:	6823      	ldr	r3, [r4, #0]
 8007950:	f013 0f01 	tst.w	r3, #1
 8007954:	d008      	beq.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007956:	4a9f      	ldr	r2, [pc, #636]	@ (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007958:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800795c:	f023 0303 	bic.w	r3, r3, #3
 8007960:	6861      	ldr	r1, [r4, #4]
 8007962:	430b      	orrs	r3, r1
 8007964:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007968:	6823      	ldr	r3, [r4, #0]
 800796a:	f013 0f02 	tst.w	r3, #2
 800796e:	d008      	beq.n	8007982 <HAL_RCCEx_PeriphCLKConfig+0x122>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007970:	4a98      	ldr	r2, [pc, #608]	@ (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007972:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8007976:	f023 030c 	bic.w	r3, r3, #12
 800797a:	68a1      	ldr	r1, [r4, #8]
 800797c:	430b      	orrs	r3, r1
 800797e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007982:	6823      	ldr	r3, [r4, #0]
 8007984:	f013 0f04 	tst.w	r3, #4
 8007988:	d008      	beq.n	800799c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800798a:	4a92      	ldr	r2, [pc, #584]	@ (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800798c:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8007990:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8007994:	68e1      	ldr	r1, [r4, #12]
 8007996:	430b      	orrs	r3, r1
 8007998:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800799c:	6823      	ldr	r3, [r4, #0]
 800799e:	f013 0f08 	tst.w	r3, #8
 80079a2:	d008      	beq.n	80079b6 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80079a4:	4a8b      	ldr	r2, [pc, #556]	@ (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80079a6:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80079aa:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80079ae:	6921      	ldr	r1, [r4, #16]
 80079b0:	430b      	orrs	r3, r1
 80079b2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80079b6:	6823      	ldr	r3, [r4, #0]
 80079b8:	f013 0f10 	tst.w	r3, #16
 80079bc:	d008      	beq.n	80079d0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80079be:	4a85      	ldr	r2, [pc, #532]	@ (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80079c0:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80079c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80079c8:	6961      	ldr	r1, [r4, #20]
 80079ca:	430b      	orrs	r3, r1
 80079cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80079d0:	6823      	ldr	r3, [r4, #0]
 80079d2:	f013 0f20 	tst.w	r3, #32
 80079d6:	d008      	beq.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0x18a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80079d8:	4a7e      	ldr	r2, [pc, #504]	@ (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80079da:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80079de:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80079e2:	69a1      	ldr	r1, [r4, #24]
 80079e4:	430b      	orrs	r3, r1
 80079e6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80079ea:	6823      	ldr	r3, [r4, #0]
 80079ec:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80079f0:	d008      	beq.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80079f2:	4a78      	ldr	r2, [pc, #480]	@ (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80079f4:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80079f8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80079fc:	69e1      	ldr	r1, [r4, #28]
 80079fe:	430b      	orrs	r3, r1
 8007a00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007a04:	6823      	ldr	r3, [r4, #0]
 8007a06:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007a0a:	d008      	beq.n	8007a1e <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007a0c:	4a71      	ldr	r2, [pc, #452]	@ (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007a0e:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8007a12:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8007a16:	6a21      	ldr	r1, [r4, #32]
 8007a18:	430b      	orrs	r3, r1
 8007a1a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007a1e:	6823      	ldr	r3, [r4, #0]
 8007a20:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8007a24:	d008      	beq.n	8007a38 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007a26:	4a6b      	ldr	r2, [pc, #428]	@ (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007a28:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8007a2c:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8007a30:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8007a32:	430b      	orrs	r3, r1
 8007a34:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007a38:	6823      	ldr	r3, [r4, #0]
 8007a3a:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8007a3e:	d008      	beq.n	8007a52 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007a40:	4a64      	ldr	r2, [pc, #400]	@ (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007a42:	f8d2 309c 	ldr.w	r3, [r2, #156]	@ 0x9c
 8007a46:	f023 0303 	bic.w	r3, r3, #3
 8007a4a:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8007a4c:	430b      	orrs	r3, r1
 8007a4e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007a52:	6823      	ldr	r3, [r4, #0]
 8007a54:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8007a58:	d008      	beq.n	8007a6c <HAL_RCCEx_PeriphCLKConfig+0x20c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007a5a:	4a5e      	ldr	r2, [pc, #376]	@ (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007a5c:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8007a60:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 8007a64:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007a66:	430b      	orrs	r3, r1
 8007a68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007a6c:	6823      	ldr	r3, [r4, #0]
 8007a6e:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8007a72:	d00c      	beq.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0x22e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007a74:	4a57      	ldr	r2, [pc, #348]	@ (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007a76:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8007a7a:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007a7e:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007a80:	430b      	orrs	r3, r1
 8007a82:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007a86:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8007a88:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007a8c:	d079      	beq.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0x322>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007a8e:	6823      	ldr	r3, [r4, #0]
 8007a90:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8007a94:	d00c      	beq.n	8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007a96:	4a4f      	ldr	r2, [pc, #316]	@ (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007a98:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8007a9c:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8007aa0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007aa2:	430b      	orrs	r3, r1
 8007aa4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007aa8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007aaa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007aae:	d06d      	beq.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x32c>
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007ab0:	6823      	ldr	r3, [r4, #0]
 8007ab2:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 8007ab6:	d00c      	beq.n	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007ab8:	4a46      	ldr	r2, [pc, #280]	@ (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007aba:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8007abe:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 8007ac2:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8007ac4:	430b      	orrs	r3, r1
 8007ac6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007aca:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007acc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007ad0:	d061      	beq.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0x336>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007ad2:	6823      	ldr	r3, [r4, #0]
 8007ad4:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 8007ad8:	d00c      	beq.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0x294>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007ada:	4a3e      	ldr	r2, [pc, #248]	@ (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007adc:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8007ae0:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8007ae4:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8007ae6:	430b      	orrs	r3, r1
 8007ae8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007aec:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007aee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007af2:	d055      	beq.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x340>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007af4:	6823      	ldr	r3, [r4, #0]
 8007af6:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8007afa:	d00c      	beq.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007afc:	4a35      	ldr	r2, [pc, #212]	@ (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007afe:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8007b02:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8007b06:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8007b08:	430b      	orrs	r3, r1
 8007b0a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007b0e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007b10:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007b14:	d049      	beq.n	8007baa <HAL_RCCEx_PeriphCLKConfig+0x34a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007b16:	6823      	ldr	r3, [r4, #0]
 8007b18:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8007b1c:	d00c      	beq.n	8007b38 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007b1e:	4a2d      	ldr	r2, [pc, #180]	@ (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007b20:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8007b24:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8007b28:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007b2a:	430b      	orrs	r3, r1
 8007b2c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007b30:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8007b32:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007b36:	d03d      	beq.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x354>
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8007b38:	6823      	ldr	r3, [r4, #0]
 8007b3a:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8007b3e:	d00c      	beq.n	8007b5a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007b40:	4a24      	ldr	r2, [pc, #144]	@ (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007b42:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8007b46:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8007b4a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007b4c:	430b      	orrs	r3, r1
 8007b4e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8007b52:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8007b54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b58:	d031      	beq.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0x35e>
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007b5a:	6823      	ldr	r3, [r4, #0]
 8007b5c:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 8007b60:	d00c      	beq.n	8007b7c <HAL_RCCEx_PeriphCLKConfig+0x31c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007b62:	4a1c      	ldr	r2, [pc, #112]	@ (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007b64:	f8d2 309c 	ldr.w	r3, [r2, #156]	@ 0x9c
 8007b68:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007b6c:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8007b6e:	430b      	orrs	r3, r1
 8007b70:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8007b74:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8007b76:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007b7a:	d025      	beq.n	8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x368>
  }

#endif /* QUADSPI */

  return status;
}
 8007b7c:	4628      	mov	r0, r5
 8007b7e:	b003      	add	sp, #12
 8007b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007b82:	68d3      	ldr	r3, [r2, #12]
 8007b84:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007b88:	60d3      	str	r3, [r2, #12]
 8007b8a:	e780      	b.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0x22e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007b8c:	68d3      	ldr	r3, [r2, #12]
 8007b8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007b92:	60d3      	str	r3, [r2, #12]
 8007b94:	e78c      	b.n	8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x250>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007b96:	68d3      	ldr	r3, [r2, #12]
 8007b98:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007b9c:	60d3      	str	r3, [r2, #12]
 8007b9e:	e798      	b.n	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0x272>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007ba0:	68d3      	ldr	r3, [r2, #12]
 8007ba2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007ba6:	60d3      	str	r3, [r2, #12]
 8007ba8:	e7a4      	b.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0x294>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007baa:	68d3      	ldr	r3, [r2, #12]
 8007bac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007bb0:	60d3      	str	r3, [r2, #12]
 8007bb2:	e7b0      	b.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007bb4:	68d3      	ldr	r3, [r2, #12]
 8007bb6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007bba:	60d3      	str	r3, [r2, #12]
 8007bbc:	e7bc      	b.n	8007b38 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007bbe:	68d3      	ldr	r3, [r2, #12]
 8007bc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007bc4:	60d3      	str	r3, [r2, #12]
 8007bc6:	e7c8      	b.n	8007b5a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007bc8:	68d3      	ldr	r3, [r2, #12]
 8007bca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007bce:	60d3      	str	r3, [r2, #12]
 8007bd0:	e7d4      	b.n	8007b7c <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8007bd2:	bf00      	nop
 8007bd4:	40021000 	.word	0x40021000

08007bd8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007bd8:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bda:	6a02      	ldr	r2, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007bdc:	6a03      	ldr	r3, [r0, #32]
 8007bde:	f023 0301 	bic.w	r3, r3, #1
 8007be2:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007be4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007be6:	6983      	ldr	r3, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007be8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007bec:	f023 0373 	bic.w	r3, r3, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007bf0:	680d      	ldr	r5, [r1, #0]
 8007bf2:	431d      	orrs	r5, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007bf4:	f022 0202 	bic.w	r2, r2, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007bf8:	688b      	ldr	r3, [r1, #8]
 8007bfa:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007bfc:	4a20      	ldr	r2, [pc, #128]	@ (8007c80 <TIM_OC1_SetConfig+0xa8>)
 8007bfe:	4290      	cmp	r0, r2
 8007c00:	d013      	beq.n	8007c2a <TIM_OC1_SetConfig+0x52>
 8007c02:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007c06:	4290      	cmp	r0, r2
 8007c08:	d00f      	beq.n	8007c2a <TIM_OC1_SetConfig+0x52>
 8007c0a:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8007c0e:	4290      	cmp	r0, r2
 8007c10:	d00b      	beq.n	8007c2a <TIM_OC1_SetConfig+0x52>
 8007c12:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007c16:	4290      	cmp	r0, r2
 8007c18:	d007      	beq.n	8007c2a <TIM_OC1_SetConfig+0x52>
 8007c1a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007c1e:	4290      	cmp	r0, r2
 8007c20:	d003      	beq.n	8007c2a <TIM_OC1_SetConfig+0x52>
 8007c22:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007c26:	4290      	cmp	r0, r2
 8007c28:	d105      	bne.n	8007c36 <TIM_OC1_SetConfig+0x5e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007c2a:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007c2e:	68ca      	ldr	r2, [r1, #12]
 8007c30:	431a      	orrs	r2, r3
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007c32:	f022 0304 	bic.w	r3, r2, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c36:	4a12      	ldr	r2, [pc, #72]	@ (8007c80 <TIM_OC1_SetConfig+0xa8>)
 8007c38:	4290      	cmp	r0, r2
 8007c3a:	d013      	beq.n	8007c64 <TIM_OC1_SetConfig+0x8c>
 8007c3c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007c40:	4290      	cmp	r0, r2
 8007c42:	d00f      	beq.n	8007c64 <TIM_OC1_SetConfig+0x8c>
 8007c44:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8007c48:	4290      	cmp	r0, r2
 8007c4a:	d00b      	beq.n	8007c64 <TIM_OC1_SetConfig+0x8c>
 8007c4c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007c50:	4290      	cmp	r0, r2
 8007c52:	d007      	beq.n	8007c64 <TIM_OC1_SetConfig+0x8c>
 8007c54:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007c58:	4290      	cmp	r0, r2
 8007c5a:	d003      	beq.n	8007c64 <TIM_OC1_SetConfig+0x8c>
 8007c5c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007c60:	4290      	cmp	r0, r2
 8007c62:	d105      	bne.n	8007c70 <TIM_OC1_SetConfig+0x98>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007c64:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007c68:	694a      	ldr	r2, [r1, #20]
 8007c6a:	4322      	orrs	r2, r4
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007c6c:	698c      	ldr	r4, [r1, #24]
 8007c6e:	4314      	orrs	r4, r2
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c70:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c72:	6185      	str	r5, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007c74:	684a      	ldr	r2, [r1, #4]
 8007c76:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c78:	6203      	str	r3, [r0, #32]
}
 8007c7a:	bc30      	pop	{r4, r5}
 8007c7c:	4770      	bx	lr
 8007c7e:	bf00      	nop
 8007c80:	40012c00 	.word	0x40012c00

08007c84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c84:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c86:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007c88:	6a02      	ldr	r2, [r0, #32]
 8007c8a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007c8e:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c90:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c92:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007c94:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8007c98:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c9c:	680d      	ldr	r5, [r1, #0]
 8007c9e:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007ca0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007ca4:	688a      	ldr	r2, [r1, #8]
 8007ca6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007caa:	4a1c      	ldr	r2, [pc, #112]	@ (8007d1c <TIM_OC3_SetConfig+0x98>)
 8007cac:	4290      	cmp	r0, r2
 8007cae:	d007      	beq.n	8007cc0 <TIM_OC3_SetConfig+0x3c>
 8007cb0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007cb4:	4290      	cmp	r0, r2
 8007cb6:	d003      	beq.n	8007cc0 <TIM_OC3_SetConfig+0x3c>
 8007cb8:	f502 52e0 	add.w	r2, r2, #7168	@ 0x1c00
 8007cbc:	4290      	cmp	r0, r2
 8007cbe:	d106      	bne.n	8007cce <TIM_OC3_SetConfig+0x4a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007cc0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007cc4:	68ca      	ldr	r2, [r1, #12]
 8007cc6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007cca:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cce:	4a13      	ldr	r2, [pc, #76]	@ (8007d1c <TIM_OC3_SetConfig+0x98>)
 8007cd0:	4290      	cmp	r0, r2
 8007cd2:	d013      	beq.n	8007cfc <TIM_OC3_SetConfig+0x78>
 8007cd4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007cd8:	4290      	cmp	r0, r2
 8007cda:	d00f      	beq.n	8007cfc <TIM_OC3_SetConfig+0x78>
 8007cdc:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8007ce0:	4290      	cmp	r0, r2
 8007ce2:	d00b      	beq.n	8007cfc <TIM_OC3_SetConfig+0x78>
 8007ce4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007ce8:	4290      	cmp	r0, r2
 8007cea:	d007      	beq.n	8007cfc <TIM_OC3_SetConfig+0x78>
 8007cec:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007cf0:	4290      	cmp	r0, r2
 8007cf2:	d003      	beq.n	8007cfc <TIM_OC3_SetConfig+0x78>
 8007cf4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007cf8:	4290      	cmp	r0, r2
 8007cfa:	d107      	bne.n	8007d0c <TIM_OC3_SetConfig+0x88>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007cfc:	f424 5240 	bic.w	r2, r4, #12288	@ 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007d00:	694c      	ldr	r4, [r1, #20]
 8007d02:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007d06:	698c      	ldr	r4, [r1, #24]
 8007d08:	ea42 1404 	orr.w	r4, r2, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d0c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d0e:	61c5      	str	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007d10:	684a      	ldr	r2, [r1, #4]
 8007d12:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d14:	6203      	str	r3, [r0, #32]
}
 8007d16:	bc30      	pop	{r4, r5}
 8007d18:	4770      	bx	lr
 8007d1a:	bf00      	nop
 8007d1c:	40012c00 	.word	0x40012c00

08007d20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007d20:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d22:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007d24:	6a02      	ldr	r2, [r0, #32]
 8007d26:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007d2a:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d2c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d2e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007d30:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8007d34:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d38:	680d      	ldr	r5, [r1, #0]
 8007d3a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007d3e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007d42:	688d      	ldr	r5, [r1, #8]
 8007d44:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007d48:	4d1b      	ldr	r5, [pc, #108]	@ (8007db8 <TIM_OC4_SetConfig+0x98>)
 8007d4a:	42a8      	cmp	r0, r5
 8007d4c:	d007      	beq.n	8007d5e <TIM_OC4_SetConfig+0x3e>
 8007d4e:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8007d52:	42a8      	cmp	r0, r5
 8007d54:	d003      	beq.n	8007d5e <TIM_OC4_SetConfig+0x3e>
 8007d56:	f505 55e0 	add.w	r5, r5, #7168	@ 0x1c00
 8007d5a:	42a8      	cmp	r0, r5
 8007d5c:	d106      	bne.n	8007d6c <TIM_OC4_SetConfig+0x4c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007d5e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007d62:	68cd      	ldr	r5, [r1, #12]
 8007d64:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007d68:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d6c:	4d12      	ldr	r5, [pc, #72]	@ (8007db8 <TIM_OC4_SetConfig+0x98>)
 8007d6e:	42a8      	cmp	r0, r5
 8007d70:	d013      	beq.n	8007d9a <TIM_OC4_SetConfig+0x7a>
 8007d72:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8007d76:	42a8      	cmp	r0, r5
 8007d78:	d00f      	beq.n	8007d9a <TIM_OC4_SetConfig+0x7a>
 8007d7a:	f505 6540 	add.w	r5, r5, #3072	@ 0xc00
 8007d7e:	42a8      	cmp	r0, r5
 8007d80:	d00b      	beq.n	8007d9a <TIM_OC4_SetConfig+0x7a>
 8007d82:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007d86:	42a8      	cmp	r0, r5
 8007d88:	d007      	beq.n	8007d9a <TIM_OC4_SetConfig+0x7a>
 8007d8a:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007d8e:	42a8      	cmp	r0, r5
 8007d90:	d003      	beq.n	8007d9a <TIM_OC4_SetConfig+0x7a>
 8007d92:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8007d96:	42a8      	cmp	r0, r5
 8007d98:	d107      	bne.n	8007daa <TIM_OC4_SetConfig+0x8a>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007d9a:	f424 4c40 	bic.w	ip, r4, #49152	@ 0xc000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007d9e:	694c      	ldr	r4, [r1, #20]
 8007da0:	ea4c 1c84 	orr.w	ip, ip, r4, lsl #6
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007da4:	698c      	ldr	r4, [r1, #24]
 8007da6:	ea4c 1484 	orr.w	r4, ip, r4, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007daa:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007dac:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007dae:	684a      	ldr	r2, [r1, #4]
 8007db0:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007db2:	6203      	str	r3, [r0, #32]
}
 8007db4:	bc30      	pop	{r4, r5}
 8007db6:	4770      	bx	lr
 8007db8:	40012c00 	.word	0x40012c00

08007dbc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007dbc:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007dbe:	6a03      	ldr	r3, [r0, #32]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007dc0:	6a02      	ldr	r2, [r0, #32]
 8007dc2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8007dc6:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007dc8:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007dca:	6d02      	ldr	r2, [r0, #80]	@ 0x50

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007dcc:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8007dd0:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007dd4:	680d      	ldr	r5, [r1, #0]
 8007dd6:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007dd8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007ddc:	688a      	ldr	r2, [r1, #8]
 8007dde:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007de2:	4a11      	ldr	r2, [pc, #68]	@ (8007e28 <TIM_OC5_SetConfig+0x6c>)
 8007de4:	4290      	cmp	r0, r2
 8007de6:	d013      	beq.n	8007e10 <TIM_OC5_SetConfig+0x54>
 8007de8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007dec:	4290      	cmp	r0, r2
 8007dee:	d00f      	beq.n	8007e10 <TIM_OC5_SetConfig+0x54>
 8007df0:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8007df4:	4290      	cmp	r0, r2
 8007df6:	d00b      	beq.n	8007e10 <TIM_OC5_SetConfig+0x54>
 8007df8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007dfc:	4290      	cmp	r0, r2
 8007dfe:	d007      	beq.n	8007e10 <TIM_OC5_SetConfig+0x54>
 8007e00:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007e04:	4290      	cmp	r0, r2
 8007e06:	d003      	beq.n	8007e10 <TIM_OC5_SetConfig+0x54>
 8007e08:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007e0c:	4290      	cmp	r0, r2
 8007e0e:	d104      	bne.n	8007e1a <TIM_OC5_SetConfig+0x5e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007e10:	f424 3480 	bic.w	r4, r4, #65536	@ 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007e14:	694a      	ldr	r2, [r1, #20]
 8007e16:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e1a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007e1c:	6505      	str	r5, [r0, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007e1e:	684a      	ldr	r2, [r1, #4]
 8007e20:	6482      	str	r2, [r0, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e22:	6203      	str	r3, [r0, #32]
}
 8007e24:	bc30      	pop	{r4, r5}
 8007e26:	4770      	bx	lr
 8007e28:	40012c00 	.word	0x40012c00

08007e2c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007e2c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e2e:	6a03      	ldr	r3, [r0, #32]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007e30:	6a02      	ldr	r2, [r0, #32]
 8007e32:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8007e36:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e38:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007e3a:	6d02      	ldr	r2, [r0, #80]	@ 0x50

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007e3c:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8007e40:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e44:	680d      	ldr	r5, [r1, #0]
 8007e46:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007e4a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007e4e:	688d      	ldr	r5, [r1, #8]
 8007e50:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e54:	4d11      	ldr	r5, [pc, #68]	@ (8007e9c <TIM_OC6_SetConfig+0x70>)
 8007e56:	42a8      	cmp	r0, r5
 8007e58:	d013      	beq.n	8007e82 <TIM_OC6_SetConfig+0x56>
 8007e5a:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8007e5e:	42a8      	cmp	r0, r5
 8007e60:	d00f      	beq.n	8007e82 <TIM_OC6_SetConfig+0x56>
 8007e62:	f505 6540 	add.w	r5, r5, #3072	@ 0xc00
 8007e66:	42a8      	cmp	r0, r5
 8007e68:	d00b      	beq.n	8007e82 <TIM_OC6_SetConfig+0x56>
 8007e6a:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007e6e:	42a8      	cmp	r0, r5
 8007e70:	d007      	beq.n	8007e82 <TIM_OC6_SetConfig+0x56>
 8007e72:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007e76:	42a8      	cmp	r0, r5
 8007e78:	d003      	beq.n	8007e82 <TIM_OC6_SetConfig+0x56>
 8007e7a:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8007e7e:	42a8      	cmp	r0, r5
 8007e80:	d104      	bne.n	8007e8c <TIM_OC6_SetConfig+0x60>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007e82:	f424 2480 	bic.w	r4, r4, #262144	@ 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007e86:	694d      	ldr	r5, [r1, #20]
 8007e88:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e8c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007e8e:	6502      	str	r2, [r0, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007e90:	684a      	ldr	r2, [r1, #4]
 8007e92:	64c2      	str	r2, [r0, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e94:	6203      	str	r3, [r0, #32]
}
 8007e96:	bc30      	pop	{r4, r5}
 8007e98:	4770      	bx	lr
 8007e9a:	bf00      	nop
 8007e9c:	40012c00 	.word	0x40012c00

08007ea0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ea0:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007ea2:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ea4:	6a04      	ldr	r4, [r0, #32]
 8007ea6:	f024 0401 	bic.w	r4, r4, #1
 8007eaa:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007eac:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007eae:	f024 0cf0 	bic.w	ip, r4, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007eb2:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007eb6:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8007eba:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007ebc:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8007ebe:	6203      	str	r3, [r0, #32]
}
 8007ec0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ec4:	4770      	bx	lr

08007ec6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ec6:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007ec8:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007eca:	6a04      	ldr	r4, [r0, #32]
 8007ecc:	f024 0410 	bic.w	r4, r4, #16
 8007ed0:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ed2:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007ed4:	f424 4c70 	bic.w	ip, r4, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007ed8:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007edc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8007ee0:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007ee4:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8007ee6:	6203      	str	r3, [r0, #32]
}
 8007ee8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007eec:	4770      	bx	lr

08007eee <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007eee:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007ef0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007ef4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007ef8:	430b      	orrs	r3, r1
 8007efa:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007efe:	6083      	str	r3, [r0, #8]
}
 8007f00:	4770      	bx	lr
	...

08007f04 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8007f04:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8007f08:	b2db      	uxtb	r3, r3
 8007f0a:	2b01      	cmp	r3, #1
 8007f0c:	d135      	bne.n	8007f7a <HAL_TIM_Base_Start+0x76>
  htim->State = HAL_TIM_STATE_BUSY;
 8007f0e:	2302      	movs	r3, #2
 8007f10:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f14:	6803      	ldr	r3, [r0, #0]
 8007f16:	4a1c      	ldr	r2, [pc, #112]	@ (8007f88 <HAL_TIM_Base_Start+0x84>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d020      	beq.n	8007f5e <HAL_TIM_Base_Start+0x5a>
 8007f1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f20:	d01d      	beq.n	8007f5e <HAL_TIM_Base_Start+0x5a>
 8007f22:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d019      	beq.n	8007f5e <HAL_TIM_Base_Start+0x5a>
 8007f2a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d015      	beq.n	8007f5e <HAL_TIM_Base_Start+0x5a>
 8007f32:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d011      	beq.n	8007f5e <HAL_TIM_Base_Start+0x5a>
 8007f3a:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d00d      	beq.n	8007f5e <HAL_TIM_Base_Start+0x5a>
 8007f42:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d009      	beq.n	8007f5e <HAL_TIM_Base_Start+0x5a>
 8007f4a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d005      	beq.n	8007f5e <HAL_TIM_Base_Start+0x5a>
    __HAL_TIM_ENABLE(htim);
 8007f52:	681a      	ldr	r2, [r3, #0]
 8007f54:	f042 0201 	orr.w	r2, r2, #1
 8007f58:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8007f5a:	2000      	movs	r0, #0
 8007f5c:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f5e:	6899      	ldr	r1, [r3, #8]
 8007f60:	4a0a      	ldr	r2, [pc, #40]	@ (8007f8c <HAL_TIM_Base_Start+0x88>)
 8007f62:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f64:	2a06      	cmp	r2, #6
 8007f66:	d00a      	beq.n	8007f7e <HAL_TIM_Base_Start+0x7a>
 8007f68:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8007f6c:	d009      	beq.n	8007f82 <HAL_TIM_Base_Start+0x7e>
      __HAL_TIM_ENABLE(htim);
 8007f6e:	681a      	ldr	r2, [r3, #0]
 8007f70:	f042 0201 	orr.w	r2, r2, #1
 8007f74:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8007f76:	2000      	movs	r0, #0
 8007f78:	4770      	bx	lr
    return HAL_ERROR;
 8007f7a:	2001      	movs	r0, #1
 8007f7c:	4770      	bx	lr
  return HAL_OK;
 8007f7e:	2000      	movs	r0, #0
 8007f80:	4770      	bx	lr
 8007f82:	2000      	movs	r0, #0
}
 8007f84:	4770      	bx	lr
 8007f86:	bf00      	nop
 8007f88:	40012c00 	.word	0x40012c00
 8007f8c:	00010007 	.word	0x00010007

08007f90 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8007f90:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8007f94:	b2db      	uxtb	r3, r3
 8007f96:	2b01      	cmp	r3, #1
 8007f98:	d13a      	bne.n	8008010 <HAL_TIM_Base_Start_IT+0x80>
  htim->State = HAL_TIM_STATE_BUSY;
 8007f9a:	2302      	movs	r3, #2
 8007f9c:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007fa0:	6802      	ldr	r2, [r0, #0]
 8007fa2:	68d3      	ldr	r3, [r2, #12]
 8007fa4:	f043 0301 	orr.w	r3, r3, #1
 8007fa8:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007faa:	6803      	ldr	r3, [r0, #0]
 8007fac:	4a1b      	ldr	r2, [pc, #108]	@ (800801c <HAL_TIM_Base_Start_IT+0x8c>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d020      	beq.n	8007ff4 <HAL_TIM_Base_Start_IT+0x64>
 8007fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fb6:	d01d      	beq.n	8007ff4 <HAL_TIM_Base_Start_IT+0x64>
 8007fb8:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d019      	beq.n	8007ff4 <HAL_TIM_Base_Start_IT+0x64>
 8007fc0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d015      	beq.n	8007ff4 <HAL_TIM_Base_Start_IT+0x64>
 8007fc8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d011      	beq.n	8007ff4 <HAL_TIM_Base_Start_IT+0x64>
 8007fd0:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d00d      	beq.n	8007ff4 <HAL_TIM_Base_Start_IT+0x64>
 8007fd8:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d009      	beq.n	8007ff4 <HAL_TIM_Base_Start_IT+0x64>
 8007fe0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d005      	beq.n	8007ff4 <HAL_TIM_Base_Start_IT+0x64>
    __HAL_TIM_ENABLE(htim);
 8007fe8:	681a      	ldr	r2, [r3, #0]
 8007fea:	f042 0201 	orr.w	r2, r2, #1
 8007fee:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8007ff0:	2000      	movs	r0, #0
 8007ff2:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ff4:	6899      	ldr	r1, [r3, #8]
 8007ff6:	4a0a      	ldr	r2, [pc, #40]	@ (8008020 <HAL_TIM_Base_Start_IT+0x90>)
 8007ff8:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ffa:	2a06      	cmp	r2, #6
 8007ffc:	d00a      	beq.n	8008014 <HAL_TIM_Base_Start_IT+0x84>
 8007ffe:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8008002:	d009      	beq.n	8008018 <HAL_TIM_Base_Start_IT+0x88>
      __HAL_TIM_ENABLE(htim);
 8008004:	681a      	ldr	r2, [r3, #0]
 8008006:	f042 0201 	orr.w	r2, r2, #1
 800800a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800800c:	2000      	movs	r0, #0
 800800e:	4770      	bx	lr
    return HAL_ERROR;
 8008010:	2001      	movs	r0, #1
 8008012:	4770      	bx	lr
  return HAL_OK;
 8008014:	2000      	movs	r0, #0
 8008016:	4770      	bx	lr
 8008018:	2000      	movs	r0, #0
}
 800801a:	4770      	bx	lr
 800801c:	40012c00 	.word	0x40012c00
 8008020:	00010007 	.word	0x00010007

08008024 <HAL_TIM_PWM_MspInit>:
}
 8008024:	4770      	bx	lr

08008026 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8008026:	4770      	bx	lr

08008028 <HAL_TIM_IC_CaptureCallback>:
}
 8008028:	4770      	bx	lr

0800802a <HAL_TIM_PWM_PulseFinishedCallback>:
}
 800802a:	4770      	bx	lr

0800802c <HAL_TIM_TriggerCallback>:
}
 800802c:	4770      	bx	lr

0800802e <HAL_TIM_IRQHandler>:
{
 800802e:	b570      	push	{r4, r5, r6, lr}
 8008030:	4605      	mov	r5, r0
  uint32_t itsource = htim->Instance->DIER;
 8008032:	6803      	ldr	r3, [r0, #0]
 8008034:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008036:	691c      	ldr	r4, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008038:	f014 0f02 	tst.w	r4, #2
 800803c:	d010      	beq.n	8008060 <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800803e:	f016 0f02 	tst.w	r6, #2
 8008042:	d00d      	beq.n	8008060 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008044:	f06f 0202 	mvn.w	r2, #2
 8008048:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800804a:	2301      	movs	r3, #1
 800804c:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800804e:	6803      	ldr	r3, [r0, #0]
 8008050:	699b      	ldr	r3, [r3, #24]
 8008052:	f013 0f03 	tst.w	r3, #3
 8008056:	d07c      	beq.n	8008152 <HAL_TIM_IRQHandler+0x124>
          HAL_TIM_IC_CaptureCallback(htim);
 8008058:	f7ff ffe6 	bl	8008028 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800805c:	2300      	movs	r3, #0
 800805e:	772b      	strb	r3, [r5, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008060:	f014 0f04 	tst.w	r4, #4
 8008064:	d012      	beq.n	800808c <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008066:	f016 0f04 	tst.w	r6, #4
 800806a:	d00f      	beq.n	800808c <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800806c:	682b      	ldr	r3, [r5, #0]
 800806e:	f06f 0204 	mvn.w	r2, #4
 8008072:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008074:	2302      	movs	r3, #2
 8008076:	772b      	strb	r3, [r5, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008078:	682b      	ldr	r3, [r5, #0]
 800807a:	699b      	ldr	r3, [r3, #24]
 800807c:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8008080:	d06d      	beq.n	800815e <HAL_TIM_IRQHandler+0x130>
        HAL_TIM_IC_CaptureCallback(htim);
 8008082:	4628      	mov	r0, r5
 8008084:	f7ff ffd0 	bl	8008028 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008088:	2300      	movs	r3, #0
 800808a:	772b      	strb	r3, [r5, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800808c:	f014 0f08 	tst.w	r4, #8
 8008090:	d012      	beq.n	80080b8 <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008092:	f016 0f08 	tst.w	r6, #8
 8008096:	d00f      	beq.n	80080b8 <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008098:	682b      	ldr	r3, [r5, #0]
 800809a:	f06f 0208 	mvn.w	r2, #8
 800809e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80080a0:	2304      	movs	r3, #4
 80080a2:	772b      	strb	r3, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80080a4:	682b      	ldr	r3, [r5, #0]
 80080a6:	69db      	ldr	r3, [r3, #28]
 80080a8:	f013 0f03 	tst.w	r3, #3
 80080ac:	d05e      	beq.n	800816c <HAL_TIM_IRQHandler+0x13e>
        HAL_TIM_IC_CaptureCallback(htim);
 80080ae:	4628      	mov	r0, r5
 80080b0:	f7ff ffba 	bl	8008028 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080b4:	2300      	movs	r3, #0
 80080b6:	772b      	strb	r3, [r5, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80080b8:	f014 0f10 	tst.w	r4, #16
 80080bc:	d012      	beq.n	80080e4 <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80080be:	f016 0f10 	tst.w	r6, #16
 80080c2:	d00f      	beq.n	80080e4 <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80080c4:	682b      	ldr	r3, [r5, #0]
 80080c6:	f06f 0210 	mvn.w	r2, #16
 80080ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80080cc:	2308      	movs	r3, #8
 80080ce:	772b      	strb	r3, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80080d0:	682b      	ldr	r3, [r5, #0]
 80080d2:	69db      	ldr	r3, [r3, #28]
 80080d4:	f413 7f40 	tst.w	r3, #768	@ 0x300
 80080d8:	d04f      	beq.n	800817a <HAL_TIM_IRQHandler+0x14c>
        HAL_TIM_IC_CaptureCallback(htim);
 80080da:	4628      	mov	r0, r5
 80080dc:	f7ff ffa4 	bl	8008028 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080e0:	2300      	movs	r3, #0
 80080e2:	772b      	strb	r3, [r5, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80080e4:	f014 0f01 	tst.w	r4, #1
 80080e8:	d002      	beq.n	80080f0 <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80080ea:	f016 0f01 	tst.w	r6, #1
 80080ee:	d14b      	bne.n	8008188 <HAL_TIM_IRQHandler+0x15a>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80080f0:	f414 5f02 	tst.w	r4, #8320	@ 0x2080
 80080f4:	d002      	beq.n	80080fc <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80080f6:	f016 0f80 	tst.w	r6, #128	@ 0x80
 80080fa:	d14d      	bne.n	8008198 <HAL_TIM_IRQHandler+0x16a>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80080fc:	f414 7f80 	tst.w	r4, #256	@ 0x100
 8008100:	d002      	beq.n	8008108 <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008102:	f016 0f80 	tst.w	r6, #128	@ 0x80
 8008106:	d14f      	bne.n	80081a8 <HAL_TIM_IRQHandler+0x17a>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008108:	f014 0f40 	tst.w	r4, #64	@ 0x40
 800810c:	d002      	beq.n	8008114 <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800810e:	f016 0f40 	tst.w	r6, #64	@ 0x40
 8008112:	d151      	bne.n	80081b8 <HAL_TIM_IRQHandler+0x18a>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008114:	f014 0f20 	tst.w	r4, #32
 8008118:	d002      	beq.n	8008120 <HAL_TIM_IRQHandler+0xf2>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800811a:	f016 0f20 	tst.w	r6, #32
 800811e:	d153      	bne.n	80081c8 <HAL_TIM_IRQHandler+0x19a>
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8008120:	f414 1f80 	tst.w	r4, #1048576	@ 0x100000
 8008124:	d002      	beq.n	800812c <HAL_TIM_IRQHandler+0xfe>
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8008126:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 800812a:	d155      	bne.n	80081d8 <HAL_TIM_IRQHandler+0x1aa>
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800812c:	f414 1f00 	tst.w	r4, #2097152	@ 0x200000
 8008130:	d002      	beq.n	8008138 <HAL_TIM_IRQHandler+0x10a>
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8008132:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 8008136:	d157      	bne.n	80081e8 <HAL_TIM_IRQHandler+0x1ba>
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8008138:	f414 0f80 	tst.w	r4, #4194304	@ 0x400000
 800813c:	d002      	beq.n	8008144 <HAL_TIM_IRQHandler+0x116>
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800813e:	f416 0f80 	tst.w	r6, #4194304	@ 0x400000
 8008142:	d159      	bne.n	80081f8 <HAL_TIM_IRQHandler+0x1ca>
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8008144:	f414 0f00 	tst.w	r4, #8388608	@ 0x800000
 8008148:	d002      	beq.n	8008150 <HAL_TIM_IRQHandler+0x122>
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800814a:	f416 0f00 	tst.w	r6, #8388608	@ 0x800000
 800814e:	d15b      	bne.n	8008208 <HAL_TIM_IRQHandler+0x1da>
}
 8008150:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008152:	f7ff ff68 	bl	8008026 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008156:	4628      	mov	r0, r5
 8008158:	f7ff ff67 	bl	800802a <HAL_TIM_PWM_PulseFinishedCallback>
 800815c:	e77e      	b.n	800805c <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800815e:	4628      	mov	r0, r5
 8008160:	f7ff ff61 	bl	8008026 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008164:	4628      	mov	r0, r5
 8008166:	f7ff ff60 	bl	800802a <HAL_TIM_PWM_PulseFinishedCallback>
 800816a:	e78d      	b.n	8008088 <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800816c:	4628      	mov	r0, r5
 800816e:	f7ff ff5a 	bl	8008026 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008172:	4628      	mov	r0, r5
 8008174:	f7ff ff59 	bl	800802a <HAL_TIM_PWM_PulseFinishedCallback>
 8008178:	e79c      	b.n	80080b4 <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800817a:	4628      	mov	r0, r5
 800817c:	f7ff ff53 	bl	8008026 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008180:	4628      	mov	r0, r5
 8008182:	f7ff ff52 	bl	800802a <HAL_TIM_PWM_PulseFinishedCallback>
 8008186:	e7ab      	b.n	80080e0 <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008188:	682b      	ldr	r3, [r5, #0]
 800818a:	f06f 0201 	mvn.w	r2, #1
 800818e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8008190:	4628      	mov	r0, r5
 8008192:	f7f9 fe0f 	bl	8001db4 <HAL_TIM_PeriodElapsedCallback>
 8008196:	e7ab      	b.n	80080f0 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008198:	682b      	ldr	r3, [r5, #0]
 800819a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800819e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80081a0:	4628      	mov	r0, r5
 80081a2:	f000 fc24 	bl	80089ee <HAL_TIMEx_BreakCallback>
 80081a6:	e7a9      	b.n	80080fc <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80081a8:	682b      	ldr	r3, [r5, #0]
 80081aa:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80081ae:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80081b0:	4628      	mov	r0, r5
 80081b2:	f000 fc1d 	bl	80089f0 <HAL_TIMEx_Break2Callback>
 80081b6:	e7a7      	b.n	8008108 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80081b8:	682b      	ldr	r3, [r5, #0]
 80081ba:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80081be:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80081c0:	4628      	mov	r0, r5
 80081c2:	f7ff ff33 	bl	800802c <HAL_TIM_TriggerCallback>
 80081c6:	e7a5      	b.n	8008114 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80081c8:	682b      	ldr	r3, [r5, #0]
 80081ca:	f06f 0220 	mvn.w	r2, #32
 80081ce:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80081d0:	4628      	mov	r0, r5
 80081d2:	f000 fc0b 	bl	80089ec <HAL_TIMEx_CommutCallback>
 80081d6:	e7a3      	b.n	8008120 <HAL_TIM_IRQHandler+0xf2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80081d8:	682b      	ldr	r3, [r5, #0]
 80081da:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80081de:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_EncoderIndexCallback(htim);
 80081e0:	4628      	mov	r0, r5
 80081e2:	f000 fc06 	bl	80089f2 <HAL_TIMEx_EncoderIndexCallback>
 80081e6:	e7a1      	b.n	800812c <HAL_TIM_IRQHandler+0xfe>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80081e8:	682b      	ldr	r3, [r5, #0]
 80081ea:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80081ee:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_DirectionChangeCallback(htim);
 80081f0:	4628      	mov	r0, r5
 80081f2:	f000 fbff 	bl	80089f4 <HAL_TIMEx_DirectionChangeCallback>
 80081f6:	e79f      	b.n	8008138 <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80081f8:	682b      	ldr	r3, [r5, #0]
 80081fa:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80081fe:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_IndexErrorCallback(htim);
 8008200:	4628      	mov	r0, r5
 8008202:	f000 fbf8 	bl	80089f6 <HAL_TIMEx_IndexErrorCallback>
 8008206:	e79d      	b.n	8008144 <HAL_TIM_IRQHandler+0x116>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8008208:	682b      	ldr	r3, [r5, #0]
 800820a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800820e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008210:	4628      	mov	r0, r5
 8008212:	f000 fbf1 	bl	80089f8 <HAL_TIMEx_TransitionErrorCallback>
}
 8008216:	e79b      	b.n	8008150 <HAL_TIM_IRQHandler+0x122>

08008218 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8008218:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800821a:	4a3a      	ldr	r2, [pc, #232]	@ (8008304 <TIM_Base_SetConfig+0xec>)
 800821c:	4290      	cmp	r0, r2
 800821e:	d016      	beq.n	800824e <TIM_Base_SetConfig+0x36>
 8008220:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8008224:	d013      	beq.n	800824e <TIM_Base_SetConfig+0x36>
 8008226:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 800822a:	4290      	cmp	r0, r2
 800822c:	d00f      	beq.n	800824e <TIM_Base_SetConfig+0x36>
 800822e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008232:	4290      	cmp	r0, r2
 8008234:	d00b      	beq.n	800824e <TIM_Base_SetConfig+0x36>
 8008236:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800823a:	4290      	cmp	r0, r2
 800823c:	d007      	beq.n	800824e <TIM_Base_SetConfig+0x36>
 800823e:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 8008242:	4290      	cmp	r0, r2
 8008244:	d003      	beq.n	800824e <TIM_Base_SetConfig+0x36>
 8008246:	f502 52e0 	add.w	r2, r2, #7168	@ 0x1c00
 800824a:	4290      	cmp	r0, r2
 800824c:	d103      	bne.n	8008256 <TIM_Base_SetConfig+0x3e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800824e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8008252:	684a      	ldr	r2, [r1, #4]
 8008254:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008256:	4a2b      	ldr	r2, [pc, #172]	@ (8008304 <TIM_Base_SetConfig+0xec>)
 8008258:	4290      	cmp	r0, r2
 800825a:	d022      	beq.n	80082a2 <TIM_Base_SetConfig+0x8a>
 800825c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8008260:	d01f      	beq.n	80082a2 <TIM_Base_SetConfig+0x8a>
 8008262:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8008266:	4290      	cmp	r0, r2
 8008268:	d01b      	beq.n	80082a2 <TIM_Base_SetConfig+0x8a>
 800826a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800826e:	4290      	cmp	r0, r2
 8008270:	d017      	beq.n	80082a2 <TIM_Base_SetConfig+0x8a>
 8008272:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008276:	4290      	cmp	r0, r2
 8008278:	d013      	beq.n	80082a2 <TIM_Base_SetConfig+0x8a>
 800827a:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 800827e:	4290      	cmp	r0, r2
 8008280:	d00f      	beq.n	80082a2 <TIM_Base_SetConfig+0x8a>
 8008282:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8008286:	4290      	cmp	r0, r2
 8008288:	d00b      	beq.n	80082a2 <TIM_Base_SetConfig+0x8a>
 800828a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800828e:	4290      	cmp	r0, r2
 8008290:	d007      	beq.n	80082a2 <TIM_Base_SetConfig+0x8a>
 8008292:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008296:	4290      	cmp	r0, r2
 8008298:	d003      	beq.n	80082a2 <TIM_Base_SetConfig+0x8a>
 800829a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800829e:	4290      	cmp	r0, r2
 80082a0:	d103      	bne.n	80082aa <TIM_Base_SetConfig+0x92>
    tmpcr1 &= ~TIM_CR1_CKD;
 80082a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80082a6:	68ca      	ldr	r2, [r1, #12]
 80082a8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80082aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80082ae:	694a      	ldr	r2, [r1, #20]
 80082b0:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80082b2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80082b4:	688b      	ldr	r3, [r1, #8]
 80082b6:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80082b8:	680b      	ldr	r3, [r1, #0]
 80082ba:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80082bc:	4b11      	ldr	r3, [pc, #68]	@ (8008304 <TIM_Base_SetConfig+0xec>)
 80082be:	4298      	cmp	r0, r3
 80082c0:	d013      	beq.n	80082ea <TIM_Base_SetConfig+0xd2>
 80082c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082c6:	4298      	cmp	r0, r3
 80082c8:	d00f      	beq.n	80082ea <TIM_Base_SetConfig+0xd2>
 80082ca:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 80082ce:	4298      	cmp	r0, r3
 80082d0:	d00b      	beq.n	80082ea <TIM_Base_SetConfig+0xd2>
 80082d2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80082d6:	4298      	cmp	r0, r3
 80082d8:	d007      	beq.n	80082ea <TIM_Base_SetConfig+0xd2>
 80082da:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80082de:	4298      	cmp	r0, r3
 80082e0:	d003      	beq.n	80082ea <TIM_Base_SetConfig+0xd2>
 80082e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082e6:	4298      	cmp	r0, r3
 80082e8:	d101      	bne.n	80082ee <TIM_Base_SetConfig+0xd6>
    TIMx->RCR = Structure->RepetitionCounter;
 80082ea:	690b      	ldr	r3, [r1, #16]
 80082ec:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 80082ee:	2301      	movs	r3, #1
 80082f0:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80082f2:	6903      	ldr	r3, [r0, #16]
 80082f4:	f013 0f01 	tst.w	r3, #1
 80082f8:	d003      	beq.n	8008302 <TIM_Base_SetConfig+0xea>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80082fa:	6903      	ldr	r3, [r0, #16]
 80082fc:	f023 0301 	bic.w	r3, r3, #1
 8008300:	6103      	str	r3, [r0, #16]
}
 8008302:	4770      	bx	lr
 8008304:	40012c00 	.word	0x40012c00

08008308 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8008308:	b360      	cbz	r0, 8008364 <HAL_TIM_Base_Init+0x5c>
{
 800830a:	b510      	push	{r4, lr}
 800830c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800830e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8008312:	b313      	cbz	r3, 800835a <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8008314:	2302      	movs	r3, #2
 8008316:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800831a:	4621      	mov	r1, r4
 800831c:	f851 0b04 	ldr.w	r0, [r1], #4
 8008320:	f7ff ff7a 	bl	8008218 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008324:	2301      	movs	r3, #1
 8008326:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800832a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800832e:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8008332:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8008336:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800833a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800833e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008342:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8008346:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800834a:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 800834e:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8008352:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8008356:	2000      	movs	r0, #0
}
 8008358:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800835a:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800835e:	f7fc f8c5 	bl	80044ec <HAL_TIM_Base_MspInit>
 8008362:	e7d7      	b.n	8008314 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8008364:	2001      	movs	r0, #1
}
 8008366:	4770      	bx	lr

08008368 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8008368:	b360      	cbz	r0, 80083c4 <HAL_TIM_PWM_Init+0x5c>
{
 800836a:	b510      	push	{r4, lr}
 800836c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800836e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8008372:	b313      	cbz	r3, 80083ba <HAL_TIM_PWM_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8008374:	2302      	movs	r3, #2
 8008376:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800837a:	4621      	mov	r1, r4
 800837c:	f851 0b04 	ldr.w	r0, [r1], #4
 8008380:	f7ff ff4a 	bl	8008218 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008384:	2301      	movs	r3, #1
 8008386:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800838a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800838e:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8008392:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8008396:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800839a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800839e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083a2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80083a6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80083aa:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 80083ae:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 80083b2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80083b6:	2000      	movs	r0, #0
}
 80083b8:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80083ba:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80083be:	f7ff fe31 	bl	8008024 <HAL_TIM_PWM_MspInit>
 80083c2:	e7d7      	b.n	8008374 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 80083c4:	2001      	movs	r0, #1
}
 80083c6:	4770      	bx	lr

080083c8 <TIM_OC2_SetConfig>:
{
 80083c8:	b430      	push	{r4, r5}
  tmpccer = TIMx->CCER;
 80083ca:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80083cc:	6a02      	ldr	r2, [r0, #32]
 80083ce:	f022 0210 	bic.w	r2, r2, #16
 80083d2:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80083d4:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80083d6:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80083d8:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 80083dc:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80083e0:	680d      	ldr	r5, [r1, #0]
 80083e2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 80083e6:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80083ea:	688d      	ldr	r5, [r1, #8]
 80083ec:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80083f0:	4d1b      	ldr	r5, [pc, #108]	@ (8008460 <TIM_OC2_SetConfig+0x98>)
 80083f2:	42a8      	cmp	r0, r5
 80083f4:	d007      	beq.n	8008406 <TIM_OC2_SetConfig+0x3e>
 80083f6:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 80083fa:	42a8      	cmp	r0, r5
 80083fc:	d003      	beq.n	8008406 <TIM_OC2_SetConfig+0x3e>
 80083fe:	f505 55e0 	add.w	r5, r5, #7168	@ 0x1c00
 8008402:	42a8      	cmp	r0, r5
 8008404:	d106      	bne.n	8008414 <TIM_OC2_SetConfig+0x4c>
    tmpccer &= ~TIM_CCER_CC2NP;
 8008406:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800840a:	68cd      	ldr	r5, [r1, #12]
 800840c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8008410:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008414:	4d12      	ldr	r5, [pc, #72]	@ (8008460 <TIM_OC2_SetConfig+0x98>)
 8008416:	42a8      	cmp	r0, r5
 8008418:	d013      	beq.n	8008442 <TIM_OC2_SetConfig+0x7a>
 800841a:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 800841e:	42a8      	cmp	r0, r5
 8008420:	d00f      	beq.n	8008442 <TIM_OC2_SetConfig+0x7a>
 8008422:	f505 6540 	add.w	r5, r5, #3072	@ 0xc00
 8008426:	42a8      	cmp	r0, r5
 8008428:	d00b      	beq.n	8008442 <TIM_OC2_SetConfig+0x7a>
 800842a:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800842e:	42a8      	cmp	r0, r5
 8008430:	d007      	beq.n	8008442 <TIM_OC2_SetConfig+0x7a>
 8008432:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8008436:	42a8      	cmp	r0, r5
 8008438:	d003      	beq.n	8008442 <TIM_OC2_SetConfig+0x7a>
 800843a:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 800843e:	42a8      	cmp	r0, r5
 8008440:	d107      	bne.n	8008452 <TIM_OC2_SetConfig+0x8a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008442:	f424 6c40 	bic.w	ip, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008446:	694c      	ldr	r4, [r1, #20]
 8008448:	ea4c 0c84 	orr.w	ip, ip, r4, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800844c:	698c      	ldr	r4, [r1, #24]
 800844e:	ea4c 0484 	orr.w	r4, ip, r4, lsl #2
  TIMx->CR2 = tmpcr2;
 8008452:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8008454:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8008456:	684a      	ldr	r2, [r1, #4]
 8008458:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 800845a:	6203      	str	r3, [r0, #32]
}
 800845c:	bc30      	pop	{r4, r5}
 800845e:	4770      	bx	lr
 8008460:	40012c00 	.word	0x40012c00

08008464 <HAL_TIM_PWM_ConfigChannel>:
{
 8008464:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8008466:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800846a:	2b01      	cmp	r3, #1
 800846c:	f000 8095 	beq.w	800859a <HAL_TIM_PWM_ConfigChannel+0x136>
 8008470:	4604      	mov	r4, r0
 8008472:	460d      	mov	r5, r1
 8008474:	2301      	movs	r3, #1
 8008476:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 800847a:	2a14      	cmp	r2, #20
 800847c:	f200 8088 	bhi.w	8008590 <HAL_TIM_PWM_ConfigChannel+0x12c>
 8008480:	e8df f002 	tbb	[pc, r2]
 8008484:	8686860b 	.word	0x8686860b
 8008488:	8686861f 	.word	0x8686861f
 800848c:	86868634 	.word	0x86868634
 8008490:	86868648 	.word	0x86868648
 8008494:	8686865d 	.word	0x8686865d
 8008498:	71          	.byte	0x71
 8008499:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800849a:	6800      	ldr	r0, [r0, #0]
 800849c:	f7ff fb9c 	bl	8007bd8 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80084a0:	6822      	ldr	r2, [r4, #0]
 80084a2:	6993      	ldr	r3, [r2, #24]
 80084a4:	f043 0308 	orr.w	r3, r3, #8
 80084a8:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80084aa:	6822      	ldr	r2, [r4, #0]
 80084ac:	6993      	ldr	r3, [r2, #24]
 80084ae:	f023 0304 	bic.w	r3, r3, #4
 80084b2:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80084b4:	6822      	ldr	r2, [r4, #0]
 80084b6:	6993      	ldr	r3, [r2, #24]
 80084b8:	6929      	ldr	r1, [r5, #16]
 80084ba:	430b      	orrs	r3, r1
 80084bc:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80084be:	2000      	movs	r0, #0
      break;
 80084c0:	e067      	b.n	8008592 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80084c2:	6800      	ldr	r0, [r0, #0]
 80084c4:	f7ff ff80 	bl	80083c8 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80084c8:	6822      	ldr	r2, [r4, #0]
 80084ca:	6993      	ldr	r3, [r2, #24]
 80084cc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80084d0:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80084d2:	6822      	ldr	r2, [r4, #0]
 80084d4:	6993      	ldr	r3, [r2, #24]
 80084d6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80084da:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80084dc:	6822      	ldr	r2, [r4, #0]
 80084de:	6993      	ldr	r3, [r2, #24]
 80084e0:	6929      	ldr	r1, [r5, #16]
 80084e2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80084e6:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80084e8:	2000      	movs	r0, #0
      break;
 80084ea:	e052      	b.n	8008592 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80084ec:	6800      	ldr	r0, [r0, #0]
 80084ee:	f7ff fbc9 	bl	8007c84 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80084f2:	6822      	ldr	r2, [r4, #0]
 80084f4:	69d3      	ldr	r3, [r2, #28]
 80084f6:	f043 0308 	orr.w	r3, r3, #8
 80084fa:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80084fc:	6822      	ldr	r2, [r4, #0]
 80084fe:	69d3      	ldr	r3, [r2, #28]
 8008500:	f023 0304 	bic.w	r3, r3, #4
 8008504:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008506:	6822      	ldr	r2, [r4, #0]
 8008508:	69d3      	ldr	r3, [r2, #28]
 800850a:	6929      	ldr	r1, [r5, #16]
 800850c:	430b      	orrs	r3, r1
 800850e:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8008510:	2000      	movs	r0, #0
      break;
 8008512:	e03e      	b.n	8008592 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008514:	6800      	ldr	r0, [r0, #0]
 8008516:	f7ff fc03 	bl	8007d20 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800851a:	6822      	ldr	r2, [r4, #0]
 800851c:	69d3      	ldr	r3, [r2, #28]
 800851e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8008522:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008524:	6822      	ldr	r2, [r4, #0]
 8008526:	69d3      	ldr	r3, [r2, #28]
 8008528:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800852c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800852e:	6822      	ldr	r2, [r4, #0]
 8008530:	69d3      	ldr	r3, [r2, #28]
 8008532:	6929      	ldr	r1, [r5, #16]
 8008534:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8008538:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800853a:	2000      	movs	r0, #0
      break;
 800853c:	e029      	b.n	8008592 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800853e:	6800      	ldr	r0, [r0, #0]
 8008540:	f7ff fc3c 	bl	8007dbc <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008544:	6822      	ldr	r2, [r4, #0]
 8008546:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8008548:	f043 0308 	orr.w	r3, r3, #8
 800854c:	6513      	str	r3, [r2, #80]	@ 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800854e:	6822      	ldr	r2, [r4, #0]
 8008550:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8008552:	f023 0304 	bic.w	r3, r3, #4
 8008556:	6513      	str	r3, [r2, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008558:	6822      	ldr	r2, [r4, #0]
 800855a:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800855c:	6929      	ldr	r1, [r5, #16]
 800855e:	430b      	orrs	r3, r1
 8008560:	6513      	str	r3, [r2, #80]	@ 0x50
  HAL_StatusTypeDef status = HAL_OK;
 8008562:	2000      	movs	r0, #0
      break;
 8008564:	e015      	b.n	8008592 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008566:	6800      	ldr	r0, [r0, #0]
 8008568:	f7ff fc60 	bl	8007e2c <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800856c:	6822      	ldr	r2, [r4, #0]
 800856e:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8008570:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8008574:	6513      	str	r3, [r2, #80]	@ 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008576:	6822      	ldr	r2, [r4, #0]
 8008578:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800857a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800857e:	6513      	str	r3, [r2, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008580:	6822      	ldr	r2, [r4, #0]
 8008582:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8008584:	6929      	ldr	r1, [r5, #16]
 8008586:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800858a:	6513      	str	r3, [r2, #80]	@ 0x50
  HAL_StatusTypeDef status = HAL_OK;
 800858c:	2000      	movs	r0, #0
      break;
 800858e:	e000      	b.n	8008592 <HAL_TIM_PWM_ConfigChannel+0x12e>
  switch (Channel)
 8008590:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8008592:	2300      	movs	r3, #0
 8008594:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8008598:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 800859a:	2002      	movs	r0, #2
 800859c:	e7fc      	b.n	8008598 <HAL_TIM_PWM_ConfigChannel+0x134>

0800859e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800859e:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80085a0:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80085a2:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80085a6:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 80085aa:	430a      	orrs	r2, r1
 80085ac:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80085b0:	6082      	str	r2, [r0, #8]
}
 80085b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80085b6:	4770      	bx	lr

080085b8 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80085b8:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80085bc:	2b01      	cmp	r3, #1
 80085be:	f000 8095 	beq.w	80086ec <HAL_TIM_ConfigClockSource+0x134>
{
 80085c2:	b510      	push	{r4, lr}
 80085c4:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80085c6:	2301      	movs	r3, #1
 80085c8:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80085cc:	2302      	movs	r3, #2
 80085ce:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80085d2:	6802      	ldr	r2, [r0, #0]
 80085d4:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80085d6:	4b46      	ldr	r3, [pc, #280]	@ (80086f0 <HAL_TIM_ConfigClockSource+0x138>)
 80085d8:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 80085da:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80085dc:	680b      	ldr	r3, [r1, #0]
 80085de:	2b70      	cmp	r3, #112	@ 0x70
 80085e0:	d05b      	beq.n	800869a <HAL_TIM_ConfigClockSource+0xe2>
 80085e2:	d831      	bhi.n	8008648 <HAL_TIM_ConfigClockSource+0x90>
 80085e4:	2b50      	cmp	r3, #80	@ 0x50
 80085e6:	d072      	beq.n	80086ce <HAL_TIM_ConfigClockSource+0x116>
 80085e8:	d90c      	bls.n	8008604 <HAL_TIM_ConfigClockSource+0x4c>
 80085ea:	2b60      	cmp	r3, #96	@ 0x60
 80085ec:	d12a      	bne.n	8008644 <HAL_TIM_ConfigClockSource+0x8c>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80085ee:	68ca      	ldr	r2, [r1, #12]
 80085f0:	6849      	ldr	r1, [r1, #4]
 80085f2:	6820      	ldr	r0, [r4, #0]
 80085f4:	f7ff fc67 	bl	8007ec6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80085f8:	2160      	movs	r1, #96	@ 0x60
 80085fa:	6820      	ldr	r0, [r4, #0]
 80085fc:	f7ff fc77 	bl	8007eee <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8008600:	2000      	movs	r0, #0
      break;
 8008602:	e038      	b.n	8008676 <HAL_TIM_ConfigClockSource+0xbe>
  switch (sClockSourceConfig->ClockSource)
 8008604:	2b40      	cmp	r3, #64	@ 0x40
 8008606:	d10a      	bne.n	800861e <HAL_TIM_ConfigClockSource+0x66>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008608:	68ca      	ldr	r2, [r1, #12]
 800860a:	6849      	ldr	r1, [r1, #4]
 800860c:	6820      	ldr	r0, [r4, #0]
 800860e:	f7ff fc47 	bl	8007ea0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008612:	2140      	movs	r1, #64	@ 0x40
 8008614:	6820      	ldr	r0, [r4, #0]
 8008616:	f7ff fc6a 	bl	8007eee <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800861a:	2000      	movs	r0, #0
      break;
 800861c:	e02b      	b.n	8008676 <HAL_TIM_ConfigClockSource+0xbe>
  switch (sClockSourceConfig->ClockSource)
 800861e:	d861      	bhi.n	80086e4 <HAL_TIM_ConfigClockSource+0x12c>
 8008620:	2b20      	cmp	r3, #32
 8008622:	d007      	beq.n	8008634 <HAL_TIM_ConfigClockSource+0x7c>
 8008624:	d903      	bls.n	800862e <HAL_TIM_ConfigClockSource+0x76>
 8008626:	2b30      	cmp	r3, #48	@ 0x30
 8008628:	d004      	beq.n	8008634 <HAL_TIM_ConfigClockSource+0x7c>
      status = HAL_ERROR;
 800862a:	2001      	movs	r0, #1
 800862c:	e023      	b.n	8008676 <HAL_TIM_ConfigClockSource+0xbe>
  switch (sClockSourceConfig->ClockSource)
 800862e:	b10b      	cbz	r3, 8008634 <HAL_TIM_ConfigClockSource+0x7c>
 8008630:	2b10      	cmp	r3, #16
 8008632:	d105      	bne.n	8008640 <HAL_TIM_ConfigClockSource+0x88>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008634:	4619      	mov	r1, r3
 8008636:	6820      	ldr	r0, [r4, #0]
 8008638:	f7ff fc59 	bl	8007eee <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800863c:	2000      	movs	r0, #0
      break;
 800863e:	e01a      	b.n	8008676 <HAL_TIM_ConfigClockSource+0xbe>
      status = HAL_ERROR;
 8008640:	2001      	movs	r0, #1
 8008642:	e018      	b.n	8008676 <HAL_TIM_ConfigClockSource+0xbe>
 8008644:	2001      	movs	r0, #1
 8008646:	e016      	b.n	8008676 <HAL_TIM_ConfigClockSource+0xbe>
  switch (sClockSourceConfig->ClockSource)
 8008648:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800864c:	d032      	beq.n	80086b4 <HAL_TIM_ConfigClockSource+0xfc>
 800864e:	d90e      	bls.n	800866e <HAL_TIM_ConfigClockSource+0xb6>
 8008650:	4a28      	ldr	r2, [pc, #160]	@ (80086f4 <HAL_TIM_ConfigClockSource+0x13c>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d0ee      	beq.n	8008634 <HAL_TIM_ConfigClockSource+0x7c>
 8008656:	d915      	bls.n	8008684 <HAL_TIM_ConfigClockSource+0xcc>
 8008658:	4a27      	ldr	r2, [pc, #156]	@ (80086f8 <HAL_TIM_ConfigClockSource+0x140>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d0ea      	beq.n	8008634 <HAL_TIM_ConfigClockSource+0x7c>
 800865e:	3220      	adds	r2, #32
 8008660:	4293      	cmp	r3, r2
 8008662:	d0e7      	beq.n	8008634 <HAL_TIM_ConfigClockSource+0x7c>
 8008664:	3a30      	subs	r2, #48	@ 0x30
 8008666:	4293      	cmp	r3, r2
 8008668:	d0e4      	beq.n	8008634 <HAL_TIM_ConfigClockSource+0x7c>
      status = HAL_ERROR;
 800866a:	2001      	movs	r0, #1
 800866c:	e003      	b.n	8008676 <HAL_TIM_ConfigClockSource+0xbe>
  switch (sClockSourceConfig->ClockSource)
 800866e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008672:	d139      	bne.n	80086e8 <HAL_TIM_ConfigClockSource+0x130>
 8008674:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8008676:	2301      	movs	r3, #1
 8008678:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 800867c:	2300      	movs	r3, #0
 800867e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8008682:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 8008684:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008688:	d0d4      	beq.n	8008634 <HAL_TIM_ConfigClockSource+0x7c>
 800868a:	3a10      	subs	r2, #16
 800868c:	4293      	cmp	r3, r2
 800868e:	d0d1      	beq.n	8008634 <HAL_TIM_ConfigClockSource+0x7c>
 8008690:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008694:	d0ce      	beq.n	8008634 <HAL_TIM_ConfigClockSource+0x7c>
      status = HAL_ERROR;
 8008696:	2001      	movs	r0, #1
 8008698:	e7ed      	b.n	8008676 <HAL_TIM_ConfigClockSource+0xbe>
      TIM_ETR_SetConfig(htim->Instance,
 800869a:	68cb      	ldr	r3, [r1, #12]
 800869c:	684a      	ldr	r2, [r1, #4]
 800869e:	6889      	ldr	r1, [r1, #8]
 80086a0:	6820      	ldr	r0, [r4, #0]
 80086a2:	f7ff ff7c 	bl	800859e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80086a6:	6822      	ldr	r2, [r4, #0]
 80086a8:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80086aa:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 80086ae:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80086b0:	2000      	movs	r0, #0
      break;
 80086b2:	e7e0      	b.n	8008676 <HAL_TIM_ConfigClockSource+0xbe>
      TIM_ETR_SetConfig(htim->Instance,
 80086b4:	68cb      	ldr	r3, [r1, #12]
 80086b6:	684a      	ldr	r2, [r1, #4]
 80086b8:	6889      	ldr	r1, [r1, #8]
 80086ba:	6820      	ldr	r0, [r4, #0]
 80086bc:	f7ff ff6f 	bl	800859e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80086c0:	6822      	ldr	r2, [r4, #0]
 80086c2:	6893      	ldr	r3, [r2, #8]
 80086c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80086c8:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80086ca:	2000      	movs	r0, #0
      break;
 80086cc:	e7d3      	b.n	8008676 <HAL_TIM_ConfigClockSource+0xbe>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80086ce:	68ca      	ldr	r2, [r1, #12]
 80086d0:	6849      	ldr	r1, [r1, #4]
 80086d2:	6820      	ldr	r0, [r4, #0]
 80086d4:	f7ff fbe4 	bl	8007ea0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80086d8:	2150      	movs	r1, #80	@ 0x50
 80086da:	6820      	ldr	r0, [r4, #0]
 80086dc:	f7ff fc07 	bl	8007eee <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80086e0:	2000      	movs	r0, #0
      break;
 80086e2:	e7c8      	b.n	8008676 <HAL_TIM_ConfigClockSource+0xbe>
      status = HAL_ERROR;
 80086e4:	2001      	movs	r0, #1
 80086e6:	e7c6      	b.n	8008676 <HAL_TIM_ConfigClockSource+0xbe>
 80086e8:	2001      	movs	r0, #1
 80086ea:	e7c4      	b.n	8008676 <HAL_TIM_ConfigClockSource+0xbe>
  __HAL_LOCK(htim);
 80086ec:	2002      	movs	r0, #2
}
 80086ee:	4770      	bx	lr
 80086f0:	ffce0088 	.word	0xffce0088
 80086f4:	00100030 	.word	0x00100030
 80086f8:	00100050 	.word	0x00100050

080086fc <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80086fc:	f001 011f 	and.w	r1, r1, #31
 8008700:	f04f 0c01 	mov.w	ip, #1
 8008704:	fa0c fc01 	lsl.w	ip, ip, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008708:	6a03      	ldr	r3, [r0, #32]
 800870a:	ea23 030c 	bic.w	r3, r3, ip
 800870e:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008710:	6a03      	ldr	r3, [r0, #32]
 8008712:	408a      	lsls	r2, r1
 8008714:	4313      	orrs	r3, r2
 8008716:	6203      	str	r3, [r0, #32]
}
 8008718:	4770      	bx	lr
	...

0800871c <HAL_TIM_PWM_Start>:
{
 800871c:	b510      	push	{r4, lr}
 800871e:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008720:	2910      	cmp	r1, #16
 8008722:	d83d      	bhi.n	80087a0 <HAL_TIM_PWM_Start+0x84>
 8008724:	e8df f001 	tbb	[pc, r1]
 8008728:	3c3c3c09 	.word	0x3c3c3c09
 800872c:	3c3c3c20 	.word	0x3c3c3c20
 8008730:	3c3c3c27 	.word	0x3c3c3c27
 8008734:	3c3c3c2e 	.word	0x3c3c3c2e
 8008738:	35          	.byte	0x35
 8008739:	00          	.byte	0x00
 800873a:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 800873e:	b2db      	uxtb	r3, r3
 8008740:	3b01      	subs	r3, #1
 8008742:	bf18      	it	ne
 8008744:	2301      	movne	r3, #1
 8008746:	2b00      	cmp	r3, #0
 8008748:	f040 809b 	bne.w	8008882 <HAL_TIM_PWM_Start+0x166>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800874c:	2910      	cmp	r1, #16
 800874e:	f200 8086 	bhi.w	800885e <HAL_TIM_PWM_Start+0x142>
 8008752:	e8df f001 	tbb	[pc, r1]
 8008756:	842c      	.short	0x842c
 8008758:	84748484 	.word	0x84748484
 800875c:	84788484 	.word	0x84788484
 8008760:	847c8484 	.word	0x847c8484
 8008764:	8484      	.short	0x8484
 8008766:	80          	.byte	0x80
 8008767:	00          	.byte	0x00
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008768:	f890 303f 	ldrb.w	r3, [r0, #63]	@ 0x3f
 800876c:	b2db      	uxtb	r3, r3
 800876e:	3b01      	subs	r3, #1
 8008770:	bf18      	it	ne
 8008772:	2301      	movne	r3, #1
 8008774:	e7e7      	b.n	8008746 <HAL_TIM_PWM_Start+0x2a>
 8008776:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800877a:	b2db      	uxtb	r3, r3
 800877c:	3b01      	subs	r3, #1
 800877e:	bf18      	it	ne
 8008780:	2301      	movne	r3, #1
 8008782:	e7e0      	b.n	8008746 <HAL_TIM_PWM_Start+0x2a>
 8008784:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8008788:	b2db      	uxtb	r3, r3
 800878a:	3b01      	subs	r3, #1
 800878c:	bf18      	it	ne
 800878e:	2301      	movne	r3, #1
 8008790:	e7d9      	b.n	8008746 <HAL_TIM_PWM_Start+0x2a>
 8008792:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8008796:	b2db      	uxtb	r3, r3
 8008798:	3b01      	subs	r3, #1
 800879a:	bf18      	it	ne
 800879c:	2301      	movne	r3, #1
 800879e:	e7d2      	b.n	8008746 <HAL_TIM_PWM_Start+0x2a>
 80087a0:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 80087a4:	b2db      	uxtb	r3, r3
 80087a6:	3b01      	subs	r3, #1
 80087a8:	bf18      	it	ne
 80087aa:	2301      	movne	r3, #1
 80087ac:	e7cb      	b.n	8008746 <HAL_TIM_PWM_Start+0x2a>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80087ae:	2302      	movs	r3, #2
 80087b0:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80087b4:	2201      	movs	r2, #1
 80087b6:	6820      	ldr	r0, [r4, #0]
 80087b8:	f7ff ffa0 	bl	80086fc <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80087bc:	6823      	ldr	r3, [r4, #0]
 80087be:	4a34      	ldr	r2, [pc, #208]	@ (8008890 <HAL_TIM_PWM_Start+0x174>)
 80087c0:	4293      	cmp	r3, r2
 80087c2:	d013      	beq.n	80087ec <HAL_TIM_PWM_Start+0xd0>
 80087c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d00f      	beq.n	80087ec <HAL_TIM_PWM_Start+0xd0>
 80087cc:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 80087d0:	4293      	cmp	r3, r2
 80087d2:	d00b      	beq.n	80087ec <HAL_TIM_PWM_Start+0xd0>
 80087d4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80087d8:	4293      	cmp	r3, r2
 80087da:	d007      	beq.n	80087ec <HAL_TIM_PWM_Start+0xd0>
 80087dc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80087e0:	4293      	cmp	r3, r2
 80087e2:	d003      	beq.n	80087ec <HAL_TIM_PWM_Start+0xd0>
 80087e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80087e8:	4293      	cmp	r3, r2
 80087ea:	d103      	bne.n	80087f4 <HAL_TIM_PWM_Start+0xd8>
    __HAL_TIM_MOE_ENABLE(htim);
 80087ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80087ee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80087f2:	645a      	str	r2, [r3, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80087f4:	6823      	ldr	r3, [r4, #0]
 80087f6:	4a26      	ldr	r2, [pc, #152]	@ (8008890 <HAL_TIM_PWM_Start+0x174>)
 80087f8:	4293      	cmp	r3, r2
 80087fa:	d034      	beq.n	8008866 <HAL_TIM_PWM_Start+0x14a>
 80087fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008800:	d031      	beq.n	8008866 <HAL_TIM_PWM_Start+0x14a>
 8008802:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8008806:	4293      	cmp	r3, r2
 8008808:	d02d      	beq.n	8008866 <HAL_TIM_PWM_Start+0x14a>
 800880a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800880e:	4293      	cmp	r3, r2
 8008810:	d029      	beq.n	8008866 <HAL_TIM_PWM_Start+0x14a>
 8008812:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008816:	4293      	cmp	r3, r2
 8008818:	d025      	beq.n	8008866 <HAL_TIM_PWM_Start+0x14a>
 800881a:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 800881e:	4293      	cmp	r3, r2
 8008820:	d021      	beq.n	8008866 <HAL_TIM_PWM_Start+0x14a>
 8008822:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8008826:	4293      	cmp	r3, r2
 8008828:	d01d      	beq.n	8008866 <HAL_TIM_PWM_Start+0x14a>
 800882a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800882e:	4293      	cmp	r3, r2
 8008830:	d019      	beq.n	8008866 <HAL_TIM_PWM_Start+0x14a>
    __HAL_TIM_ENABLE(htim);
 8008832:	681a      	ldr	r2, [r3, #0]
 8008834:	f042 0201 	orr.w	r2, r2, #1
 8008838:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800883a:	2000      	movs	r0, #0
 800883c:	e022      	b.n	8008884 <HAL_TIM_PWM_Start+0x168>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800883e:	2302      	movs	r3, #2
 8008840:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8008844:	e7b6      	b.n	80087b4 <HAL_TIM_PWM_Start+0x98>
 8008846:	2302      	movs	r3, #2
 8008848:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800884c:	e7b2      	b.n	80087b4 <HAL_TIM_PWM_Start+0x98>
 800884e:	2302      	movs	r3, #2
 8008850:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8008854:	e7ae      	b.n	80087b4 <HAL_TIM_PWM_Start+0x98>
 8008856:	2302      	movs	r3, #2
 8008858:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800885c:	e7aa      	b.n	80087b4 <HAL_TIM_PWM_Start+0x98>
 800885e:	2302      	movs	r3, #2
 8008860:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008864:	e7a6      	b.n	80087b4 <HAL_TIM_PWM_Start+0x98>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008866:	6899      	ldr	r1, [r3, #8]
 8008868:	4a0a      	ldr	r2, [pc, #40]	@ (8008894 <HAL_TIM_PWM_Start+0x178>)
 800886a:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800886c:	2a06      	cmp	r2, #6
 800886e:	d00a      	beq.n	8008886 <HAL_TIM_PWM_Start+0x16a>
 8008870:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8008874:	d009      	beq.n	800888a <HAL_TIM_PWM_Start+0x16e>
      __HAL_TIM_ENABLE(htim);
 8008876:	681a      	ldr	r2, [r3, #0]
 8008878:	f042 0201 	orr.w	r2, r2, #1
 800887c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800887e:	2000      	movs	r0, #0
 8008880:	e000      	b.n	8008884 <HAL_TIM_PWM_Start+0x168>
    return HAL_ERROR;
 8008882:	2001      	movs	r0, #1
}
 8008884:	bd10      	pop	{r4, pc}
  return HAL_OK;
 8008886:	2000      	movs	r0, #0
 8008888:	e7fc      	b.n	8008884 <HAL_TIM_PWM_Start+0x168>
 800888a:	2000      	movs	r0, #0
 800888c:	e7fa      	b.n	8008884 <HAL_TIM_PWM_Start+0x168>
 800888e:	bf00      	nop
 8008890:	40012c00 	.word	0x40012c00
 8008894:	00010007 	.word	0x00010007

08008898 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008898:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 800889c:	2a01      	cmp	r2, #1
 800889e:	d04c      	beq.n	800893a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
{
 80088a0:	b430      	push	{r4, r5}
 80088a2:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 80088a4:	2201      	movs	r2, #1
 80088a6:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088aa:	2202      	movs	r2, #2
 80088ac:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80088b0:	6800      	ldr	r0, [r0, #0]
 80088b2:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80088b4:	6884      	ldr	r4, [r0, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80088b6:	4d22      	ldr	r5, [pc, #136]	@ (8008940 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80088b8:	42a8      	cmp	r0, r5
 80088ba:	d007      	beq.n	80088cc <HAL_TIMEx_MasterConfigSynchronization+0x34>
 80088bc:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 80088c0:	42a8      	cmp	r0, r5
 80088c2:	d003      	beq.n	80088cc <HAL_TIMEx_MasterConfigSynchronization+0x34>
 80088c4:	f505 55e0 	add.w	r5, r5, #7168	@ 0x1c00
 80088c8:	42a8      	cmp	r0, r5
 80088ca:	d103      	bne.n	80088d4 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80088cc:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80088d0:	684d      	ldr	r5, [r1, #4]
 80088d2:	432a      	orrs	r2, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80088d4:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 80088d8:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80088dc:	680d      	ldr	r5, [r1, #0]
 80088de:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80088e0:	6042      	str	r2, [r0, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80088e2:	681a      	ldr	r2, [r3, #0]
 80088e4:	4816      	ldr	r0, [pc, #88]	@ (8008940 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80088e6:	4282      	cmp	r2, r0
 80088e8:	d01a      	beq.n	8008920 <HAL_TIMEx_MasterConfigSynchronization+0x88>
 80088ea:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 80088ee:	d017      	beq.n	8008920 <HAL_TIMEx_MasterConfigSynchronization+0x88>
 80088f0:	f5a0 3094 	sub.w	r0, r0, #75776	@ 0x12800
 80088f4:	4282      	cmp	r2, r0
 80088f6:	d013      	beq.n	8008920 <HAL_TIMEx_MasterConfigSynchronization+0x88>
 80088f8:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 80088fc:	4282      	cmp	r2, r0
 80088fe:	d00f      	beq.n	8008920 <HAL_TIMEx_MasterConfigSynchronization+0x88>
 8008900:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8008904:	4282      	cmp	r2, r0
 8008906:	d00b      	beq.n	8008920 <HAL_TIMEx_MasterConfigSynchronization+0x88>
 8008908:	f500 3094 	add.w	r0, r0, #75776	@ 0x12800
 800890c:	4282      	cmp	r2, r0
 800890e:	d007      	beq.n	8008920 <HAL_TIMEx_MasterConfigSynchronization+0x88>
 8008910:	f500 6040 	add.w	r0, r0, #3072	@ 0xc00
 8008914:	4282      	cmp	r2, r0
 8008916:	d003      	beq.n	8008920 <HAL_TIMEx_MasterConfigSynchronization+0x88>
 8008918:	f500 5080 	add.w	r0, r0, #4096	@ 0x1000
 800891c:	4282      	cmp	r2, r0
 800891e:	d104      	bne.n	800892a <HAL_TIMEx_MasterConfigSynchronization+0x92>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008920:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008924:	6889      	ldr	r1, [r1, #8]
 8008926:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008928:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800892a:	2201      	movs	r2, #1
 800892c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008930:	2000      	movs	r0, #0
 8008932:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 8008936:	bc30      	pop	{r4, r5}
 8008938:	4770      	bx	lr
  __HAL_LOCK(htim);
 800893a:	2002      	movs	r0, #2
}
 800893c:	4770      	bx	lr
 800893e:	bf00      	nop
 8008940:	40012c00 	.word	0x40012c00

08008944 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008944:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8008948:	2b01      	cmp	r3, #1
 800894a:	d04a      	beq.n	80089e2 <HAL_TIMEx_ConfigBreakDeadTime+0x9e>
{
 800894c:	b410      	push	{r4}
 800894e:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 8008950:	2301      	movs	r3, #1
 8008952:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008956:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008958:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800895c:	6888      	ldr	r0, [r1, #8]
 800895e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008960:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008964:	6848      	ldr	r0, [r1, #4]
 8008966:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008968:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800896c:	6808      	ldr	r0, [r1, #0]
 800896e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008970:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008974:	6908      	ldr	r0, [r1, #16]
 8008976:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008978:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800897c:	6948      	ldr	r0, [r1, #20]
 800897e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008980:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008984:	6b08      	ldr	r0, [r1, #48]	@ 0x30
 8008986:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008988:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 800898c:	6988      	ldr	r0, [r1, #24]
 800898e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008992:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008996:	69c8      	ldr	r0, [r1, #28]
 8008998:	4303      	orrs	r3, r0

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800899a:	6810      	ldr	r0, [r2, #0]
 800899c:	4c12      	ldr	r4, [pc, #72]	@ (80089e8 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 800899e:	42a0      	cmp	r0, r4
 80089a0:	d007      	beq.n	80089b2 <HAL_TIMEx_ConfigBreakDeadTime+0x6e>
 80089a2:	f504 6400 	add.w	r4, r4, #2048	@ 0x800
 80089a6:	42a0      	cmp	r0, r4
 80089a8:	d003      	beq.n	80089b2 <HAL_TIMEx_ConfigBreakDeadTime+0x6e>
 80089aa:	f504 54e0 	add.w	r4, r4, #7168	@ 0x1c00
 80089ae:	42a0      	cmp	r0, r4
 80089b0:	d110      	bne.n	80089d4 <HAL_TIMEx_ConfigBreakDeadTime+0x90>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80089b2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80089b6:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 80089b8:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80089bc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80089c0:	6a0c      	ldr	r4, [r1, #32]
 80089c2:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80089c4:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80089c8:	6a4c      	ldr	r4, [r1, #36]	@ 0x24
 80089ca:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80089cc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80089d0:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
 80089d2:	430b      	orrs	r3, r1
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80089d4:	6443      	str	r3, [r0, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80089d6:	2000      	movs	r0, #0
 80089d8:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c

  return HAL_OK;
}
 80089dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80089e0:	4770      	bx	lr
  __HAL_LOCK(htim);
 80089e2:	2002      	movs	r0, #2
}
 80089e4:	4770      	bx	lr
 80089e6:	bf00      	nop
 80089e8:	40012c00 	.word	0x40012c00

080089ec <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80089ec:	4770      	bx	lr

080089ee <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80089ee:	4770      	bx	lr

080089f0 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80089f0:	4770      	bx	lr

080089f2 <HAL_TIMEx_EncoderIndexCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80089f2:	4770      	bx	lr

080089f4 <HAL_TIMEx_DirectionChangeCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80089f4:	4770      	bx	lr

080089f6 <HAL_TIMEx_IndexErrorCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80089f6:	4770      	bx	lr

080089f8 <HAL_TIMEx_TransitionErrorCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80089f8:	4770      	bx	lr

080089fa <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80089fa:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089fc:	e852 3f00 	ldrex	r3, [r2]
 8008a00:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a04:	e842 3100 	strex	r1, r3, [r2]
 8008a08:	2900      	cmp	r1, #0
 8008a0a:	d1f6      	bne.n	80089fa <UART_EndTxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008a0c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a0e:	f102 0308 	add.w	r3, r2, #8
 8008a12:	e853 3f00 	ldrex	r3, [r3]
 8008a16:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a1a:	3208      	adds	r2, #8
 8008a1c:	e842 3100 	strex	r1, r3, [r2]
 8008a20:	2900      	cmp	r1, #0
 8008a22:	d1f3      	bne.n	8008a0c <UART_EndTxTransfer+0x12>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008a24:	2320      	movs	r3, #32
 8008a26:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
}
 8008a2a:	4770      	bx	lr

08008a2c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008a2c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a2e:	e852 3f00 	ldrex	r3, [r2]
 8008a32:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a36:	e842 3100 	strex	r1, r3, [r2]
 8008a3a:	2900      	cmp	r1, #0
 8008a3c:	d1f6      	bne.n	8008a2c <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008a3e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a40:	f102 0308 	add.w	r3, r2, #8
 8008a44:	e853 3f00 	ldrex	r3, [r3]
 8008a48:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008a4c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a50:	3208      	adds	r2, #8
 8008a52:	e842 3100 	strex	r1, r3, [r2]
 8008a56:	2900      	cmp	r1, #0
 8008a58:	d1f1      	bne.n	8008a3e <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a5a:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8008a5c:	2b01      	cmp	r3, #1
 8008a5e:	d006      	beq.n	8008a6e <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008a60:	2320      	movs	r3, #32
 8008a62:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a66:	2300      	movs	r3, #0
 8008a68:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008a6a:	6743      	str	r3, [r0, #116]	@ 0x74
}
 8008a6c:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a6e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a70:	e852 3f00 	ldrex	r3, [r2]
 8008a74:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a78:	e842 3100 	strex	r1, r3, [r2]
 8008a7c:	2900      	cmp	r1, #0
 8008a7e:	d1f6      	bne.n	8008a6e <UART_EndRxTransfer+0x42>
 8008a80:	e7ee      	b.n	8008a60 <UART_EndRxTransfer+0x34>

08008a82 <HAL_UART_DeInit>:
  if (huart == NULL)
 8008a82:	b1f0      	cbz	r0, 8008ac2 <HAL_UART_DeInit+0x40>
{
 8008a84:	b538      	push	{r3, r4, r5, lr}
 8008a86:	4605      	mov	r5, r0
  huart->gState = HAL_UART_STATE_BUSY;
 8008a88:	2324      	movs	r3, #36	@ 0x24
 8008a8a:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 8008a8e:	6802      	ldr	r2, [r0, #0]
 8008a90:	6813      	ldr	r3, [r2, #0]
 8008a92:	f023 0301 	bic.w	r3, r3, #1
 8008a96:	6013      	str	r3, [r2, #0]
  huart->Instance->CR1 = 0x0U;
 8008a98:	6803      	ldr	r3, [r0, #0]
 8008a9a:	2400      	movs	r4, #0
 8008a9c:	601c      	str	r4, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8008a9e:	6803      	ldr	r3, [r0, #0]
 8008aa0:	605c      	str	r4, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8008aa2:	6803      	ldr	r3, [r0, #0]
 8008aa4:	609c      	str	r4, [r3, #8]
  HAL_UART_MspDeInit(huart);
 8008aa6:	f7fb ff75 	bl	8004994 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008aaa:	f8c5 4090 	str.w	r4, [r5, #144]	@ 0x90
  huart->gState = HAL_UART_STATE_RESET;
 8008aae:	f8c5 4088 	str.w	r4, [r5, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_RESET;
 8008ab2:	f8c5 408c 	str.w	r4, [r5, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ab6:	66ec      	str	r4, [r5, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ab8:	672c      	str	r4, [r5, #112]	@ 0x70
  __HAL_UNLOCK(huart);
 8008aba:	f885 4084 	strb.w	r4, [r5, #132]	@ 0x84
  return HAL_OK;
 8008abe:	4620      	mov	r0, r4
}
 8008ac0:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8008ac2:	2001      	movs	r0, #1
}
 8008ac4:	4770      	bx	lr
	...

08008ac8 <HAL_UART_Transmit_DMA>:
{
 8008ac8:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8008aca:	f8d0 2088 	ldr.w	r2, [r0, #136]	@ 0x88
 8008ace:	2a20      	cmp	r2, #32
 8008ad0:	d13d      	bne.n	8008b4e <HAL_UART_Transmit_DMA+0x86>
{
 8008ad2:	b510      	push	{r4, lr}
 8008ad4:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 8008ad6:	2900      	cmp	r1, #0
 8008ad8:	d03b      	beq.n	8008b52 <HAL_UART_Transmit_DMA+0x8a>
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d03b      	beq.n	8008b56 <HAL_UART_Transmit_DMA+0x8e>
    huart->pTxBuffPtr  = pData;
 8008ade:	6501      	str	r1, [r0, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8008ae0:	f8a0 3054 	strh.w	r3, [r0, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008ae4:	f8a0 3056 	strh.w	r3, [r0, #86]	@ 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ae8:	2200      	movs	r2, #0
 8008aea:	f8c0 2090 	str.w	r2, [r0, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008aee:	2221      	movs	r2, #33	@ 0x21
 8008af0:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
    if (huart->hdmatx != NULL)
 8008af4:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
 8008af6:	b1ca      	cbz	r2, 8008b2c <HAL_UART_Transmit_DMA+0x64>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008af8:	4918      	ldr	r1, [pc, #96]	@ (8008b5c <HAL_UART_Transmit_DMA+0x94>)
 8008afa:	62d1      	str	r1, [r2, #44]	@ 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008afc:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
 8008afe:	4918      	ldr	r1, [pc, #96]	@ (8008b60 <HAL_UART_Transmit_DMA+0x98>)
 8008b00:	6311      	str	r1, [r2, #48]	@ 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008b02:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
 8008b04:	4917      	ldr	r1, [pc, #92]	@ (8008b64 <HAL_UART_Transmit_DMA+0x9c>)
 8008b06:	6351      	str	r1, [r2, #52]	@ 0x34
      huart->hdmatx->XferAbortCallback = NULL;
 8008b08:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
 8008b0a:	2100      	movs	r1, #0
 8008b0c:	6391      	str	r1, [r2, #56]	@ 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008b0e:	6802      	ldr	r2, [r0, #0]
 8008b10:	3228      	adds	r2, #40	@ 0x28
 8008b12:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 8008b14:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 8008b16:	f7fd fb9f 	bl	8006258 <HAL_DMA_Start_IT>
 8008b1a:	b138      	cbz	r0, 8008b2c <HAL_UART_Transmit_DMA+0x64>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008b1c:	2310      	movs	r3, #16
 8008b1e:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        huart->gState = HAL_UART_STATE_READY;
 8008b22:	2320      	movs	r3, #32
 8008b24:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
        return HAL_ERROR;
 8008b28:	2001      	movs	r0, #1
 8008b2a:	e00f      	b.n	8008b4c <HAL_UART_Transmit_DMA+0x84>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008b2c:	6823      	ldr	r3, [r4, #0]
 8008b2e:	2240      	movs	r2, #64	@ 0x40
 8008b30:	621a      	str	r2, [r3, #32]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008b32:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b34:	f102 0308 	add.w	r3, r2, #8
 8008b38:	e853 3f00 	ldrex	r3, [r3]
 8008b3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b40:	3208      	adds	r2, #8
 8008b42:	e842 3100 	strex	r1, r3, [r2]
 8008b46:	2900      	cmp	r1, #0
 8008b48:	d1f3      	bne.n	8008b32 <HAL_UART_Transmit_DMA+0x6a>
    return HAL_OK;
 8008b4a:	2000      	movs	r0, #0
}
 8008b4c:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8008b4e:	2002      	movs	r0, #2
}
 8008b50:	4770      	bx	lr
      return HAL_ERROR;
 8008b52:	2001      	movs	r0, #1
 8008b54:	e7fa      	b.n	8008b4c <HAL_UART_Transmit_DMA+0x84>
 8008b56:	2001      	movs	r0, #1
 8008b58:	e7f8      	b.n	8008b4c <HAL_UART_Transmit_DMA+0x84>
 8008b5a:	bf00      	nop
 8008b5c:	08008b6b 	.word	0x08008b6b
 8008b60:	08008bd9 	.word	0x08008bd9
 8008b64:	08008be9 	.word	0x08008be9

08008b68 <HAL_UART_TxCpltCallback>:
}
 8008b68:	4770      	bx	lr

08008b6a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008b6a:	b508      	push	{r3, lr}
 8008b6c:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008b6e:	6a80      	ldr	r0, [r0, #40]	@ 0x28

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f013 0f20 	tst.w	r3, #32
 8008b78:	d118      	bne.n	8008bac <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	f8a0 3056 	strh.w	r3, [r0, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008b80:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b82:	f102 0308 	add.w	r3, r2, #8
 8008b86:	e853 3f00 	ldrex	r3, [r3]
 8008b8a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b8e:	3208      	adds	r2, #8
 8008b90:	e842 3100 	strex	r1, r3, [r2]
 8008b94:	2900      	cmp	r1, #0
 8008b96:	d1f3      	bne.n	8008b80 <UART_DMATransmitCplt+0x16>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008b98:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b9a:	e852 3f00 	ldrex	r3, [r2]
 8008b9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ba2:	e842 3100 	strex	r1, r3, [r2]
 8008ba6:	2900      	cmp	r1, #0
 8008ba8:	d1f6      	bne.n	8008b98 <UART_DMATransmitCplt+0x2e>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008baa:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8008bac:	f7ff ffdc 	bl	8008b68 <HAL_UART_TxCpltCallback>
}
 8008bb0:	e7fb      	b.n	8008baa <UART_DMATransmitCplt+0x40>

08008bb2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008bb2:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008bb4:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bb6:	e852 3f00 	ldrex	r3, [r2]
 8008bba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bbe:	e842 3100 	strex	r1, r3, [r2]
 8008bc2:	2900      	cmp	r1, #0
 8008bc4:	d1f6      	bne.n	8008bb4 <UART_EndTransmit_IT+0x2>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008bc6:	2320      	movs	r3, #32
 8008bc8:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008bcc:	2300      	movs	r3, #0
 8008bce:	6783      	str	r3, [r0, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008bd0:	f7ff ffca 	bl	8008b68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008bd4:	bd08      	pop	{r3, pc}

08008bd6 <HAL_UART_TxHalfCpltCallback>:
}
 8008bd6:	4770      	bx	lr

08008bd8 <UART_DMATxHalfCplt>:
{
 8008bd8:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8008bda:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8008bdc:	f7ff fffb 	bl	8008bd6 <HAL_UART_TxHalfCpltCallback>
}
 8008be0:	bd08      	pop	{r3, pc}

08008be2 <HAL_UART_RxCpltCallback>:
}
 8008be2:	4770      	bx	lr

08008be4 <HAL_UART_RxHalfCpltCallback>:
}
 8008be4:	4770      	bx	lr

08008be6 <HAL_UART_ErrorCallback>:
}
 8008be6:	4770      	bx	lr

08008be8 <UART_DMAError>:
{
 8008be8:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008bea:	6a84      	ldr	r4, [r0, #40]	@ 0x28
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008bec:	f8d4 2088 	ldr.w	r2, [r4, #136]	@ 0x88
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008bf0:	f8d4 508c 	ldr.w	r5, [r4, #140]	@ 0x8c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008bf4:	6823      	ldr	r3, [r4, #0]
 8008bf6:	689b      	ldr	r3, [r3, #8]
 8008bf8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008bfc:	d001      	beq.n	8008c02 <UART_DMAError+0x1a>
 8008bfe:	2a21      	cmp	r2, #33	@ 0x21
 8008c00:	d010      	beq.n	8008c24 <UART_DMAError+0x3c>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008c02:	6823      	ldr	r3, [r4, #0]
 8008c04:	689b      	ldr	r3, [r3, #8]
 8008c06:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8008c0a:	d001      	beq.n	8008c10 <UART_DMAError+0x28>
 8008c0c:	2d22      	cmp	r5, #34	@ 0x22
 8008c0e:	d010      	beq.n	8008c32 <UART_DMAError+0x4a>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008c10:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8008c14:	f043 0310 	orr.w	r3, r3, #16
 8008c18:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
  HAL_UART_ErrorCallback(huart);
 8008c1c:	4620      	mov	r0, r4
 8008c1e:	f7ff ffe2 	bl	8008be6 <HAL_UART_ErrorCallback>
}
 8008c22:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 8008c24:	2300      	movs	r3, #0
 8008c26:	f8a4 3056 	strh.w	r3, [r4, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8008c2a:	4620      	mov	r0, r4
 8008c2c:	f7ff fee5 	bl	80089fa <UART_EndTxTransfer>
 8008c30:	e7e7      	b.n	8008c02 <UART_DMAError+0x1a>
    huart->RxXferCount = 0U;
 8008c32:	2300      	movs	r3, #0
 8008c34:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8008c38:	4620      	mov	r0, r4
 8008c3a:	f7ff fef7 	bl	8008a2c <UART_EndRxTransfer>
 8008c3e:	e7e7      	b.n	8008c10 <UART_DMAError+0x28>

08008c40 <UART_DMAAbortOnError>:
{
 8008c40:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008c42:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  huart->RxXferCount = 0U;
 8008c44:	2300      	movs	r3, #0
 8008c46:	f8a0 305e 	strh.w	r3, [r0, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8008c4a:	f8a0 3056 	strh.w	r3, [r0, #86]	@ 0x56
  HAL_UART_ErrorCallback(huart);
 8008c4e:	f7ff ffca 	bl	8008be6 <HAL_UART_ErrorCallback>
}
 8008c52:	bd08      	pop	{r3, pc}

08008c54 <HAL_UARTEx_RxEventCallback>:
}
 8008c54:	4770      	bx	lr
	...

08008c58 <HAL_UART_IRQHandler>:
{
 8008c58:	b570      	push	{r4, r5, r6, lr}
 8008c5a:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008c5c:	6802      	ldr	r2, [r0, #0]
 8008c5e:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008c60:	6810      	ldr	r0, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008c62:	6891      	ldr	r1, [r2, #8]
  if (errorflags == 0U)
 8008c64:	f640 0c0f 	movw	ip, #2063	@ 0x80f
 8008c68:	ea13 0f0c 	tst.w	r3, ip
 8008c6c:	d10d      	bne.n	8008c8a <HAL_UART_IRQHandler+0x32>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008c6e:	f013 0f20 	tst.w	r3, #32
 8008c72:	d010      	beq.n	8008c96 <HAL_UART_IRQHandler+0x3e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008c74:	f010 0f20 	tst.w	r0, #32
 8008c78:	d102      	bne.n	8008c80 <HAL_UART_IRQHandler+0x28>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008c7a:	f011 5f80 	tst.w	r1, #268435456	@ 0x10000000
 8008c7e:	d00a      	beq.n	8008c96 <HAL_UART_IRQHandler+0x3e>
      if (huart->RxISR != NULL)
 8008c80:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8008c82:	b393      	cbz	r3, 8008cea <HAL_UART_IRQHandler+0x92>
        huart->RxISR(huart);
 8008c84:	4620      	mov	r0, r4
 8008c86:	4798      	blx	r3
      return;
 8008c88:	e02f      	b.n	8008cea <HAL_UART_IRQHandler+0x92>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008c8a:	4db4      	ldr	r5, [pc, #720]	@ (8008f5c <HAL_UART_IRQHandler+0x304>)
 8008c8c:	400d      	ands	r5, r1
 8008c8e:	d12d      	bne.n	8008cec <HAL_UART_IRQHandler+0x94>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008c90:	4eb3      	ldr	r6, [pc, #716]	@ (8008f60 <HAL_UART_IRQHandler+0x308>)
 8008c92:	4230      	tst	r0, r6
 8008c94:	d12a      	bne.n	8008cec <HAL_UART_IRQHandler+0x94>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c96:	6ee5      	ldr	r5, [r4, #108]	@ 0x6c
 8008c98:	2d01      	cmp	r5, #1
 8008c9a:	f000 80c0 	beq.w	8008e1e <HAL_UART_IRQHandler+0x1c6>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008c9e:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8008ca2:	d003      	beq.n	8008cac <HAL_UART_IRQHandler+0x54>
 8008ca4:	f411 0f80 	tst.w	r1, #4194304	@ 0x400000
 8008ca8:	f040 815e 	bne.w	8008f68 <HAL_UART_IRQHandler+0x310>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008cac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008cb0:	d007      	beq.n	8008cc2 <HAL_UART_IRQHandler+0x6a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008cb2:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8008cb6:	f040 815e 	bne.w	8008f76 <HAL_UART_IRQHandler+0x31e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008cba:	f411 0f00 	tst.w	r1, #8388608	@ 0x800000
 8008cbe:	f040 815a 	bne.w	8008f76 <HAL_UART_IRQHandler+0x31e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008cc2:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8008cc6:	d003      	beq.n	8008cd0 <HAL_UART_IRQHandler+0x78>
 8008cc8:	f010 0f40 	tst.w	r0, #64	@ 0x40
 8008ccc:	f040 815a 	bne.w	8008f84 <HAL_UART_IRQHandler+0x32c>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008cd0:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 8008cd4:	d003      	beq.n	8008cde <HAL_UART_IRQHandler+0x86>
 8008cd6:	f010 4f80 	tst.w	r0, #1073741824	@ 0x40000000
 8008cda:	f040 8157 	bne.w	8008f8c <HAL_UART_IRQHandler+0x334>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008cde:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8008ce2:	d002      	beq.n	8008cea <HAL_UART_IRQHandler+0x92>
 8008ce4:	2800      	cmp	r0, #0
 8008ce6:	f2c0 8155 	blt.w	8008f94 <HAL_UART_IRQHandler+0x33c>
}
 8008cea:	bd70      	pop	{r4, r5, r6, pc}
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008cec:	f013 0f01 	tst.w	r3, #1
 8008cf0:	d009      	beq.n	8008d06 <HAL_UART_IRQHandler+0xae>
 8008cf2:	f410 7f80 	tst.w	r0, #256	@ 0x100
 8008cf6:	d006      	beq.n	8008d06 <HAL_UART_IRQHandler+0xae>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008cf8:	2601      	movs	r6, #1
 8008cfa:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008cfc:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 8008d00:	4332      	orrs	r2, r6
 8008d02:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008d06:	f013 0f02 	tst.w	r3, #2
 8008d0a:	d00b      	beq.n	8008d24 <HAL_UART_IRQHandler+0xcc>
 8008d0c:	f011 0f01 	tst.w	r1, #1
 8008d10:	d008      	beq.n	8008d24 <HAL_UART_IRQHandler+0xcc>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008d12:	6822      	ldr	r2, [r4, #0]
 8008d14:	2602      	movs	r6, #2
 8008d16:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008d18:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 8008d1c:	f042 0204 	orr.w	r2, r2, #4
 8008d20:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008d24:	f013 0f04 	tst.w	r3, #4
 8008d28:	d00b      	beq.n	8008d42 <HAL_UART_IRQHandler+0xea>
 8008d2a:	f011 0f01 	tst.w	r1, #1
 8008d2e:	d008      	beq.n	8008d42 <HAL_UART_IRQHandler+0xea>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008d30:	6822      	ldr	r2, [r4, #0]
 8008d32:	2604      	movs	r6, #4
 8008d34:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008d36:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 8008d3a:	f042 0202 	orr.w	r2, r2, #2
 8008d3e:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008d42:	f013 0f08 	tst.w	r3, #8
 8008d46:	d00b      	beq.n	8008d60 <HAL_UART_IRQHandler+0x108>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008d48:	f010 0f20 	tst.w	r0, #32
 8008d4c:	d100      	bne.n	8008d50 <HAL_UART_IRQHandler+0xf8>
 8008d4e:	b13d      	cbz	r5, 8008d60 <HAL_UART_IRQHandler+0x108>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008d50:	6822      	ldr	r2, [r4, #0]
 8008d52:	2508      	movs	r5, #8
 8008d54:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008d56:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 8008d5a:	432a      	orrs	r2, r5
 8008d5c:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008d60:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8008d64:	d00c      	beq.n	8008d80 <HAL_UART_IRQHandler+0x128>
 8008d66:	f010 6f80 	tst.w	r0, #67108864	@ 0x4000000
 8008d6a:	d009      	beq.n	8008d80 <HAL_UART_IRQHandler+0x128>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008d6c:	6822      	ldr	r2, [r4, #0]
 8008d6e:	f44f 6500 	mov.w	r5, #2048	@ 0x800
 8008d72:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008d74:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 8008d78:	f042 0220 	orr.w	r2, r2, #32
 8008d7c:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008d80:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 8008d84:	2a00      	cmp	r2, #0
 8008d86:	d0b0      	beq.n	8008cea <HAL_UART_IRQHandler+0x92>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008d88:	f013 0f20 	tst.w	r3, #32
 8008d8c:	d009      	beq.n	8008da2 <HAL_UART_IRQHandler+0x14a>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008d8e:	f010 0f20 	tst.w	r0, #32
 8008d92:	d102      	bne.n	8008d9a <HAL_UART_IRQHandler+0x142>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008d94:	f011 5f80 	tst.w	r1, #268435456	@ 0x10000000
 8008d98:	d003      	beq.n	8008da2 <HAL_UART_IRQHandler+0x14a>
        if (huart->RxISR != NULL)
 8008d9a:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8008d9c:	b10b      	cbz	r3, 8008da2 <HAL_UART_IRQHandler+0x14a>
          huart->RxISR(huart);
 8008d9e:	4620      	mov	r0, r4
 8008da0:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8008da2:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008da6:	6823      	ldr	r3, [r4, #0]
 8008da8:	689b      	ldr	r3, [r3, #8]
 8008daa:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8008dae:	d102      	bne.n	8008db6 <HAL_UART_IRQHandler+0x15e>
 8008db0:	f012 0f28 	tst.w	r2, #40	@ 0x28
 8008db4:	d02c      	beq.n	8008e10 <HAL_UART_IRQHandler+0x1b8>
        UART_EndRxTransfer(huart);
 8008db6:	4620      	mov	r0, r4
 8008db8:	f7ff fe38 	bl	8008a2c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008dbc:	6823      	ldr	r3, [r4, #0]
 8008dbe:	689b      	ldr	r3, [r3, #8]
 8008dc0:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8008dc4:	d020      	beq.n	8008e08 <HAL_UART_IRQHandler+0x1b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008dc6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dc8:	f102 0308 	add.w	r3, r2, #8
 8008dcc:	e853 3f00 	ldrex	r3, [r3]
 8008dd0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dd4:	3208      	adds	r2, #8
 8008dd6:	e842 3100 	strex	r1, r3, [r2]
 8008dda:	2900      	cmp	r1, #0
 8008ddc:	d1f3      	bne.n	8008dc6 <HAL_UART_IRQHandler+0x16e>
          if (huart->hdmarx != NULL)
 8008dde:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8008de2:	b16b      	cbz	r3, 8008e00 <HAL_UART_IRQHandler+0x1a8>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008de4:	4a5f      	ldr	r2, [pc, #380]	@ (8008f64 <HAL_UART_IRQHandler+0x30c>)
 8008de6:	639a      	str	r2, [r3, #56]	@ 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008de8:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8008dec:	f7fd fab4 	bl	8006358 <HAL_DMA_Abort_IT>
 8008df0:	2800      	cmp	r0, #0
 8008df2:	f43f af7a 	beq.w	8008cea <HAL_UART_IRQHandler+0x92>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008df6:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8008dfa:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8008dfc:	4798      	blx	r3
 8008dfe:	e774      	b.n	8008cea <HAL_UART_IRQHandler+0x92>
            HAL_UART_ErrorCallback(huart);
 8008e00:	4620      	mov	r0, r4
 8008e02:	f7ff fef0 	bl	8008be6 <HAL_UART_ErrorCallback>
 8008e06:	e770      	b.n	8008cea <HAL_UART_IRQHandler+0x92>
          HAL_UART_ErrorCallback(huart);
 8008e08:	4620      	mov	r0, r4
 8008e0a:	f7ff feec 	bl	8008be6 <HAL_UART_ErrorCallback>
 8008e0e:	e76c      	b.n	8008cea <HAL_UART_IRQHandler+0x92>
        HAL_UART_ErrorCallback(huart);
 8008e10:	4620      	mov	r0, r4
 8008e12:	f7ff fee8 	bl	8008be6 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e16:	2300      	movs	r3, #0
 8008e18:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
    return;
 8008e1c:	e765      	b.n	8008cea <HAL_UART_IRQHandler+0x92>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008e1e:	f013 0f10 	tst.w	r3, #16
 8008e22:	f43f af3c 	beq.w	8008c9e <HAL_UART_IRQHandler+0x46>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008e26:	f010 0f10 	tst.w	r0, #16
 8008e2a:	f43f af38 	beq.w	8008c9e <HAL_UART_IRQHandler+0x46>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008e2e:	2310      	movs	r3, #16
 8008e30:	6213      	str	r3, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e32:	6823      	ldr	r3, [r4, #0]
 8008e34:	689b      	ldr	r3, [r3, #8]
 8008e36:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8008e3a:	d053      	beq.n	8008ee4 <HAL_UART_IRQHandler+0x28c>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008e3c:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 8008e40:	6813      	ldr	r3, [r2, #0]
 8008e42:	685b      	ldr	r3, [r3, #4]
 8008e44:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	f43f af4f 	beq.w	8008cea <HAL_UART_IRQHandler+0x92>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008e4c:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 8008e50:	4299      	cmp	r1, r3
 8008e52:	f67f af4a 	bls.w	8008cea <HAL_UART_IRQHandler+0x92>
        huart->RxXferCount = nb_remaining_rx_data;
 8008e56:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008e5a:	6813      	ldr	r3, [r2, #0]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f013 0f20 	tst.w	r3, #32
 8008e62:	d132      	bne.n	8008eca <HAL_UART_IRQHandler+0x272>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e64:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e66:	e852 3f00 	ldrex	r3, [r2]
 8008e6a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e6e:	e842 3100 	strex	r1, r3, [r2]
 8008e72:	2900      	cmp	r1, #0
 8008e74:	d1f6      	bne.n	8008e64 <HAL_UART_IRQHandler+0x20c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e76:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e78:	f102 0308 	add.w	r3, r2, #8
 8008e7c:	e853 3f00 	ldrex	r3, [r3]
 8008e80:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e84:	3208      	adds	r2, #8
 8008e86:	e842 3100 	strex	r1, r3, [r2]
 8008e8a:	2900      	cmp	r1, #0
 8008e8c:	d1f3      	bne.n	8008e76 <HAL_UART_IRQHandler+0x21e>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e8e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e90:	f102 0308 	add.w	r3, r2, #8
 8008e94:	e853 3f00 	ldrex	r3, [r3]
 8008e98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e9c:	3208      	adds	r2, #8
 8008e9e:	e842 3100 	strex	r1, r3, [r2]
 8008ea2:	2900      	cmp	r1, #0
 8008ea4:	d1f3      	bne.n	8008e8e <HAL_UART_IRQHandler+0x236>
          huart->RxState = HAL_UART_STATE_READY;
 8008ea6:	2320      	movs	r3, #32
 8008ea8:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008eac:	2300      	movs	r3, #0
 8008eae:	66e3      	str	r3, [r4, #108]	@ 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008eb0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eb2:	e852 3f00 	ldrex	r3, [r2]
 8008eb6:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eba:	e842 3100 	strex	r1, r3, [r2]
 8008ebe:	2900      	cmp	r1, #0
 8008ec0:	d1f6      	bne.n	8008eb0 <HAL_UART_IRQHandler+0x258>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008ec2:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8008ec6:	f7fd fa11 	bl	80062ec <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008eca:	2302      	movs	r3, #2
 8008ecc:	6723      	str	r3, [r4, #112]	@ 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008ece:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 8008ed2:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8008ed6:	b29b      	uxth	r3, r3
 8008ed8:	1ac9      	subs	r1, r1, r3
 8008eda:	b289      	uxth	r1, r1
 8008edc:	4620      	mov	r0, r4
 8008ede:	f7ff feb9 	bl	8008c54 <HAL_UARTEx_RxEventCallback>
      return;
 8008ee2:	e702      	b.n	8008cea <HAL_UART_IRQHandler+0x92>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008ee4:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 8008ee8:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8008eec:	b29b      	uxth	r3, r3
 8008eee:	1ac9      	subs	r1, r1, r3
 8008ef0:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8008ef2:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8008ef6:	b29b      	uxth	r3, r3
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	f43f aef6 	beq.w	8008cea <HAL_UART_IRQHandler+0x92>
          && (nb_rx_data > 0U))
 8008efe:	2900      	cmp	r1, #0
 8008f00:	f43f aef3 	beq.w	8008cea <HAL_UART_IRQHandler+0x92>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008f04:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f06:	e852 3f00 	ldrex	r3, [r2]
 8008f0a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f0e:	e842 3000 	strex	r0, r3, [r2]
 8008f12:	2800      	cmp	r0, #0
 8008f14:	d1f6      	bne.n	8008f04 <HAL_UART_IRQHandler+0x2ac>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008f16:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f18:	f102 0308 	add.w	r3, r2, #8
 8008f1c:	e853 3f00 	ldrex	r3, [r3]
 8008f20:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008f24:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f28:	3208      	adds	r2, #8
 8008f2a:	e842 3000 	strex	r0, r3, [r2]
 8008f2e:	2800      	cmp	r0, #0
 8008f30:	d1f1      	bne.n	8008f16 <HAL_UART_IRQHandler+0x2be>
        huart->RxState = HAL_UART_STATE_READY;
 8008f32:	2320      	movs	r3, #32
 8008f34:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f38:	2300      	movs	r3, #0
 8008f3a:	66e3      	str	r3, [r4, #108]	@ 0x6c
        huart->RxISR = NULL;
 8008f3c:	6763      	str	r3, [r4, #116]	@ 0x74
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f3e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f40:	e852 3f00 	ldrex	r3, [r2]
 8008f44:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f48:	e842 3000 	strex	r0, r3, [r2]
 8008f4c:	2800      	cmp	r0, #0
 8008f4e:	d1f6      	bne.n	8008f3e <HAL_UART_IRQHandler+0x2e6>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008f50:	2302      	movs	r3, #2
 8008f52:	6723      	str	r3, [r4, #112]	@ 0x70
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008f54:	4620      	mov	r0, r4
 8008f56:	f7ff fe7d 	bl	8008c54 <HAL_UARTEx_RxEventCallback>
      return;
 8008f5a:	e6c6      	b.n	8008cea <HAL_UART_IRQHandler+0x92>
 8008f5c:	10000001 	.word	0x10000001
 8008f60:	04000120 	.word	0x04000120
 8008f64:	08008c41 	.word	0x08008c41
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008f68:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8008f6c:	6213      	str	r3, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8008f6e:	4620      	mov	r0, r4
 8008f70:	f000 fccf 	bl	8009912 <HAL_UARTEx_WakeupCallback>
    return;
 8008f74:	e6b9      	b.n	8008cea <HAL_UART_IRQHandler+0x92>
    if (huart->TxISR != NULL)
 8008f76:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	f43f aeb6 	beq.w	8008cea <HAL_UART_IRQHandler+0x92>
      huart->TxISR(huart);
 8008f7e:	4620      	mov	r0, r4
 8008f80:	4798      	blx	r3
    return;
 8008f82:	e6b2      	b.n	8008cea <HAL_UART_IRQHandler+0x92>
    UART_EndTransmit_IT(huart);
 8008f84:	4620      	mov	r0, r4
 8008f86:	f7ff fe14 	bl	8008bb2 <UART_EndTransmit_IT>
    return;
 8008f8a:	e6ae      	b.n	8008cea <HAL_UART_IRQHandler+0x92>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008f8c:	4620      	mov	r0, r4
 8008f8e:	f000 fcc2 	bl	8009916 <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 8008f92:	e6aa      	b.n	8008cea <HAL_UART_IRQHandler+0x92>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008f94:	4620      	mov	r0, r4
 8008f96:	f000 fcbd 	bl	8009914 <HAL_UARTEx_RxFifoFullCallback>
    return;
 8008f9a:	e6a6      	b.n	8008cea <HAL_UART_IRQHandler+0x92>

08008f9c <UART_DMARxHalfCplt>:
{
 8008f9c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008f9e:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008fa0:	2301      	movs	r3, #1
 8008fa2:	6703      	str	r3, [r0, #112]	@ 0x70
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008fa4:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8008fa6:	2b01      	cmp	r3, #1
 8008fa8:	d002      	beq.n	8008fb0 <UART_DMARxHalfCplt+0x14>
    HAL_UART_RxHalfCpltCallback(huart);
 8008faa:	f7ff fe1b 	bl	8008be4 <HAL_UART_RxHalfCpltCallback>
}
 8008fae:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008fb0:	f8b0 105c 	ldrh.w	r1, [r0, #92]	@ 0x5c
 8008fb4:	0849      	lsrs	r1, r1, #1
 8008fb6:	f7ff fe4d 	bl	8008c54 <HAL_UARTEx_RxEventCallback>
 8008fba:	e7f8      	b.n	8008fae <UART_DMARxHalfCplt+0x12>

08008fbc <UART_DMAReceiveCplt>:
{
 8008fbc:	b508      	push	{r3, lr}
 8008fbe:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008fc0:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f013 0f20 	tst.w	r3, #32
 8008fca:	d129      	bne.n	8009020 <UART_DMAReceiveCplt+0x64>
    huart->RxXferCount = 0U;
 8008fcc:	2300      	movs	r3, #0
 8008fce:	f8a0 305e 	strh.w	r3, [r0, #94]	@ 0x5e
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008fd2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fd4:	e852 3f00 	ldrex	r3, [r2]
 8008fd8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fdc:	e842 3100 	strex	r1, r3, [r2]
 8008fe0:	2900      	cmp	r1, #0
 8008fe2:	d1f6      	bne.n	8008fd2 <UART_DMAReceiveCplt+0x16>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fe4:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fe6:	f102 0308 	add.w	r3, r2, #8
 8008fea:	e853 3f00 	ldrex	r3, [r3]
 8008fee:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ff2:	3208      	adds	r2, #8
 8008ff4:	e842 3100 	strex	r1, r3, [r2]
 8008ff8:	2900      	cmp	r1, #0
 8008ffa:	d1f3      	bne.n	8008fe4 <UART_DMAReceiveCplt+0x28>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ffc:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ffe:	f102 0308 	add.w	r3, r2, #8
 8009002:	e853 3f00 	ldrex	r3, [r3]
 8009006:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800900a:	3208      	adds	r2, #8
 800900c:	e842 3100 	strex	r1, r3, [r2]
 8009010:	2900      	cmp	r1, #0
 8009012:	d1f3      	bne.n	8008ffc <UART_DMAReceiveCplt+0x40>
    huart->RxState = HAL_UART_STATE_READY;
 8009014:	2320      	movs	r3, #32
 8009016:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800901a:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800901c:	2b01      	cmp	r3, #1
 800901e:	d007      	beq.n	8009030 <UART_DMAReceiveCplt+0x74>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009020:	2300      	movs	r3, #0
 8009022:	6703      	str	r3, [r0, #112]	@ 0x70
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009024:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8009026:	2b01      	cmp	r3, #1
 8009028:	d00c      	beq.n	8009044 <UART_DMAReceiveCplt+0x88>
    HAL_UART_RxCpltCallback(huart);
 800902a:	f7ff fdda 	bl	8008be2 <HAL_UART_RxCpltCallback>
}
 800902e:	bd08      	pop	{r3, pc}
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009030:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009032:	e852 3f00 	ldrex	r3, [r2]
 8009036:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800903a:	e842 3100 	strex	r1, r3, [r2]
 800903e:	2900      	cmp	r1, #0
 8009040:	d1f6      	bne.n	8009030 <UART_DMAReceiveCplt+0x74>
 8009042:	e7ed      	b.n	8009020 <UART_DMAReceiveCplt+0x64>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009044:	f8b0 105c 	ldrh.w	r1, [r0, #92]	@ 0x5c
 8009048:	f7ff fe04 	bl	8008c54 <HAL_UARTEx_RxEventCallback>
 800904c:	e7ef      	b.n	800902e <UART_DMAReceiveCplt+0x72>
	...

08009050 <UART_SetConfig>:
{
 8009050:	b570      	push	{r4, r5, r6, lr}
 8009052:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8009054:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009056:	6883      	ldr	r3, [r0, #8]
 8009058:	6902      	ldr	r2, [r0, #16]
 800905a:	4313      	orrs	r3, r2
 800905c:	6942      	ldr	r2, [r0, #20]
 800905e:	4313      	orrs	r3, r2
 8009060:	69c2      	ldr	r2, [r0, #28]
 8009062:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009064:	6808      	ldr	r0, [r1, #0]
 8009066:	4a96      	ldr	r2, [pc, #600]	@ (80092c0 <UART_SetConfig+0x270>)
 8009068:	4002      	ands	r2, r0
 800906a:	431a      	orrs	r2, r3
 800906c:	600a      	str	r2, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800906e:	6822      	ldr	r2, [r4, #0]
 8009070:	6853      	ldr	r3, [r2, #4]
 8009072:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8009076:	68e1      	ldr	r1, [r4, #12]
 8009078:	430b      	orrs	r3, r1
 800907a:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800907c:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800907e:	6822      	ldr	r2, [r4, #0]
 8009080:	4b90      	ldr	r3, [pc, #576]	@ (80092c4 <UART_SetConfig+0x274>)
 8009082:	429a      	cmp	r2, r3
 8009084:	d001      	beq.n	800908a <UART_SetConfig+0x3a>
    tmpreg |= huart->Init.OneBitSampling;
 8009086:	6a23      	ldr	r3, [r4, #32]
 8009088:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800908a:	6893      	ldr	r3, [r2, #8]
 800908c:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8009090:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8009094:	430b      	orrs	r3, r1
 8009096:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009098:	6822      	ldr	r2, [r4, #0]
 800909a:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800909c:	f023 030f 	bic.w	r3, r3, #15
 80090a0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80090a2:	430b      	orrs	r3, r1
 80090a4:	62d3      	str	r3, [r2, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80090a6:	6823      	ldr	r3, [r4, #0]
 80090a8:	4a87      	ldr	r2, [pc, #540]	@ (80092c8 <UART_SetConfig+0x278>)
 80090aa:	4293      	cmp	r3, r2
 80090ac:	d010      	beq.n	80090d0 <UART_SetConfig+0x80>
 80090ae:	4a87      	ldr	r2, [pc, #540]	@ (80092cc <UART_SetConfig+0x27c>)
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d021      	beq.n	80090f8 <UART_SetConfig+0xa8>
 80090b4:	4a86      	ldr	r2, [pc, #536]	@ (80092d0 <UART_SetConfig+0x280>)
 80090b6:	4293      	cmp	r3, r2
 80090b8:	d037      	beq.n	800912a <UART_SetConfig+0xda>
 80090ba:	4a86      	ldr	r2, [pc, #536]	@ (80092d4 <UART_SetConfig+0x284>)
 80090bc:	4293      	cmp	r3, r2
 80090be:	d05c      	beq.n	800917a <UART_SetConfig+0x12a>
 80090c0:	4a85      	ldr	r2, [pc, #532]	@ (80092d8 <UART_SetConfig+0x288>)
 80090c2:	4293      	cmp	r3, r2
 80090c4:	d06b      	beq.n	800919e <UART_SetConfig+0x14e>
 80090c6:	4a7f      	ldr	r2, [pc, #508]	@ (80092c4 <UART_SetConfig+0x274>)
 80090c8:	4293      	cmp	r3, r2
 80090ca:	d07d      	beq.n	80091c8 <UART_SetConfig+0x178>
 80090cc:	2210      	movs	r2, #16
 80090ce:	e03a      	b.n	8009146 <UART_SetConfig+0xf6>
 80090d0:	f502 4258 	add.w	r2, r2, #55296	@ 0xd800
 80090d4:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 80090d8:	f002 0203 	and.w	r2, r2, #3
 80090dc:	2a03      	cmp	r2, #3
 80090de:	d809      	bhi.n	80090f4 <UART_SetConfig+0xa4>
 80090e0:	e8df f002 	tbb	[pc, r2]
 80090e4:	06870402 	.word	0x06870402
 80090e8:	2201      	movs	r2, #1
 80090ea:	e02c      	b.n	8009146 <UART_SetConfig+0xf6>
 80090ec:	2204      	movs	r2, #4
 80090ee:	e02a      	b.n	8009146 <UART_SetConfig+0xf6>
 80090f0:	2208      	movs	r2, #8
 80090f2:	e028      	b.n	8009146 <UART_SetConfig+0xf6>
 80090f4:	2210      	movs	r2, #16
 80090f6:	e026      	b.n	8009146 <UART_SetConfig+0xf6>
 80090f8:	f502 32e6 	add.w	r2, r2, #117760	@ 0x1cc00
 80090fc:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8009100:	f002 020c 	and.w	r2, r2, #12
 8009104:	2a0c      	cmp	r2, #12
 8009106:	d80e      	bhi.n	8009126 <UART_SetConfig+0xd6>
 8009108:	e8df f002 	tbb	[pc, r2]
 800910c:	0d0d0d07 	.word	0x0d0d0d07
 8009110:	0d0d0d09 	.word	0x0d0d0d09
 8009114:	0d0d0d75 	.word	0x0d0d0d75
 8009118:	0b          	.byte	0x0b
 8009119:	00          	.byte	0x00
 800911a:	2200      	movs	r2, #0
 800911c:	e013      	b.n	8009146 <UART_SetConfig+0xf6>
 800911e:	2204      	movs	r2, #4
 8009120:	e011      	b.n	8009146 <UART_SetConfig+0xf6>
 8009122:	2208      	movs	r2, #8
 8009124:	e00f      	b.n	8009146 <UART_SetConfig+0xf6>
 8009126:	2210      	movs	r2, #16
 8009128:	e00d      	b.n	8009146 <UART_SetConfig+0xf6>
 800912a:	f502 32e4 	add.w	r2, r2, #116736	@ 0x1c800
 800912e:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8009132:	f002 0230 	and.w	r2, r2, #48	@ 0x30
 8009136:	2a20      	cmp	r2, #32
 8009138:	d05f      	beq.n	80091fa <UART_SetConfig+0x1aa>
 800913a:	d81a      	bhi.n	8009172 <UART_SetConfig+0x122>
 800913c:	2a00      	cmp	r2, #0
 800913e:	d05e      	beq.n	80091fe <UART_SetConfig+0x1ae>
 8009140:	2a10      	cmp	r2, #16
 8009142:	d15e      	bne.n	8009202 <UART_SetConfig+0x1b2>
 8009144:	2204      	movs	r2, #4
  if (UART_INSTANCE_LOWPOWER(huart))
 8009146:	495f      	ldr	r1, [pc, #380]	@ (80092c4 <UART_SetConfig+0x274>)
 8009148:	428b      	cmp	r3, r1
 800914a:	d076      	beq.n	800923a <UART_SetConfig+0x1ea>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800914c:	69e0      	ldr	r0, [r4, #28]
 800914e:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8009152:	f000 80c9 	beq.w	80092e8 <UART_SetConfig+0x298>
    switch (clocksource)
 8009156:	2a08      	cmp	r2, #8
 8009158:	f200 8134 	bhi.w	80093c4 <UART_SetConfig+0x374>
 800915c:	e8df f012 	tbh	[pc, r2, lsl #1]
 8009160:	011900f7 	.word	0x011900f7
 8009164:	013200f5 	.word	0x013200f5
 8009168:	0132011c 	.word	0x0132011c
 800916c:	01320132 	.word	0x01320132
 8009170:	011f      	.short	0x011f
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009172:	2a30      	cmp	r2, #48	@ 0x30
 8009174:	d147      	bne.n	8009206 <UART_SetConfig+0x1b6>
 8009176:	2208      	movs	r2, #8
 8009178:	e7e5      	b.n	8009146 <UART_SetConfig+0xf6>
 800917a:	f502 32e2 	add.w	r2, r2, #115712	@ 0x1c400
 800917e:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8009182:	f002 02c0 	and.w	r2, r2, #192	@ 0xc0
 8009186:	2a80      	cmp	r2, #128	@ 0x80
 8009188:	d03f      	beq.n	800920a <UART_SetConfig+0x1ba>
 800918a:	d804      	bhi.n	8009196 <UART_SetConfig+0x146>
 800918c:	b3fa      	cbz	r2, 800920e <UART_SetConfig+0x1be>
 800918e:	2a40      	cmp	r2, #64	@ 0x40
 8009190:	d13f      	bne.n	8009212 <UART_SetConfig+0x1c2>
 8009192:	2204      	movs	r2, #4
 8009194:	e7d7      	b.n	8009146 <UART_SetConfig+0xf6>
 8009196:	2ac0      	cmp	r2, #192	@ 0xc0
 8009198:	d13d      	bne.n	8009216 <UART_SetConfig+0x1c6>
 800919a:	2208      	movs	r2, #8
 800919c:	e7d3      	b.n	8009146 <UART_SetConfig+0xf6>
 800919e:	f502 32e0 	add.w	r2, r2, #114688	@ 0x1c000
 80091a2:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 80091a6:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 80091aa:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 80091ae:	d034      	beq.n	800921a <UART_SetConfig+0x1ca>
 80091b0:	d805      	bhi.n	80091be <UART_SetConfig+0x16e>
 80091b2:	b3a2      	cbz	r2, 800921e <UART_SetConfig+0x1ce>
 80091b4:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 80091b8:	d133      	bne.n	8009222 <UART_SetConfig+0x1d2>
 80091ba:	2204      	movs	r2, #4
 80091bc:	e7c3      	b.n	8009146 <UART_SetConfig+0xf6>
 80091be:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 80091c2:	d130      	bne.n	8009226 <UART_SetConfig+0x1d6>
 80091c4:	2208      	movs	r2, #8
 80091c6:	e7be      	b.n	8009146 <UART_SetConfig+0xf6>
 80091c8:	f502 32c8 	add.w	r2, r2, #102400	@ 0x19000
 80091cc:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 80091d0:	f402 6240 	and.w	r2, r2, #3072	@ 0xc00
 80091d4:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
 80091d8:	d027      	beq.n	800922a <UART_SetConfig+0x1da>
 80091da:	d805      	bhi.n	80091e8 <UART_SetConfig+0x198>
 80091dc:	b33a      	cbz	r2, 800922e <UART_SetConfig+0x1de>
 80091de:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 80091e2:	d126      	bne.n	8009232 <UART_SetConfig+0x1e2>
 80091e4:	2204      	movs	r2, #4
 80091e6:	e7ae      	b.n	8009146 <UART_SetConfig+0xf6>
 80091e8:	f5b2 6f40 	cmp.w	r2, #3072	@ 0xc00
 80091ec:	d123      	bne.n	8009236 <UART_SetConfig+0x1e6>
 80091ee:	2208      	movs	r2, #8
 80091f0:	e7a9      	b.n	8009146 <UART_SetConfig+0xf6>
 80091f2:	2202      	movs	r2, #2
 80091f4:	e7a7      	b.n	8009146 <UART_SetConfig+0xf6>
 80091f6:	2202      	movs	r2, #2
 80091f8:	e7a5      	b.n	8009146 <UART_SetConfig+0xf6>
 80091fa:	2202      	movs	r2, #2
 80091fc:	e7a3      	b.n	8009146 <UART_SetConfig+0xf6>
 80091fe:	2200      	movs	r2, #0
 8009200:	e7a1      	b.n	8009146 <UART_SetConfig+0xf6>
 8009202:	2210      	movs	r2, #16
 8009204:	e79f      	b.n	8009146 <UART_SetConfig+0xf6>
 8009206:	2210      	movs	r2, #16
 8009208:	e79d      	b.n	8009146 <UART_SetConfig+0xf6>
 800920a:	2202      	movs	r2, #2
 800920c:	e79b      	b.n	8009146 <UART_SetConfig+0xf6>
 800920e:	2200      	movs	r2, #0
 8009210:	e799      	b.n	8009146 <UART_SetConfig+0xf6>
 8009212:	2210      	movs	r2, #16
 8009214:	e797      	b.n	8009146 <UART_SetConfig+0xf6>
 8009216:	2210      	movs	r2, #16
 8009218:	e795      	b.n	8009146 <UART_SetConfig+0xf6>
 800921a:	2202      	movs	r2, #2
 800921c:	e793      	b.n	8009146 <UART_SetConfig+0xf6>
 800921e:	2200      	movs	r2, #0
 8009220:	e791      	b.n	8009146 <UART_SetConfig+0xf6>
 8009222:	2210      	movs	r2, #16
 8009224:	e78f      	b.n	8009146 <UART_SetConfig+0xf6>
 8009226:	2210      	movs	r2, #16
 8009228:	e78d      	b.n	8009146 <UART_SetConfig+0xf6>
 800922a:	2202      	movs	r2, #2
 800922c:	e78b      	b.n	8009146 <UART_SetConfig+0xf6>
 800922e:	2200      	movs	r2, #0
 8009230:	e789      	b.n	8009146 <UART_SetConfig+0xf6>
 8009232:	2210      	movs	r2, #16
 8009234:	e787      	b.n	8009146 <UART_SetConfig+0xf6>
 8009236:	2210      	movs	r2, #16
 8009238:	e785      	b.n	8009146 <UART_SetConfig+0xf6>
    switch (clocksource)
 800923a:	2a08      	cmp	r2, #8
 800923c:	f200 80b2 	bhi.w	80093a4 <UART_SetConfig+0x354>
 8009240:	e8df f002 	tbb	[pc, r2]
 8009244:	b03bb008 	.word	0xb03bb008
 8009248:	b0b0b038 	.word	0xb0b0b038
 800924c:	05          	.byte	0x05
 800924d:	00          	.byte	0x00
 800924e:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8009252:	e004      	b.n	800925e <UART_SetConfig+0x20e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8009254:	f7fe fae0 	bl	8007818 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8009258:	2800      	cmp	r0, #0
 800925a:	f000 80a5 	beq.w	80093a8 <UART_SetConfig+0x358>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800925e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8009260:	4b1e      	ldr	r3, [pc, #120]	@ (80092dc <UART_SetConfig+0x28c>)
 8009262:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8009266:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800926a:	6865      	ldr	r5, [r4, #4]
 800926c:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8009270:	4299      	cmp	r1, r3
 8009272:	f200 809b 	bhi.w	80093ac <UART_SetConfig+0x35c>
 8009276:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800927a:	f200 8099 	bhi.w	80093b0 <UART_SetConfig+0x360>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800927e:	2600      	movs	r6, #0
 8009280:	4633      	mov	r3, r6
 8009282:	4631      	mov	r1, r6
 8009284:	f7f7 fd38 	bl	8000cf8 <__aeabi_uldivmod>
 8009288:	0209      	lsls	r1, r1, #8
 800928a:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 800928e:	0200      	lsls	r0, r0, #8
 8009290:	086b      	lsrs	r3, r5, #1
 8009292:	18c0      	adds	r0, r0, r3
 8009294:	462a      	mov	r2, r5
 8009296:	4633      	mov	r3, r6
 8009298:	f141 0100 	adc.w	r1, r1, #0
 800929c:	f7f7 fd2c 	bl	8000cf8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80092a0:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 80092a4:	4b0e      	ldr	r3, [pc, #56]	@ (80092e0 <UART_SetConfig+0x290>)
 80092a6:	429a      	cmp	r2, r3
 80092a8:	f200 8084 	bhi.w	80093b4 <UART_SetConfig+0x364>
          huart->Instance->BRR = usartdiv;
 80092ac:	6823      	ldr	r3, [r4, #0]
 80092ae:	60d8      	str	r0, [r3, #12]
 80092b0:	4630      	mov	r0, r6
 80092b2:	e065      	b.n	8009380 <UART_SetConfig+0x330>
        pclk = HAL_RCC_GetSysClockFreq();
 80092b4:	f7fe f96a 	bl	800758c <HAL_RCC_GetSysClockFreq>
        break;
 80092b8:	e7ce      	b.n	8009258 <UART_SetConfig+0x208>
        pclk = (uint32_t) HSI_VALUE;
 80092ba:	480a      	ldr	r0, [pc, #40]	@ (80092e4 <UART_SetConfig+0x294>)
 80092bc:	e7cf      	b.n	800925e <UART_SetConfig+0x20e>
 80092be:	bf00      	nop
 80092c0:	cfff69f3 	.word	0xcfff69f3
 80092c4:	40008000 	.word	0x40008000
 80092c8:	40013800 	.word	0x40013800
 80092cc:	40004400 	.word	0x40004400
 80092d0:	40004800 	.word	0x40004800
 80092d4:	40004c00 	.word	0x40004c00
 80092d8:	40005000 	.word	0x40005000
 80092dc:	08015de4 	.word	0x08015de4
 80092e0:	000ffcff 	.word	0x000ffcff
 80092e4:	00f42400 	.word	0x00f42400
    switch (clocksource)
 80092e8:	2a08      	cmp	r2, #8
 80092ea:	d865      	bhi.n	80093b8 <UART_SetConfig+0x368>
 80092ec:	e8df f002 	tbb	[pc, r2]
 80092f0:	64052707 	.word	0x64052707
 80092f4:	6464642a 	.word	0x6464642a
 80092f8:	0b          	.byte	0x0b
 80092f9:	00          	.byte	0x00
 80092fa:	4835      	ldr	r0, [pc, #212]	@ (80093d0 <UART_SetConfig+0x380>)
 80092fc:	e003      	b.n	8009306 <UART_SetConfig+0x2b6>
        pclk = HAL_RCC_GetPCLK1Freq();
 80092fe:	f7fe fa8b 	bl	8007818 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8009302:	2800      	cmp	r0, #0
 8009304:	d05a      	beq.n	80093bc <UART_SetConfig+0x36c>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009306:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8009308:	4b32      	ldr	r3, [pc, #200]	@ (80093d4 <UART_SetConfig+0x384>)
 800930a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800930e:	fbb0 f0f3 	udiv	r0, r0, r3
 8009312:	6862      	ldr	r2, [r4, #4]
 8009314:	0853      	lsrs	r3, r2, #1
 8009316:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800931a:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800931e:	f1a3 0110 	sub.w	r1, r3, #16
 8009322:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8009326:	4291      	cmp	r1, r2
 8009328:	d84a      	bhi.n	80093c0 <UART_SetConfig+0x370>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800932a:	b29a      	uxth	r2, r3
 800932c:	f022 020f 	bic.w	r2, r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009330:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8009334:	4313      	orrs	r3, r2
        huart->Instance->BRR = brrtemp;
 8009336:	6822      	ldr	r2, [r4, #0]
 8009338:	60d3      	str	r3, [r2, #12]
 800933a:	2000      	movs	r0, #0
 800933c:	e020      	b.n	8009380 <UART_SetConfig+0x330>
        pclk = HAL_RCC_GetPCLK2Freq();
 800933e:	f7fe fa7d 	bl	800783c <HAL_RCC_GetPCLK2Freq>
        break;
 8009342:	e7de      	b.n	8009302 <UART_SetConfig+0x2b2>
        pclk = HAL_RCC_GetSysClockFreq();
 8009344:	f7fe f922 	bl	800758c <HAL_RCC_GetSysClockFreq>
        break;
 8009348:	e7db      	b.n	8009302 <UART_SetConfig+0x2b2>
    switch (clocksource)
 800934a:	4821      	ldr	r0, [pc, #132]	@ (80093d0 <UART_SetConfig+0x380>)
 800934c:	e003      	b.n	8009356 <UART_SetConfig+0x306>
        pclk = HAL_RCC_GetPCLK1Freq();
 800934e:	f7fe fa63 	bl	8007818 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8009352:	2800      	cmp	r0, #0
 8009354:	d038      	beq.n	80093c8 <UART_SetConfig+0x378>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009356:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8009358:	4b1e      	ldr	r3, [pc, #120]	@ (80093d4 <UART_SetConfig+0x384>)
 800935a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800935e:	fbb0 f0f3 	udiv	r0, r0, r3
 8009362:	6863      	ldr	r3, [r4, #4]
 8009364:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8009368:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800936c:	f1a0 0210 	sub.w	r2, r0, #16
 8009370:	f64f 73ef 	movw	r3, #65519	@ 0xffef
 8009374:	429a      	cmp	r2, r3
 8009376:	d829      	bhi.n	80093cc <UART_SetConfig+0x37c>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009378:	6823      	ldr	r3, [r4, #0]
 800937a:	b280      	uxth	r0, r0
 800937c:	60d8      	str	r0, [r3, #12]
 800937e:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 8009380:	2301      	movs	r3, #1
 8009382:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009386:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
 800938a:	2300      	movs	r3, #0
 800938c:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->TxISR = NULL;
 800938e:	67a3      	str	r3, [r4, #120]	@ 0x78
}
 8009390:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8009392:	f7fe fa53 	bl	800783c <HAL_RCC_GetPCLK2Freq>
        break;
 8009396:	e7dc      	b.n	8009352 <UART_SetConfig+0x302>
        pclk = HAL_RCC_GetSysClockFreq();
 8009398:	f7fe f8f8 	bl	800758c <HAL_RCC_GetSysClockFreq>
        break;
 800939c:	e7d9      	b.n	8009352 <UART_SetConfig+0x302>
        pclk = (uint32_t) LSE_VALUE;
 800939e:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80093a2:	e7d8      	b.n	8009356 <UART_SetConfig+0x306>
    switch (clocksource)
 80093a4:	2001      	movs	r0, #1
 80093a6:	e7eb      	b.n	8009380 <UART_SetConfig+0x330>
 80093a8:	2000      	movs	r0, #0
 80093aa:	e7e9      	b.n	8009380 <UART_SetConfig+0x330>
        ret = HAL_ERROR;
 80093ac:	2001      	movs	r0, #1
 80093ae:	e7e7      	b.n	8009380 <UART_SetConfig+0x330>
 80093b0:	2001      	movs	r0, #1
 80093b2:	e7e5      	b.n	8009380 <UART_SetConfig+0x330>
          ret = HAL_ERROR;
 80093b4:	2001      	movs	r0, #1
 80093b6:	e7e3      	b.n	8009380 <UART_SetConfig+0x330>
    switch (clocksource)
 80093b8:	2001      	movs	r0, #1
 80093ba:	e7e1      	b.n	8009380 <UART_SetConfig+0x330>
 80093bc:	2000      	movs	r0, #0
 80093be:	e7df      	b.n	8009380 <UART_SetConfig+0x330>
        ret = HAL_ERROR;
 80093c0:	2001      	movs	r0, #1
 80093c2:	e7dd      	b.n	8009380 <UART_SetConfig+0x330>
    switch (clocksource)
 80093c4:	2001      	movs	r0, #1
 80093c6:	e7db      	b.n	8009380 <UART_SetConfig+0x330>
 80093c8:	2000      	movs	r0, #0
 80093ca:	e7d9      	b.n	8009380 <UART_SetConfig+0x330>
        ret = HAL_ERROR;
 80093cc:	2001      	movs	r0, #1
 80093ce:	e7d7      	b.n	8009380 <UART_SetConfig+0x330>
 80093d0:	00f42400 	.word	0x00f42400
 80093d4:	08015de4 	.word	0x08015de4

080093d8 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80093d8:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80093da:	f013 0f08 	tst.w	r3, #8
 80093de:	d006      	beq.n	80093ee <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80093e0:	6802      	ldr	r2, [r0, #0]
 80093e2:	6853      	ldr	r3, [r2, #4]
 80093e4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80093e8:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 80093ea:	430b      	orrs	r3, r1
 80093ec:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80093ee:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80093f0:	f013 0f01 	tst.w	r3, #1
 80093f4:	d006      	beq.n	8009404 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80093f6:	6802      	ldr	r2, [r0, #0]
 80093f8:	6853      	ldr	r3, [r2, #4]
 80093fa:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80093fe:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8009400:	430b      	orrs	r3, r1
 8009402:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009404:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8009406:	f013 0f02 	tst.w	r3, #2
 800940a:	d006      	beq.n	800941a <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800940c:	6802      	ldr	r2, [r0, #0]
 800940e:	6853      	ldr	r3, [r2, #4]
 8009410:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009414:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8009416:	430b      	orrs	r3, r1
 8009418:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800941a:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800941c:	f013 0f04 	tst.w	r3, #4
 8009420:	d006      	beq.n	8009430 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009422:	6802      	ldr	r2, [r0, #0]
 8009424:	6853      	ldr	r3, [r2, #4]
 8009426:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800942a:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 800942c:	430b      	orrs	r3, r1
 800942e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009430:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8009432:	f013 0f10 	tst.w	r3, #16
 8009436:	d006      	beq.n	8009446 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009438:	6802      	ldr	r2, [r0, #0]
 800943a:	6893      	ldr	r3, [r2, #8]
 800943c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009440:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 8009442:	430b      	orrs	r3, r1
 8009444:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009446:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8009448:	f013 0f20 	tst.w	r3, #32
 800944c:	d006      	beq.n	800945c <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800944e:	6802      	ldr	r2, [r0, #0]
 8009450:	6893      	ldr	r3, [r2, #8]
 8009452:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009456:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8009458:	430b      	orrs	r3, r1
 800945a:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800945c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800945e:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8009462:	d00a      	beq.n	800947a <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009464:	6802      	ldr	r2, [r0, #0]
 8009466:	6853      	ldr	r3, [r2, #4]
 8009468:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800946c:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 800946e:	430b      	orrs	r3, r1
 8009470:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009472:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8009474:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009478:	d00b      	beq.n	8009492 <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800947a:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800947c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009480:	d006      	beq.n	8009490 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009482:	6802      	ldr	r2, [r0, #0]
 8009484:	6853      	ldr	r3, [r2, #4]
 8009486:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 800948a:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800948c:	430b      	orrs	r3, r1
 800948e:	6053      	str	r3, [r2, #4]
}
 8009490:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009492:	6802      	ldr	r2, [r0, #0]
 8009494:	6853      	ldr	r3, [r2, #4]
 8009496:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800949a:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 800949c:	430b      	orrs	r3, r1
 800949e:	6053      	str	r3, [r2, #4]
 80094a0:	e7eb      	b.n	800947a <UART_AdvFeatureConfig+0xa2>

080094a2 <UART_WaitOnFlagUntilTimeout>:
{
 80094a2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094a6:	4605      	mov	r5, r0
 80094a8:	460e      	mov	r6, r1
 80094aa:	4617      	mov	r7, r2
 80094ac:	4699      	mov	r9, r3
 80094ae:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80094b2:	682b      	ldr	r3, [r5, #0]
 80094b4:	69dc      	ldr	r4, [r3, #28]
 80094b6:	ea36 0404 	bics.w	r4, r6, r4
 80094ba:	bf0c      	ite	eq
 80094bc:	2401      	moveq	r4, #1
 80094be:	2400      	movne	r4, #0
 80094c0:	42bc      	cmp	r4, r7
 80094c2:	d136      	bne.n	8009532 <UART_WaitOnFlagUntilTimeout+0x90>
    if (Timeout != HAL_MAX_DELAY)
 80094c4:	f1b8 3fff 	cmp.w	r8, #4294967295
 80094c8:	d0f3      	beq.n	80094b2 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80094ca:	f7fb fb0d 	bl	8004ae8 <HAL_GetTick>
 80094ce:	eba0 0009 	sub.w	r0, r0, r9
 80094d2:	4540      	cmp	r0, r8
 80094d4:	d830      	bhi.n	8009538 <UART_WaitOnFlagUntilTimeout+0x96>
 80094d6:	f1b8 0f00 	cmp.w	r8, #0
 80094da:	d02f      	beq.n	800953c <UART_WaitOnFlagUntilTimeout+0x9a>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80094dc:	682b      	ldr	r3, [r5, #0]
 80094de:	681a      	ldr	r2, [r3, #0]
 80094e0:	f012 0f04 	tst.w	r2, #4
 80094e4:	d0e5      	beq.n	80094b2 <UART_WaitOnFlagUntilTimeout+0x10>
 80094e6:	2e80      	cmp	r6, #128	@ 0x80
 80094e8:	d0e3      	beq.n	80094b2 <UART_WaitOnFlagUntilTimeout+0x10>
 80094ea:	2e40      	cmp	r6, #64	@ 0x40
 80094ec:	d0e1      	beq.n	80094b2 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80094ee:	69da      	ldr	r2, [r3, #28]
 80094f0:	f012 0f08 	tst.w	r2, #8
 80094f4:	d111      	bne.n	800951a <UART_WaitOnFlagUntilTimeout+0x78>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80094f6:	69da      	ldr	r2, [r3, #28]
 80094f8:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 80094fc:	d0d9      	beq.n	80094b2 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80094fe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009502:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 8009504:	4628      	mov	r0, r5
 8009506:	f7ff fa91 	bl	8008a2c <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800950a:	2320      	movs	r3, #32
 800950c:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
          __HAL_UNLOCK(huart);
 8009510:	2300      	movs	r3, #0
 8009512:	f885 3084 	strb.w	r3, [r5, #132]	@ 0x84
          return HAL_TIMEOUT;
 8009516:	2003      	movs	r0, #3
 8009518:	e00c      	b.n	8009534 <UART_WaitOnFlagUntilTimeout+0x92>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800951a:	2408      	movs	r4, #8
 800951c:	621c      	str	r4, [r3, #32]
          UART_EndRxTransfer(huart);
 800951e:	4628      	mov	r0, r5
 8009520:	f7ff fa84 	bl	8008a2c <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009524:	f8c5 4090 	str.w	r4, [r5, #144]	@ 0x90
          __HAL_UNLOCK(huart);
 8009528:	2300      	movs	r3, #0
 800952a:	f885 3084 	strb.w	r3, [r5, #132]	@ 0x84
          return HAL_ERROR;
 800952e:	2001      	movs	r0, #1
 8009530:	e000      	b.n	8009534 <UART_WaitOnFlagUntilTimeout+0x92>
  return HAL_OK;
 8009532:	2000      	movs	r0, #0
}
 8009534:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 8009538:	2003      	movs	r0, #3
 800953a:	e7fb      	b.n	8009534 <UART_WaitOnFlagUntilTimeout+0x92>
 800953c:	2003      	movs	r0, #3
 800953e:	e7f9      	b.n	8009534 <UART_WaitOnFlagUntilTimeout+0x92>

08009540 <HAL_UART_Transmit>:
{
 8009540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009544:	b082      	sub	sp, #8
 8009546:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8009548:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 800954c:	2b20      	cmp	r3, #32
 800954e:	d15a      	bne.n	8009606 <HAL_UART_Transmit+0xc6>
 8009550:	4604      	mov	r4, r0
 8009552:	460d      	mov	r5, r1
 8009554:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8009556:	2900      	cmp	r1, #0
 8009558:	d059      	beq.n	800960e <HAL_UART_Transmit+0xce>
 800955a:	b90a      	cbnz	r2, 8009560 <HAL_UART_Transmit+0x20>
      return  HAL_ERROR;
 800955c:	2001      	movs	r0, #1
 800955e:	e053      	b.n	8009608 <HAL_UART_Transmit+0xc8>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009560:	2300      	movs	r3, #0
 8009562:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009566:	2321      	movs	r3, #33	@ 0x21
 8009568:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
    tickstart = HAL_GetTick();
 800956c:	f7fb fabc 	bl	8004ae8 <HAL_GetTick>
 8009570:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 8009572:	f8a4 8054 	strh.w	r8, [r4, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009576:	f8a4 8056 	strh.w	r8, [r4, #86]	@ 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800957a:	68a3      	ldr	r3, [r4, #8]
 800957c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009580:	d002      	beq.n	8009588 <HAL_UART_Transmit+0x48>
      pdata16bits = NULL;
 8009582:	f04f 0800 	mov.w	r8, #0
 8009586:	e016      	b.n	80095b6 <HAL_UART_Transmit+0x76>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009588:	6923      	ldr	r3, [r4, #16]
 800958a:	b343      	cbz	r3, 80095de <HAL_UART_Transmit+0x9e>
      pdata16bits = NULL;
 800958c:	f04f 0800 	mov.w	r8, #0
 8009590:	e011      	b.n	80095b6 <HAL_UART_Transmit+0x76>
        huart->gState = HAL_UART_STATE_READY;
 8009592:	2320      	movs	r3, #32
 8009594:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
        return HAL_TIMEOUT;
 8009598:	2003      	movs	r0, #3
 800959a:	e035      	b.n	8009608 <HAL_UART_Transmit+0xc8>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800959c:	f838 3b02 	ldrh.w	r3, [r8], #2
 80095a0:	6822      	ldr	r2, [r4, #0]
 80095a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095a6:	6293      	str	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 80095a8:	f8b4 2056 	ldrh.w	r2, [r4, #86]	@ 0x56
 80095ac:	b292      	uxth	r2, r2
 80095ae:	3a01      	subs	r2, #1
 80095b0:	b292      	uxth	r2, r2
 80095b2:	f8a4 2056 	strh.w	r2, [r4, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80095b6:	f8b4 3056 	ldrh.w	r3, [r4, #86]	@ 0x56
 80095ba:	b29b      	uxth	r3, r3
 80095bc:	b193      	cbz	r3, 80095e4 <HAL_UART_Transmit+0xa4>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80095be:	9600      	str	r6, [sp, #0]
 80095c0:	463b      	mov	r3, r7
 80095c2:	2200      	movs	r2, #0
 80095c4:	2180      	movs	r1, #128	@ 0x80
 80095c6:	4620      	mov	r0, r4
 80095c8:	f7ff ff6b 	bl	80094a2 <UART_WaitOnFlagUntilTimeout>
 80095cc:	2800      	cmp	r0, #0
 80095ce:	d1e0      	bne.n	8009592 <HAL_UART_Transmit+0x52>
      if (pdata8bits == NULL)
 80095d0:	2d00      	cmp	r5, #0
 80095d2:	d0e3      	beq.n	800959c <HAL_UART_Transmit+0x5c>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80095d4:	f815 2b01 	ldrb.w	r2, [r5], #1
 80095d8:	6823      	ldr	r3, [r4, #0]
 80095da:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80095dc:	e7e4      	b.n	80095a8 <HAL_UART_Transmit+0x68>
      pdata16bits = (const uint16_t *) pData;
 80095de:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 80095e0:	2500      	movs	r5, #0
 80095e2:	e7e8      	b.n	80095b6 <HAL_UART_Transmit+0x76>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80095e4:	9600      	str	r6, [sp, #0]
 80095e6:	463b      	mov	r3, r7
 80095e8:	2200      	movs	r2, #0
 80095ea:	2140      	movs	r1, #64	@ 0x40
 80095ec:	4620      	mov	r0, r4
 80095ee:	f7ff ff58 	bl	80094a2 <UART_WaitOnFlagUntilTimeout>
 80095f2:	b918      	cbnz	r0, 80095fc <HAL_UART_Transmit+0xbc>
    huart->gState = HAL_UART_STATE_READY;
 80095f4:	2320      	movs	r3, #32
 80095f6:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
    return HAL_OK;
 80095fa:	e005      	b.n	8009608 <HAL_UART_Transmit+0xc8>
      huart->gState = HAL_UART_STATE_READY;
 80095fc:	2320      	movs	r3, #32
 80095fe:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      return HAL_TIMEOUT;
 8009602:	2003      	movs	r0, #3
 8009604:	e000      	b.n	8009608 <HAL_UART_Transmit+0xc8>
    return HAL_BUSY;
 8009606:	2002      	movs	r0, #2
}
 8009608:	b002      	add	sp, #8
 800960a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 800960e:	2001      	movs	r0, #1
 8009610:	e7fa      	b.n	8009608 <HAL_UART_Transmit+0xc8>

08009612 <UART_CheckIdleState>:
{
 8009612:	b530      	push	{r4, r5, lr}
 8009614:	b083      	sub	sp, #12
 8009616:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009618:	2300      	movs	r3, #0
 800961a:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
  tickstart = HAL_GetTick();
 800961e:	f7fb fa63 	bl	8004ae8 <HAL_GetTick>
 8009622:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009624:	6822      	ldr	r2, [r4, #0]
 8009626:	6812      	ldr	r2, [r2, #0]
 8009628:	f012 0f08 	tst.w	r2, #8
 800962c:	d110      	bne.n	8009650 <UART_CheckIdleState+0x3e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800962e:	6823      	ldr	r3, [r4, #0]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f013 0f04 	tst.w	r3, #4
 8009636:	d128      	bne.n	800968a <UART_CheckIdleState+0x78>
  huart->gState = HAL_UART_STATE_READY;
 8009638:	2320      	movs	r3, #32
 800963a:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800963e:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009642:	2000      	movs	r0, #0
 8009644:	66e0      	str	r0, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009646:	6720      	str	r0, [r4, #112]	@ 0x70
  __HAL_UNLOCK(huart);
 8009648:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 800964c:	b003      	add	sp, #12
 800964e:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009650:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009654:	9300      	str	r3, [sp, #0]
 8009656:	4603      	mov	r3, r0
 8009658:	2200      	movs	r2, #0
 800965a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800965e:	4620      	mov	r0, r4
 8009660:	f7ff ff1f 	bl	80094a2 <UART_WaitOnFlagUntilTimeout>
 8009664:	2800      	cmp	r0, #0
 8009666:	d0e2      	beq.n	800962e <UART_CheckIdleState+0x1c>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009668:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800966a:	e852 3f00 	ldrex	r3, [r2]
 800966e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009672:	e842 3100 	strex	r1, r3, [r2]
 8009676:	2900      	cmp	r1, #0
 8009678:	d1f6      	bne.n	8009668 <UART_CheckIdleState+0x56>
      huart->gState = HAL_UART_STATE_READY;
 800967a:	2320      	movs	r3, #32
 800967c:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      __HAL_UNLOCK(huart);
 8009680:	2300      	movs	r3, #0
 8009682:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
      return HAL_TIMEOUT;
 8009686:	2003      	movs	r0, #3
 8009688:	e7e0      	b.n	800964c <UART_CheckIdleState+0x3a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800968a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800968e:	9300      	str	r3, [sp, #0]
 8009690:	462b      	mov	r3, r5
 8009692:	2200      	movs	r2, #0
 8009694:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009698:	4620      	mov	r0, r4
 800969a:	f7ff ff02 	bl	80094a2 <UART_WaitOnFlagUntilTimeout>
 800969e:	2800      	cmp	r0, #0
 80096a0:	d0ca      	beq.n	8009638 <UART_CheckIdleState+0x26>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80096a2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096a4:	e852 3f00 	ldrex	r3, [r2]
 80096a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096ac:	e842 3100 	strex	r1, r3, [r2]
 80096b0:	2900      	cmp	r1, #0
 80096b2:	d1f6      	bne.n	80096a2 <UART_CheckIdleState+0x90>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096b4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096b6:	f102 0308 	add.w	r3, r2, #8
 80096ba:	e853 3f00 	ldrex	r3, [r3]
 80096be:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096c2:	3208      	adds	r2, #8
 80096c4:	e842 3100 	strex	r1, r3, [r2]
 80096c8:	2900      	cmp	r1, #0
 80096ca:	d1f3      	bne.n	80096b4 <UART_CheckIdleState+0xa2>
      huart->RxState = HAL_UART_STATE_READY;
 80096cc:	2320      	movs	r3, #32
 80096ce:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
      __HAL_UNLOCK(huart);
 80096d2:	2300      	movs	r3, #0
 80096d4:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
      return HAL_TIMEOUT;
 80096d8:	2003      	movs	r0, #3
 80096da:	e7b7      	b.n	800964c <UART_CheckIdleState+0x3a>

080096dc <HAL_UART_Init>:
  if (huart == NULL)
 80096dc:	b378      	cbz	r0, 800973e <HAL_UART_Init+0x62>
{
 80096de:	b510      	push	{r4, lr}
 80096e0:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80096e2:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 80096e6:	b30b      	cbz	r3, 800972c <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 80096e8:	2324      	movs	r3, #36	@ 0x24
 80096ea:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 80096ee:	6822      	ldr	r2, [r4, #0]
 80096f0:	6813      	ldr	r3, [r2, #0]
 80096f2:	f023 0301 	bic.w	r3, r3, #1
 80096f6:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80096f8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80096fa:	b9e3      	cbnz	r3, 8009736 <HAL_UART_Init+0x5a>
  if (UART_SetConfig(huart) == HAL_ERROR)
 80096fc:	4620      	mov	r0, r4
 80096fe:	f7ff fca7 	bl	8009050 <UART_SetConfig>
 8009702:	2801      	cmp	r0, #1
 8009704:	d011      	beq.n	800972a <HAL_UART_Init+0x4e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009706:	6822      	ldr	r2, [r4, #0]
 8009708:	6853      	ldr	r3, [r2, #4]
 800970a:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 800970e:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009710:	6822      	ldr	r2, [r4, #0]
 8009712:	6893      	ldr	r3, [r2, #8]
 8009714:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8009718:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 800971a:	6822      	ldr	r2, [r4, #0]
 800971c:	6813      	ldr	r3, [r2, #0]
 800971e:	f043 0301 	orr.w	r3, r3, #1
 8009722:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8009724:	4620      	mov	r0, r4
 8009726:	f7ff ff74 	bl	8009612 <UART_CheckIdleState>
}
 800972a:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800972c:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
    HAL_UART_MspInit(huart);
 8009730:	f7fb f848 	bl	80047c4 <HAL_UART_MspInit>
 8009734:	e7d8      	b.n	80096e8 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8009736:	4620      	mov	r0, r4
 8009738:	f7ff fe4e 	bl	80093d8 <UART_AdvFeatureConfig>
 800973c:	e7de      	b.n	80096fc <HAL_UART_Init+0x20>
    return HAL_ERROR;
 800973e:	2001      	movs	r0, #1
}
 8009740:	4770      	bx	lr
	...

08009744 <UART_Start_Receive_DMA>:
{
 8009744:	b510      	push	{r4, lr}
 8009746:	4604      	mov	r4, r0
 8009748:	4613      	mov	r3, r2
  huart->pRxBuffPtr = pData;
 800974a:	6581      	str	r1, [r0, #88]	@ 0x58
  huart->RxXferSize = Size;
 800974c:	f8a0 205c 	strh.w	r2, [r0, #92]	@ 0x5c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009750:	2200      	movs	r2, #0
 8009752:	f8c0 2090 	str.w	r2, [r0, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009756:	2222      	movs	r2, #34	@ 0x22
 8009758:	f8c0 208c 	str.w	r2, [r0, #140]	@ 0x8c
  if (huart->hdmarx != NULL)
 800975c:	f8d0 2080 	ldr.w	r2, [r0, #128]	@ 0x80
 8009760:	b1aa      	cbz	r2, 800978e <UART_Start_Receive_DMA+0x4a>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009762:	4921      	ldr	r1, [pc, #132]	@ (80097e8 <UART_Start_Receive_DMA+0xa4>)
 8009764:	62d1      	str	r1, [r2, #44]	@ 0x2c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009766:	f8d0 2080 	ldr.w	r2, [r0, #128]	@ 0x80
 800976a:	4920      	ldr	r1, [pc, #128]	@ (80097ec <UART_Start_Receive_DMA+0xa8>)
 800976c:	6311      	str	r1, [r2, #48]	@ 0x30
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800976e:	f8d0 2080 	ldr.w	r2, [r0, #128]	@ 0x80
 8009772:	491f      	ldr	r1, [pc, #124]	@ (80097f0 <UART_Start_Receive_DMA+0xac>)
 8009774:	6351      	str	r1, [r2, #52]	@ 0x34
    huart->hdmarx->XferAbortCallback = NULL;
 8009776:	f8d0 2080 	ldr.w	r2, [r0, #128]	@ 0x80
 800977a:	2100      	movs	r1, #0
 800977c:	6391      	str	r1, [r2, #56]	@ 0x38
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800977e:	6801      	ldr	r1, [r0, #0]
 8009780:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8009782:	3124      	adds	r1, #36	@ 0x24
 8009784:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 8009788:	f7fc fd66 	bl	8006258 <HAL_DMA_Start_IT>
 800978c:	bb20      	cbnz	r0, 80097d8 <UART_Start_Receive_DMA+0x94>
  if (huart->Init.Parity != UART_PARITY_NONE)
 800978e:	6923      	ldr	r3, [r4, #16]
 8009790:	b143      	cbz	r3, 80097a4 <UART_Start_Receive_DMA+0x60>
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009792:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009794:	e852 3f00 	ldrex	r3, [r2]
 8009798:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800979c:	e842 3100 	strex	r1, r3, [r2]
 80097a0:	2900      	cmp	r1, #0
 80097a2:	d1f6      	bne.n	8009792 <UART_Start_Receive_DMA+0x4e>
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097a4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097a6:	f102 0308 	add.w	r3, r2, #8
 80097aa:	e853 3f00 	ldrex	r3, [r3]
 80097ae:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097b2:	3208      	adds	r2, #8
 80097b4:	e842 3100 	strex	r1, r3, [r2]
 80097b8:	2900      	cmp	r1, #0
 80097ba:	d1f3      	bne.n	80097a4 <UART_Start_Receive_DMA+0x60>
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80097bc:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097be:	f102 0308 	add.w	r3, r2, #8
 80097c2:	e853 3f00 	ldrex	r3, [r3]
 80097c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097ca:	3208      	adds	r2, #8
 80097cc:	e842 3100 	strex	r1, r3, [r2]
 80097d0:	2900      	cmp	r1, #0
 80097d2:	d1f3      	bne.n	80097bc <UART_Start_Receive_DMA+0x78>
  return HAL_OK;
 80097d4:	2000      	movs	r0, #0
}
 80097d6:	bd10      	pop	{r4, pc}
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80097d8:	2310      	movs	r3, #16
 80097da:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
      huart->RxState = HAL_UART_STATE_READY;
 80097de:	2320      	movs	r3, #32
 80097e0:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
      return HAL_ERROR;
 80097e4:	2001      	movs	r0, #1
 80097e6:	e7f6      	b.n	80097d6 <UART_Start_Receive_DMA+0x92>
 80097e8:	08008fbd 	.word	0x08008fbd
 80097ec:	08008f9d 	.word	0x08008f9d
 80097f0:	08008be9 	.word	0x08008be9

080097f4 <HAL_UART_Receive_DMA>:
{
 80097f4:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 80097f6:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
 80097fa:	2b20      	cmp	r3, #32
 80097fc:	d117      	bne.n	800982e <HAL_UART_Receive_DMA+0x3a>
    if ((pData == NULL) || (Size == 0U))
 80097fe:	b1c1      	cbz	r1, 8009832 <HAL_UART_Receive_DMA+0x3e>
 8009800:	b1ca      	cbz	r2, 8009836 <HAL_UART_Receive_DMA+0x42>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009802:	2300      	movs	r3, #0
 8009804:	66c3      	str	r3, [r0, #108]	@ 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009806:	6803      	ldr	r3, [r0, #0]
 8009808:	4c0c      	ldr	r4, [pc, #48]	@ (800983c <HAL_UART_Receive_DMA+0x48>)
 800980a:	42a3      	cmp	r3, r4
 800980c:	d00c      	beq.n	8009828 <HAL_UART_Receive_DMA+0x34>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800980e:	685b      	ldr	r3, [r3, #4]
 8009810:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 8009814:	d008      	beq.n	8009828 <HAL_UART_Receive_DMA+0x34>
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009816:	6804      	ldr	r4, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009818:	e854 3f00 	ldrex	r3, [r4]
 800981c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009820:	e844 3500 	strex	r5, r3, [r4]
 8009824:	2d00      	cmp	r5, #0
 8009826:	d1f6      	bne.n	8009816 <HAL_UART_Receive_DMA+0x22>
    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009828:	f7ff ff8c 	bl	8009744 <UART_Start_Receive_DMA>
 800982c:	e000      	b.n	8009830 <HAL_UART_Receive_DMA+0x3c>
    return HAL_BUSY;
 800982e:	2002      	movs	r0, #2
}
 8009830:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8009832:	2001      	movs	r0, #1
 8009834:	e7fc      	b.n	8009830 <HAL_UART_Receive_DMA+0x3c>
 8009836:	2001      	movs	r0, #1
 8009838:	e7fa      	b.n	8009830 <HAL_UART_Receive_DMA+0x3c>
 800983a:	bf00      	nop
 800983c:	40008000 	.word	0x40008000

08009840 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009840:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 8009842:	b92b      	cbnz	r3, 8009850 <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 8009844:	2301      	movs	r3, #1
 8009846:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800984a:	f8a0 3068 	strh.w	r3, [r0, #104]	@ 0x68
 800984e:	4770      	bx	lr
{
 8009850:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009852:	6803      	ldr	r3, [r0, #0]
 8009854:	689a      	ldr	r2, [r3, #8]
 8009856:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800985a:	6899      	ldr	r1, [r3, #8]
 800985c:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800985e:	4d09      	ldr	r5, [pc, #36]	@ (8009884 <UARTEx_SetNbDataToProcess+0x44>)
 8009860:	5c6b      	ldrb	r3, [r5, r1]
 8009862:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009864:	4c08      	ldr	r4, [pc, #32]	@ (8009888 <UARTEx_SetNbDataToProcess+0x48>)
 8009866:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009868:	fb93 f3f1 	sdiv	r3, r3, r1
 800986c:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009870:	5cab      	ldrb	r3, [r5, r2]
 8009872:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009874:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009876:	fb93 f3f2 	sdiv	r3, r3, r2
 800987a:	f8a0 3068 	strh.w	r3, [r0, #104]	@ 0x68
  }
}
 800987e:	bc30      	pop	{r4, r5}
 8009880:	4770      	bx	lr
 8009882:	bf00      	nop
 8009884:	08015e04 	.word	0x08015e04
 8009888:	08015dfc 	.word	0x08015dfc

0800988c <HAL_RS485Ex_Init>:
  if (huart == NULL)
 800988c:	2800      	cmp	r0, #0
 800988e:	d03e      	beq.n	800990e <HAL_RS485Ex_Init+0x82>
{
 8009890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009892:	460f      	mov	r7, r1
 8009894:	4616      	mov	r6, r2
 8009896:	461d      	mov	r5, r3
 8009898:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800989a:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 800989e:	b36b      	cbz	r3, 80098fc <HAL_RS485Ex_Init+0x70>
  huart->gState = HAL_UART_STATE_BUSY;
 80098a0:	2324      	movs	r3, #36	@ 0x24
 80098a2:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 80098a6:	6822      	ldr	r2, [r4, #0]
 80098a8:	6813      	ldr	r3, [r2, #0]
 80098aa:	f023 0301 	bic.w	r3, r3, #1
 80098ae:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80098b0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80098b2:	bb43      	cbnz	r3, 8009906 <HAL_RS485Ex_Init+0x7a>
  if (UART_SetConfig(huart) == HAL_ERROR)
 80098b4:	4620      	mov	r0, r4
 80098b6:	f7ff fbcb 	bl	8009050 <UART_SetConfig>
 80098ba:	2801      	cmp	r0, #1
 80098bc:	d01d      	beq.n	80098fa <HAL_RS485Ex_Init+0x6e>
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 80098be:	6822      	ldr	r2, [r4, #0]
 80098c0:	6893      	ldr	r3, [r2, #8]
 80098c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80098c6:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 80098c8:	6822      	ldr	r2, [r4, #0]
 80098ca:	6893      	ldr	r3, [r2, #8]
 80098cc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80098d0:	433b      	orrs	r3, r7
 80098d2:	6093      	str	r3, [r2, #8]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 80098d4:	042d      	lsls	r5, r5, #16
 80098d6:	ea45 5246 	orr.w	r2, r5, r6, lsl #21
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 80098da:	6821      	ldr	r1, [r4, #0]
 80098dc:	680b      	ldr	r3, [r1, #0]
 80098de:	f023 737f 	bic.w	r3, r3, #66846720	@ 0x3fc0000
 80098e2:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80098e6:	4313      	orrs	r3, r2
 80098e8:	600b      	str	r3, [r1, #0]
  __HAL_UART_ENABLE(huart);
 80098ea:	6822      	ldr	r2, [r4, #0]
 80098ec:	6813      	ldr	r3, [r2, #0]
 80098ee:	f043 0301 	orr.w	r3, r3, #1
 80098f2:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 80098f4:	4620      	mov	r0, r4
 80098f6:	f7ff fe8c 	bl	8009612 <UART_CheckIdleState>
}
 80098fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    huart->Lock = HAL_UNLOCKED;
 80098fc:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
    HAL_UART_MspInit(huart);
 8009900:	f7fa ff60 	bl	80047c4 <HAL_UART_MspInit>
 8009904:	e7cc      	b.n	80098a0 <HAL_RS485Ex_Init+0x14>
    UART_AdvFeatureConfig(huart);
 8009906:	4620      	mov	r0, r4
 8009908:	f7ff fd66 	bl	80093d8 <UART_AdvFeatureConfig>
 800990c:	e7d2      	b.n	80098b4 <HAL_RS485Ex_Init+0x28>
    return HAL_ERROR;
 800990e:	2001      	movs	r0, #1
}
 8009910:	4770      	bx	lr

08009912 <HAL_UARTEx_WakeupCallback>:
}
 8009912:	4770      	bx	lr

08009914 <HAL_UARTEx_RxFifoFullCallback>:
}
 8009914:	4770      	bx	lr

08009916 <HAL_UARTEx_TxFifoEmptyCallback>:
}
 8009916:	4770      	bx	lr

08009918 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 8009918:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 800991c:	2b01      	cmp	r3, #1
 800991e:	d018      	beq.n	8009952 <HAL_UARTEx_DisableFifoMode+0x3a>
 8009920:	2301      	movs	r3, #1
 8009922:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8009926:	2324      	movs	r3, #36	@ 0x24
 8009928:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800992c:	6803      	ldr	r3, [r0, #0]
 800992e:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8009930:	6819      	ldr	r1, [r3, #0]
 8009932:	f021 0101 	bic.w	r1, r1, #1
 8009936:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009938:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800993c:	2300      	movs	r3, #0
 800993e:	6643      	str	r3, [r0, #100]	@ 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009940:	6801      	ldr	r1, [r0, #0]
 8009942:	600a      	str	r2, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 8009944:	2220      	movs	r2, #32
 8009946:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 800994a:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  return HAL_OK;
 800994e:	4618      	mov	r0, r3
 8009950:	4770      	bx	lr
  __HAL_LOCK(huart);
 8009952:	2002      	movs	r0, #2
}
 8009954:	4770      	bx	lr

08009956 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8009956:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8009958:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 800995c:	2b01      	cmp	r3, #1
 800995e:	d01d      	beq.n	800999c <HAL_UARTEx_SetTxFifoThreshold+0x46>
 8009960:	4604      	mov	r4, r0
 8009962:	2301      	movs	r3, #1
 8009964:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8009968:	2324      	movs	r3, #36	@ 0x24
 800996a:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800996e:	6803      	ldr	r3, [r0, #0]
 8009970:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8009972:	681a      	ldr	r2, [r3, #0]
 8009974:	f022 0201 	bic.w	r2, r2, #1
 8009978:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800997a:	6802      	ldr	r2, [r0, #0]
 800997c:	6893      	ldr	r3, [r2, #8]
 800997e:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 8009982:	4319      	orrs	r1, r3
 8009984:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8009986:	f7ff ff5b 	bl	8009840 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800998a:	6823      	ldr	r3, [r4, #0]
 800998c:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800998e:	2320      	movs	r3, #32
 8009990:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 8009994:	2000      	movs	r0, #0
 8009996:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 800999a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800999c:	2002      	movs	r0, #2
 800999e:	e7fc      	b.n	800999a <HAL_UARTEx_SetTxFifoThreshold+0x44>

080099a0 <HAL_UARTEx_SetRxFifoThreshold>:
{
 80099a0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 80099a2:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 80099a6:	2b01      	cmp	r3, #1
 80099a8:	d01d      	beq.n	80099e6 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 80099aa:	4604      	mov	r4, r0
 80099ac:	2301      	movs	r3, #1
 80099ae:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 80099b2:	2324      	movs	r3, #36	@ 0x24
 80099b4:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80099b8:	6803      	ldr	r3, [r0, #0]
 80099ba:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80099bc:	681a      	ldr	r2, [r3, #0]
 80099be:	f022 0201 	bic.w	r2, r2, #1
 80099c2:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80099c4:	6802      	ldr	r2, [r0, #0]
 80099c6:	6893      	ldr	r3, [r2, #8]
 80099c8:	f023 6360 	bic.w	r3, r3, #234881024	@ 0xe000000
 80099cc:	4319      	orrs	r1, r3
 80099ce:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 80099d0:	f7ff ff36 	bl	8009840 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80099d4:	6823      	ldr	r3, [r4, #0]
 80099d6:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80099d8:	2320      	movs	r3, #32
 80099da:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 80099de:	2000      	movs	r0, #0
 80099e0:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 80099e4:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 80099e6:	2002      	movs	r0, #2
 80099e8:	e7fc      	b.n	80099e4 <HAL_UARTEx_SetRxFifoThreshold+0x44>

080099ea <sulp>:
 80099ea:	b570      	push	{r4, r5, r6, lr}
 80099ec:	4604      	mov	r4, r0
 80099ee:	460d      	mov	r5, r1
 80099f0:	ec45 4b10 	vmov	d0, r4, r5
 80099f4:	4616      	mov	r6, r2
 80099f6:	f003 fb5f 	bl	800d0b8 <__ulp>
 80099fa:	ec51 0b10 	vmov	r0, r1, d0
 80099fe:	b17e      	cbz	r6, 8009a20 <sulp+0x36>
 8009a00:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009a04:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	dd09      	ble.n	8009a20 <sulp+0x36>
 8009a0c:	051b      	lsls	r3, r3, #20
 8009a0e:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009a12:	2400      	movs	r4, #0
 8009a14:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8009a18:	4622      	mov	r2, r4
 8009a1a:	462b      	mov	r3, r5
 8009a1c:	f7f6 fe24 	bl	8000668 <__aeabi_dmul>
 8009a20:	ec41 0b10 	vmov	d0, r0, r1
 8009a24:	bd70      	pop	{r4, r5, r6, pc}
	...

08009a28 <_strtod_l>:
 8009a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a2c:	b09f      	sub	sp, #124	@ 0x7c
 8009a2e:	460c      	mov	r4, r1
 8009a30:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009a32:	2200      	movs	r2, #0
 8009a34:	921a      	str	r2, [sp, #104]	@ 0x68
 8009a36:	9005      	str	r0, [sp, #20]
 8009a38:	f04f 0a00 	mov.w	sl, #0
 8009a3c:	f04f 0b00 	mov.w	fp, #0
 8009a40:	460a      	mov	r2, r1
 8009a42:	9219      	str	r2, [sp, #100]	@ 0x64
 8009a44:	7811      	ldrb	r1, [r2, #0]
 8009a46:	292b      	cmp	r1, #43	@ 0x2b
 8009a48:	d04a      	beq.n	8009ae0 <_strtod_l+0xb8>
 8009a4a:	d838      	bhi.n	8009abe <_strtod_l+0x96>
 8009a4c:	290d      	cmp	r1, #13
 8009a4e:	d832      	bhi.n	8009ab6 <_strtod_l+0x8e>
 8009a50:	2908      	cmp	r1, #8
 8009a52:	d832      	bhi.n	8009aba <_strtod_l+0x92>
 8009a54:	2900      	cmp	r1, #0
 8009a56:	d03b      	beq.n	8009ad0 <_strtod_l+0xa8>
 8009a58:	2200      	movs	r2, #0
 8009a5a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009a5c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009a5e:	782a      	ldrb	r2, [r5, #0]
 8009a60:	2a30      	cmp	r2, #48	@ 0x30
 8009a62:	f040 80b3 	bne.w	8009bcc <_strtod_l+0x1a4>
 8009a66:	786a      	ldrb	r2, [r5, #1]
 8009a68:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009a6c:	2a58      	cmp	r2, #88	@ 0x58
 8009a6e:	d16e      	bne.n	8009b4e <_strtod_l+0x126>
 8009a70:	9302      	str	r3, [sp, #8]
 8009a72:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009a74:	9301      	str	r3, [sp, #4]
 8009a76:	ab1a      	add	r3, sp, #104	@ 0x68
 8009a78:	9300      	str	r3, [sp, #0]
 8009a7a:	4a8e      	ldr	r2, [pc, #568]	@ (8009cb4 <_strtod_l+0x28c>)
 8009a7c:	9805      	ldr	r0, [sp, #20]
 8009a7e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009a80:	a919      	add	r1, sp, #100	@ 0x64
 8009a82:	f002 fc0b 	bl	800c29c <__gethex>
 8009a86:	f010 060f 	ands.w	r6, r0, #15
 8009a8a:	4604      	mov	r4, r0
 8009a8c:	d005      	beq.n	8009a9a <_strtod_l+0x72>
 8009a8e:	2e06      	cmp	r6, #6
 8009a90:	d128      	bne.n	8009ae4 <_strtod_l+0xbc>
 8009a92:	3501      	adds	r5, #1
 8009a94:	2300      	movs	r3, #0
 8009a96:	9519      	str	r5, [sp, #100]	@ 0x64
 8009a98:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009a9a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	f040 858e 	bne.w	800a5be <_strtod_l+0xb96>
 8009aa2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009aa4:	b1cb      	cbz	r3, 8009ada <_strtod_l+0xb2>
 8009aa6:	4652      	mov	r2, sl
 8009aa8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8009aac:	ec43 2b10 	vmov	d0, r2, r3
 8009ab0:	b01f      	add	sp, #124	@ 0x7c
 8009ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ab6:	2920      	cmp	r1, #32
 8009ab8:	d1ce      	bne.n	8009a58 <_strtod_l+0x30>
 8009aba:	3201      	adds	r2, #1
 8009abc:	e7c1      	b.n	8009a42 <_strtod_l+0x1a>
 8009abe:	292d      	cmp	r1, #45	@ 0x2d
 8009ac0:	d1ca      	bne.n	8009a58 <_strtod_l+0x30>
 8009ac2:	2101      	movs	r1, #1
 8009ac4:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009ac6:	1c51      	adds	r1, r2, #1
 8009ac8:	9119      	str	r1, [sp, #100]	@ 0x64
 8009aca:	7852      	ldrb	r2, [r2, #1]
 8009acc:	2a00      	cmp	r2, #0
 8009ace:	d1c5      	bne.n	8009a5c <_strtod_l+0x34>
 8009ad0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009ad2:	9419      	str	r4, [sp, #100]	@ 0x64
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	f040 8570 	bne.w	800a5ba <_strtod_l+0xb92>
 8009ada:	4652      	mov	r2, sl
 8009adc:	465b      	mov	r3, fp
 8009ade:	e7e5      	b.n	8009aac <_strtod_l+0x84>
 8009ae0:	2100      	movs	r1, #0
 8009ae2:	e7ef      	b.n	8009ac4 <_strtod_l+0x9c>
 8009ae4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009ae6:	b13a      	cbz	r2, 8009af8 <_strtod_l+0xd0>
 8009ae8:	2135      	movs	r1, #53	@ 0x35
 8009aea:	a81c      	add	r0, sp, #112	@ 0x70
 8009aec:	f003 fbde 	bl	800d2ac <__copybits>
 8009af0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009af2:	9805      	ldr	r0, [sp, #20]
 8009af4:	f002 ffac 	bl	800ca50 <_Bfree>
 8009af8:	3e01      	subs	r6, #1
 8009afa:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009afc:	2e04      	cmp	r6, #4
 8009afe:	d806      	bhi.n	8009b0e <_strtod_l+0xe6>
 8009b00:	e8df f006 	tbb	[pc, r6]
 8009b04:	201d0314 	.word	0x201d0314
 8009b08:	14          	.byte	0x14
 8009b09:	00          	.byte	0x00
 8009b0a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009b0e:	05e1      	lsls	r1, r4, #23
 8009b10:	bf48      	it	mi
 8009b12:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8009b16:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009b1a:	0d1b      	lsrs	r3, r3, #20
 8009b1c:	051b      	lsls	r3, r3, #20
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d1bb      	bne.n	8009a9a <_strtod_l+0x72>
 8009b22:	f001 fc67 	bl	800b3f4 <__errno>
 8009b26:	2322      	movs	r3, #34	@ 0x22
 8009b28:	6003      	str	r3, [r0, #0]
 8009b2a:	e7b6      	b.n	8009a9a <_strtod_l+0x72>
 8009b2c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009b30:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009b34:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009b38:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009b3c:	e7e7      	b.n	8009b0e <_strtod_l+0xe6>
 8009b3e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8009cbc <_strtod_l+0x294>
 8009b42:	e7e4      	b.n	8009b0e <_strtod_l+0xe6>
 8009b44:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009b48:	f04f 3aff 	mov.w	sl, #4294967295
 8009b4c:	e7df      	b.n	8009b0e <_strtod_l+0xe6>
 8009b4e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009b50:	1c5a      	adds	r2, r3, #1
 8009b52:	9219      	str	r2, [sp, #100]	@ 0x64
 8009b54:	785b      	ldrb	r3, [r3, #1]
 8009b56:	2b30      	cmp	r3, #48	@ 0x30
 8009b58:	d0f9      	beq.n	8009b4e <_strtod_l+0x126>
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d09d      	beq.n	8009a9a <_strtod_l+0x72>
 8009b5e:	2301      	movs	r3, #1
 8009b60:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b62:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009b64:	930c      	str	r3, [sp, #48]	@ 0x30
 8009b66:	2300      	movs	r3, #0
 8009b68:	9308      	str	r3, [sp, #32]
 8009b6a:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b6c:	461f      	mov	r7, r3
 8009b6e:	220a      	movs	r2, #10
 8009b70:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009b72:	7805      	ldrb	r5, [r0, #0]
 8009b74:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009b78:	b2d9      	uxtb	r1, r3
 8009b7a:	2909      	cmp	r1, #9
 8009b7c:	d928      	bls.n	8009bd0 <_strtod_l+0x1a8>
 8009b7e:	494e      	ldr	r1, [pc, #312]	@ (8009cb8 <_strtod_l+0x290>)
 8009b80:	2201      	movs	r2, #1
 8009b82:	f001 fbaf 	bl	800b2e4 <strncmp>
 8009b86:	2800      	cmp	r0, #0
 8009b88:	d032      	beq.n	8009bf0 <_strtod_l+0x1c8>
 8009b8a:	2000      	movs	r0, #0
 8009b8c:	462a      	mov	r2, r5
 8009b8e:	4681      	mov	r9, r0
 8009b90:	463d      	mov	r5, r7
 8009b92:	4603      	mov	r3, r0
 8009b94:	2a65      	cmp	r2, #101	@ 0x65
 8009b96:	d001      	beq.n	8009b9c <_strtod_l+0x174>
 8009b98:	2a45      	cmp	r2, #69	@ 0x45
 8009b9a:	d114      	bne.n	8009bc6 <_strtod_l+0x19e>
 8009b9c:	b91d      	cbnz	r5, 8009ba6 <_strtod_l+0x17e>
 8009b9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009ba0:	4302      	orrs	r2, r0
 8009ba2:	d095      	beq.n	8009ad0 <_strtod_l+0xa8>
 8009ba4:	2500      	movs	r5, #0
 8009ba6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009ba8:	1c62      	adds	r2, r4, #1
 8009baa:	9219      	str	r2, [sp, #100]	@ 0x64
 8009bac:	7862      	ldrb	r2, [r4, #1]
 8009bae:	2a2b      	cmp	r2, #43	@ 0x2b
 8009bb0:	d077      	beq.n	8009ca2 <_strtod_l+0x27a>
 8009bb2:	2a2d      	cmp	r2, #45	@ 0x2d
 8009bb4:	d07b      	beq.n	8009cae <_strtod_l+0x286>
 8009bb6:	f04f 0c00 	mov.w	ip, #0
 8009bba:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009bbe:	2909      	cmp	r1, #9
 8009bc0:	f240 8082 	bls.w	8009cc8 <_strtod_l+0x2a0>
 8009bc4:	9419      	str	r4, [sp, #100]	@ 0x64
 8009bc6:	f04f 0800 	mov.w	r8, #0
 8009bca:	e0a2      	b.n	8009d12 <_strtod_l+0x2ea>
 8009bcc:	2300      	movs	r3, #0
 8009bce:	e7c7      	b.n	8009b60 <_strtod_l+0x138>
 8009bd0:	2f08      	cmp	r7, #8
 8009bd2:	bfd5      	itete	le
 8009bd4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8009bd6:	9908      	ldrgt	r1, [sp, #32]
 8009bd8:	fb02 3301 	mlale	r3, r2, r1, r3
 8009bdc:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009be0:	f100 0001 	add.w	r0, r0, #1
 8009be4:	bfd4      	ite	le
 8009be6:	930a      	strle	r3, [sp, #40]	@ 0x28
 8009be8:	9308      	strgt	r3, [sp, #32]
 8009bea:	3701      	adds	r7, #1
 8009bec:	9019      	str	r0, [sp, #100]	@ 0x64
 8009bee:	e7bf      	b.n	8009b70 <_strtod_l+0x148>
 8009bf0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009bf2:	1c5a      	adds	r2, r3, #1
 8009bf4:	9219      	str	r2, [sp, #100]	@ 0x64
 8009bf6:	785a      	ldrb	r2, [r3, #1]
 8009bf8:	b37f      	cbz	r7, 8009c5a <_strtod_l+0x232>
 8009bfa:	4681      	mov	r9, r0
 8009bfc:	463d      	mov	r5, r7
 8009bfe:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009c02:	2b09      	cmp	r3, #9
 8009c04:	d912      	bls.n	8009c2c <_strtod_l+0x204>
 8009c06:	2301      	movs	r3, #1
 8009c08:	e7c4      	b.n	8009b94 <_strtod_l+0x16c>
 8009c0a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009c0c:	1c5a      	adds	r2, r3, #1
 8009c0e:	9219      	str	r2, [sp, #100]	@ 0x64
 8009c10:	785a      	ldrb	r2, [r3, #1]
 8009c12:	3001      	adds	r0, #1
 8009c14:	2a30      	cmp	r2, #48	@ 0x30
 8009c16:	d0f8      	beq.n	8009c0a <_strtod_l+0x1e2>
 8009c18:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009c1c:	2b08      	cmp	r3, #8
 8009c1e:	f200 84d3 	bhi.w	800a5c8 <_strtod_l+0xba0>
 8009c22:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009c24:	930c      	str	r3, [sp, #48]	@ 0x30
 8009c26:	4681      	mov	r9, r0
 8009c28:	2000      	movs	r0, #0
 8009c2a:	4605      	mov	r5, r0
 8009c2c:	3a30      	subs	r2, #48	@ 0x30
 8009c2e:	f100 0301 	add.w	r3, r0, #1
 8009c32:	d02a      	beq.n	8009c8a <_strtod_l+0x262>
 8009c34:	4499      	add	r9, r3
 8009c36:	eb00 0c05 	add.w	ip, r0, r5
 8009c3a:	462b      	mov	r3, r5
 8009c3c:	210a      	movs	r1, #10
 8009c3e:	4563      	cmp	r3, ip
 8009c40:	d10d      	bne.n	8009c5e <_strtod_l+0x236>
 8009c42:	1c69      	adds	r1, r5, #1
 8009c44:	4401      	add	r1, r0
 8009c46:	4428      	add	r0, r5
 8009c48:	2808      	cmp	r0, #8
 8009c4a:	dc16      	bgt.n	8009c7a <_strtod_l+0x252>
 8009c4c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009c4e:	230a      	movs	r3, #10
 8009c50:	fb03 2300 	mla	r3, r3, r0, r2
 8009c54:	930a      	str	r3, [sp, #40]	@ 0x28
 8009c56:	2300      	movs	r3, #0
 8009c58:	e018      	b.n	8009c8c <_strtod_l+0x264>
 8009c5a:	4638      	mov	r0, r7
 8009c5c:	e7da      	b.n	8009c14 <_strtod_l+0x1ec>
 8009c5e:	2b08      	cmp	r3, #8
 8009c60:	f103 0301 	add.w	r3, r3, #1
 8009c64:	dc03      	bgt.n	8009c6e <_strtod_l+0x246>
 8009c66:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009c68:	434e      	muls	r6, r1
 8009c6a:	960a      	str	r6, [sp, #40]	@ 0x28
 8009c6c:	e7e7      	b.n	8009c3e <_strtod_l+0x216>
 8009c6e:	2b10      	cmp	r3, #16
 8009c70:	bfde      	ittt	le
 8009c72:	9e08      	ldrle	r6, [sp, #32]
 8009c74:	434e      	mulle	r6, r1
 8009c76:	9608      	strle	r6, [sp, #32]
 8009c78:	e7e1      	b.n	8009c3e <_strtod_l+0x216>
 8009c7a:	280f      	cmp	r0, #15
 8009c7c:	dceb      	bgt.n	8009c56 <_strtod_l+0x22e>
 8009c7e:	9808      	ldr	r0, [sp, #32]
 8009c80:	230a      	movs	r3, #10
 8009c82:	fb03 2300 	mla	r3, r3, r0, r2
 8009c86:	9308      	str	r3, [sp, #32]
 8009c88:	e7e5      	b.n	8009c56 <_strtod_l+0x22e>
 8009c8a:	4629      	mov	r1, r5
 8009c8c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009c8e:	1c50      	adds	r0, r2, #1
 8009c90:	9019      	str	r0, [sp, #100]	@ 0x64
 8009c92:	7852      	ldrb	r2, [r2, #1]
 8009c94:	4618      	mov	r0, r3
 8009c96:	460d      	mov	r5, r1
 8009c98:	e7b1      	b.n	8009bfe <_strtod_l+0x1d6>
 8009c9a:	f04f 0900 	mov.w	r9, #0
 8009c9e:	2301      	movs	r3, #1
 8009ca0:	e77d      	b.n	8009b9e <_strtod_l+0x176>
 8009ca2:	f04f 0c00 	mov.w	ip, #0
 8009ca6:	1ca2      	adds	r2, r4, #2
 8009ca8:	9219      	str	r2, [sp, #100]	@ 0x64
 8009caa:	78a2      	ldrb	r2, [r4, #2]
 8009cac:	e785      	b.n	8009bba <_strtod_l+0x192>
 8009cae:	f04f 0c01 	mov.w	ip, #1
 8009cb2:	e7f8      	b.n	8009ca6 <_strtod_l+0x27e>
 8009cb4:	08015e24 	.word	0x08015e24
 8009cb8:	08015e0c 	.word	0x08015e0c
 8009cbc:	7ff00000 	.word	0x7ff00000
 8009cc0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009cc2:	1c51      	adds	r1, r2, #1
 8009cc4:	9119      	str	r1, [sp, #100]	@ 0x64
 8009cc6:	7852      	ldrb	r2, [r2, #1]
 8009cc8:	2a30      	cmp	r2, #48	@ 0x30
 8009cca:	d0f9      	beq.n	8009cc0 <_strtod_l+0x298>
 8009ccc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009cd0:	2908      	cmp	r1, #8
 8009cd2:	f63f af78 	bhi.w	8009bc6 <_strtod_l+0x19e>
 8009cd6:	3a30      	subs	r2, #48	@ 0x30
 8009cd8:	920e      	str	r2, [sp, #56]	@ 0x38
 8009cda:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009cdc:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009cde:	f04f 080a 	mov.w	r8, #10
 8009ce2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009ce4:	1c56      	adds	r6, r2, #1
 8009ce6:	9619      	str	r6, [sp, #100]	@ 0x64
 8009ce8:	7852      	ldrb	r2, [r2, #1]
 8009cea:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8009cee:	f1be 0f09 	cmp.w	lr, #9
 8009cf2:	d939      	bls.n	8009d68 <_strtod_l+0x340>
 8009cf4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009cf6:	1a76      	subs	r6, r6, r1
 8009cf8:	2e08      	cmp	r6, #8
 8009cfa:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8009cfe:	dc03      	bgt.n	8009d08 <_strtod_l+0x2e0>
 8009d00:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009d02:	4588      	cmp	r8, r1
 8009d04:	bfa8      	it	ge
 8009d06:	4688      	movge	r8, r1
 8009d08:	f1bc 0f00 	cmp.w	ip, #0
 8009d0c:	d001      	beq.n	8009d12 <_strtod_l+0x2ea>
 8009d0e:	f1c8 0800 	rsb	r8, r8, #0
 8009d12:	2d00      	cmp	r5, #0
 8009d14:	d14e      	bne.n	8009db4 <_strtod_l+0x38c>
 8009d16:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009d18:	4308      	orrs	r0, r1
 8009d1a:	f47f aebe 	bne.w	8009a9a <_strtod_l+0x72>
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	f47f aed6 	bne.w	8009ad0 <_strtod_l+0xa8>
 8009d24:	2a69      	cmp	r2, #105	@ 0x69
 8009d26:	d028      	beq.n	8009d7a <_strtod_l+0x352>
 8009d28:	dc25      	bgt.n	8009d76 <_strtod_l+0x34e>
 8009d2a:	2a49      	cmp	r2, #73	@ 0x49
 8009d2c:	d025      	beq.n	8009d7a <_strtod_l+0x352>
 8009d2e:	2a4e      	cmp	r2, #78	@ 0x4e
 8009d30:	f47f aece 	bne.w	8009ad0 <_strtod_l+0xa8>
 8009d34:	499b      	ldr	r1, [pc, #620]	@ (8009fa4 <_strtod_l+0x57c>)
 8009d36:	a819      	add	r0, sp, #100	@ 0x64
 8009d38:	f002 fcd2 	bl	800c6e0 <__match>
 8009d3c:	2800      	cmp	r0, #0
 8009d3e:	f43f aec7 	beq.w	8009ad0 <_strtod_l+0xa8>
 8009d42:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009d44:	781b      	ldrb	r3, [r3, #0]
 8009d46:	2b28      	cmp	r3, #40	@ 0x28
 8009d48:	d12e      	bne.n	8009da8 <_strtod_l+0x380>
 8009d4a:	4997      	ldr	r1, [pc, #604]	@ (8009fa8 <_strtod_l+0x580>)
 8009d4c:	aa1c      	add	r2, sp, #112	@ 0x70
 8009d4e:	a819      	add	r0, sp, #100	@ 0x64
 8009d50:	f002 fcda 	bl	800c708 <__hexnan>
 8009d54:	2805      	cmp	r0, #5
 8009d56:	d127      	bne.n	8009da8 <_strtod_l+0x380>
 8009d58:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009d5a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8009d5e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009d62:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8009d66:	e698      	b.n	8009a9a <_strtod_l+0x72>
 8009d68:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009d6a:	fb08 2101 	mla	r1, r8, r1, r2
 8009d6e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8009d72:	920e      	str	r2, [sp, #56]	@ 0x38
 8009d74:	e7b5      	b.n	8009ce2 <_strtod_l+0x2ba>
 8009d76:	2a6e      	cmp	r2, #110	@ 0x6e
 8009d78:	e7da      	b.n	8009d30 <_strtod_l+0x308>
 8009d7a:	498c      	ldr	r1, [pc, #560]	@ (8009fac <_strtod_l+0x584>)
 8009d7c:	a819      	add	r0, sp, #100	@ 0x64
 8009d7e:	f002 fcaf 	bl	800c6e0 <__match>
 8009d82:	2800      	cmp	r0, #0
 8009d84:	f43f aea4 	beq.w	8009ad0 <_strtod_l+0xa8>
 8009d88:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009d8a:	4989      	ldr	r1, [pc, #548]	@ (8009fb0 <_strtod_l+0x588>)
 8009d8c:	3b01      	subs	r3, #1
 8009d8e:	a819      	add	r0, sp, #100	@ 0x64
 8009d90:	9319      	str	r3, [sp, #100]	@ 0x64
 8009d92:	f002 fca5 	bl	800c6e0 <__match>
 8009d96:	b910      	cbnz	r0, 8009d9e <_strtod_l+0x376>
 8009d98:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009d9a:	3301      	adds	r3, #1
 8009d9c:	9319      	str	r3, [sp, #100]	@ 0x64
 8009d9e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8009fc0 <_strtod_l+0x598>
 8009da2:	f04f 0a00 	mov.w	sl, #0
 8009da6:	e678      	b.n	8009a9a <_strtod_l+0x72>
 8009da8:	4882      	ldr	r0, [pc, #520]	@ (8009fb4 <_strtod_l+0x58c>)
 8009daa:	f001 fb69 	bl	800b480 <nan>
 8009dae:	ec5b ab10 	vmov	sl, fp, d0
 8009db2:	e672      	b.n	8009a9a <_strtod_l+0x72>
 8009db4:	eba8 0309 	sub.w	r3, r8, r9
 8009db8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009dba:	9309      	str	r3, [sp, #36]	@ 0x24
 8009dbc:	2f00      	cmp	r7, #0
 8009dbe:	bf08      	it	eq
 8009dc0:	462f      	moveq	r7, r5
 8009dc2:	2d10      	cmp	r5, #16
 8009dc4:	462c      	mov	r4, r5
 8009dc6:	bfa8      	it	ge
 8009dc8:	2410      	movge	r4, #16
 8009dca:	f7f6 fbd3 	bl	8000574 <__aeabi_ui2d>
 8009dce:	2d09      	cmp	r5, #9
 8009dd0:	4682      	mov	sl, r0
 8009dd2:	468b      	mov	fp, r1
 8009dd4:	dc13      	bgt.n	8009dfe <_strtod_l+0x3d6>
 8009dd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	f43f ae5e 	beq.w	8009a9a <_strtod_l+0x72>
 8009dde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009de0:	dd78      	ble.n	8009ed4 <_strtod_l+0x4ac>
 8009de2:	2b16      	cmp	r3, #22
 8009de4:	dc5f      	bgt.n	8009ea6 <_strtod_l+0x47e>
 8009de6:	4974      	ldr	r1, [pc, #464]	@ (8009fb8 <_strtod_l+0x590>)
 8009de8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009dec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009df0:	4652      	mov	r2, sl
 8009df2:	465b      	mov	r3, fp
 8009df4:	f7f6 fc38 	bl	8000668 <__aeabi_dmul>
 8009df8:	4682      	mov	sl, r0
 8009dfa:	468b      	mov	fp, r1
 8009dfc:	e64d      	b.n	8009a9a <_strtod_l+0x72>
 8009dfe:	4b6e      	ldr	r3, [pc, #440]	@ (8009fb8 <_strtod_l+0x590>)
 8009e00:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009e04:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009e08:	f7f6 fc2e 	bl	8000668 <__aeabi_dmul>
 8009e0c:	4682      	mov	sl, r0
 8009e0e:	9808      	ldr	r0, [sp, #32]
 8009e10:	468b      	mov	fp, r1
 8009e12:	f7f6 fbaf 	bl	8000574 <__aeabi_ui2d>
 8009e16:	4602      	mov	r2, r0
 8009e18:	460b      	mov	r3, r1
 8009e1a:	4650      	mov	r0, sl
 8009e1c:	4659      	mov	r1, fp
 8009e1e:	f7f6 fa6d 	bl	80002fc <__adddf3>
 8009e22:	2d0f      	cmp	r5, #15
 8009e24:	4682      	mov	sl, r0
 8009e26:	468b      	mov	fp, r1
 8009e28:	ddd5      	ble.n	8009dd6 <_strtod_l+0x3ae>
 8009e2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e2c:	1b2c      	subs	r4, r5, r4
 8009e2e:	441c      	add	r4, r3
 8009e30:	2c00      	cmp	r4, #0
 8009e32:	f340 8096 	ble.w	8009f62 <_strtod_l+0x53a>
 8009e36:	f014 030f 	ands.w	r3, r4, #15
 8009e3a:	d00a      	beq.n	8009e52 <_strtod_l+0x42a>
 8009e3c:	495e      	ldr	r1, [pc, #376]	@ (8009fb8 <_strtod_l+0x590>)
 8009e3e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009e42:	4652      	mov	r2, sl
 8009e44:	465b      	mov	r3, fp
 8009e46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e4a:	f7f6 fc0d 	bl	8000668 <__aeabi_dmul>
 8009e4e:	4682      	mov	sl, r0
 8009e50:	468b      	mov	fp, r1
 8009e52:	f034 040f 	bics.w	r4, r4, #15
 8009e56:	d073      	beq.n	8009f40 <_strtod_l+0x518>
 8009e58:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8009e5c:	dd48      	ble.n	8009ef0 <_strtod_l+0x4c8>
 8009e5e:	2400      	movs	r4, #0
 8009e60:	46a0      	mov	r8, r4
 8009e62:	940a      	str	r4, [sp, #40]	@ 0x28
 8009e64:	46a1      	mov	r9, r4
 8009e66:	9a05      	ldr	r2, [sp, #20]
 8009e68:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8009fc0 <_strtod_l+0x598>
 8009e6c:	2322      	movs	r3, #34	@ 0x22
 8009e6e:	6013      	str	r3, [r2, #0]
 8009e70:	f04f 0a00 	mov.w	sl, #0
 8009e74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	f43f ae0f 	beq.w	8009a9a <_strtod_l+0x72>
 8009e7c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009e7e:	9805      	ldr	r0, [sp, #20]
 8009e80:	f002 fde6 	bl	800ca50 <_Bfree>
 8009e84:	9805      	ldr	r0, [sp, #20]
 8009e86:	4649      	mov	r1, r9
 8009e88:	f002 fde2 	bl	800ca50 <_Bfree>
 8009e8c:	9805      	ldr	r0, [sp, #20]
 8009e8e:	4641      	mov	r1, r8
 8009e90:	f002 fdde 	bl	800ca50 <_Bfree>
 8009e94:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009e96:	9805      	ldr	r0, [sp, #20]
 8009e98:	f002 fdda 	bl	800ca50 <_Bfree>
 8009e9c:	9805      	ldr	r0, [sp, #20]
 8009e9e:	4621      	mov	r1, r4
 8009ea0:	f002 fdd6 	bl	800ca50 <_Bfree>
 8009ea4:	e5f9      	b.n	8009a9a <_strtod_l+0x72>
 8009ea6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009ea8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8009eac:	4293      	cmp	r3, r2
 8009eae:	dbbc      	blt.n	8009e2a <_strtod_l+0x402>
 8009eb0:	4c41      	ldr	r4, [pc, #260]	@ (8009fb8 <_strtod_l+0x590>)
 8009eb2:	f1c5 050f 	rsb	r5, r5, #15
 8009eb6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009eba:	4652      	mov	r2, sl
 8009ebc:	465b      	mov	r3, fp
 8009ebe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ec2:	f7f6 fbd1 	bl	8000668 <__aeabi_dmul>
 8009ec6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ec8:	1b5d      	subs	r5, r3, r5
 8009eca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009ece:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009ed2:	e78f      	b.n	8009df4 <_strtod_l+0x3cc>
 8009ed4:	3316      	adds	r3, #22
 8009ed6:	dba8      	blt.n	8009e2a <_strtod_l+0x402>
 8009ed8:	4b37      	ldr	r3, [pc, #220]	@ (8009fb8 <_strtod_l+0x590>)
 8009eda:	eba9 0808 	sub.w	r8, r9, r8
 8009ede:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009ee2:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009ee6:	4650      	mov	r0, sl
 8009ee8:	4659      	mov	r1, fp
 8009eea:	f7f6 fce7 	bl	80008bc <__aeabi_ddiv>
 8009eee:	e783      	b.n	8009df8 <_strtod_l+0x3d0>
 8009ef0:	4b32      	ldr	r3, [pc, #200]	@ (8009fbc <_strtod_l+0x594>)
 8009ef2:	9308      	str	r3, [sp, #32]
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	1124      	asrs	r4, r4, #4
 8009ef8:	4650      	mov	r0, sl
 8009efa:	4659      	mov	r1, fp
 8009efc:	461e      	mov	r6, r3
 8009efe:	2c01      	cmp	r4, #1
 8009f00:	dc21      	bgt.n	8009f46 <_strtod_l+0x51e>
 8009f02:	b10b      	cbz	r3, 8009f08 <_strtod_l+0x4e0>
 8009f04:	4682      	mov	sl, r0
 8009f06:	468b      	mov	fp, r1
 8009f08:	492c      	ldr	r1, [pc, #176]	@ (8009fbc <_strtod_l+0x594>)
 8009f0a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009f0e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009f12:	4652      	mov	r2, sl
 8009f14:	465b      	mov	r3, fp
 8009f16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f1a:	f7f6 fba5 	bl	8000668 <__aeabi_dmul>
 8009f1e:	4b28      	ldr	r3, [pc, #160]	@ (8009fc0 <_strtod_l+0x598>)
 8009f20:	460a      	mov	r2, r1
 8009f22:	400b      	ands	r3, r1
 8009f24:	4927      	ldr	r1, [pc, #156]	@ (8009fc4 <_strtod_l+0x59c>)
 8009f26:	428b      	cmp	r3, r1
 8009f28:	4682      	mov	sl, r0
 8009f2a:	d898      	bhi.n	8009e5e <_strtod_l+0x436>
 8009f2c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009f30:	428b      	cmp	r3, r1
 8009f32:	bf86      	itte	hi
 8009f34:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8009fc8 <_strtod_l+0x5a0>
 8009f38:	f04f 3aff 	movhi.w	sl, #4294967295
 8009f3c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009f40:	2300      	movs	r3, #0
 8009f42:	9308      	str	r3, [sp, #32]
 8009f44:	e07a      	b.n	800a03c <_strtod_l+0x614>
 8009f46:	07e2      	lsls	r2, r4, #31
 8009f48:	d505      	bpl.n	8009f56 <_strtod_l+0x52e>
 8009f4a:	9b08      	ldr	r3, [sp, #32]
 8009f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f50:	f7f6 fb8a 	bl	8000668 <__aeabi_dmul>
 8009f54:	2301      	movs	r3, #1
 8009f56:	9a08      	ldr	r2, [sp, #32]
 8009f58:	3208      	adds	r2, #8
 8009f5a:	3601      	adds	r6, #1
 8009f5c:	1064      	asrs	r4, r4, #1
 8009f5e:	9208      	str	r2, [sp, #32]
 8009f60:	e7cd      	b.n	8009efe <_strtod_l+0x4d6>
 8009f62:	d0ed      	beq.n	8009f40 <_strtod_l+0x518>
 8009f64:	4264      	negs	r4, r4
 8009f66:	f014 020f 	ands.w	r2, r4, #15
 8009f6a:	d00a      	beq.n	8009f82 <_strtod_l+0x55a>
 8009f6c:	4b12      	ldr	r3, [pc, #72]	@ (8009fb8 <_strtod_l+0x590>)
 8009f6e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009f72:	4650      	mov	r0, sl
 8009f74:	4659      	mov	r1, fp
 8009f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f7a:	f7f6 fc9f 	bl	80008bc <__aeabi_ddiv>
 8009f7e:	4682      	mov	sl, r0
 8009f80:	468b      	mov	fp, r1
 8009f82:	1124      	asrs	r4, r4, #4
 8009f84:	d0dc      	beq.n	8009f40 <_strtod_l+0x518>
 8009f86:	2c1f      	cmp	r4, #31
 8009f88:	dd20      	ble.n	8009fcc <_strtod_l+0x5a4>
 8009f8a:	2400      	movs	r4, #0
 8009f8c:	46a0      	mov	r8, r4
 8009f8e:	940a      	str	r4, [sp, #40]	@ 0x28
 8009f90:	46a1      	mov	r9, r4
 8009f92:	9a05      	ldr	r2, [sp, #20]
 8009f94:	2322      	movs	r3, #34	@ 0x22
 8009f96:	f04f 0a00 	mov.w	sl, #0
 8009f9a:	f04f 0b00 	mov.w	fp, #0
 8009f9e:	6013      	str	r3, [r2, #0]
 8009fa0:	e768      	b.n	8009e74 <_strtod_l+0x44c>
 8009fa2:	bf00      	nop
 8009fa4:	08015f6e 	.word	0x08015f6e
 8009fa8:	08015e10 	.word	0x08015e10
 8009fac:	08015f66 	.word	0x08015f66
 8009fb0:	08015fa0 	.word	0x08015fa0
 8009fb4:	0801622c 	.word	0x0801622c
 8009fb8:	08016118 	.word	0x08016118
 8009fbc:	080160f0 	.word	0x080160f0
 8009fc0:	7ff00000 	.word	0x7ff00000
 8009fc4:	7ca00000 	.word	0x7ca00000
 8009fc8:	7fefffff 	.word	0x7fefffff
 8009fcc:	f014 0310 	ands.w	r3, r4, #16
 8009fd0:	bf18      	it	ne
 8009fd2:	236a      	movne	r3, #106	@ 0x6a
 8009fd4:	4ea9      	ldr	r6, [pc, #676]	@ (800a27c <_strtod_l+0x854>)
 8009fd6:	9308      	str	r3, [sp, #32]
 8009fd8:	4650      	mov	r0, sl
 8009fda:	4659      	mov	r1, fp
 8009fdc:	2300      	movs	r3, #0
 8009fde:	07e2      	lsls	r2, r4, #31
 8009fe0:	d504      	bpl.n	8009fec <_strtod_l+0x5c4>
 8009fe2:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009fe6:	f7f6 fb3f 	bl	8000668 <__aeabi_dmul>
 8009fea:	2301      	movs	r3, #1
 8009fec:	1064      	asrs	r4, r4, #1
 8009fee:	f106 0608 	add.w	r6, r6, #8
 8009ff2:	d1f4      	bne.n	8009fde <_strtod_l+0x5b6>
 8009ff4:	b10b      	cbz	r3, 8009ffa <_strtod_l+0x5d2>
 8009ff6:	4682      	mov	sl, r0
 8009ff8:	468b      	mov	fp, r1
 8009ffa:	9b08      	ldr	r3, [sp, #32]
 8009ffc:	b1b3      	cbz	r3, 800a02c <_strtod_l+0x604>
 8009ffe:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a002:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800a006:	2b00      	cmp	r3, #0
 800a008:	4659      	mov	r1, fp
 800a00a:	dd0f      	ble.n	800a02c <_strtod_l+0x604>
 800a00c:	2b1f      	cmp	r3, #31
 800a00e:	dd55      	ble.n	800a0bc <_strtod_l+0x694>
 800a010:	2b34      	cmp	r3, #52	@ 0x34
 800a012:	bfde      	ittt	le
 800a014:	f04f 33ff 	movle.w	r3, #4294967295
 800a018:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800a01c:	4093      	lslle	r3, r2
 800a01e:	f04f 0a00 	mov.w	sl, #0
 800a022:	bfcc      	ite	gt
 800a024:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a028:	ea03 0b01 	andle.w	fp, r3, r1
 800a02c:	2200      	movs	r2, #0
 800a02e:	2300      	movs	r3, #0
 800a030:	4650      	mov	r0, sl
 800a032:	4659      	mov	r1, fp
 800a034:	f7f6 fd80 	bl	8000b38 <__aeabi_dcmpeq>
 800a038:	2800      	cmp	r0, #0
 800a03a:	d1a6      	bne.n	8009f8a <_strtod_l+0x562>
 800a03c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a03e:	9300      	str	r3, [sp, #0]
 800a040:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a042:	9805      	ldr	r0, [sp, #20]
 800a044:	462b      	mov	r3, r5
 800a046:	463a      	mov	r2, r7
 800a048:	f002 fd6a 	bl	800cb20 <__s2b>
 800a04c:	900a      	str	r0, [sp, #40]	@ 0x28
 800a04e:	2800      	cmp	r0, #0
 800a050:	f43f af05 	beq.w	8009e5e <_strtod_l+0x436>
 800a054:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a056:	2a00      	cmp	r2, #0
 800a058:	eba9 0308 	sub.w	r3, r9, r8
 800a05c:	bfa8      	it	ge
 800a05e:	2300      	movge	r3, #0
 800a060:	9312      	str	r3, [sp, #72]	@ 0x48
 800a062:	2400      	movs	r4, #0
 800a064:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a068:	9316      	str	r3, [sp, #88]	@ 0x58
 800a06a:	46a0      	mov	r8, r4
 800a06c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a06e:	9805      	ldr	r0, [sp, #20]
 800a070:	6859      	ldr	r1, [r3, #4]
 800a072:	f002 fcad 	bl	800c9d0 <_Balloc>
 800a076:	4681      	mov	r9, r0
 800a078:	2800      	cmp	r0, #0
 800a07a:	f43f aef4 	beq.w	8009e66 <_strtod_l+0x43e>
 800a07e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a080:	691a      	ldr	r2, [r3, #16]
 800a082:	3202      	adds	r2, #2
 800a084:	f103 010c 	add.w	r1, r3, #12
 800a088:	0092      	lsls	r2, r2, #2
 800a08a:	300c      	adds	r0, #12
 800a08c:	f001 f9e7 	bl	800b45e <memcpy>
 800a090:	ec4b ab10 	vmov	d0, sl, fp
 800a094:	9805      	ldr	r0, [sp, #20]
 800a096:	aa1c      	add	r2, sp, #112	@ 0x70
 800a098:	a91b      	add	r1, sp, #108	@ 0x6c
 800a09a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a09e:	f003 f87b 	bl	800d198 <__d2b>
 800a0a2:	901a      	str	r0, [sp, #104]	@ 0x68
 800a0a4:	2800      	cmp	r0, #0
 800a0a6:	f43f aede 	beq.w	8009e66 <_strtod_l+0x43e>
 800a0aa:	9805      	ldr	r0, [sp, #20]
 800a0ac:	2101      	movs	r1, #1
 800a0ae:	f002 fdcd 	bl	800cc4c <__i2b>
 800a0b2:	4680      	mov	r8, r0
 800a0b4:	b948      	cbnz	r0, 800a0ca <_strtod_l+0x6a2>
 800a0b6:	f04f 0800 	mov.w	r8, #0
 800a0ba:	e6d4      	b.n	8009e66 <_strtod_l+0x43e>
 800a0bc:	f04f 32ff 	mov.w	r2, #4294967295
 800a0c0:	fa02 f303 	lsl.w	r3, r2, r3
 800a0c4:	ea03 0a0a 	and.w	sl, r3, sl
 800a0c8:	e7b0      	b.n	800a02c <_strtod_l+0x604>
 800a0ca:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a0cc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a0ce:	2d00      	cmp	r5, #0
 800a0d0:	bfab      	itete	ge
 800a0d2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800a0d4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800a0d6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800a0d8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800a0da:	bfac      	ite	ge
 800a0dc:	18ef      	addge	r7, r5, r3
 800a0de:	1b5e      	sublt	r6, r3, r5
 800a0e0:	9b08      	ldr	r3, [sp, #32]
 800a0e2:	1aed      	subs	r5, r5, r3
 800a0e4:	4415      	add	r5, r2
 800a0e6:	4b66      	ldr	r3, [pc, #408]	@ (800a280 <_strtod_l+0x858>)
 800a0e8:	3d01      	subs	r5, #1
 800a0ea:	429d      	cmp	r5, r3
 800a0ec:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a0f0:	da50      	bge.n	800a194 <_strtod_l+0x76c>
 800a0f2:	1b5b      	subs	r3, r3, r5
 800a0f4:	2b1f      	cmp	r3, #31
 800a0f6:	eba2 0203 	sub.w	r2, r2, r3
 800a0fa:	f04f 0101 	mov.w	r1, #1
 800a0fe:	dc3d      	bgt.n	800a17c <_strtod_l+0x754>
 800a100:	fa01 f303 	lsl.w	r3, r1, r3
 800a104:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a106:	2300      	movs	r3, #0
 800a108:	9310      	str	r3, [sp, #64]	@ 0x40
 800a10a:	18bd      	adds	r5, r7, r2
 800a10c:	9b08      	ldr	r3, [sp, #32]
 800a10e:	42af      	cmp	r7, r5
 800a110:	4416      	add	r6, r2
 800a112:	441e      	add	r6, r3
 800a114:	463b      	mov	r3, r7
 800a116:	bfa8      	it	ge
 800a118:	462b      	movge	r3, r5
 800a11a:	42b3      	cmp	r3, r6
 800a11c:	bfa8      	it	ge
 800a11e:	4633      	movge	r3, r6
 800a120:	2b00      	cmp	r3, #0
 800a122:	bfc2      	ittt	gt
 800a124:	1aed      	subgt	r5, r5, r3
 800a126:	1af6      	subgt	r6, r6, r3
 800a128:	1aff      	subgt	r7, r7, r3
 800a12a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	dd16      	ble.n	800a15e <_strtod_l+0x736>
 800a130:	4641      	mov	r1, r8
 800a132:	9805      	ldr	r0, [sp, #20]
 800a134:	461a      	mov	r2, r3
 800a136:	f002 fe49 	bl	800cdcc <__pow5mult>
 800a13a:	4680      	mov	r8, r0
 800a13c:	2800      	cmp	r0, #0
 800a13e:	d0ba      	beq.n	800a0b6 <_strtod_l+0x68e>
 800a140:	4601      	mov	r1, r0
 800a142:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a144:	9805      	ldr	r0, [sp, #20]
 800a146:	f002 fd97 	bl	800cc78 <__multiply>
 800a14a:	900e      	str	r0, [sp, #56]	@ 0x38
 800a14c:	2800      	cmp	r0, #0
 800a14e:	f43f ae8a 	beq.w	8009e66 <_strtod_l+0x43e>
 800a152:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a154:	9805      	ldr	r0, [sp, #20]
 800a156:	f002 fc7b 	bl	800ca50 <_Bfree>
 800a15a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a15c:	931a      	str	r3, [sp, #104]	@ 0x68
 800a15e:	2d00      	cmp	r5, #0
 800a160:	dc1d      	bgt.n	800a19e <_strtod_l+0x776>
 800a162:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a164:	2b00      	cmp	r3, #0
 800a166:	dd23      	ble.n	800a1b0 <_strtod_l+0x788>
 800a168:	4649      	mov	r1, r9
 800a16a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a16c:	9805      	ldr	r0, [sp, #20]
 800a16e:	f002 fe2d 	bl	800cdcc <__pow5mult>
 800a172:	4681      	mov	r9, r0
 800a174:	b9e0      	cbnz	r0, 800a1b0 <_strtod_l+0x788>
 800a176:	f04f 0900 	mov.w	r9, #0
 800a17a:	e674      	b.n	8009e66 <_strtod_l+0x43e>
 800a17c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800a180:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800a184:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a188:	35e2      	adds	r5, #226	@ 0xe2
 800a18a:	fa01 f305 	lsl.w	r3, r1, r5
 800a18e:	9310      	str	r3, [sp, #64]	@ 0x40
 800a190:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a192:	e7ba      	b.n	800a10a <_strtod_l+0x6e2>
 800a194:	2300      	movs	r3, #0
 800a196:	9310      	str	r3, [sp, #64]	@ 0x40
 800a198:	2301      	movs	r3, #1
 800a19a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a19c:	e7b5      	b.n	800a10a <_strtod_l+0x6e2>
 800a19e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a1a0:	9805      	ldr	r0, [sp, #20]
 800a1a2:	462a      	mov	r2, r5
 800a1a4:	f002 fe6c 	bl	800ce80 <__lshift>
 800a1a8:	901a      	str	r0, [sp, #104]	@ 0x68
 800a1aa:	2800      	cmp	r0, #0
 800a1ac:	d1d9      	bne.n	800a162 <_strtod_l+0x73a>
 800a1ae:	e65a      	b.n	8009e66 <_strtod_l+0x43e>
 800a1b0:	2e00      	cmp	r6, #0
 800a1b2:	dd07      	ble.n	800a1c4 <_strtod_l+0x79c>
 800a1b4:	4649      	mov	r1, r9
 800a1b6:	9805      	ldr	r0, [sp, #20]
 800a1b8:	4632      	mov	r2, r6
 800a1ba:	f002 fe61 	bl	800ce80 <__lshift>
 800a1be:	4681      	mov	r9, r0
 800a1c0:	2800      	cmp	r0, #0
 800a1c2:	d0d8      	beq.n	800a176 <_strtod_l+0x74e>
 800a1c4:	2f00      	cmp	r7, #0
 800a1c6:	dd08      	ble.n	800a1da <_strtod_l+0x7b2>
 800a1c8:	4641      	mov	r1, r8
 800a1ca:	9805      	ldr	r0, [sp, #20]
 800a1cc:	463a      	mov	r2, r7
 800a1ce:	f002 fe57 	bl	800ce80 <__lshift>
 800a1d2:	4680      	mov	r8, r0
 800a1d4:	2800      	cmp	r0, #0
 800a1d6:	f43f ae46 	beq.w	8009e66 <_strtod_l+0x43e>
 800a1da:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a1dc:	9805      	ldr	r0, [sp, #20]
 800a1de:	464a      	mov	r2, r9
 800a1e0:	f002 fed6 	bl	800cf90 <__mdiff>
 800a1e4:	4604      	mov	r4, r0
 800a1e6:	2800      	cmp	r0, #0
 800a1e8:	f43f ae3d 	beq.w	8009e66 <_strtod_l+0x43e>
 800a1ec:	68c3      	ldr	r3, [r0, #12]
 800a1ee:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	60c3      	str	r3, [r0, #12]
 800a1f4:	4641      	mov	r1, r8
 800a1f6:	f002 feaf 	bl	800cf58 <__mcmp>
 800a1fa:	2800      	cmp	r0, #0
 800a1fc:	da46      	bge.n	800a28c <_strtod_l+0x864>
 800a1fe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a200:	ea53 030a 	orrs.w	r3, r3, sl
 800a204:	d16c      	bne.n	800a2e0 <_strtod_l+0x8b8>
 800a206:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d168      	bne.n	800a2e0 <_strtod_l+0x8b8>
 800a20e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a212:	0d1b      	lsrs	r3, r3, #20
 800a214:	051b      	lsls	r3, r3, #20
 800a216:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a21a:	d961      	bls.n	800a2e0 <_strtod_l+0x8b8>
 800a21c:	6963      	ldr	r3, [r4, #20]
 800a21e:	b913      	cbnz	r3, 800a226 <_strtod_l+0x7fe>
 800a220:	6923      	ldr	r3, [r4, #16]
 800a222:	2b01      	cmp	r3, #1
 800a224:	dd5c      	ble.n	800a2e0 <_strtod_l+0x8b8>
 800a226:	4621      	mov	r1, r4
 800a228:	2201      	movs	r2, #1
 800a22a:	9805      	ldr	r0, [sp, #20]
 800a22c:	f002 fe28 	bl	800ce80 <__lshift>
 800a230:	4641      	mov	r1, r8
 800a232:	4604      	mov	r4, r0
 800a234:	f002 fe90 	bl	800cf58 <__mcmp>
 800a238:	2800      	cmp	r0, #0
 800a23a:	dd51      	ble.n	800a2e0 <_strtod_l+0x8b8>
 800a23c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a240:	9a08      	ldr	r2, [sp, #32]
 800a242:	0d1b      	lsrs	r3, r3, #20
 800a244:	051b      	lsls	r3, r3, #20
 800a246:	2a00      	cmp	r2, #0
 800a248:	d06b      	beq.n	800a322 <_strtod_l+0x8fa>
 800a24a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a24e:	d868      	bhi.n	800a322 <_strtod_l+0x8fa>
 800a250:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a254:	f67f ae9d 	bls.w	8009f92 <_strtod_l+0x56a>
 800a258:	4b0a      	ldr	r3, [pc, #40]	@ (800a284 <_strtod_l+0x85c>)
 800a25a:	4650      	mov	r0, sl
 800a25c:	4659      	mov	r1, fp
 800a25e:	2200      	movs	r2, #0
 800a260:	f7f6 fa02 	bl	8000668 <__aeabi_dmul>
 800a264:	4b08      	ldr	r3, [pc, #32]	@ (800a288 <_strtod_l+0x860>)
 800a266:	400b      	ands	r3, r1
 800a268:	4682      	mov	sl, r0
 800a26a:	468b      	mov	fp, r1
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	f47f ae05 	bne.w	8009e7c <_strtod_l+0x454>
 800a272:	9a05      	ldr	r2, [sp, #20]
 800a274:	2322      	movs	r3, #34	@ 0x22
 800a276:	6013      	str	r3, [r2, #0]
 800a278:	e600      	b.n	8009e7c <_strtod_l+0x454>
 800a27a:	bf00      	nop
 800a27c:	08015e38 	.word	0x08015e38
 800a280:	fffffc02 	.word	0xfffffc02
 800a284:	39500000 	.word	0x39500000
 800a288:	7ff00000 	.word	0x7ff00000
 800a28c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a290:	d165      	bne.n	800a35e <_strtod_l+0x936>
 800a292:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a294:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a298:	b35a      	cbz	r2, 800a2f2 <_strtod_l+0x8ca>
 800a29a:	4a9f      	ldr	r2, [pc, #636]	@ (800a518 <_strtod_l+0xaf0>)
 800a29c:	4293      	cmp	r3, r2
 800a29e:	d12b      	bne.n	800a2f8 <_strtod_l+0x8d0>
 800a2a0:	9b08      	ldr	r3, [sp, #32]
 800a2a2:	4651      	mov	r1, sl
 800a2a4:	b303      	cbz	r3, 800a2e8 <_strtod_l+0x8c0>
 800a2a6:	4b9d      	ldr	r3, [pc, #628]	@ (800a51c <_strtod_l+0xaf4>)
 800a2a8:	465a      	mov	r2, fp
 800a2aa:	4013      	ands	r3, r2
 800a2ac:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a2b0:	f04f 32ff 	mov.w	r2, #4294967295
 800a2b4:	d81b      	bhi.n	800a2ee <_strtod_l+0x8c6>
 800a2b6:	0d1b      	lsrs	r3, r3, #20
 800a2b8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a2bc:	fa02 f303 	lsl.w	r3, r2, r3
 800a2c0:	4299      	cmp	r1, r3
 800a2c2:	d119      	bne.n	800a2f8 <_strtod_l+0x8d0>
 800a2c4:	4b96      	ldr	r3, [pc, #600]	@ (800a520 <_strtod_l+0xaf8>)
 800a2c6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a2c8:	429a      	cmp	r2, r3
 800a2ca:	d102      	bne.n	800a2d2 <_strtod_l+0x8aa>
 800a2cc:	3101      	adds	r1, #1
 800a2ce:	f43f adca 	beq.w	8009e66 <_strtod_l+0x43e>
 800a2d2:	4b92      	ldr	r3, [pc, #584]	@ (800a51c <_strtod_l+0xaf4>)
 800a2d4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a2d6:	401a      	ands	r2, r3
 800a2d8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800a2dc:	f04f 0a00 	mov.w	sl, #0
 800a2e0:	9b08      	ldr	r3, [sp, #32]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d1b8      	bne.n	800a258 <_strtod_l+0x830>
 800a2e6:	e5c9      	b.n	8009e7c <_strtod_l+0x454>
 800a2e8:	f04f 33ff 	mov.w	r3, #4294967295
 800a2ec:	e7e8      	b.n	800a2c0 <_strtod_l+0x898>
 800a2ee:	4613      	mov	r3, r2
 800a2f0:	e7e6      	b.n	800a2c0 <_strtod_l+0x898>
 800a2f2:	ea53 030a 	orrs.w	r3, r3, sl
 800a2f6:	d0a1      	beq.n	800a23c <_strtod_l+0x814>
 800a2f8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a2fa:	b1db      	cbz	r3, 800a334 <_strtod_l+0x90c>
 800a2fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a2fe:	4213      	tst	r3, r2
 800a300:	d0ee      	beq.n	800a2e0 <_strtod_l+0x8b8>
 800a302:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a304:	9a08      	ldr	r2, [sp, #32]
 800a306:	4650      	mov	r0, sl
 800a308:	4659      	mov	r1, fp
 800a30a:	b1bb      	cbz	r3, 800a33c <_strtod_l+0x914>
 800a30c:	f7ff fb6d 	bl	80099ea <sulp>
 800a310:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a314:	ec53 2b10 	vmov	r2, r3, d0
 800a318:	f7f5 fff0 	bl	80002fc <__adddf3>
 800a31c:	4682      	mov	sl, r0
 800a31e:	468b      	mov	fp, r1
 800a320:	e7de      	b.n	800a2e0 <_strtod_l+0x8b8>
 800a322:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a326:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a32a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a32e:	f04f 3aff 	mov.w	sl, #4294967295
 800a332:	e7d5      	b.n	800a2e0 <_strtod_l+0x8b8>
 800a334:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a336:	ea13 0f0a 	tst.w	r3, sl
 800a33a:	e7e1      	b.n	800a300 <_strtod_l+0x8d8>
 800a33c:	f7ff fb55 	bl	80099ea <sulp>
 800a340:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a344:	ec53 2b10 	vmov	r2, r3, d0
 800a348:	f7f5 ffd6 	bl	80002f8 <__aeabi_dsub>
 800a34c:	2200      	movs	r2, #0
 800a34e:	2300      	movs	r3, #0
 800a350:	4682      	mov	sl, r0
 800a352:	468b      	mov	fp, r1
 800a354:	f7f6 fbf0 	bl	8000b38 <__aeabi_dcmpeq>
 800a358:	2800      	cmp	r0, #0
 800a35a:	d0c1      	beq.n	800a2e0 <_strtod_l+0x8b8>
 800a35c:	e619      	b.n	8009f92 <_strtod_l+0x56a>
 800a35e:	4641      	mov	r1, r8
 800a360:	4620      	mov	r0, r4
 800a362:	f002 ff71 	bl	800d248 <__ratio>
 800a366:	ec57 6b10 	vmov	r6, r7, d0
 800a36a:	2200      	movs	r2, #0
 800a36c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a370:	4630      	mov	r0, r6
 800a372:	4639      	mov	r1, r7
 800a374:	f7f6 fbf4 	bl	8000b60 <__aeabi_dcmple>
 800a378:	2800      	cmp	r0, #0
 800a37a:	d06f      	beq.n	800a45c <_strtod_l+0xa34>
 800a37c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d17a      	bne.n	800a478 <_strtod_l+0xa50>
 800a382:	f1ba 0f00 	cmp.w	sl, #0
 800a386:	d158      	bne.n	800a43a <_strtod_l+0xa12>
 800a388:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a38a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d15a      	bne.n	800a448 <_strtod_l+0xa20>
 800a392:	4b64      	ldr	r3, [pc, #400]	@ (800a524 <_strtod_l+0xafc>)
 800a394:	2200      	movs	r2, #0
 800a396:	4630      	mov	r0, r6
 800a398:	4639      	mov	r1, r7
 800a39a:	f7f6 fbd7 	bl	8000b4c <__aeabi_dcmplt>
 800a39e:	2800      	cmp	r0, #0
 800a3a0:	d159      	bne.n	800a456 <_strtod_l+0xa2e>
 800a3a2:	4630      	mov	r0, r6
 800a3a4:	4639      	mov	r1, r7
 800a3a6:	4b60      	ldr	r3, [pc, #384]	@ (800a528 <_strtod_l+0xb00>)
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	f7f6 f95d 	bl	8000668 <__aeabi_dmul>
 800a3ae:	4606      	mov	r6, r0
 800a3b0:	460f      	mov	r7, r1
 800a3b2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800a3b6:	9606      	str	r6, [sp, #24]
 800a3b8:	9307      	str	r3, [sp, #28]
 800a3ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a3be:	4d57      	ldr	r5, [pc, #348]	@ (800a51c <_strtod_l+0xaf4>)
 800a3c0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a3c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a3c6:	401d      	ands	r5, r3
 800a3c8:	4b58      	ldr	r3, [pc, #352]	@ (800a52c <_strtod_l+0xb04>)
 800a3ca:	429d      	cmp	r5, r3
 800a3cc:	f040 80b2 	bne.w	800a534 <_strtod_l+0xb0c>
 800a3d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a3d2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800a3d6:	ec4b ab10 	vmov	d0, sl, fp
 800a3da:	f002 fe6d 	bl	800d0b8 <__ulp>
 800a3de:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a3e2:	ec51 0b10 	vmov	r0, r1, d0
 800a3e6:	f7f6 f93f 	bl	8000668 <__aeabi_dmul>
 800a3ea:	4652      	mov	r2, sl
 800a3ec:	465b      	mov	r3, fp
 800a3ee:	f7f5 ff85 	bl	80002fc <__adddf3>
 800a3f2:	460b      	mov	r3, r1
 800a3f4:	4949      	ldr	r1, [pc, #292]	@ (800a51c <_strtod_l+0xaf4>)
 800a3f6:	4a4e      	ldr	r2, [pc, #312]	@ (800a530 <_strtod_l+0xb08>)
 800a3f8:	4019      	ands	r1, r3
 800a3fa:	4291      	cmp	r1, r2
 800a3fc:	4682      	mov	sl, r0
 800a3fe:	d942      	bls.n	800a486 <_strtod_l+0xa5e>
 800a400:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a402:	4b47      	ldr	r3, [pc, #284]	@ (800a520 <_strtod_l+0xaf8>)
 800a404:	429a      	cmp	r2, r3
 800a406:	d103      	bne.n	800a410 <_strtod_l+0x9e8>
 800a408:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a40a:	3301      	adds	r3, #1
 800a40c:	f43f ad2b 	beq.w	8009e66 <_strtod_l+0x43e>
 800a410:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800a520 <_strtod_l+0xaf8>
 800a414:	f04f 3aff 	mov.w	sl, #4294967295
 800a418:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a41a:	9805      	ldr	r0, [sp, #20]
 800a41c:	f002 fb18 	bl	800ca50 <_Bfree>
 800a420:	9805      	ldr	r0, [sp, #20]
 800a422:	4649      	mov	r1, r9
 800a424:	f002 fb14 	bl	800ca50 <_Bfree>
 800a428:	9805      	ldr	r0, [sp, #20]
 800a42a:	4641      	mov	r1, r8
 800a42c:	f002 fb10 	bl	800ca50 <_Bfree>
 800a430:	9805      	ldr	r0, [sp, #20]
 800a432:	4621      	mov	r1, r4
 800a434:	f002 fb0c 	bl	800ca50 <_Bfree>
 800a438:	e618      	b.n	800a06c <_strtod_l+0x644>
 800a43a:	f1ba 0f01 	cmp.w	sl, #1
 800a43e:	d103      	bne.n	800a448 <_strtod_l+0xa20>
 800a440:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a442:	2b00      	cmp	r3, #0
 800a444:	f43f ada5 	beq.w	8009f92 <_strtod_l+0x56a>
 800a448:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800a4f8 <_strtod_l+0xad0>
 800a44c:	4f35      	ldr	r7, [pc, #212]	@ (800a524 <_strtod_l+0xafc>)
 800a44e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a452:	2600      	movs	r6, #0
 800a454:	e7b1      	b.n	800a3ba <_strtod_l+0x992>
 800a456:	4f34      	ldr	r7, [pc, #208]	@ (800a528 <_strtod_l+0xb00>)
 800a458:	2600      	movs	r6, #0
 800a45a:	e7aa      	b.n	800a3b2 <_strtod_l+0x98a>
 800a45c:	4b32      	ldr	r3, [pc, #200]	@ (800a528 <_strtod_l+0xb00>)
 800a45e:	4630      	mov	r0, r6
 800a460:	4639      	mov	r1, r7
 800a462:	2200      	movs	r2, #0
 800a464:	f7f6 f900 	bl	8000668 <__aeabi_dmul>
 800a468:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a46a:	4606      	mov	r6, r0
 800a46c:	460f      	mov	r7, r1
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d09f      	beq.n	800a3b2 <_strtod_l+0x98a>
 800a472:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a476:	e7a0      	b.n	800a3ba <_strtod_l+0x992>
 800a478:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800a500 <_strtod_l+0xad8>
 800a47c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a480:	ec57 6b17 	vmov	r6, r7, d7
 800a484:	e799      	b.n	800a3ba <_strtod_l+0x992>
 800a486:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a48a:	9b08      	ldr	r3, [sp, #32]
 800a48c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a490:	2b00      	cmp	r3, #0
 800a492:	d1c1      	bne.n	800a418 <_strtod_l+0x9f0>
 800a494:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a498:	0d1b      	lsrs	r3, r3, #20
 800a49a:	051b      	lsls	r3, r3, #20
 800a49c:	429d      	cmp	r5, r3
 800a49e:	d1bb      	bne.n	800a418 <_strtod_l+0x9f0>
 800a4a0:	4630      	mov	r0, r6
 800a4a2:	4639      	mov	r1, r7
 800a4a4:	f7f6 fc40 	bl	8000d28 <__aeabi_d2lz>
 800a4a8:	f7f6 f8b0 	bl	800060c <__aeabi_l2d>
 800a4ac:	4602      	mov	r2, r0
 800a4ae:	460b      	mov	r3, r1
 800a4b0:	4630      	mov	r0, r6
 800a4b2:	4639      	mov	r1, r7
 800a4b4:	f7f5 ff20 	bl	80002f8 <__aeabi_dsub>
 800a4b8:	460b      	mov	r3, r1
 800a4ba:	4602      	mov	r2, r0
 800a4bc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a4c0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800a4c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a4c6:	ea46 060a 	orr.w	r6, r6, sl
 800a4ca:	431e      	orrs	r6, r3
 800a4cc:	d06f      	beq.n	800a5ae <_strtod_l+0xb86>
 800a4ce:	a30e      	add	r3, pc, #56	@ (adr r3, 800a508 <_strtod_l+0xae0>)
 800a4d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4d4:	f7f6 fb3a 	bl	8000b4c <__aeabi_dcmplt>
 800a4d8:	2800      	cmp	r0, #0
 800a4da:	f47f accf 	bne.w	8009e7c <_strtod_l+0x454>
 800a4de:	a30c      	add	r3, pc, #48	@ (adr r3, 800a510 <_strtod_l+0xae8>)
 800a4e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a4e8:	f7f6 fb4e 	bl	8000b88 <__aeabi_dcmpgt>
 800a4ec:	2800      	cmp	r0, #0
 800a4ee:	d093      	beq.n	800a418 <_strtod_l+0x9f0>
 800a4f0:	e4c4      	b.n	8009e7c <_strtod_l+0x454>
 800a4f2:	bf00      	nop
 800a4f4:	f3af 8000 	nop.w
 800a4f8:	00000000 	.word	0x00000000
 800a4fc:	bff00000 	.word	0xbff00000
 800a500:	00000000 	.word	0x00000000
 800a504:	3ff00000 	.word	0x3ff00000
 800a508:	94a03595 	.word	0x94a03595
 800a50c:	3fdfffff 	.word	0x3fdfffff
 800a510:	35afe535 	.word	0x35afe535
 800a514:	3fe00000 	.word	0x3fe00000
 800a518:	000fffff 	.word	0x000fffff
 800a51c:	7ff00000 	.word	0x7ff00000
 800a520:	7fefffff 	.word	0x7fefffff
 800a524:	3ff00000 	.word	0x3ff00000
 800a528:	3fe00000 	.word	0x3fe00000
 800a52c:	7fe00000 	.word	0x7fe00000
 800a530:	7c9fffff 	.word	0x7c9fffff
 800a534:	9b08      	ldr	r3, [sp, #32]
 800a536:	b323      	cbz	r3, 800a582 <_strtod_l+0xb5a>
 800a538:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800a53c:	d821      	bhi.n	800a582 <_strtod_l+0xb5a>
 800a53e:	a328      	add	r3, pc, #160	@ (adr r3, 800a5e0 <_strtod_l+0xbb8>)
 800a540:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a544:	4630      	mov	r0, r6
 800a546:	4639      	mov	r1, r7
 800a548:	f7f6 fb0a 	bl	8000b60 <__aeabi_dcmple>
 800a54c:	b1a0      	cbz	r0, 800a578 <_strtod_l+0xb50>
 800a54e:	4639      	mov	r1, r7
 800a550:	4630      	mov	r0, r6
 800a552:	f7f6 fb61 	bl	8000c18 <__aeabi_d2uiz>
 800a556:	2801      	cmp	r0, #1
 800a558:	bf38      	it	cc
 800a55a:	2001      	movcc	r0, #1
 800a55c:	f7f6 f80a 	bl	8000574 <__aeabi_ui2d>
 800a560:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a562:	4606      	mov	r6, r0
 800a564:	460f      	mov	r7, r1
 800a566:	b9fb      	cbnz	r3, 800a5a8 <_strtod_l+0xb80>
 800a568:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a56c:	9014      	str	r0, [sp, #80]	@ 0x50
 800a56e:	9315      	str	r3, [sp, #84]	@ 0x54
 800a570:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a574:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a578:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a57a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a57e:	1b5b      	subs	r3, r3, r5
 800a580:	9311      	str	r3, [sp, #68]	@ 0x44
 800a582:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a586:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800a58a:	f002 fd95 	bl	800d0b8 <__ulp>
 800a58e:	4650      	mov	r0, sl
 800a590:	ec53 2b10 	vmov	r2, r3, d0
 800a594:	4659      	mov	r1, fp
 800a596:	f7f6 f867 	bl	8000668 <__aeabi_dmul>
 800a59a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a59e:	f7f5 fead 	bl	80002fc <__adddf3>
 800a5a2:	4682      	mov	sl, r0
 800a5a4:	468b      	mov	fp, r1
 800a5a6:	e770      	b.n	800a48a <_strtod_l+0xa62>
 800a5a8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a5ac:	e7e0      	b.n	800a570 <_strtod_l+0xb48>
 800a5ae:	a30e      	add	r3, pc, #56	@ (adr r3, 800a5e8 <_strtod_l+0xbc0>)
 800a5b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5b4:	f7f6 faca 	bl	8000b4c <__aeabi_dcmplt>
 800a5b8:	e798      	b.n	800a4ec <_strtod_l+0xac4>
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a5be:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a5c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a5c2:	6013      	str	r3, [r2, #0]
 800a5c4:	f7ff ba6d 	b.w	8009aa2 <_strtod_l+0x7a>
 800a5c8:	2a65      	cmp	r2, #101	@ 0x65
 800a5ca:	f43f ab66 	beq.w	8009c9a <_strtod_l+0x272>
 800a5ce:	2a45      	cmp	r2, #69	@ 0x45
 800a5d0:	f43f ab63 	beq.w	8009c9a <_strtod_l+0x272>
 800a5d4:	2301      	movs	r3, #1
 800a5d6:	f7ff bb9e 	b.w	8009d16 <_strtod_l+0x2ee>
 800a5da:	bf00      	nop
 800a5dc:	f3af 8000 	nop.w
 800a5e0:	ffc00000 	.word	0xffc00000
 800a5e4:	41dfffff 	.word	0x41dfffff
 800a5e8:	94a03595 	.word	0x94a03595
 800a5ec:	3fcfffff 	.word	0x3fcfffff

0800a5f0 <strtof>:
 800a5f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5f4:	f8df 80bc 	ldr.w	r8, [pc, #188]	@ 800a6b4 <strtof+0xc4>
 800a5f8:	4b29      	ldr	r3, [pc, #164]	@ (800a6a0 <strtof+0xb0>)
 800a5fa:	460a      	mov	r2, r1
 800a5fc:	ed2d 8b02 	vpush	{d8}
 800a600:	4601      	mov	r1, r0
 800a602:	f8d8 0000 	ldr.w	r0, [r8]
 800a606:	f7ff fa0f 	bl	8009a28 <_strtod_l>
 800a60a:	ec55 4b10 	vmov	r4, r5, d0
 800a60e:	4622      	mov	r2, r4
 800a610:	462b      	mov	r3, r5
 800a612:	4620      	mov	r0, r4
 800a614:	4629      	mov	r1, r5
 800a616:	f7f6 fac1 	bl	8000b9c <__aeabi_dcmpun>
 800a61a:	b190      	cbz	r0, 800a642 <strtof+0x52>
 800a61c:	2d00      	cmp	r5, #0
 800a61e:	4821      	ldr	r0, [pc, #132]	@ (800a6a4 <strtof+0xb4>)
 800a620:	da09      	bge.n	800a636 <strtof+0x46>
 800a622:	f000 ff35 	bl	800b490 <nanf>
 800a626:	eeb1 8a40 	vneg.f32	s16, s0
 800a62a:	eeb0 0a48 	vmov.f32	s0, s16
 800a62e:	ecbd 8b02 	vpop	{d8}
 800a632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a636:	ecbd 8b02 	vpop	{d8}
 800a63a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a63e:	f000 bf27 	b.w	800b490 <nanf>
 800a642:	4620      	mov	r0, r4
 800a644:	4629      	mov	r1, r5
 800a646:	f7f6 fb07 	bl	8000c58 <__aeabi_d2f>
 800a64a:	ee08 0a10 	vmov	s16, r0
 800a64e:	eddf 7a16 	vldr	s15, [pc, #88]	@ 800a6a8 <strtof+0xb8>
 800a652:	eeb0 7ac8 	vabs.f32	s14, s16
 800a656:	eeb4 7a67 	vcmp.f32	s14, s15
 800a65a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a65e:	dd11      	ble.n	800a684 <strtof+0x94>
 800a660:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 800a664:	4b11      	ldr	r3, [pc, #68]	@ (800a6ac <strtof+0xbc>)
 800a666:	f04f 32ff 	mov.w	r2, #4294967295
 800a66a:	4620      	mov	r0, r4
 800a66c:	4639      	mov	r1, r7
 800a66e:	f7f6 fa95 	bl	8000b9c <__aeabi_dcmpun>
 800a672:	b980      	cbnz	r0, 800a696 <strtof+0xa6>
 800a674:	4b0d      	ldr	r3, [pc, #52]	@ (800a6ac <strtof+0xbc>)
 800a676:	f04f 32ff 	mov.w	r2, #4294967295
 800a67a:	4620      	mov	r0, r4
 800a67c:	4639      	mov	r1, r7
 800a67e:	f7f6 fa6f 	bl	8000b60 <__aeabi_dcmple>
 800a682:	b940      	cbnz	r0, 800a696 <strtof+0xa6>
 800a684:	ee18 3a10 	vmov	r3, s16
 800a688:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800a68c:	d1cd      	bne.n	800a62a <strtof+0x3a>
 800a68e:	4b08      	ldr	r3, [pc, #32]	@ (800a6b0 <strtof+0xc0>)
 800a690:	402b      	ands	r3, r5
 800a692:	2b00      	cmp	r3, #0
 800a694:	d0c9      	beq.n	800a62a <strtof+0x3a>
 800a696:	f8d8 3000 	ldr.w	r3, [r8]
 800a69a:	2222      	movs	r2, #34	@ 0x22
 800a69c:	601a      	str	r2, [r3, #0]
 800a69e:	e7c4      	b.n	800a62a <strtof+0x3a>
 800a6a0:	20000068 	.word	0x20000068
 800a6a4:	0801622c 	.word	0x0801622c
 800a6a8:	7f7fffff 	.word	0x7f7fffff
 800a6ac:	7fefffff 	.word	0x7fefffff
 800a6b0:	7ff00000 	.word	0x7ff00000
 800a6b4:	200001d4 	.word	0x200001d4

0800a6b8 <_strtoul_l.constprop.0>:
 800a6b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a6bc:	4e34      	ldr	r6, [pc, #208]	@ (800a790 <_strtoul_l.constprop.0+0xd8>)
 800a6be:	4686      	mov	lr, r0
 800a6c0:	460d      	mov	r5, r1
 800a6c2:	4628      	mov	r0, r5
 800a6c4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a6c8:	5d37      	ldrb	r7, [r6, r4]
 800a6ca:	f017 0708 	ands.w	r7, r7, #8
 800a6ce:	d1f8      	bne.n	800a6c2 <_strtoul_l.constprop.0+0xa>
 800a6d0:	2c2d      	cmp	r4, #45	@ 0x2d
 800a6d2:	d12f      	bne.n	800a734 <_strtoul_l.constprop.0+0x7c>
 800a6d4:	782c      	ldrb	r4, [r5, #0]
 800a6d6:	2701      	movs	r7, #1
 800a6d8:	1c85      	adds	r5, r0, #2
 800a6da:	f033 0010 	bics.w	r0, r3, #16
 800a6de:	d109      	bne.n	800a6f4 <_strtoul_l.constprop.0+0x3c>
 800a6e0:	2c30      	cmp	r4, #48	@ 0x30
 800a6e2:	d12c      	bne.n	800a73e <_strtoul_l.constprop.0+0x86>
 800a6e4:	7828      	ldrb	r0, [r5, #0]
 800a6e6:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800a6ea:	2858      	cmp	r0, #88	@ 0x58
 800a6ec:	d127      	bne.n	800a73e <_strtoul_l.constprop.0+0x86>
 800a6ee:	786c      	ldrb	r4, [r5, #1]
 800a6f0:	2310      	movs	r3, #16
 800a6f2:	3502      	adds	r5, #2
 800a6f4:	f04f 38ff 	mov.w	r8, #4294967295
 800a6f8:	2600      	movs	r6, #0
 800a6fa:	fbb8 f8f3 	udiv	r8, r8, r3
 800a6fe:	fb03 f908 	mul.w	r9, r3, r8
 800a702:	ea6f 0909 	mvn.w	r9, r9
 800a706:	4630      	mov	r0, r6
 800a708:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800a70c:	f1bc 0f09 	cmp.w	ip, #9
 800a710:	d81c      	bhi.n	800a74c <_strtoul_l.constprop.0+0x94>
 800a712:	4664      	mov	r4, ip
 800a714:	42a3      	cmp	r3, r4
 800a716:	dd2a      	ble.n	800a76e <_strtoul_l.constprop.0+0xb6>
 800a718:	f1b6 3fff 	cmp.w	r6, #4294967295
 800a71c:	d007      	beq.n	800a72e <_strtoul_l.constprop.0+0x76>
 800a71e:	4580      	cmp	r8, r0
 800a720:	d322      	bcc.n	800a768 <_strtoul_l.constprop.0+0xb0>
 800a722:	d101      	bne.n	800a728 <_strtoul_l.constprop.0+0x70>
 800a724:	45a1      	cmp	r9, r4
 800a726:	db1f      	blt.n	800a768 <_strtoul_l.constprop.0+0xb0>
 800a728:	fb00 4003 	mla	r0, r0, r3, r4
 800a72c:	2601      	movs	r6, #1
 800a72e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a732:	e7e9      	b.n	800a708 <_strtoul_l.constprop.0+0x50>
 800a734:	2c2b      	cmp	r4, #43	@ 0x2b
 800a736:	bf04      	itt	eq
 800a738:	782c      	ldrbeq	r4, [r5, #0]
 800a73a:	1c85      	addeq	r5, r0, #2
 800a73c:	e7cd      	b.n	800a6da <_strtoul_l.constprop.0+0x22>
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d1d8      	bne.n	800a6f4 <_strtoul_l.constprop.0+0x3c>
 800a742:	2c30      	cmp	r4, #48	@ 0x30
 800a744:	bf0c      	ite	eq
 800a746:	2308      	moveq	r3, #8
 800a748:	230a      	movne	r3, #10
 800a74a:	e7d3      	b.n	800a6f4 <_strtoul_l.constprop.0+0x3c>
 800a74c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800a750:	f1bc 0f19 	cmp.w	ip, #25
 800a754:	d801      	bhi.n	800a75a <_strtoul_l.constprop.0+0xa2>
 800a756:	3c37      	subs	r4, #55	@ 0x37
 800a758:	e7dc      	b.n	800a714 <_strtoul_l.constprop.0+0x5c>
 800a75a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800a75e:	f1bc 0f19 	cmp.w	ip, #25
 800a762:	d804      	bhi.n	800a76e <_strtoul_l.constprop.0+0xb6>
 800a764:	3c57      	subs	r4, #87	@ 0x57
 800a766:	e7d5      	b.n	800a714 <_strtoul_l.constprop.0+0x5c>
 800a768:	f04f 36ff 	mov.w	r6, #4294967295
 800a76c:	e7df      	b.n	800a72e <_strtoul_l.constprop.0+0x76>
 800a76e:	1c73      	adds	r3, r6, #1
 800a770:	d106      	bne.n	800a780 <_strtoul_l.constprop.0+0xc8>
 800a772:	2322      	movs	r3, #34	@ 0x22
 800a774:	f8ce 3000 	str.w	r3, [lr]
 800a778:	4630      	mov	r0, r6
 800a77a:	b932      	cbnz	r2, 800a78a <_strtoul_l.constprop.0+0xd2>
 800a77c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a780:	b107      	cbz	r7, 800a784 <_strtoul_l.constprop.0+0xcc>
 800a782:	4240      	negs	r0, r0
 800a784:	2a00      	cmp	r2, #0
 800a786:	d0f9      	beq.n	800a77c <_strtoul_l.constprop.0+0xc4>
 800a788:	b106      	cbz	r6, 800a78c <_strtoul_l.constprop.0+0xd4>
 800a78a:	1e69      	subs	r1, r5, #1
 800a78c:	6011      	str	r1, [r2, #0]
 800a78e:	e7f5      	b.n	800a77c <_strtoul_l.constprop.0+0xc4>
 800a790:	08015e61 	.word	0x08015e61

0800a794 <strtoul>:
 800a794:	4613      	mov	r3, r2
 800a796:	460a      	mov	r2, r1
 800a798:	4601      	mov	r1, r0
 800a79a:	4802      	ldr	r0, [pc, #8]	@ (800a7a4 <strtoul+0x10>)
 800a79c:	6800      	ldr	r0, [r0, #0]
 800a79e:	f7ff bf8b 	b.w	800a6b8 <_strtoul_l.constprop.0>
 800a7a2:	bf00      	nop
 800a7a4:	200001d4 	.word	0x200001d4

0800a7a8 <__cvt>:
 800a7a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a7ac:	ec57 6b10 	vmov	r6, r7, d0
 800a7b0:	2f00      	cmp	r7, #0
 800a7b2:	460c      	mov	r4, r1
 800a7b4:	4619      	mov	r1, r3
 800a7b6:	463b      	mov	r3, r7
 800a7b8:	bfbb      	ittet	lt
 800a7ba:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a7be:	461f      	movlt	r7, r3
 800a7c0:	2300      	movge	r3, #0
 800a7c2:	232d      	movlt	r3, #45	@ 0x2d
 800a7c4:	700b      	strb	r3, [r1, #0]
 800a7c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a7c8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a7cc:	4691      	mov	r9, r2
 800a7ce:	f023 0820 	bic.w	r8, r3, #32
 800a7d2:	bfbc      	itt	lt
 800a7d4:	4632      	movlt	r2, r6
 800a7d6:	4616      	movlt	r6, r2
 800a7d8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a7dc:	d005      	beq.n	800a7ea <__cvt+0x42>
 800a7de:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a7e2:	d100      	bne.n	800a7e6 <__cvt+0x3e>
 800a7e4:	3401      	adds	r4, #1
 800a7e6:	2102      	movs	r1, #2
 800a7e8:	e000      	b.n	800a7ec <__cvt+0x44>
 800a7ea:	2103      	movs	r1, #3
 800a7ec:	ab03      	add	r3, sp, #12
 800a7ee:	9301      	str	r3, [sp, #4]
 800a7f0:	ab02      	add	r3, sp, #8
 800a7f2:	9300      	str	r3, [sp, #0]
 800a7f4:	ec47 6b10 	vmov	d0, r6, r7
 800a7f8:	4653      	mov	r3, sl
 800a7fa:	4622      	mov	r2, r4
 800a7fc:	f000 fed8 	bl	800b5b0 <_dtoa_r>
 800a800:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a804:	4605      	mov	r5, r0
 800a806:	d119      	bne.n	800a83c <__cvt+0x94>
 800a808:	f019 0f01 	tst.w	r9, #1
 800a80c:	d00e      	beq.n	800a82c <__cvt+0x84>
 800a80e:	eb00 0904 	add.w	r9, r0, r4
 800a812:	2200      	movs	r2, #0
 800a814:	2300      	movs	r3, #0
 800a816:	4630      	mov	r0, r6
 800a818:	4639      	mov	r1, r7
 800a81a:	f7f6 f98d 	bl	8000b38 <__aeabi_dcmpeq>
 800a81e:	b108      	cbz	r0, 800a824 <__cvt+0x7c>
 800a820:	f8cd 900c 	str.w	r9, [sp, #12]
 800a824:	2230      	movs	r2, #48	@ 0x30
 800a826:	9b03      	ldr	r3, [sp, #12]
 800a828:	454b      	cmp	r3, r9
 800a82a:	d31e      	bcc.n	800a86a <__cvt+0xc2>
 800a82c:	9b03      	ldr	r3, [sp, #12]
 800a82e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a830:	1b5b      	subs	r3, r3, r5
 800a832:	4628      	mov	r0, r5
 800a834:	6013      	str	r3, [r2, #0]
 800a836:	b004      	add	sp, #16
 800a838:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a83c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a840:	eb00 0904 	add.w	r9, r0, r4
 800a844:	d1e5      	bne.n	800a812 <__cvt+0x6a>
 800a846:	7803      	ldrb	r3, [r0, #0]
 800a848:	2b30      	cmp	r3, #48	@ 0x30
 800a84a:	d10a      	bne.n	800a862 <__cvt+0xba>
 800a84c:	2200      	movs	r2, #0
 800a84e:	2300      	movs	r3, #0
 800a850:	4630      	mov	r0, r6
 800a852:	4639      	mov	r1, r7
 800a854:	f7f6 f970 	bl	8000b38 <__aeabi_dcmpeq>
 800a858:	b918      	cbnz	r0, 800a862 <__cvt+0xba>
 800a85a:	f1c4 0401 	rsb	r4, r4, #1
 800a85e:	f8ca 4000 	str.w	r4, [sl]
 800a862:	f8da 3000 	ldr.w	r3, [sl]
 800a866:	4499      	add	r9, r3
 800a868:	e7d3      	b.n	800a812 <__cvt+0x6a>
 800a86a:	1c59      	adds	r1, r3, #1
 800a86c:	9103      	str	r1, [sp, #12]
 800a86e:	701a      	strb	r2, [r3, #0]
 800a870:	e7d9      	b.n	800a826 <__cvt+0x7e>

0800a872 <__exponent>:
 800a872:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a874:	2900      	cmp	r1, #0
 800a876:	bfba      	itte	lt
 800a878:	4249      	neglt	r1, r1
 800a87a:	232d      	movlt	r3, #45	@ 0x2d
 800a87c:	232b      	movge	r3, #43	@ 0x2b
 800a87e:	2909      	cmp	r1, #9
 800a880:	7002      	strb	r2, [r0, #0]
 800a882:	7043      	strb	r3, [r0, #1]
 800a884:	dd29      	ble.n	800a8da <__exponent+0x68>
 800a886:	f10d 0307 	add.w	r3, sp, #7
 800a88a:	461d      	mov	r5, r3
 800a88c:	270a      	movs	r7, #10
 800a88e:	461a      	mov	r2, r3
 800a890:	fbb1 f6f7 	udiv	r6, r1, r7
 800a894:	fb07 1416 	mls	r4, r7, r6, r1
 800a898:	3430      	adds	r4, #48	@ 0x30
 800a89a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a89e:	460c      	mov	r4, r1
 800a8a0:	2c63      	cmp	r4, #99	@ 0x63
 800a8a2:	f103 33ff 	add.w	r3, r3, #4294967295
 800a8a6:	4631      	mov	r1, r6
 800a8a8:	dcf1      	bgt.n	800a88e <__exponent+0x1c>
 800a8aa:	3130      	adds	r1, #48	@ 0x30
 800a8ac:	1e94      	subs	r4, r2, #2
 800a8ae:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a8b2:	1c41      	adds	r1, r0, #1
 800a8b4:	4623      	mov	r3, r4
 800a8b6:	42ab      	cmp	r3, r5
 800a8b8:	d30a      	bcc.n	800a8d0 <__exponent+0x5e>
 800a8ba:	f10d 0309 	add.w	r3, sp, #9
 800a8be:	1a9b      	subs	r3, r3, r2
 800a8c0:	42ac      	cmp	r4, r5
 800a8c2:	bf88      	it	hi
 800a8c4:	2300      	movhi	r3, #0
 800a8c6:	3302      	adds	r3, #2
 800a8c8:	4403      	add	r3, r0
 800a8ca:	1a18      	subs	r0, r3, r0
 800a8cc:	b003      	add	sp, #12
 800a8ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a8d0:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a8d4:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a8d8:	e7ed      	b.n	800a8b6 <__exponent+0x44>
 800a8da:	2330      	movs	r3, #48	@ 0x30
 800a8dc:	3130      	adds	r1, #48	@ 0x30
 800a8de:	7083      	strb	r3, [r0, #2]
 800a8e0:	70c1      	strb	r1, [r0, #3]
 800a8e2:	1d03      	adds	r3, r0, #4
 800a8e4:	e7f1      	b.n	800a8ca <__exponent+0x58>
	...

0800a8e8 <_printf_float>:
 800a8e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8ec:	b08d      	sub	sp, #52	@ 0x34
 800a8ee:	460c      	mov	r4, r1
 800a8f0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a8f4:	4616      	mov	r6, r2
 800a8f6:	461f      	mov	r7, r3
 800a8f8:	4605      	mov	r5, r0
 800a8fa:	f000 fd31 	bl	800b360 <_localeconv_r>
 800a8fe:	6803      	ldr	r3, [r0, #0]
 800a900:	9304      	str	r3, [sp, #16]
 800a902:	4618      	mov	r0, r3
 800a904:	f7f5 fcec 	bl	80002e0 <strlen>
 800a908:	2300      	movs	r3, #0
 800a90a:	930a      	str	r3, [sp, #40]	@ 0x28
 800a90c:	f8d8 3000 	ldr.w	r3, [r8]
 800a910:	9005      	str	r0, [sp, #20]
 800a912:	3307      	adds	r3, #7
 800a914:	f023 0307 	bic.w	r3, r3, #7
 800a918:	f103 0208 	add.w	r2, r3, #8
 800a91c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a920:	f8d4 b000 	ldr.w	fp, [r4]
 800a924:	f8c8 2000 	str.w	r2, [r8]
 800a928:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a92c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a930:	9307      	str	r3, [sp, #28]
 800a932:	f8cd 8018 	str.w	r8, [sp, #24]
 800a936:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a93a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a93e:	4b9c      	ldr	r3, [pc, #624]	@ (800abb0 <_printf_float+0x2c8>)
 800a940:	f04f 32ff 	mov.w	r2, #4294967295
 800a944:	f7f6 f92a 	bl	8000b9c <__aeabi_dcmpun>
 800a948:	bb70      	cbnz	r0, 800a9a8 <_printf_float+0xc0>
 800a94a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a94e:	4b98      	ldr	r3, [pc, #608]	@ (800abb0 <_printf_float+0x2c8>)
 800a950:	f04f 32ff 	mov.w	r2, #4294967295
 800a954:	f7f6 f904 	bl	8000b60 <__aeabi_dcmple>
 800a958:	bb30      	cbnz	r0, 800a9a8 <_printf_float+0xc0>
 800a95a:	2200      	movs	r2, #0
 800a95c:	2300      	movs	r3, #0
 800a95e:	4640      	mov	r0, r8
 800a960:	4649      	mov	r1, r9
 800a962:	f7f6 f8f3 	bl	8000b4c <__aeabi_dcmplt>
 800a966:	b110      	cbz	r0, 800a96e <_printf_float+0x86>
 800a968:	232d      	movs	r3, #45	@ 0x2d
 800a96a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a96e:	4a91      	ldr	r2, [pc, #580]	@ (800abb4 <_printf_float+0x2cc>)
 800a970:	4b91      	ldr	r3, [pc, #580]	@ (800abb8 <_printf_float+0x2d0>)
 800a972:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a976:	bf94      	ite	ls
 800a978:	4690      	movls	r8, r2
 800a97a:	4698      	movhi	r8, r3
 800a97c:	2303      	movs	r3, #3
 800a97e:	6123      	str	r3, [r4, #16]
 800a980:	f02b 0304 	bic.w	r3, fp, #4
 800a984:	6023      	str	r3, [r4, #0]
 800a986:	f04f 0900 	mov.w	r9, #0
 800a98a:	9700      	str	r7, [sp, #0]
 800a98c:	4633      	mov	r3, r6
 800a98e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a990:	4621      	mov	r1, r4
 800a992:	4628      	mov	r0, r5
 800a994:	f000 f9d2 	bl	800ad3c <_printf_common>
 800a998:	3001      	adds	r0, #1
 800a99a:	f040 808d 	bne.w	800aab8 <_printf_float+0x1d0>
 800a99e:	f04f 30ff 	mov.w	r0, #4294967295
 800a9a2:	b00d      	add	sp, #52	@ 0x34
 800a9a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9a8:	4642      	mov	r2, r8
 800a9aa:	464b      	mov	r3, r9
 800a9ac:	4640      	mov	r0, r8
 800a9ae:	4649      	mov	r1, r9
 800a9b0:	f7f6 f8f4 	bl	8000b9c <__aeabi_dcmpun>
 800a9b4:	b140      	cbz	r0, 800a9c8 <_printf_float+0xe0>
 800a9b6:	464b      	mov	r3, r9
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	bfbc      	itt	lt
 800a9bc:	232d      	movlt	r3, #45	@ 0x2d
 800a9be:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a9c2:	4a7e      	ldr	r2, [pc, #504]	@ (800abbc <_printf_float+0x2d4>)
 800a9c4:	4b7e      	ldr	r3, [pc, #504]	@ (800abc0 <_printf_float+0x2d8>)
 800a9c6:	e7d4      	b.n	800a972 <_printf_float+0x8a>
 800a9c8:	6863      	ldr	r3, [r4, #4]
 800a9ca:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a9ce:	9206      	str	r2, [sp, #24]
 800a9d0:	1c5a      	adds	r2, r3, #1
 800a9d2:	d13b      	bne.n	800aa4c <_printf_float+0x164>
 800a9d4:	2306      	movs	r3, #6
 800a9d6:	6063      	str	r3, [r4, #4]
 800a9d8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a9dc:	2300      	movs	r3, #0
 800a9de:	6022      	str	r2, [r4, #0]
 800a9e0:	9303      	str	r3, [sp, #12]
 800a9e2:	ab0a      	add	r3, sp, #40	@ 0x28
 800a9e4:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a9e8:	ab09      	add	r3, sp, #36	@ 0x24
 800a9ea:	9300      	str	r3, [sp, #0]
 800a9ec:	6861      	ldr	r1, [r4, #4]
 800a9ee:	ec49 8b10 	vmov	d0, r8, r9
 800a9f2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a9f6:	4628      	mov	r0, r5
 800a9f8:	f7ff fed6 	bl	800a7a8 <__cvt>
 800a9fc:	9b06      	ldr	r3, [sp, #24]
 800a9fe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800aa00:	2b47      	cmp	r3, #71	@ 0x47
 800aa02:	4680      	mov	r8, r0
 800aa04:	d129      	bne.n	800aa5a <_printf_float+0x172>
 800aa06:	1cc8      	adds	r0, r1, #3
 800aa08:	db02      	blt.n	800aa10 <_printf_float+0x128>
 800aa0a:	6863      	ldr	r3, [r4, #4]
 800aa0c:	4299      	cmp	r1, r3
 800aa0e:	dd41      	ble.n	800aa94 <_printf_float+0x1ac>
 800aa10:	f1aa 0a02 	sub.w	sl, sl, #2
 800aa14:	fa5f fa8a 	uxtb.w	sl, sl
 800aa18:	3901      	subs	r1, #1
 800aa1a:	4652      	mov	r2, sl
 800aa1c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800aa20:	9109      	str	r1, [sp, #36]	@ 0x24
 800aa22:	f7ff ff26 	bl	800a872 <__exponent>
 800aa26:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800aa28:	1813      	adds	r3, r2, r0
 800aa2a:	2a01      	cmp	r2, #1
 800aa2c:	4681      	mov	r9, r0
 800aa2e:	6123      	str	r3, [r4, #16]
 800aa30:	dc02      	bgt.n	800aa38 <_printf_float+0x150>
 800aa32:	6822      	ldr	r2, [r4, #0]
 800aa34:	07d2      	lsls	r2, r2, #31
 800aa36:	d501      	bpl.n	800aa3c <_printf_float+0x154>
 800aa38:	3301      	adds	r3, #1
 800aa3a:	6123      	str	r3, [r4, #16]
 800aa3c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d0a2      	beq.n	800a98a <_printf_float+0xa2>
 800aa44:	232d      	movs	r3, #45	@ 0x2d
 800aa46:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aa4a:	e79e      	b.n	800a98a <_printf_float+0xa2>
 800aa4c:	9a06      	ldr	r2, [sp, #24]
 800aa4e:	2a47      	cmp	r2, #71	@ 0x47
 800aa50:	d1c2      	bne.n	800a9d8 <_printf_float+0xf0>
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d1c0      	bne.n	800a9d8 <_printf_float+0xf0>
 800aa56:	2301      	movs	r3, #1
 800aa58:	e7bd      	b.n	800a9d6 <_printf_float+0xee>
 800aa5a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800aa5e:	d9db      	bls.n	800aa18 <_printf_float+0x130>
 800aa60:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800aa64:	d118      	bne.n	800aa98 <_printf_float+0x1b0>
 800aa66:	2900      	cmp	r1, #0
 800aa68:	6863      	ldr	r3, [r4, #4]
 800aa6a:	dd0b      	ble.n	800aa84 <_printf_float+0x19c>
 800aa6c:	6121      	str	r1, [r4, #16]
 800aa6e:	b913      	cbnz	r3, 800aa76 <_printf_float+0x18e>
 800aa70:	6822      	ldr	r2, [r4, #0]
 800aa72:	07d0      	lsls	r0, r2, #31
 800aa74:	d502      	bpl.n	800aa7c <_printf_float+0x194>
 800aa76:	3301      	adds	r3, #1
 800aa78:	440b      	add	r3, r1
 800aa7a:	6123      	str	r3, [r4, #16]
 800aa7c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800aa7e:	f04f 0900 	mov.w	r9, #0
 800aa82:	e7db      	b.n	800aa3c <_printf_float+0x154>
 800aa84:	b913      	cbnz	r3, 800aa8c <_printf_float+0x1a4>
 800aa86:	6822      	ldr	r2, [r4, #0]
 800aa88:	07d2      	lsls	r2, r2, #31
 800aa8a:	d501      	bpl.n	800aa90 <_printf_float+0x1a8>
 800aa8c:	3302      	adds	r3, #2
 800aa8e:	e7f4      	b.n	800aa7a <_printf_float+0x192>
 800aa90:	2301      	movs	r3, #1
 800aa92:	e7f2      	b.n	800aa7a <_printf_float+0x192>
 800aa94:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800aa98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aa9a:	4299      	cmp	r1, r3
 800aa9c:	db05      	blt.n	800aaaa <_printf_float+0x1c2>
 800aa9e:	6823      	ldr	r3, [r4, #0]
 800aaa0:	6121      	str	r1, [r4, #16]
 800aaa2:	07d8      	lsls	r0, r3, #31
 800aaa4:	d5ea      	bpl.n	800aa7c <_printf_float+0x194>
 800aaa6:	1c4b      	adds	r3, r1, #1
 800aaa8:	e7e7      	b.n	800aa7a <_printf_float+0x192>
 800aaaa:	2900      	cmp	r1, #0
 800aaac:	bfd4      	ite	le
 800aaae:	f1c1 0202 	rsble	r2, r1, #2
 800aab2:	2201      	movgt	r2, #1
 800aab4:	4413      	add	r3, r2
 800aab6:	e7e0      	b.n	800aa7a <_printf_float+0x192>
 800aab8:	6823      	ldr	r3, [r4, #0]
 800aaba:	055a      	lsls	r2, r3, #21
 800aabc:	d407      	bmi.n	800aace <_printf_float+0x1e6>
 800aabe:	6923      	ldr	r3, [r4, #16]
 800aac0:	4642      	mov	r2, r8
 800aac2:	4631      	mov	r1, r6
 800aac4:	4628      	mov	r0, r5
 800aac6:	47b8      	blx	r7
 800aac8:	3001      	adds	r0, #1
 800aaca:	d12b      	bne.n	800ab24 <_printf_float+0x23c>
 800aacc:	e767      	b.n	800a99e <_printf_float+0xb6>
 800aace:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800aad2:	f240 80dd 	bls.w	800ac90 <_printf_float+0x3a8>
 800aad6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800aada:	2200      	movs	r2, #0
 800aadc:	2300      	movs	r3, #0
 800aade:	f7f6 f82b 	bl	8000b38 <__aeabi_dcmpeq>
 800aae2:	2800      	cmp	r0, #0
 800aae4:	d033      	beq.n	800ab4e <_printf_float+0x266>
 800aae6:	4a37      	ldr	r2, [pc, #220]	@ (800abc4 <_printf_float+0x2dc>)
 800aae8:	2301      	movs	r3, #1
 800aaea:	4631      	mov	r1, r6
 800aaec:	4628      	mov	r0, r5
 800aaee:	47b8      	blx	r7
 800aaf0:	3001      	adds	r0, #1
 800aaf2:	f43f af54 	beq.w	800a99e <_printf_float+0xb6>
 800aaf6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800aafa:	4543      	cmp	r3, r8
 800aafc:	db02      	blt.n	800ab04 <_printf_float+0x21c>
 800aafe:	6823      	ldr	r3, [r4, #0]
 800ab00:	07d8      	lsls	r0, r3, #31
 800ab02:	d50f      	bpl.n	800ab24 <_printf_float+0x23c>
 800ab04:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ab08:	4631      	mov	r1, r6
 800ab0a:	4628      	mov	r0, r5
 800ab0c:	47b8      	blx	r7
 800ab0e:	3001      	adds	r0, #1
 800ab10:	f43f af45 	beq.w	800a99e <_printf_float+0xb6>
 800ab14:	f04f 0900 	mov.w	r9, #0
 800ab18:	f108 38ff 	add.w	r8, r8, #4294967295
 800ab1c:	f104 0a1a 	add.w	sl, r4, #26
 800ab20:	45c8      	cmp	r8, r9
 800ab22:	dc09      	bgt.n	800ab38 <_printf_float+0x250>
 800ab24:	6823      	ldr	r3, [r4, #0]
 800ab26:	079b      	lsls	r3, r3, #30
 800ab28:	f100 8103 	bmi.w	800ad32 <_printf_float+0x44a>
 800ab2c:	68e0      	ldr	r0, [r4, #12]
 800ab2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ab30:	4298      	cmp	r0, r3
 800ab32:	bfb8      	it	lt
 800ab34:	4618      	movlt	r0, r3
 800ab36:	e734      	b.n	800a9a2 <_printf_float+0xba>
 800ab38:	2301      	movs	r3, #1
 800ab3a:	4652      	mov	r2, sl
 800ab3c:	4631      	mov	r1, r6
 800ab3e:	4628      	mov	r0, r5
 800ab40:	47b8      	blx	r7
 800ab42:	3001      	adds	r0, #1
 800ab44:	f43f af2b 	beq.w	800a99e <_printf_float+0xb6>
 800ab48:	f109 0901 	add.w	r9, r9, #1
 800ab4c:	e7e8      	b.n	800ab20 <_printf_float+0x238>
 800ab4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	dc39      	bgt.n	800abc8 <_printf_float+0x2e0>
 800ab54:	4a1b      	ldr	r2, [pc, #108]	@ (800abc4 <_printf_float+0x2dc>)
 800ab56:	2301      	movs	r3, #1
 800ab58:	4631      	mov	r1, r6
 800ab5a:	4628      	mov	r0, r5
 800ab5c:	47b8      	blx	r7
 800ab5e:	3001      	adds	r0, #1
 800ab60:	f43f af1d 	beq.w	800a99e <_printf_float+0xb6>
 800ab64:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800ab68:	ea59 0303 	orrs.w	r3, r9, r3
 800ab6c:	d102      	bne.n	800ab74 <_printf_float+0x28c>
 800ab6e:	6823      	ldr	r3, [r4, #0]
 800ab70:	07d9      	lsls	r1, r3, #31
 800ab72:	d5d7      	bpl.n	800ab24 <_printf_float+0x23c>
 800ab74:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ab78:	4631      	mov	r1, r6
 800ab7a:	4628      	mov	r0, r5
 800ab7c:	47b8      	blx	r7
 800ab7e:	3001      	adds	r0, #1
 800ab80:	f43f af0d 	beq.w	800a99e <_printf_float+0xb6>
 800ab84:	f04f 0a00 	mov.w	sl, #0
 800ab88:	f104 0b1a 	add.w	fp, r4, #26
 800ab8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab8e:	425b      	negs	r3, r3
 800ab90:	4553      	cmp	r3, sl
 800ab92:	dc01      	bgt.n	800ab98 <_printf_float+0x2b0>
 800ab94:	464b      	mov	r3, r9
 800ab96:	e793      	b.n	800aac0 <_printf_float+0x1d8>
 800ab98:	2301      	movs	r3, #1
 800ab9a:	465a      	mov	r2, fp
 800ab9c:	4631      	mov	r1, r6
 800ab9e:	4628      	mov	r0, r5
 800aba0:	47b8      	blx	r7
 800aba2:	3001      	adds	r0, #1
 800aba4:	f43f aefb 	beq.w	800a99e <_printf_float+0xb6>
 800aba8:	f10a 0a01 	add.w	sl, sl, #1
 800abac:	e7ee      	b.n	800ab8c <_printf_float+0x2a4>
 800abae:	bf00      	nop
 800abb0:	7fefffff 	.word	0x7fefffff
 800abb4:	08015f61 	.word	0x08015f61
 800abb8:	08015f65 	.word	0x08015f65
 800abbc:	08015f69 	.word	0x08015f69
 800abc0:	08015f6d 	.word	0x08015f6d
 800abc4:	08015f71 	.word	0x08015f71
 800abc8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800abca:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800abce:	4553      	cmp	r3, sl
 800abd0:	bfa8      	it	ge
 800abd2:	4653      	movge	r3, sl
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	4699      	mov	r9, r3
 800abd8:	dc36      	bgt.n	800ac48 <_printf_float+0x360>
 800abda:	f04f 0b00 	mov.w	fp, #0
 800abde:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800abe2:	f104 021a 	add.w	r2, r4, #26
 800abe6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800abe8:	9306      	str	r3, [sp, #24]
 800abea:	eba3 0309 	sub.w	r3, r3, r9
 800abee:	455b      	cmp	r3, fp
 800abf0:	dc31      	bgt.n	800ac56 <_printf_float+0x36e>
 800abf2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800abf4:	459a      	cmp	sl, r3
 800abf6:	dc3a      	bgt.n	800ac6e <_printf_float+0x386>
 800abf8:	6823      	ldr	r3, [r4, #0]
 800abfa:	07da      	lsls	r2, r3, #31
 800abfc:	d437      	bmi.n	800ac6e <_printf_float+0x386>
 800abfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac00:	ebaa 0903 	sub.w	r9, sl, r3
 800ac04:	9b06      	ldr	r3, [sp, #24]
 800ac06:	ebaa 0303 	sub.w	r3, sl, r3
 800ac0a:	4599      	cmp	r9, r3
 800ac0c:	bfa8      	it	ge
 800ac0e:	4699      	movge	r9, r3
 800ac10:	f1b9 0f00 	cmp.w	r9, #0
 800ac14:	dc33      	bgt.n	800ac7e <_printf_float+0x396>
 800ac16:	f04f 0800 	mov.w	r8, #0
 800ac1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ac1e:	f104 0b1a 	add.w	fp, r4, #26
 800ac22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac24:	ebaa 0303 	sub.w	r3, sl, r3
 800ac28:	eba3 0309 	sub.w	r3, r3, r9
 800ac2c:	4543      	cmp	r3, r8
 800ac2e:	f77f af79 	ble.w	800ab24 <_printf_float+0x23c>
 800ac32:	2301      	movs	r3, #1
 800ac34:	465a      	mov	r2, fp
 800ac36:	4631      	mov	r1, r6
 800ac38:	4628      	mov	r0, r5
 800ac3a:	47b8      	blx	r7
 800ac3c:	3001      	adds	r0, #1
 800ac3e:	f43f aeae 	beq.w	800a99e <_printf_float+0xb6>
 800ac42:	f108 0801 	add.w	r8, r8, #1
 800ac46:	e7ec      	b.n	800ac22 <_printf_float+0x33a>
 800ac48:	4642      	mov	r2, r8
 800ac4a:	4631      	mov	r1, r6
 800ac4c:	4628      	mov	r0, r5
 800ac4e:	47b8      	blx	r7
 800ac50:	3001      	adds	r0, #1
 800ac52:	d1c2      	bne.n	800abda <_printf_float+0x2f2>
 800ac54:	e6a3      	b.n	800a99e <_printf_float+0xb6>
 800ac56:	2301      	movs	r3, #1
 800ac58:	4631      	mov	r1, r6
 800ac5a:	4628      	mov	r0, r5
 800ac5c:	9206      	str	r2, [sp, #24]
 800ac5e:	47b8      	blx	r7
 800ac60:	3001      	adds	r0, #1
 800ac62:	f43f ae9c 	beq.w	800a99e <_printf_float+0xb6>
 800ac66:	9a06      	ldr	r2, [sp, #24]
 800ac68:	f10b 0b01 	add.w	fp, fp, #1
 800ac6c:	e7bb      	b.n	800abe6 <_printf_float+0x2fe>
 800ac6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ac72:	4631      	mov	r1, r6
 800ac74:	4628      	mov	r0, r5
 800ac76:	47b8      	blx	r7
 800ac78:	3001      	adds	r0, #1
 800ac7a:	d1c0      	bne.n	800abfe <_printf_float+0x316>
 800ac7c:	e68f      	b.n	800a99e <_printf_float+0xb6>
 800ac7e:	9a06      	ldr	r2, [sp, #24]
 800ac80:	464b      	mov	r3, r9
 800ac82:	4442      	add	r2, r8
 800ac84:	4631      	mov	r1, r6
 800ac86:	4628      	mov	r0, r5
 800ac88:	47b8      	blx	r7
 800ac8a:	3001      	adds	r0, #1
 800ac8c:	d1c3      	bne.n	800ac16 <_printf_float+0x32e>
 800ac8e:	e686      	b.n	800a99e <_printf_float+0xb6>
 800ac90:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ac94:	f1ba 0f01 	cmp.w	sl, #1
 800ac98:	dc01      	bgt.n	800ac9e <_printf_float+0x3b6>
 800ac9a:	07db      	lsls	r3, r3, #31
 800ac9c:	d536      	bpl.n	800ad0c <_printf_float+0x424>
 800ac9e:	2301      	movs	r3, #1
 800aca0:	4642      	mov	r2, r8
 800aca2:	4631      	mov	r1, r6
 800aca4:	4628      	mov	r0, r5
 800aca6:	47b8      	blx	r7
 800aca8:	3001      	adds	r0, #1
 800acaa:	f43f ae78 	beq.w	800a99e <_printf_float+0xb6>
 800acae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800acb2:	4631      	mov	r1, r6
 800acb4:	4628      	mov	r0, r5
 800acb6:	47b8      	blx	r7
 800acb8:	3001      	adds	r0, #1
 800acba:	f43f ae70 	beq.w	800a99e <_printf_float+0xb6>
 800acbe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800acc2:	2200      	movs	r2, #0
 800acc4:	2300      	movs	r3, #0
 800acc6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800acca:	f7f5 ff35 	bl	8000b38 <__aeabi_dcmpeq>
 800acce:	b9c0      	cbnz	r0, 800ad02 <_printf_float+0x41a>
 800acd0:	4653      	mov	r3, sl
 800acd2:	f108 0201 	add.w	r2, r8, #1
 800acd6:	4631      	mov	r1, r6
 800acd8:	4628      	mov	r0, r5
 800acda:	47b8      	blx	r7
 800acdc:	3001      	adds	r0, #1
 800acde:	d10c      	bne.n	800acfa <_printf_float+0x412>
 800ace0:	e65d      	b.n	800a99e <_printf_float+0xb6>
 800ace2:	2301      	movs	r3, #1
 800ace4:	465a      	mov	r2, fp
 800ace6:	4631      	mov	r1, r6
 800ace8:	4628      	mov	r0, r5
 800acea:	47b8      	blx	r7
 800acec:	3001      	adds	r0, #1
 800acee:	f43f ae56 	beq.w	800a99e <_printf_float+0xb6>
 800acf2:	f108 0801 	add.w	r8, r8, #1
 800acf6:	45d0      	cmp	r8, sl
 800acf8:	dbf3      	blt.n	800ace2 <_printf_float+0x3fa>
 800acfa:	464b      	mov	r3, r9
 800acfc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ad00:	e6df      	b.n	800aac2 <_printf_float+0x1da>
 800ad02:	f04f 0800 	mov.w	r8, #0
 800ad06:	f104 0b1a 	add.w	fp, r4, #26
 800ad0a:	e7f4      	b.n	800acf6 <_printf_float+0x40e>
 800ad0c:	2301      	movs	r3, #1
 800ad0e:	4642      	mov	r2, r8
 800ad10:	e7e1      	b.n	800acd6 <_printf_float+0x3ee>
 800ad12:	2301      	movs	r3, #1
 800ad14:	464a      	mov	r2, r9
 800ad16:	4631      	mov	r1, r6
 800ad18:	4628      	mov	r0, r5
 800ad1a:	47b8      	blx	r7
 800ad1c:	3001      	adds	r0, #1
 800ad1e:	f43f ae3e 	beq.w	800a99e <_printf_float+0xb6>
 800ad22:	f108 0801 	add.w	r8, r8, #1
 800ad26:	68e3      	ldr	r3, [r4, #12]
 800ad28:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ad2a:	1a5b      	subs	r3, r3, r1
 800ad2c:	4543      	cmp	r3, r8
 800ad2e:	dcf0      	bgt.n	800ad12 <_printf_float+0x42a>
 800ad30:	e6fc      	b.n	800ab2c <_printf_float+0x244>
 800ad32:	f04f 0800 	mov.w	r8, #0
 800ad36:	f104 0919 	add.w	r9, r4, #25
 800ad3a:	e7f4      	b.n	800ad26 <_printf_float+0x43e>

0800ad3c <_printf_common>:
 800ad3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad40:	4616      	mov	r6, r2
 800ad42:	4698      	mov	r8, r3
 800ad44:	688a      	ldr	r2, [r1, #8]
 800ad46:	690b      	ldr	r3, [r1, #16]
 800ad48:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ad4c:	4293      	cmp	r3, r2
 800ad4e:	bfb8      	it	lt
 800ad50:	4613      	movlt	r3, r2
 800ad52:	6033      	str	r3, [r6, #0]
 800ad54:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ad58:	4607      	mov	r7, r0
 800ad5a:	460c      	mov	r4, r1
 800ad5c:	b10a      	cbz	r2, 800ad62 <_printf_common+0x26>
 800ad5e:	3301      	adds	r3, #1
 800ad60:	6033      	str	r3, [r6, #0]
 800ad62:	6823      	ldr	r3, [r4, #0]
 800ad64:	0699      	lsls	r1, r3, #26
 800ad66:	bf42      	ittt	mi
 800ad68:	6833      	ldrmi	r3, [r6, #0]
 800ad6a:	3302      	addmi	r3, #2
 800ad6c:	6033      	strmi	r3, [r6, #0]
 800ad6e:	6825      	ldr	r5, [r4, #0]
 800ad70:	f015 0506 	ands.w	r5, r5, #6
 800ad74:	d106      	bne.n	800ad84 <_printf_common+0x48>
 800ad76:	f104 0a19 	add.w	sl, r4, #25
 800ad7a:	68e3      	ldr	r3, [r4, #12]
 800ad7c:	6832      	ldr	r2, [r6, #0]
 800ad7e:	1a9b      	subs	r3, r3, r2
 800ad80:	42ab      	cmp	r3, r5
 800ad82:	dc26      	bgt.n	800add2 <_printf_common+0x96>
 800ad84:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ad88:	6822      	ldr	r2, [r4, #0]
 800ad8a:	3b00      	subs	r3, #0
 800ad8c:	bf18      	it	ne
 800ad8e:	2301      	movne	r3, #1
 800ad90:	0692      	lsls	r2, r2, #26
 800ad92:	d42b      	bmi.n	800adec <_printf_common+0xb0>
 800ad94:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ad98:	4641      	mov	r1, r8
 800ad9a:	4638      	mov	r0, r7
 800ad9c:	47c8      	blx	r9
 800ad9e:	3001      	adds	r0, #1
 800ada0:	d01e      	beq.n	800ade0 <_printf_common+0xa4>
 800ada2:	6823      	ldr	r3, [r4, #0]
 800ada4:	6922      	ldr	r2, [r4, #16]
 800ada6:	f003 0306 	and.w	r3, r3, #6
 800adaa:	2b04      	cmp	r3, #4
 800adac:	bf02      	ittt	eq
 800adae:	68e5      	ldreq	r5, [r4, #12]
 800adb0:	6833      	ldreq	r3, [r6, #0]
 800adb2:	1aed      	subeq	r5, r5, r3
 800adb4:	68a3      	ldr	r3, [r4, #8]
 800adb6:	bf0c      	ite	eq
 800adb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800adbc:	2500      	movne	r5, #0
 800adbe:	4293      	cmp	r3, r2
 800adc0:	bfc4      	itt	gt
 800adc2:	1a9b      	subgt	r3, r3, r2
 800adc4:	18ed      	addgt	r5, r5, r3
 800adc6:	2600      	movs	r6, #0
 800adc8:	341a      	adds	r4, #26
 800adca:	42b5      	cmp	r5, r6
 800adcc:	d11a      	bne.n	800ae04 <_printf_common+0xc8>
 800adce:	2000      	movs	r0, #0
 800add0:	e008      	b.n	800ade4 <_printf_common+0xa8>
 800add2:	2301      	movs	r3, #1
 800add4:	4652      	mov	r2, sl
 800add6:	4641      	mov	r1, r8
 800add8:	4638      	mov	r0, r7
 800adda:	47c8      	blx	r9
 800addc:	3001      	adds	r0, #1
 800adde:	d103      	bne.n	800ade8 <_printf_common+0xac>
 800ade0:	f04f 30ff 	mov.w	r0, #4294967295
 800ade4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ade8:	3501      	adds	r5, #1
 800adea:	e7c6      	b.n	800ad7a <_printf_common+0x3e>
 800adec:	18e1      	adds	r1, r4, r3
 800adee:	1c5a      	adds	r2, r3, #1
 800adf0:	2030      	movs	r0, #48	@ 0x30
 800adf2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800adf6:	4422      	add	r2, r4
 800adf8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800adfc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ae00:	3302      	adds	r3, #2
 800ae02:	e7c7      	b.n	800ad94 <_printf_common+0x58>
 800ae04:	2301      	movs	r3, #1
 800ae06:	4622      	mov	r2, r4
 800ae08:	4641      	mov	r1, r8
 800ae0a:	4638      	mov	r0, r7
 800ae0c:	47c8      	blx	r9
 800ae0e:	3001      	adds	r0, #1
 800ae10:	d0e6      	beq.n	800ade0 <_printf_common+0xa4>
 800ae12:	3601      	adds	r6, #1
 800ae14:	e7d9      	b.n	800adca <_printf_common+0x8e>
	...

0800ae18 <_printf_i>:
 800ae18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ae1c:	7e0f      	ldrb	r7, [r1, #24]
 800ae1e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ae20:	2f78      	cmp	r7, #120	@ 0x78
 800ae22:	4691      	mov	r9, r2
 800ae24:	4680      	mov	r8, r0
 800ae26:	460c      	mov	r4, r1
 800ae28:	469a      	mov	sl, r3
 800ae2a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ae2e:	d807      	bhi.n	800ae40 <_printf_i+0x28>
 800ae30:	2f62      	cmp	r7, #98	@ 0x62
 800ae32:	d80a      	bhi.n	800ae4a <_printf_i+0x32>
 800ae34:	2f00      	cmp	r7, #0
 800ae36:	f000 80d2 	beq.w	800afde <_printf_i+0x1c6>
 800ae3a:	2f58      	cmp	r7, #88	@ 0x58
 800ae3c:	f000 80b9 	beq.w	800afb2 <_printf_i+0x19a>
 800ae40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ae44:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ae48:	e03a      	b.n	800aec0 <_printf_i+0xa8>
 800ae4a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ae4e:	2b15      	cmp	r3, #21
 800ae50:	d8f6      	bhi.n	800ae40 <_printf_i+0x28>
 800ae52:	a101      	add	r1, pc, #4	@ (adr r1, 800ae58 <_printf_i+0x40>)
 800ae54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ae58:	0800aeb1 	.word	0x0800aeb1
 800ae5c:	0800aec5 	.word	0x0800aec5
 800ae60:	0800ae41 	.word	0x0800ae41
 800ae64:	0800ae41 	.word	0x0800ae41
 800ae68:	0800ae41 	.word	0x0800ae41
 800ae6c:	0800ae41 	.word	0x0800ae41
 800ae70:	0800aec5 	.word	0x0800aec5
 800ae74:	0800ae41 	.word	0x0800ae41
 800ae78:	0800ae41 	.word	0x0800ae41
 800ae7c:	0800ae41 	.word	0x0800ae41
 800ae80:	0800ae41 	.word	0x0800ae41
 800ae84:	0800afc5 	.word	0x0800afc5
 800ae88:	0800aeef 	.word	0x0800aeef
 800ae8c:	0800af7f 	.word	0x0800af7f
 800ae90:	0800ae41 	.word	0x0800ae41
 800ae94:	0800ae41 	.word	0x0800ae41
 800ae98:	0800afe7 	.word	0x0800afe7
 800ae9c:	0800ae41 	.word	0x0800ae41
 800aea0:	0800aeef 	.word	0x0800aeef
 800aea4:	0800ae41 	.word	0x0800ae41
 800aea8:	0800ae41 	.word	0x0800ae41
 800aeac:	0800af87 	.word	0x0800af87
 800aeb0:	6833      	ldr	r3, [r6, #0]
 800aeb2:	1d1a      	adds	r2, r3, #4
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	6032      	str	r2, [r6, #0]
 800aeb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800aebc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800aec0:	2301      	movs	r3, #1
 800aec2:	e09d      	b.n	800b000 <_printf_i+0x1e8>
 800aec4:	6833      	ldr	r3, [r6, #0]
 800aec6:	6820      	ldr	r0, [r4, #0]
 800aec8:	1d19      	adds	r1, r3, #4
 800aeca:	6031      	str	r1, [r6, #0]
 800aecc:	0606      	lsls	r6, r0, #24
 800aece:	d501      	bpl.n	800aed4 <_printf_i+0xbc>
 800aed0:	681d      	ldr	r5, [r3, #0]
 800aed2:	e003      	b.n	800aedc <_printf_i+0xc4>
 800aed4:	0645      	lsls	r5, r0, #25
 800aed6:	d5fb      	bpl.n	800aed0 <_printf_i+0xb8>
 800aed8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800aedc:	2d00      	cmp	r5, #0
 800aede:	da03      	bge.n	800aee8 <_printf_i+0xd0>
 800aee0:	232d      	movs	r3, #45	@ 0x2d
 800aee2:	426d      	negs	r5, r5
 800aee4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aee8:	4859      	ldr	r0, [pc, #356]	@ (800b050 <_printf_i+0x238>)
 800aeea:	230a      	movs	r3, #10
 800aeec:	e011      	b.n	800af12 <_printf_i+0xfa>
 800aeee:	6821      	ldr	r1, [r4, #0]
 800aef0:	6833      	ldr	r3, [r6, #0]
 800aef2:	0608      	lsls	r0, r1, #24
 800aef4:	f853 5b04 	ldr.w	r5, [r3], #4
 800aef8:	d402      	bmi.n	800af00 <_printf_i+0xe8>
 800aefa:	0649      	lsls	r1, r1, #25
 800aefc:	bf48      	it	mi
 800aefe:	b2ad      	uxthmi	r5, r5
 800af00:	2f6f      	cmp	r7, #111	@ 0x6f
 800af02:	4853      	ldr	r0, [pc, #332]	@ (800b050 <_printf_i+0x238>)
 800af04:	6033      	str	r3, [r6, #0]
 800af06:	bf14      	ite	ne
 800af08:	230a      	movne	r3, #10
 800af0a:	2308      	moveq	r3, #8
 800af0c:	2100      	movs	r1, #0
 800af0e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800af12:	6866      	ldr	r6, [r4, #4]
 800af14:	60a6      	str	r6, [r4, #8]
 800af16:	2e00      	cmp	r6, #0
 800af18:	bfa2      	ittt	ge
 800af1a:	6821      	ldrge	r1, [r4, #0]
 800af1c:	f021 0104 	bicge.w	r1, r1, #4
 800af20:	6021      	strge	r1, [r4, #0]
 800af22:	b90d      	cbnz	r5, 800af28 <_printf_i+0x110>
 800af24:	2e00      	cmp	r6, #0
 800af26:	d04b      	beq.n	800afc0 <_printf_i+0x1a8>
 800af28:	4616      	mov	r6, r2
 800af2a:	fbb5 f1f3 	udiv	r1, r5, r3
 800af2e:	fb03 5711 	mls	r7, r3, r1, r5
 800af32:	5dc7      	ldrb	r7, [r0, r7]
 800af34:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800af38:	462f      	mov	r7, r5
 800af3a:	42bb      	cmp	r3, r7
 800af3c:	460d      	mov	r5, r1
 800af3e:	d9f4      	bls.n	800af2a <_printf_i+0x112>
 800af40:	2b08      	cmp	r3, #8
 800af42:	d10b      	bne.n	800af5c <_printf_i+0x144>
 800af44:	6823      	ldr	r3, [r4, #0]
 800af46:	07df      	lsls	r7, r3, #31
 800af48:	d508      	bpl.n	800af5c <_printf_i+0x144>
 800af4a:	6923      	ldr	r3, [r4, #16]
 800af4c:	6861      	ldr	r1, [r4, #4]
 800af4e:	4299      	cmp	r1, r3
 800af50:	bfde      	ittt	le
 800af52:	2330      	movle	r3, #48	@ 0x30
 800af54:	f806 3c01 	strble.w	r3, [r6, #-1]
 800af58:	f106 36ff 	addle.w	r6, r6, #4294967295
 800af5c:	1b92      	subs	r2, r2, r6
 800af5e:	6122      	str	r2, [r4, #16]
 800af60:	f8cd a000 	str.w	sl, [sp]
 800af64:	464b      	mov	r3, r9
 800af66:	aa03      	add	r2, sp, #12
 800af68:	4621      	mov	r1, r4
 800af6a:	4640      	mov	r0, r8
 800af6c:	f7ff fee6 	bl	800ad3c <_printf_common>
 800af70:	3001      	adds	r0, #1
 800af72:	d14a      	bne.n	800b00a <_printf_i+0x1f2>
 800af74:	f04f 30ff 	mov.w	r0, #4294967295
 800af78:	b004      	add	sp, #16
 800af7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af7e:	6823      	ldr	r3, [r4, #0]
 800af80:	f043 0320 	orr.w	r3, r3, #32
 800af84:	6023      	str	r3, [r4, #0]
 800af86:	4833      	ldr	r0, [pc, #204]	@ (800b054 <_printf_i+0x23c>)
 800af88:	2778      	movs	r7, #120	@ 0x78
 800af8a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800af8e:	6823      	ldr	r3, [r4, #0]
 800af90:	6831      	ldr	r1, [r6, #0]
 800af92:	061f      	lsls	r7, r3, #24
 800af94:	f851 5b04 	ldr.w	r5, [r1], #4
 800af98:	d402      	bmi.n	800afa0 <_printf_i+0x188>
 800af9a:	065f      	lsls	r7, r3, #25
 800af9c:	bf48      	it	mi
 800af9e:	b2ad      	uxthmi	r5, r5
 800afa0:	6031      	str	r1, [r6, #0]
 800afa2:	07d9      	lsls	r1, r3, #31
 800afa4:	bf44      	itt	mi
 800afa6:	f043 0320 	orrmi.w	r3, r3, #32
 800afaa:	6023      	strmi	r3, [r4, #0]
 800afac:	b11d      	cbz	r5, 800afb6 <_printf_i+0x19e>
 800afae:	2310      	movs	r3, #16
 800afb0:	e7ac      	b.n	800af0c <_printf_i+0xf4>
 800afb2:	4827      	ldr	r0, [pc, #156]	@ (800b050 <_printf_i+0x238>)
 800afb4:	e7e9      	b.n	800af8a <_printf_i+0x172>
 800afb6:	6823      	ldr	r3, [r4, #0]
 800afb8:	f023 0320 	bic.w	r3, r3, #32
 800afbc:	6023      	str	r3, [r4, #0]
 800afbe:	e7f6      	b.n	800afae <_printf_i+0x196>
 800afc0:	4616      	mov	r6, r2
 800afc2:	e7bd      	b.n	800af40 <_printf_i+0x128>
 800afc4:	6833      	ldr	r3, [r6, #0]
 800afc6:	6825      	ldr	r5, [r4, #0]
 800afc8:	6961      	ldr	r1, [r4, #20]
 800afca:	1d18      	adds	r0, r3, #4
 800afcc:	6030      	str	r0, [r6, #0]
 800afce:	062e      	lsls	r6, r5, #24
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	d501      	bpl.n	800afd8 <_printf_i+0x1c0>
 800afd4:	6019      	str	r1, [r3, #0]
 800afd6:	e002      	b.n	800afde <_printf_i+0x1c6>
 800afd8:	0668      	lsls	r0, r5, #25
 800afda:	d5fb      	bpl.n	800afd4 <_printf_i+0x1bc>
 800afdc:	8019      	strh	r1, [r3, #0]
 800afde:	2300      	movs	r3, #0
 800afe0:	6123      	str	r3, [r4, #16]
 800afe2:	4616      	mov	r6, r2
 800afe4:	e7bc      	b.n	800af60 <_printf_i+0x148>
 800afe6:	6833      	ldr	r3, [r6, #0]
 800afe8:	1d1a      	adds	r2, r3, #4
 800afea:	6032      	str	r2, [r6, #0]
 800afec:	681e      	ldr	r6, [r3, #0]
 800afee:	6862      	ldr	r2, [r4, #4]
 800aff0:	2100      	movs	r1, #0
 800aff2:	4630      	mov	r0, r6
 800aff4:	f7f5 f924 	bl	8000240 <memchr>
 800aff8:	b108      	cbz	r0, 800affe <_printf_i+0x1e6>
 800affa:	1b80      	subs	r0, r0, r6
 800affc:	6060      	str	r0, [r4, #4]
 800affe:	6863      	ldr	r3, [r4, #4]
 800b000:	6123      	str	r3, [r4, #16]
 800b002:	2300      	movs	r3, #0
 800b004:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b008:	e7aa      	b.n	800af60 <_printf_i+0x148>
 800b00a:	6923      	ldr	r3, [r4, #16]
 800b00c:	4632      	mov	r2, r6
 800b00e:	4649      	mov	r1, r9
 800b010:	4640      	mov	r0, r8
 800b012:	47d0      	blx	sl
 800b014:	3001      	adds	r0, #1
 800b016:	d0ad      	beq.n	800af74 <_printf_i+0x15c>
 800b018:	6823      	ldr	r3, [r4, #0]
 800b01a:	079b      	lsls	r3, r3, #30
 800b01c:	d413      	bmi.n	800b046 <_printf_i+0x22e>
 800b01e:	68e0      	ldr	r0, [r4, #12]
 800b020:	9b03      	ldr	r3, [sp, #12]
 800b022:	4298      	cmp	r0, r3
 800b024:	bfb8      	it	lt
 800b026:	4618      	movlt	r0, r3
 800b028:	e7a6      	b.n	800af78 <_printf_i+0x160>
 800b02a:	2301      	movs	r3, #1
 800b02c:	4632      	mov	r2, r6
 800b02e:	4649      	mov	r1, r9
 800b030:	4640      	mov	r0, r8
 800b032:	47d0      	blx	sl
 800b034:	3001      	adds	r0, #1
 800b036:	d09d      	beq.n	800af74 <_printf_i+0x15c>
 800b038:	3501      	adds	r5, #1
 800b03a:	68e3      	ldr	r3, [r4, #12]
 800b03c:	9903      	ldr	r1, [sp, #12]
 800b03e:	1a5b      	subs	r3, r3, r1
 800b040:	42ab      	cmp	r3, r5
 800b042:	dcf2      	bgt.n	800b02a <_printf_i+0x212>
 800b044:	e7eb      	b.n	800b01e <_printf_i+0x206>
 800b046:	2500      	movs	r5, #0
 800b048:	f104 0619 	add.w	r6, r4, #25
 800b04c:	e7f5      	b.n	800b03a <_printf_i+0x222>
 800b04e:	bf00      	nop
 800b050:	08015f73 	.word	0x08015f73
 800b054:	08015f84 	.word	0x08015f84

0800b058 <std>:
 800b058:	2300      	movs	r3, #0
 800b05a:	b510      	push	{r4, lr}
 800b05c:	4604      	mov	r4, r0
 800b05e:	e9c0 3300 	strd	r3, r3, [r0]
 800b062:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b066:	6083      	str	r3, [r0, #8]
 800b068:	8181      	strh	r1, [r0, #12]
 800b06a:	6643      	str	r3, [r0, #100]	@ 0x64
 800b06c:	81c2      	strh	r2, [r0, #14]
 800b06e:	6183      	str	r3, [r0, #24]
 800b070:	4619      	mov	r1, r3
 800b072:	2208      	movs	r2, #8
 800b074:	305c      	adds	r0, #92	@ 0x5c
 800b076:	f000 f92d 	bl	800b2d4 <memset>
 800b07a:	4b0d      	ldr	r3, [pc, #52]	@ (800b0b0 <std+0x58>)
 800b07c:	6263      	str	r3, [r4, #36]	@ 0x24
 800b07e:	4b0d      	ldr	r3, [pc, #52]	@ (800b0b4 <std+0x5c>)
 800b080:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b082:	4b0d      	ldr	r3, [pc, #52]	@ (800b0b8 <std+0x60>)
 800b084:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b086:	4b0d      	ldr	r3, [pc, #52]	@ (800b0bc <std+0x64>)
 800b088:	6323      	str	r3, [r4, #48]	@ 0x30
 800b08a:	4b0d      	ldr	r3, [pc, #52]	@ (800b0c0 <std+0x68>)
 800b08c:	6224      	str	r4, [r4, #32]
 800b08e:	429c      	cmp	r4, r3
 800b090:	d006      	beq.n	800b0a0 <std+0x48>
 800b092:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b096:	4294      	cmp	r4, r2
 800b098:	d002      	beq.n	800b0a0 <std+0x48>
 800b09a:	33d0      	adds	r3, #208	@ 0xd0
 800b09c:	429c      	cmp	r4, r3
 800b09e:	d105      	bne.n	800b0ac <std+0x54>
 800b0a0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b0a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b0a8:	f000 b9ce 	b.w	800b448 <__retarget_lock_init_recursive>
 800b0ac:	bd10      	pop	{r4, pc}
 800b0ae:	bf00      	nop
 800b0b0:	0800b1dd 	.word	0x0800b1dd
 800b0b4:	0800b1ff 	.word	0x0800b1ff
 800b0b8:	0800b237 	.word	0x0800b237
 800b0bc:	0800b25b 	.word	0x0800b25b
 800b0c0:	20005ce4 	.word	0x20005ce4

0800b0c4 <stdio_exit_handler>:
 800b0c4:	4a02      	ldr	r2, [pc, #8]	@ (800b0d0 <stdio_exit_handler+0xc>)
 800b0c6:	4903      	ldr	r1, [pc, #12]	@ (800b0d4 <stdio_exit_handler+0x10>)
 800b0c8:	4803      	ldr	r0, [pc, #12]	@ (800b0d8 <stdio_exit_handler+0x14>)
 800b0ca:	f000 b869 	b.w	800b1a0 <_fwalk_sglue>
 800b0ce:	bf00      	nop
 800b0d0:	2000005c 	.word	0x2000005c
 800b0d4:	0800d705 	.word	0x0800d705
 800b0d8:	200001d8 	.word	0x200001d8

0800b0dc <cleanup_stdio>:
 800b0dc:	6841      	ldr	r1, [r0, #4]
 800b0de:	4b0c      	ldr	r3, [pc, #48]	@ (800b110 <cleanup_stdio+0x34>)
 800b0e0:	4299      	cmp	r1, r3
 800b0e2:	b510      	push	{r4, lr}
 800b0e4:	4604      	mov	r4, r0
 800b0e6:	d001      	beq.n	800b0ec <cleanup_stdio+0x10>
 800b0e8:	f002 fb0c 	bl	800d704 <_fflush_r>
 800b0ec:	68a1      	ldr	r1, [r4, #8]
 800b0ee:	4b09      	ldr	r3, [pc, #36]	@ (800b114 <cleanup_stdio+0x38>)
 800b0f0:	4299      	cmp	r1, r3
 800b0f2:	d002      	beq.n	800b0fa <cleanup_stdio+0x1e>
 800b0f4:	4620      	mov	r0, r4
 800b0f6:	f002 fb05 	bl	800d704 <_fflush_r>
 800b0fa:	68e1      	ldr	r1, [r4, #12]
 800b0fc:	4b06      	ldr	r3, [pc, #24]	@ (800b118 <cleanup_stdio+0x3c>)
 800b0fe:	4299      	cmp	r1, r3
 800b100:	d004      	beq.n	800b10c <cleanup_stdio+0x30>
 800b102:	4620      	mov	r0, r4
 800b104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b108:	f002 bafc 	b.w	800d704 <_fflush_r>
 800b10c:	bd10      	pop	{r4, pc}
 800b10e:	bf00      	nop
 800b110:	20005ce4 	.word	0x20005ce4
 800b114:	20005d4c 	.word	0x20005d4c
 800b118:	20005db4 	.word	0x20005db4

0800b11c <global_stdio_init.part.0>:
 800b11c:	b510      	push	{r4, lr}
 800b11e:	4b0b      	ldr	r3, [pc, #44]	@ (800b14c <global_stdio_init.part.0+0x30>)
 800b120:	4c0b      	ldr	r4, [pc, #44]	@ (800b150 <global_stdio_init.part.0+0x34>)
 800b122:	4a0c      	ldr	r2, [pc, #48]	@ (800b154 <global_stdio_init.part.0+0x38>)
 800b124:	601a      	str	r2, [r3, #0]
 800b126:	4620      	mov	r0, r4
 800b128:	2200      	movs	r2, #0
 800b12a:	2104      	movs	r1, #4
 800b12c:	f7ff ff94 	bl	800b058 <std>
 800b130:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b134:	2201      	movs	r2, #1
 800b136:	2109      	movs	r1, #9
 800b138:	f7ff ff8e 	bl	800b058 <std>
 800b13c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b140:	2202      	movs	r2, #2
 800b142:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b146:	2112      	movs	r1, #18
 800b148:	f7ff bf86 	b.w	800b058 <std>
 800b14c:	20005e1c 	.word	0x20005e1c
 800b150:	20005ce4 	.word	0x20005ce4
 800b154:	0800b0c5 	.word	0x0800b0c5

0800b158 <__sfp_lock_acquire>:
 800b158:	4801      	ldr	r0, [pc, #4]	@ (800b160 <__sfp_lock_acquire+0x8>)
 800b15a:	f000 b976 	b.w	800b44a <__retarget_lock_acquire_recursive>
 800b15e:	bf00      	nop
 800b160:	20005e25 	.word	0x20005e25

0800b164 <__sfp_lock_release>:
 800b164:	4801      	ldr	r0, [pc, #4]	@ (800b16c <__sfp_lock_release+0x8>)
 800b166:	f000 b971 	b.w	800b44c <__retarget_lock_release_recursive>
 800b16a:	bf00      	nop
 800b16c:	20005e25 	.word	0x20005e25

0800b170 <__sinit>:
 800b170:	b510      	push	{r4, lr}
 800b172:	4604      	mov	r4, r0
 800b174:	f7ff fff0 	bl	800b158 <__sfp_lock_acquire>
 800b178:	6a23      	ldr	r3, [r4, #32]
 800b17a:	b11b      	cbz	r3, 800b184 <__sinit+0x14>
 800b17c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b180:	f7ff bff0 	b.w	800b164 <__sfp_lock_release>
 800b184:	4b04      	ldr	r3, [pc, #16]	@ (800b198 <__sinit+0x28>)
 800b186:	6223      	str	r3, [r4, #32]
 800b188:	4b04      	ldr	r3, [pc, #16]	@ (800b19c <__sinit+0x2c>)
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d1f5      	bne.n	800b17c <__sinit+0xc>
 800b190:	f7ff ffc4 	bl	800b11c <global_stdio_init.part.0>
 800b194:	e7f2      	b.n	800b17c <__sinit+0xc>
 800b196:	bf00      	nop
 800b198:	0800b0dd 	.word	0x0800b0dd
 800b19c:	20005e1c 	.word	0x20005e1c

0800b1a0 <_fwalk_sglue>:
 800b1a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b1a4:	4607      	mov	r7, r0
 800b1a6:	4688      	mov	r8, r1
 800b1a8:	4614      	mov	r4, r2
 800b1aa:	2600      	movs	r6, #0
 800b1ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b1b0:	f1b9 0901 	subs.w	r9, r9, #1
 800b1b4:	d505      	bpl.n	800b1c2 <_fwalk_sglue+0x22>
 800b1b6:	6824      	ldr	r4, [r4, #0]
 800b1b8:	2c00      	cmp	r4, #0
 800b1ba:	d1f7      	bne.n	800b1ac <_fwalk_sglue+0xc>
 800b1bc:	4630      	mov	r0, r6
 800b1be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1c2:	89ab      	ldrh	r3, [r5, #12]
 800b1c4:	2b01      	cmp	r3, #1
 800b1c6:	d907      	bls.n	800b1d8 <_fwalk_sglue+0x38>
 800b1c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b1cc:	3301      	adds	r3, #1
 800b1ce:	d003      	beq.n	800b1d8 <_fwalk_sglue+0x38>
 800b1d0:	4629      	mov	r1, r5
 800b1d2:	4638      	mov	r0, r7
 800b1d4:	47c0      	blx	r8
 800b1d6:	4306      	orrs	r6, r0
 800b1d8:	3568      	adds	r5, #104	@ 0x68
 800b1da:	e7e9      	b.n	800b1b0 <_fwalk_sglue+0x10>

0800b1dc <__sread>:
 800b1dc:	b510      	push	{r4, lr}
 800b1de:	460c      	mov	r4, r1
 800b1e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1e4:	f000 f8e2 	bl	800b3ac <_read_r>
 800b1e8:	2800      	cmp	r0, #0
 800b1ea:	bfab      	itete	ge
 800b1ec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b1ee:	89a3      	ldrhlt	r3, [r4, #12]
 800b1f0:	181b      	addge	r3, r3, r0
 800b1f2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b1f6:	bfac      	ite	ge
 800b1f8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b1fa:	81a3      	strhlt	r3, [r4, #12]
 800b1fc:	bd10      	pop	{r4, pc}

0800b1fe <__swrite>:
 800b1fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b202:	461f      	mov	r7, r3
 800b204:	898b      	ldrh	r3, [r1, #12]
 800b206:	05db      	lsls	r3, r3, #23
 800b208:	4605      	mov	r5, r0
 800b20a:	460c      	mov	r4, r1
 800b20c:	4616      	mov	r6, r2
 800b20e:	d505      	bpl.n	800b21c <__swrite+0x1e>
 800b210:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b214:	2302      	movs	r3, #2
 800b216:	2200      	movs	r2, #0
 800b218:	f000 f8b6 	bl	800b388 <_lseek_r>
 800b21c:	89a3      	ldrh	r3, [r4, #12]
 800b21e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b222:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b226:	81a3      	strh	r3, [r4, #12]
 800b228:	4632      	mov	r2, r6
 800b22a:	463b      	mov	r3, r7
 800b22c:	4628      	mov	r0, r5
 800b22e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b232:	f000 b8cd 	b.w	800b3d0 <_write_r>

0800b236 <__sseek>:
 800b236:	b510      	push	{r4, lr}
 800b238:	460c      	mov	r4, r1
 800b23a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b23e:	f000 f8a3 	bl	800b388 <_lseek_r>
 800b242:	1c43      	adds	r3, r0, #1
 800b244:	89a3      	ldrh	r3, [r4, #12]
 800b246:	bf15      	itete	ne
 800b248:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b24a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b24e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b252:	81a3      	strheq	r3, [r4, #12]
 800b254:	bf18      	it	ne
 800b256:	81a3      	strhne	r3, [r4, #12]
 800b258:	bd10      	pop	{r4, pc}

0800b25a <__sclose>:
 800b25a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b25e:	f000 b883 	b.w	800b368 <_close_r>

0800b262 <_vsniprintf_r>:
 800b262:	b530      	push	{r4, r5, lr}
 800b264:	4614      	mov	r4, r2
 800b266:	2c00      	cmp	r4, #0
 800b268:	b09b      	sub	sp, #108	@ 0x6c
 800b26a:	4605      	mov	r5, r0
 800b26c:	461a      	mov	r2, r3
 800b26e:	da05      	bge.n	800b27c <_vsniprintf_r+0x1a>
 800b270:	238b      	movs	r3, #139	@ 0x8b
 800b272:	6003      	str	r3, [r0, #0]
 800b274:	f04f 30ff 	mov.w	r0, #4294967295
 800b278:	b01b      	add	sp, #108	@ 0x6c
 800b27a:	bd30      	pop	{r4, r5, pc}
 800b27c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b280:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b284:	bf14      	ite	ne
 800b286:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b28a:	4623      	moveq	r3, r4
 800b28c:	9302      	str	r3, [sp, #8]
 800b28e:	9305      	str	r3, [sp, #20]
 800b290:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b294:	9100      	str	r1, [sp, #0]
 800b296:	9104      	str	r1, [sp, #16]
 800b298:	f8ad 300e 	strh.w	r3, [sp, #14]
 800b29c:	4669      	mov	r1, sp
 800b29e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800b2a0:	f002 f8b0 	bl	800d404 <_svfiprintf_r>
 800b2a4:	1c43      	adds	r3, r0, #1
 800b2a6:	bfbc      	itt	lt
 800b2a8:	238b      	movlt	r3, #139	@ 0x8b
 800b2aa:	602b      	strlt	r3, [r5, #0]
 800b2ac:	2c00      	cmp	r4, #0
 800b2ae:	d0e3      	beq.n	800b278 <_vsniprintf_r+0x16>
 800b2b0:	9b00      	ldr	r3, [sp, #0]
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	701a      	strb	r2, [r3, #0]
 800b2b6:	e7df      	b.n	800b278 <_vsniprintf_r+0x16>

0800b2b8 <vsniprintf>:
 800b2b8:	b507      	push	{r0, r1, r2, lr}
 800b2ba:	9300      	str	r3, [sp, #0]
 800b2bc:	4613      	mov	r3, r2
 800b2be:	460a      	mov	r2, r1
 800b2c0:	4601      	mov	r1, r0
 800b2c2:	4803      	ldr	r0, [pc, #12]	@ (800b2d0 <vsniprintf+0x18>)
 800b2c4:	6800      	ldr	r0, [r0, #0]
 800b2c6:	f7ff ffcc 	bl	800b262 <_vsniprintf_r>
 800b2ca:	b003      	add	sp, #12
 800b2cc:	f85d fb04 	ldr.w	pc, [sp], #4
 800b2d0:	200001d4 	.word	0x200001d4

0800b2d4 <memset>:
 800b2d4:	4402      	add	r2, r0
 800b2d6:	4603      	mov	r3, r0
 800b2d8:	4293      	cmp	r3, r2
 800b2da:	d100      	bne.n	800b2de <memset+0xa>
 800b2dc:	4770      	bx	lr
 800b2de:	f803 1b01 	strb.w	r1, [r3], #1
 800b2e2:	e7f9      	b.n	800b2d8 <memset+0x4>

0800b2e4 <strncmp>:
 800b2e4:	b510      	push	{r4, lr}
 800b2e6:	b16a      	cbz	r2, 800b304 <strncmp+0x20>
 800b2e8:	3901      	subs	r1, #1
 800b2ea:	1884      	adds	r4, r0, r2
 800b2ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b2f0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b2f4:	429a      	cmp	r2, r3
 800b2f6:	d103      	bne.n	800b300 <strncmp+0x1c>
 800b2f8:	42a0      	cmp	r0, r4
 800b2fa:	d001      	beq.n	800b300 <strncmp+0x1c>
 800b2fc:	2a00      	cmp	r2, #0
 800b2fe:	d1f5      	bne.n	800b2ec <strncmp+0x8>
 800b300:	1ad0      	subs	r0, r2, r3
 800b302:	bd10      	pop	{r4, pc}
 800b304:	4610      	mov	r0, r2
 800b306:	e7fc      	b.n	800b302 <strncmp+0x1e>

0800b308 <__strtok_r>:
 800b308:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b30a:	4604      	mov	r4, r0
 800b30c:	b908      	cbnz	r0, 800b312 <__strtok_r+0xa>
 800b30e:	6814      	ldr	r4, [r2, #0]
 800b310:	b144      	cbz	r4, 800b324 <__strtok_r+0x1c>
 800b312:	4620      	mov	r0, r4
 800b314:	f814 5b01 	ldrb.w	r5, [r4], #1
 800b318:	460f      	mov	r7, r1
 800b31a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800b31e:	b91e      	cbnz	r6, 800b328 <__strtok_r+0x20>
 800b320:	b965      	cbnz	r5, 800b33c <__strtok_r+0x34>
 800b322:	6015      	str	r5, [r2, #0]
 800b324:	2000      	movs	r0, #0
 800b326:	e005      	b.n	800b334 <__strtok_r+0x2c>
 800b328:	42b5      	cmp	r5, r6
 800b32a:	d1f6      	bne.n	800b31a <__strtok_r+0x12>
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d1f0      	bne.n	800b312 <__strtok_r+0xa>
 800b330:	6014      	str	r4, [r2, #0]
 800b332:	7003      	strb	r3, [r0, #0]
 800b334:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b336:	461c      	mov	r4, r3
 800b338:	e00c      	b.n	800b354 <__strtok_r+0x4c>
 800b33a:	b915      	cbnz	r5, 800b342 <__strtok_r+0x3a>
 800b33c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b340:	460e      	mov	r6, r1
 800b342:	f816 5b01 	ldrb.w	r5, [r6], #1
 800b346:	42ab      	cmp	r3, r5
 800b348:	d1f7      	bne.n	800b33a <__strtok_r+0x32>
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d0f3      	beq.n	800b336 <__strtok_r+0x2e>
 800b34e:	2300      	movs	r3, #0
 800b350:	f804 3c01 	strb.w	r3, [r4, #-1]
 800b354:	6014      	str	r4, [r2, #0]
 800b356:	e7ed      	b.n	800b334 <__strtok_r+0x2c>

0800b358 <strtok_r>:
 800b358:	2301      	movs	r3, #1
 800b35a:	f7ff bfd5 	b.w	800b308 <__strtok_r>
	...

0800b360 <_localeconv_r>:
 800b360:	4800      	ldr	r0, [pc, #0]	@ (800b364 <_localeconv_r+0x4>)
 800b362:	4770      	bx	lr
 800b364:	20000158 	.word	0x20000158

0800b368 <_close_r>:
 800b368:	b538      	push	{r3, r4, r5, lr}
 800b36a:	4d06      	ldr	r5, [pc, #24]	@ (800b384 <_close_r+0x1c>)
 800b36c:	2300      	movs	r3, #0
 800b36e:	4604      	mov	r4, r0
 800b370:	4608      	mov	r0, r1
 800b372:	602b      	str	r3, [r5, #0]
 800b374:	f7f8 fff4 	bl	8004360 <_close>
 800b378:	1c43      	adds	r3, r0, #1
 800b37a:	d102      	bne.n	800b382 <_close_r+0x1a>
 800b37c:	682b      	ldr	r3, [r5, #0]
 800b37e:	b103      	cbz	r3, 800b382 <_close_r+0x1a>
 800b380:	6023      	str	r3, [r4, #0]
 800b382:	bd38      	pop	{r3, r4, r5, pc}
 800b384:	20005e20 	.word	0x20005e20

0800b388 <_lseek_r>:
 800b388:	b538      	push	{r3, r4, r5, lr}
 800b38a:	4d07      	ldr	r5, [pc, #28]	@ (800b3a8 <_lseek_r+0x20>)
 800b38c:	4604      	mov	r4, r0
 800b38e:	4608      	mov	r0, r1
 800b390:	4611      	mov	r1, r2
 800b392:	2200      	movs	r2, #0
 800b394:	602a      	str	r2, [r5, #0]
 800b396:	461a      	mov	r2, r3
 800b398:	f7f8 ffec 	bl	8004374 <_lseek>
 800b39c:	1c43      	adds	r3, r0, #1
 800b39e:	d102      	bne.n	800b3a6 <_lseek_r+0x1e>
 800b3a0:	682b      	ldr	r3, [r5, #0]
 800b3a2:	b103      	cbz	r3, 800b3a6 <_lseek_r+0x1e>
 800b3a4:	6023      	str	r3, [r4, #0]
 800b3a6:	bd38      	pop	{r3, r4, r5, pc}
 800b3a8:	20005e20 	.word	0x20005e20

0800b3ac <_read_r>:
 800b3ac:	b538      	push	{r3, r4, r5, lr}
 800b3ae:	4d07      	ldr	r5, [pc, #28]	@ (800b3cc <_read_r+0x20>)
 800b3b0:	4604      	mov	r4, r0
 800b3b2:	4608      	mov	r0, r1
 800b3b4:	4611      	mov	r1, r2
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	602a      	str	r2, [r5, #0]
 800b3ba:	461a      	mov	r2, r3
 800b3bc:	f7f8 ffb4 	bl	8004328 <_read>
 800b3c0:	1c43      	adds	r3, r0, #1
 800b3c2:	d102      	bne.n	800b3ca <_read_r+0x1e>
 800b3c4:	682b      	ldr	r3, [r5, #0]
 800b3c6:	b103      	cbz	r3, 800b3ca <_read_r+0x1e>
 800b3c8:	6023      	str	r3, [r4, #0]
 800b3ca:	bd38      	pop	{r3, r4, r5, pc}
 800b3cc:	20005e20 	.word	0x20005e20

0800b3d0 <_write_r>:
 800b3d0:	b538      	push	{r3, r4, r5, lr}
 800b3d2:	4d07      	ldr	r5, [pc, #28]	@ (800b3f0 <_write_r+0x20>)
 800b3d4:	4604      	mov	r4, r0
 800b3d6:	4608      	mov	r0, r1
 800b3d8:	4611      	mov	r1, r2
 800b3da:	2200      	movs	r2, #0
 800b3dc:	602a      	str	r2, [r5, #0]
 800b3de:	461a      	mov	r2, r3
 800b3e0:	f7f8 ffb2 	bl	8004348 <_write>
 800b3e4:	1c43      	adds	r3, r0, #1
 800b3e6:	d102      	bne.n	800b3ee <_write_r+0x1e>
 800b3e8:	682b      	ldr	r3, [r5, #0]
 800b3ea:	b103      	cbz	r3, 800b3ee <_write_r+0x1e>
 800b3ec:	6023      	str	r3, [r4, #0]
 800b3ee:	bd38      	pop	{r3, r4, r5, pc}
 800b3f0:	20005e20 	.word	0x20005e20

0800b3f4 <__errno>:
 800b3f4:	4b01      	ldr	r3, [pc, #4]	@ (800b3fc <__errno+0x8>)
 800b3f6:	6818      	ldr	r0, [r3, #0]
 800b3f8:	4770      	bx	lr
 800b3fa:	bf00      	nop
 800b3fc:	200001d4 	.word	0x200001d4

0800b400 <__libc_init_array>:
 800b400:	b570      	push	{r4, r5, r6, lr}
 800b402:	4d0d      	ldr	r5, [pc, #52]	@ (800b438 <__libc_init_array+0x38>)
 800b404:	4c0d      	ldr	r4, [pc, #52]	@ (800b43c <__libc_init_array+0x3c>)
 800b406:	1b64      	subs	r4, r4, r5
 800b408:	10a4      	asrs	r4, r4, #2
 800b40a:	2600      	movs	r6, #0
 800b40c:	42a6      	cmp	r6, r4
 800b40e:	d109      	bne.n	800b424 <__libc_init_array+0x24>
 800b410:	4d0b      	ldr	r5, [pc, #44]	@ (800b440 <__libc_init_array+0x40>)
 800b412:	4c0c      	ldr	r4, [pc, #48]	@ (800b444 <__libc_init_array+0x44>)
 800b414:	f003 faac 	bl	800e970 <_init>
 800b418:	1b64      	subs	r4, r4, r5
 800b41a:	10a4      	asrs	r4, r4, #2
 800b41c:	2600      	movs	r6, #0
 800b41e:	42a6      	cmp	r6, r4
 800b420:	d105      	bne.n	800b42e <__libc_init_array+0x2e>
 800b422:	bd70      	pop	{r4, r5, r6, pc}
 800b424:	f855 3b04 	ldr.w	r3, [r5], #4
 800b428:	4798      	blx	r3
 800b42a:	3601      	adds	r6, #1
 800b42c:	e7ee      	b.n	800b40c <__libc_init_array+0xc>
 800b42e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b432:	4798      	blx	r3
 800b434:	3601      	adds	r6, #1
 800b436:	e7f2      	b.n	800b41e <__libc_init_array+0x1e>
 800b438:	08016618 	.word	0x08016618
 800b43c:	08016618 	.word	0x08016618
 800b440:	08016618 	.word	0x08016618
 800b444:	0801661c 	.word	0x0801661c

0800b448 <__retarget_lock_init_recursive>:
 800b448:	4770      	bx	lr

0800b44a <__retarget_lock_acquire_recursive>:
 800b44a:	4770      	bx	lr

0800b44c <__retarget_lock_release_recursive>:
 800b44c:	4770      	bx	lr

0800b44e <strcpy>:
 800b44e:	4603      	mov	r3, r0
 800b450:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b454:	f803 2b01 	strb.w	r2, [r3], #1
 800b458:	2a00      	cmp	r2, #0
 800b45a:	d1f9      	bne.n	800b450 <strcpy+0x2>
 800b45c:	4770      	bx	lr

0800b45e <memcpy>:
 800b45e:	440a      	add	r2, r1
 800b460:	4291      	cmp	r1, r2
 800b462:	f100 33ff 	add.w	r3, r0, #4294967295
 800b466:	d100      	bne.n	800b46a <memcpy+0xc>
 800b468:	4770      	bx	lr
 800b46a:	b510      	push	{r4, lr}
 800b46c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b470:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b474:	4291      	cmp	r1, r2
 800b476:	d1f9      	bne.n	800b46c <memcpy+0xe>
 800b478:	bd10      	pop	{r4, pc}
 800b47a:	0000      	movs	r0, r0
 800b47c:	0000      	movs	r0, r0
	...

0800b480 <nan>:
 800b480:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b488 <nan+0x8>
 800b484:	4770      	bx	lr
 800b486:	bf00      	nop
 800b488:	00000000 	.word	0x00000000
 800b48c:	7ff80000 	.word	0x7ff80000

0800b490 <nanf>:
 800b490:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b498 <nanf+0x8>
 800b494:	4770      	bx	lr
 800b496:	bf00      	nop
 800b498:	7fc00000 	.word	0x7fc00000

0800b49c <quorem>:
 800b49c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4a0:	6903      	ldr	r3, [r0, #16]
 800b4a2:	690c      	ldr	r4, [r1, #16]
 800b4a4:	42a3      	cmp	r3, r4
 800b4a6:	4607      	mov	r7, r0
 800b4a8:	db7e      	blt.n	800b5a8 <quorem+0x10c>
 800b4aa:	3c01      	subs	r4, #1
 800b4ac:	f101 0814 	add.w	r8, r1, #20
 800b4b0:	00a3      	lsls	r3, r4, #2
 800b4b2:	f100 0514 	add.w	r5, r0, #20
 800b4b6:	9300      	str	r3, [sp, #0]
 800b4b8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b4bc:	9301      	str	r3, [sp, #4]
 800b4be:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b4c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b4c6:	3301      	adds	r3, #1
 800b4c8:	429a      	cmp	r2, r3
 800b4ca:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b4ce:	fbb2 f6f3 	udiv	r6, r2, r3
 800b4d2:	d32e      	bcc.n	800b532 <quorem+0x96>
 800b4d4:	f04f 0a00 	mov.w	sl, #0
 800b4d8:	46c4      	mov	ip, r8
 800b4da:	46ae      	mov	lr, r5
 800b4dc:	46d3      	mov	fp, sl
 800b4de:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b4e2:	b298      	uxth	r0, r3
 800b4e4:	fb06 a000 	mla	r0, r6, r0, sl
 800b4e8:	0c02      	lsrs	r2, r0, #16
 800b4ea:	0c1b      	lsrs	r3, r3, #16
 800b4ec:	fb06 2303 	mla	r3, r6, r3, r2
 800b4f0:	f8de 2000 	ldr.w	r2, [lr]
 800b4f4:	b280      	uxth	r0, r0
 800b4f6:	b292      	uxth	r2, r2
 800b4f8:	1a12      	subs	r2, r2, r0
 800b4fa:	445a      	add	r2, fp
 800b4fc:	f8de 0000 	ldr.w	r0, [lr]
 800b500:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b504:	b29b      	uxth	r3, r3
 800b506:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b50a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b50e:	b292      	uxth	r2, r2
 800b510:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b514:	45e1      	cmp	r9, ip
 800b516:	f84e 2b04 	str.w	r2, [lr], #4
 800b51a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b51e:	d2de      	bcs.n	800b4de <quorem+0x42>
 800b520:	9b00      	ldr	r3, [sp, #0]
 800b522:	58eb      	ldr	r3, [r5, r3]
 800b524:	b92b      	cbnz	r3, 800b532 <quorem+0x96>
 800b526:	9b01      	ldr	r3, [sp, #4]
 800b528:	3b04      	subs	r3, #4
 800b52a:	429d      	cmp	r5, r3
 800b52c:	461a      	mov	r2, r3
 800b52e:	d32f      	bcc.n	800b590 <quorem+0xf4>
 800b530:	613c      	str	r4, [r7, #16]
 800b532:	4638      	mov	r0, r7
 800b534:	f001 fd10 	bl	800cf58 <__mcmp>
 800b538:	2800      	cmp	r0, #0
 800b53a:	db25      	blt.n	800b588 <quorem+0xec>
 800b53c:	4629      	mov	r1, r5
 800b53e:	2000      	movs	r0, #0
 800b540:	f858 2b04 	ldr.w	r2, [r8], #4
 800b544:	f8d1 c000 	ldr.w	ip, [r1]
 800b548:	fa1f fe82 	uxth.w	lr, r2
 800b54c:	fa1f f38c 	uxth.w	r3, ip
 800b550:	eba3 030e 	sub.w	r3, r3, lr
 800b554:	4403      	add	r3, r0
 800b556:	0c12      	lsrs	r2, r2, #16
 800b558:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b55c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b560:	b29b      	uxth	r3, r3
 800b562:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b566:	45c1      	cmp	r9, r8
 800b568:	f841 3b04 	str.w	r3, [r1], #4
 800b56c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b570:	d2e6      	bcs.n	800b540 <quorem+0xa4>
 800b572:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b576:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b57a:	b922      	cbnz	r2, 800b586 <quorem+0xea>
 800b57c:	3b04      	subs	r3, #4
 800b57e:	429d      	cmp	r5, r3
 800b580:	461a      	mov	r2, r3
 800b582:	d30b      	bcc.n	800b59c <quorem+0x100>
 800b584:	613c      	str	r4, [r7, #16]
 800b586:	3601      	adds	r6, #1
 800b588:	4630      	mov	r0, r6
 800b58a:	b003      	add	sp, #12
 800b58c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b590:	6812      	ldr	r2, [r2, #0]
 800b592:	3b04      	subs	r3, #4
 800b594:	2a00      	cmp	r2, #0
 800b596:	d1cb      	bne.n	800b530 <quorem+0x94>
 800b598:	3c01      	subs	r4, #1
 800b59a:	e7c6      	b.n	800b52a <quorem+0x8e>
 800b59c:	6812      	ldr	r2, [r2, #0]
 800b59e:	3b04      	subs	r3, #4
 800b5a0:	2a00      	cmp	r2, #0
 800b5a2:	d1ef      	bne.n	800b584 <quorem+0xe8>
 800b5a4:	3c01      	subs	r4, #1
 800b5a6:	e7ea      	b.n	800b57e <quorem+0xe2>
 800b5a8:	2000      	movs	r0, #0
 800b5aa:	e7ee      	b.n	800b58a <quorem+0xee>
 800b5ac:	0000      	movs	r0, r0
	...

0800b5b0 <_dtoa_r>:
 800b5b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5b4:	69c7      	ldr	r7, [r0, #28]
 800b5b6:	b099      	sub	sp, #100	@ 0x64
 800b5b8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b5bc:	ec55 4b10 	vmov	r4, r5, d0
 800b5c0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800b5c2:	9109      	str	r1, [sp, #36]	@ 0x24
 800b5c4:	4683      	mov	fp, r0
 800b5c6:	920e      	str	r2, [sp, #56]	@ 0x38
 800b5c8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b5ca:	b97f      	cbnz	r7, 800b5ec <_dtoa_r+0x3c>
 800b5cc:	2010      	movs	r0, #16
 800b5ce:	f001 f937 	bl	800c840 <malloc>
 800b5d2:	4602      	mov	r2, r0
 800b5d4:	f8cb 001c 	str.w	r0, [fp, #28]
 800b5d8:	b920      	cbnz	r0, 800b5e4 <_dtoa_r+0x34>
 800b5da:	4ba7      	ldr	r3, [pc, #668]	@ (800b878 <_dtoa_r+0x2c8>)
 800b5dc:	21ef      	movs	r1, #239	@ 0xef
 800b5de:	48a7      	ldr	r0, [pc, #668]	@ (800b87c <_dtoa_r+0x2cc>)
 800b5e0:	f002 f8e2 	bl	800d7a8 <__assert_func>
 800b5e4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b5e8:	6007      	str	r7, [r0, #0]
 800b5ea:	60c7      	str	r7, [r0, #12]
 800b5ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b5f0:	6819      	ldr	r1, [r3, #0]
 800b5f2:	b159      	cbz	r1, 800b60c <_dtoa_r+0x5c>
 800b5f4:	685a      	ldr	r2, [r3, #4]
 800b5f6:	604a      	str	r2, [r1, #4]
 800b5f8:	2301      	movs	r3, #1
 800b5fa:	4093      	lsls	r3, r2
 800b5fc:	608b      	str	r3, [r1, #8]
 800b5fe:	4658      	mov	r0, fp
 800b600:	f001 fa26 	bl	800ca50 <_Bfree>
 800b604:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b608:	2200      	movs	r2, #0
 800b60a:	601a      	str	r2, [r3, #0]
 800b60c:	1e2b      	subs	r3, r5, #0
 800b60e:	bfb9      	ittee	lt
 800b610:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b614:	9303      	strlt	r3, [sp, #12]
 800b616:	2300      	movge	r3, #0
 800b618:	6033      	strge	r3, [r6, #0]
 800b61a:	9f03      	ldr	r7, [sp, #12]
 800b61c:	4b98      	ldr	r3, [pc, #608]	@ (800b880 <_dtoa_r+0x2d0>)
 800b61e:	bfbc      	itt	lt
 800b620:	2201      	movlt	r2, #1
 800b622:	6032      	strlt	r2, [r6, #0]
 800b624:	43bb      	bics	r3, r7
 800b626:	d112      	bne.n	800b64e <_dtoa_r+0x9e>
 800b628:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b62a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b62e:	6013      	str	r3, [r2, #0]
 800b630:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b634:	4323      	orrs	r3, r4
 800b636:	f000 854d 	beq.w	800c0d4 <_dtoa_r+0xb24>
 800b63a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b63c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800b894 <_dtoa_r+0x2e4>
 800b640:	2b00      	cmp	r3, #0
 800b642:	f000 854f 	beq.w	800c0e4 <_dtoa_r+0xb34>
 800b646:	f10a 0303 	add.w	r3, sl, #3
 800b64a:	f000 bd49 	b.w	800c0e0 <_dtoa_r+0xb30>
 800b64e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b652:	2200      	movs	r2, #0
 800b654:	ec51 0b17 	vmov	r0, r1, d7
 800b658:	2300      	movs	r3, #0
 800b65a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b65e:	f7f5 fa6b 	bl	8000b38 <__aeabi_dcmpeq>
 800b662:	4680      	mov	r8, r0
 800b664:	b158      	cbz	r0, 800b67e <_dtoa_r+0xce>
 800b666:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b668:	2301      	movs	r3, #1
 800b66a:	6013      	str	r3, [r2, #0]
 800b66c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b66e:	b113      	cbz	r3, 800b676 <_dtoa_r+0xc6>
 800b670:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b672:	4b84      	ldr	r3, [pc, #528]	@ (800b884 <_dtoa_r+0x2d4>)
 800b674:	6013      	str	r3, [r2, #0]
 800b676:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800b898 <_dtoa_r+0x2e8>
 800b67a:	f000 bd33 	b.w	800c0e4 <_dtoa_r+0xb34>
 800b67e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b682:	aa16      	add	r2, sp, #88	@ 0x58
 800b684:	a917      	add	r1, sp, #92	@ 0x5c
 800b686:	4658      	mov	r0, fp
 800b688:	f001 fd86 	bl	800d198 <__d2b>
 800b68c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b690:	4681      	mov	r9, r0
 800b692:	2e00      	cmp	r6, #0
 800b694:	d077      	beq.n	800b786 <_dtoa_r+0x1d6>
 800b696:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b698:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b69c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b6a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b6a4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b6a8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b6ac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b6b0:	4619      	mov	r1, r3
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	4b74      	ldr	r3, [pc, #464]	@ (800b888 <_dtoa_r+0x2d8>)
 800b6b6:	f7f4 fe1f 	bl	80002f8 <__aeabi_dsub>
 800b6ba:	a369      	add	r3, pc, #420	@ (adr r3, 800b860 <_dtoa_r+0x2b0>)
 800b6bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6c0:	f7f4 ffd2 	bl	8000668 <__aeabi_dmul>
 800b6c4:	a368      	add	r3, pc, #416	@ (adr r3, 800b868 <_dtoa_r+0x2b8>)
 800b6c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ca:	f7f4 fe17 	bl	80002fc <__adddf3>
 800b6ce:	4604      	mov	r4, r0
 800b6d0:	4630      	mov	r0, r6
 800b6d2:	460d      	mov	r5, r1
 800b6d4:	f7f4 ff5e 	bl	8000594 <__aeabi_i2d>
 800b6d8:	a365      	add	r3, pc, #404	@ (adr r3, 800b870 <_dtoa_r+0x2c0>)
 800b6da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6de:	f7f4 ffc3 	bl	8000668 <__aeabi_dmul>
 800b6e2:	4602      	mov	r2, r0
 800b6e4:	460b      	mov	r3, r1
 800b6e6:	4620      	mov	r0, r4
 800b6e8:	4629      	mov	r1, r5
 800b6ea:	f7f4 fe07 	bl	80002fc <__adddf3>
 800b6ee:	4604      	mov	r4, r0
 800b6f0:	460d      	mov	r5, r1
 800b6f2:	f7f5 fa69 	bl	8000bc8 <__aeabi_d2iz>
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	4607      	mov	r7, r0
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	4620      	mov	r0, r4
 800b6fe:	4629      	mov	r1, r5
 800b700:	f7f5 fa24 	bl	8000b4c <__aeabi_dcmplt>
 800b704:	b140      	cbz	r0, 800b718 <_dtoa_r+0x168>
 800b706:	4638      	mov	r0, r7
 800b708:	f7f4 ff44 	bl	8000594 <__aeabi_i2d>
 800b70c:	4622      	mov	r2, r4
 800b70e:	462b      	mov	r3, r5
 800b710:	f7f5 fa12 	bl	8000b38 <__aeabi_dcmpeq>
 800b714:	b900      	cbnz	r0, 800b718 <_dtoa_r+0x168>
 800b716:	3f01      	subs	r7, #1
 800b718:	2f16      	cmp	r7, #22
 800b71a:	d851      	bhi.n	800b7c0 <_dtoa_r+0x210>
 800b71c:	4b5b      	ldr	r3, [pc, #364]	@ (800b88c <_dtoa_r+0x2dc>)
 800b71e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b722:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b726:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b72a:	f7f5 fa0f 	bl	8000b4c <__aeabi_dcmplt>
 800b72e:	2800      	cmp	r0, #0
 800b730:	d048      	beq.n	800b7c4 <_dtoa_r+0x214>
 800b732:	3f01      	subs	r7, #1
 800b734:	2300      	movs	r3, #0
 800b736:	9312      	str	r3, [sp, #72]	@ 0x48
 800b738:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b73a:	1b9b      	subs	r3, r3, r6
 800b73c:	1e5a      	subs	r2, r3, #1
 800b73e:	bf44      	itt	mi
 800b740:	f1c3 0801 	rsbmi	r8, r3, #1
 800b744:	2300      	movmi	r3, #0
 800b746:	9208      	str	r2, [sp, #32]
 800b748:	bf54      	ite	pl
 800b74a:	f04f 0800 	movpl.w	r8, #0
 800b74e:	9308      	strmi	r3, [sp, #32]
 800b750:	2f00      	cmp	r7, #0
 800b752:	db39      	blt.n	800b7c8 <_dtoa_r+0x218>
 800b754:	9b08      	ldr	r3, [sp, #32]
 800b756:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b758:	443b      	add	r3, r7
 800b75a:	9308      	str	r3, [sp, #32]
 800b75c:	2300      	movs	r3, #0
 800b75e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b760:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b762:	2b09      	cmp	r3, #9
 800b764:	d864      	bhi.n	800b830 <_dtoa_r+0x280>
 800b766:	2b05      	cmp	r3, #5
 800b768:	bfc4      	itt	gt
 800b76a:	3b04      	subgt	r3, #4
 800b76c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800b76e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b770:	f1a3 0302 	sub.w	r3, r3, #2
 800b774:	bfcc      	ite	gt
 800b776:	2400      	movgt	r4, #0
 800b778:	2401      	movle	r4, #1
 800b77a:	2b03      	cmp	r3, #3
 800b77c:	d863      	bhi.n	800b846 <_dtoa_r+0x296>
 800b77e:	e8df f003 	tbb	[pc, r3]
 800b782:	372a      	.short	0x372a
 800b784:	5535      	.short	0x5535
 800b786:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800b78a:	441e      	add	r6, r3
 800b78c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b790:	2b20      	cmp	r3, #32
 800b792:	bfc1      	itttt	gt
 800b794:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b798:	409f      	lslgt	r7, r3
 800b79a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b79e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b7a2:	bfd6      	itet	le
 800b7a4:	f1c3 0320 	rsble	r3, r3, #32
 800b7a8:	ea47 0003 	orrgt.w	r0, r7, r3
 800b7ac:	fa04 f003 	lslle.w	r0, r4, r3
 800b7b0:	f7f4 fee0 	bl	8000574 <__aeabi_ui2d>
 800b7b4:	2201      	movs	r2, #1
 800b7b6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b7ba:	3e01      	subs	r6, #1
 800b7bc:	9214      	str	r2, [sp, #80]	@ 0x50
 800b7be:	e777      	b.n	800b6b0 <_dtoa_r+0x100>
 800b7c0:	2301      	movs	r3, #1
 800b7c2:	e7b8      	b.n	800b736 <_dtoa_r+0x186>
 800b7c4:	9012      	str	r0, [sp, #72]	@ 0x48
 800b7c6:	e7b7      	b.n	800b738 <_dtoa_r+0x188>
 800b7c8:	427b      	negs	r3, r7
 800b7ca:	930a      	str	r3, [sp, #40]	@ 0x28
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	eba8 0807 	sub.w	r8, r8, r7
 800b7d2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b7d4:	e7c4      	b.n	800b760 <_dtoa_r+0x1b0>
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b7da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	dc35      	bgt.n	800b84c <_dtoa_r+0x29c>
 800b7e0:	2301      	movs	r3, #1
 800b7e2:	9300      	str	r3, [sp, #0]
 800b7e4:	9307      	str	r3, [sp, #28]
 800b7e6:	461a      	mov	r2, r3
 800b7e8:	920e      	str	r2, [sp, #56]	@ 0x38
 800b7ea:	e00b      	b.n	800b804 <_dtoa_r+0x254>
 800b7ec:	2301      	movs	r3, #1
 800b7ee:	e7f3      	b.n	800b7d8 <_dtoa_r+0x228>
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b7f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b7f6:	18fb      	adds	r3, r7, r3
 800b7f8:	9300      	str	r3, [sp, #0]
 800b7fa:	3301      	adds	r3, #1
 800b7fc:	2b01      	cmp	r3, #1
 800b7fe:	9307      	str	r3, [sp, #28]
 800b800:	bfb8      	it	lt
 800b802:	2301      	movlt	r3, #1
 800b804:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b808:	2100      	movs	r1, #0
 800b80a:	2204      	movs	r2, #4
 800b80c:	f102 0514 	add.w	r5, r2, #20
 800b810:	429d      	cmp	r5, r3
 800b812:	d91f      	bls.n	800b854 <_dtoa_r+0x2a4>
 800b814:	6041      	str	r1, [r0, #4]
 800b816:	4658      	mov	r0, fp
 800b818:	f001 f8da 	bl	800c9d0 <_Balloc>
 800b81c:	4682      	mov	sl, r0
 800b81e:	2800      	cmp	r0, #0
 800b820:	d13c      	bne.n	800b89c <_dtoa_r+0x2ec>
 800b822:	4b1b      	ldr	r3, [pc, #108]	@ (800b890 <_dtoa_r+0x2e0>)
 800b824:	4602      	mov	r2, r0
 800b826:	f240 11af 	movw	r1, #431	@ 0x1af
 800b82a:	e6d8      	b.n	800b5de <_dtoa_r+0x2e>
 800b82c:	2301      	movs	r3, #1
 800b82e:	e7e0      	b.n	800b7f2 <_dtoa_r+0x242>
 800b830:	2401      	movs	r4, #1
 800b832:	2300      	movs	r3, #0
 800b834:	9309      	str	r3, [sp, #36]	@ 0x24
 800b836:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b838:	f04f 33ff 	mov.w	r3, #4294967295
 800b83c:	9300      	str	r3, [sp, #0]
 800b83e:	9307      	str	r3, [sp, #28]
 800b840:	2200      	movs	r2, #0
 800b842:	2312      	movs	r3, #18
 800b844:	e7d0      	b.n	800b7e8 <_dtoa_r+0x238>
 800b846:	2301      	movs	r3, #1
 800b848:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b84a:	e7f5      	b.n	800b838 <_dtoa_r+0x288>
 800b84c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b84e:	9300      	str	r3, [sp, #0]
 800b850:	9307      	str	r3, [sp, #28]
 800b852:	e7d7      	b.n	800b804 <_dtoa_r+0x254>
 800b854:	3101      	adds	r1, #1
 800b856:	0052      	lsls	r2, r2, #1
 800b858:	e7d8      	b.n	800b80c <_dtoa_r+0x25c>
 800b85a:	bf00      	nop
 800b85c:	f3af 8000 	nop.w
 800b860:	636f4361 	.word	0x636f4361
 800b864:	3fd287a7 	.word	0x3fd287a7
 800b868:	8b60c8b3 	.word	0x8b60c8b3
 800b86c:	3fc68a28 	.word	0x3fc68a28
 800b870:	509f79fb 	.word	0x509f79fb
 800b874:	3fd34413 	.word	0x3fd34413
 800b878:	08015faa 	.word	0x08015faa
 800b87c:	08015fc1 	.word	0x08015fc1
 800b880:	7ff00000 	.word	0x7ff00000
 800b884:	08015f72 	.word	0x08015f72
 800b888:	3ff80000 	.word	0x3ff80000
 800b88c:	08016118 	.word	0x08016118
 800b890:	08016019 	.word	0x08016019
 800b894:	08015fa6 	.word	0x08015fa6
 800b898:	08015f71 	.word	0x08015f71
 800b89c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b8a0:	6018      	str	r0, [r3, #0]
 800b8a2:	9b07      	ldr	r3, [sp, #28]
 800b8a4:	2b0e      	cmp	r3, #14
 800b8a6:	f200 80a4 	bhi.w	800b9f2 <_dtoa_r+0x442>
 800b8aa:	2c00      	cmp	r4, #0
 800b8ac:	f000 80a1 	beq.w	800b9f2 <_dtoa_r+0x442>
 800b8b0:	2f00      	cmp	r7, #0
 800b8b2:	dd33      	ble.n	800b91c <_dtoa_r+0x36c>
 800b8b4:	4bad      	ldr	r3, [pc, #692]	@ (800bb6c <_dtoa_r+0x5bc>)
 800b8b6:	f007 020f 	and.w	r2, r7, #15
 800b8ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b8be:	ed93 7b00 	vldr	d7, [r3]
 800b8c2:	05f8      	lsls	r0, r7, #23
 800b8c4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b8c8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b8cc:	d516      	bpl.n	800b8fc <_dtoa_r+0x34c>
 800b8ce:	4ba8      	ldr	r3, [pc, #672]	@ (800bb70 <_dtoa_r+0x5c0>)
 800b8d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b8d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b8d8:	f7f4 fff0 	bl	80008bc <__aeabi_ddiv>
 800b8dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b8e0:	f004 040f 	and.w	r4, r4, #15
 800b8e4:	2603      	movs	r6, #3
 800b8e6:	4da2      	ldr	r5, [pc, #648]	@ (800bb70 <_dtoa_r+0x5c0>)
 800b8e8:	b954      	cbnz	r4, 800b900 <_dtoa_r+0x350>
 800b8ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b8ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b8f2:	f7f4 ffe3 	bl	80008bc <__aeabi_ddiv>
 800b8f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b8fa:	e028      	b.n	800b94e <_dtoa_r+0x39e>
 800b8fc:	2602      	movs	r6, #2
 800b8fe:	e7f2      	b.n	800b8e6 <_dtoa_r+0x336>
 800b900:	07e1      	lsls	r1, r4, #31
 800b902:	d508      	bpl.n	800b916 <_dtoa_r+0x366>
 800b904:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b908:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b90c:	f7f4 feac 	bl	8000668 <__aeabi_dmul>
 800b910:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b914:	3601      	adds	r6, #1
 800b916:	1064      	asrs	r4, r4, #1
 800b918:	3508      	adds	r5, #8
 800b91a:	e7e5      	b.n	800b8e8 <_dtoa_r+0x338>
 800b91c:	f000 80d2 	beq.w	800bac4 <_dtoa_r+0x514>
 800b920:	427c      	negs	r4, r7
 800b922:	4b92      	ldr	r3, [pc, #584]	@ (800bb6c <_dtoa_r+0x5bc>)
 800b924:	4d92      	ldr	r5, [pc, #584]	@ (800bb70 <_dtoa_r+0x5c0>)
 800b926:	f004 020f 	and.w	r2, r4, #15
 800b92a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b92e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b932:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b936:	f7f4 fe97 	bl	8000668 <__aeabi_dmul>
 800b93a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b93e:	1124      	asrs	r4, r4, #4
 800b940:	2300      	movs	r3, #0
 800b942:	2602      	movs	r6, #2
 800b944:	2c00      	cmp	r4, #0
 800b946:	f040 80b2 	bne.w	800baae <_dtoa_r+0x4fe>
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d1d3      	bne.n	800b8f6 <_dtoa_r+0x346>
 800b94e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b950:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b954:	2b00      	cmp	r3, #0
 800b956:	f000 80b7 	beq.w	800bac8 <_dtoa_r+0x518>
 800b95a:	4b86      	ldr	r3, [pc, #536]	@ (800bb74 <_dtoa_r+0x5c4>)
 800b95c:	2200      	movs	r2, #0
 800b95e:	4620      	mov	r0, r4
 800b960:	4629      	mov	r1, r5
 800b962:	f7f5 f8f3 	bl	8000b4c <__aeabi_dcmplt>
 800b966:	2800      	cmp	r0, #0
 800b968:	f000 80ae 	beq.w	800bac8 <_dtoa_r+0x518>
 800b96c:	9b07      	ldr	r3, [sp, #28]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	f000 80aa 	beq.w	800bac8 <_dtoa_r+0x518>
 800b974:	9b00      	ldr	r3, [sp, #0]
 800b976:	2b00      	cmp	r3, #0
 800b978:	dd37      	ble.n	800b9ea <_dtoa_r+0x43a>
 800b97a:	1e7b      	subs	r3, r7, #1
 800b97c:	9304      	str	r3, [sp, #16]
 800b97e:	4620      	mov	r0, r4
 800b980:	4b7d      	ldr	r3, [pc, #500]	@ (800bb78 <_dtoa_r+0x5c8>)
 800b982:	2200      	movs	r2, #0
 800b984:	4629      	mov	r1, r5
 800b986:	f7f4 fe6f 	bl	8000668 <__aeabi_dmul>
 800b98a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b98e:	9c00      	ldr	r4, [sp, #0]
 800b990:	3601      	adds	r6, #1
 800b992:	4630      	mov	r0, r6
 800b994:	f7f4 fdfe 	bl	8000594 <__aeabi_i2d>
 800b998:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b99c:	f7f4 fe64 	bl	8000668 <__aeabi_dmul>
 800b9a0:	4b76      	ldr	r3, [pc, #472]	@ (800bb7c <_dtoa_r+0x5cc>)
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	f7f4 fcaa 	bl	80002fc <__adddf3>
 800b9a8:	4605      	mov	r5, r0
 800b9aa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b9ae:	2c00      	cmp	r4, #0
 800b9b0:	f040 808d 	bne.w	800bace <_dtoa_r+0x51e>
 800b9b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b9b8:	4b71      	ldr	r3, [pc, #452]	@ (800bb80 <_dtoa_r+0x5d0>)
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	f7f4 fc9c 	bl	80002f8 <__aeabi_dsub>
 800b9c0:	4602      	mov	r2, r0
 800b9c2:	460b      	mov	r3, r1
 800b9c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b9c8:	462a      	mov	r2, r5
 800b9ca:	4633      	mov	r3, r6
 800b9cc:	f7f5 f8dc 	bl	8000b88 <__aeabi_dcmpgt>
 800b9d0:	2800      	cmp	r0, #0
 800b9d2:	f040 828b 	bne.w	800beec <_dtoa_r+0x93c>
 800b9d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b9da:	462a      	mov	r2, r5
 800b9dc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b9e0:	f7f5 f8b4 	bl	8000b4c <__aeabi_dcmplt>
 800b9e4:	2800      	cmp	r0, #0
 800b9e6:	f040 8128 	bne.w	800bc3a <_dtoa_r+0x68a>
 800b9ea:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b9ee:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b9f2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	f2c0 815a 	blt.w	800bcae <_dtoa_r+0x6fe>
 800b9fa:	2f0e      	cmp	r7, #14
 800b9fc:	f300 8157 	bgt.w	800bcae <_dtoa_r+0x6fe>
 800ba00:	4b5a      	ldr	r3, [pc, #360]	@ (800bb6c <_dtoa_r+0x5bc>)
 800ba02:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ba06:	ed93 7b00 	vldr	d7, [r3]
 800ba0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	ed8d 7b00 	vstr	d7, [sp]
 800ba12:	da03      	bge.n	800ba1c <_dtoa_r+0x46c>
 800ba14:	9b07      	ldr	r3, [sp, #28]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	f340 8101 	ble.w	800bc1e <_dtoa_r+0x66e>
 800ba1c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ba20:	4656      	mov	r6, sl
 800ba22:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ba26:	4620      	mov	r0, r4
 800ba28:	4629      	mov	r1, r5
 800ba2a:	f7f4 ff47 	bl	80008bc <__aeabi_ddiv>
 800ba2e:	f7f5 f8cb 	bl	8000bc8 <__aeabi_d2iz>
 800ba32:	4680      	mov	r8, r0
 800ba34:	f7f4 fdae 	bl	8000594 <__aeabi_i2d>
 800ba38:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ba3c:	f7f4 fe14 	bl	8000668 <__aeabi_dmul>
 800ba40:	4602      	mov	r2, r0
 800ba42:	460b      	mov	r3, r1
 800ba44:	4620      	mov	r0, r4
 800ba46:	4629      	mov	r1, r5
 800ba48:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ba4c:	f7f4 fc54 	bl	80002f8 <__aeabi_dsub>
 800ba50:	f806 4b01 	strb.w	r4, [r6], #1
 800ba54:	9d07      	ldr	r5, [sp, #28]
 800ba56:	eba6 040a 	sub.w	r4, r6, sl
 800ba5a:	42a5      	cmp	r5, r4
 800ba5c:	4602      	mov	r2, r0
 800ba5e:	460b      	mov	r3, r1
 800ba60:	f040 8117 	bne.w	800bc92 <_dtoa_r+0x6e2>
 800ba64:	f7f4 fc4a 	bl	80002fc <__adddf3>
 800ba68:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ba6c:	4604      	mov	r4, r0
 800ba6e:	460d      	mov	r5, r1
 800ba70:	f7f5 f88a 	bl	8000b88 <__aeabi_dcmpgt>
 800ba74:	2800      	cmp	r0, #0
 800ba76:	f040 80f9 	bne.w	800bc6c <_dtoa_r+0x6bc>
 800ba7a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ba7e:	4620      	mov	r0, r4
 800ba80:	4629      	mov	r1, r5
 800ba82:	f7f5 f859 	bl	8000b38 <__aeabi_dcmpeq>
 800ba86:	b118      	cbz	r0, 800ba90 <_dtoa_r+0x4e0>
 800ba88:	f018 0f01 	tst.w	r8, #1
 800ba8c:	f040 80ee 	bne.w	800bc6c <_dtoa_r+0x6bc>
 800ba90:	4649      	mov	r1, r9
 800ba92:	4658      	mov	r0, fp
 800ba94:	f000 ffdc 	bl	800ca50 <_Bfree>
 800ba98:	2300      	movs	r3, #0
 800ba9a:	7033      	strb	r3, [r6, #0]
 800ba9c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ba9e:	3701      	adds	r7, #1
 800baa0:	601f      	str	r7, [r3, #0]
 800baa2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	f000 831d 	beq.w	800c0e4 <_dtoa_r+0xb34>
 800baaa:	601e      	str	r6, [r3, #0]
 800baac:	e31a      	b.n	800c0e4 <_dtoa_r+0xb34>
 800baae:	07e2      	lsls	r2, r4, #31
 800bab0:	d505      	bpl.n	800babe <_dtoa_r+0x50e>
 800bab2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bab6:	f7f4 fdd7 	bl	8000668 <__aeabi_dmul>
 800baba:	3601      	adds	r6, #1
 800babc:	2301      	movs	r3, #1
 800babe:	1064      	asrs	r4, r4, #1
 800bac0:	3508      	adds	r5, #8
 800bac2:	e73f      	b.n	800b944 <_dtoa_r+0x394>
 800bac4:	2602      	movs	r6, #2
 800bac6:	e742      	b.n	800b94e <_dtoa_r+0x39e>
 800bac8:	9c07      	ldr	r4, [sp, #28]
 800baca:	9704      	str	r7, [sp, #16]
 800bacc:	e761      	b.n	800b992 <_dtoa_r+0x3e2>
 800bace:	4b27      	ldr	r3, [pc, #156]	@ (800bb6c <_dtoa_r+0x5bc>)
 800bad0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bad2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bad6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bada:	4454      	add	r4, sl
 800badc:	2900      	cmp	r1, #0
 800bade:	d053      	beq.n	800bb88 <_dtoa_r+0x5d8>
 800bae0:	4928      	ldr	r1, [pc, #160]	@ (800bb84 <_dtoa_r+0x5d4>)
 800bae2:	2000      	movs	r0, #0
 800bae4:	f7f4 feea 	bl	80008bc <__aeabi_ddiv>
 800bae8:	4633      	mov	r3, r6
 800baea:	462a      	mov	r2, r5
 800baec:	f7f4 fc04 	bl	80002f8 <__aeabi_dsub>
 800baf0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800baf4:	4656      	mov	r6, sl
 800baf6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bafa:	f7f5 f865 	bl	8000bc8 <__aeabi_d2iz>
 800bafe:	4605      	mov	r5, r0
 800bb00:	f7f4 fd48 	bl	8000594 <__aeabi_i2d>
 800bb04:	4602      	mov	r2, r0
 800bb06:	460b      	mov	r3, r1
 800bb08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb0c:	f7f4 fbf4 	bl	80002f8 <__aeabi_dsub>
 800bb10:	3530      	adds	r5, #48	@ 0x30
 800bb12:	4602      	mov	r2, r0
 800bb14:	460b      	mov	r3, r1
 800bb16:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bb1a:	f806 5b01 	strb.w	r5, [r6], #1
 800bb1e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bb22:	f7f5 f813 	bl	8000b4c <__aeabi_dcmplt>
 800bb26:	2800      	cmp	r0, #0
 800bb28:	d171      	bne.n	800bc0e <_dtoa_r+0x65e>
 800bb2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bb2e:	4911      	ldr	r1, [pc, #68]	@ (800bb74 <_dtoa_r+0x5c4>)
 800bb30:	2000      	movs	r0, #0
 800bb32:	f7f4 fbe1 	bl	80002f8 <__aeabi_dsub>
 800bb36:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bb3a:	f7f5 f807 	bl	8000b4c <__aeabi_dcmplt>
 800bb3e:	2800      	cmp	r0, #0
 800bb40:	f040 8095 	bne.w	800bc6e <_dtoa_r+0x6be>
 800bb44:	42a6      	cmp	r6, r4
 800bb46:	f43f af50 	beq.w	800b9ea <_dtoa_r+0x43a>
 800bb4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bb4e:	4b0a      	ldr	r3, [pc, #40]	@ (800bb78 <_dtoa_r+0x5c8>)
 800bb50:	2200      	movs	r2, #0
 800bb52:	f7f4 fd89 	bl	8000668 <__aeabi_dmul>
 800bb56:	4b08      	ldr	r3, [pc, #32]	@ (800bb78 <_dtoa_r+0x5c8>)
 800bb58:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bb5c:	2200      	movs	r2, #0
 800bb5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb62:	f7f4 fd81 	bl	8000668 <__aeabi_dmul>
 800bb66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bb6a:	e7c4      	b.n	800baf6 <_dtoa_r+0x546>
 800bb6c:	08016118 	.word	0x08016118
 800bb70:	080160f0 	.word	0x080160f0
 800bb74:	3ff00000 	.word	0x3ff00000
 800bb78:	40240000 	.word	0x40240000
 800bb7c:	401c0000 	.word	0x401c0000
 800bb80:	40140000 	.word	0x40140000
 800bb84:	3fe00000 	.word	0x3fe00000
 800bb88:	4631      	mov	r1, r6
 800bb8a:	4628      	mov	r0, r5
 800bb8c:	f7f4 fd6c 	bl	8000668 <__aeabi_dmul>
 800bb90:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bb94:	9415      	str	r4, [sp, #84]	@ 0x54
 800bb96:	4656      	mov	r6, sl
 800bb98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb9c:	f7f5 f814 	bl	8000bc8 <__aeabi_d2iz>
 800bba0:	4605      	mov	r5, r0
 800bba2:	f7f4 fcf7 	bl	8000594 <__aeabi_i2d>
 800bba6:	4602      	mov	r2, r0
 800bba8:	460b      	mov	r3, r1
 800bbaa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bbae:	f7f4 fba3 	bl	80002f8 <__aeabi_dsub>
 800bbb2:	3530      	adds	r5, #48	@ 0x30
 800bbb4:	f806 5b01 	strb.w	r5, [r6], #1
 800bbb8:	4602      	mov	r2, r0
 800bbba:	460b      	mov	r3, r1
 800bbbc:	42a6      	cmp	r6, r4
 800bbbe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bbc2:	f04f 0200 	mov.w	r2, #0
 800bbc6:	d124      	bne.n	800bc12 <_dtoa_r+0x662>
 800bbc8:	4bac      	ldr	r3, [pc, #688]	@ (800be7c <_dtoa_r+0x8cc>)
 800bbca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bbce:	f7f4 fb95 	bl	80002fc <__adddf3>
 800bbd2:	4602      	mov	r2, r0
 800bbd4:	460b      	mov	r3, r1
 800bbd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bbda:	f7f4 ffd5 	bl	8000b88 <__aeabi_dcmpgt>
 800bbde:	2800      	cmp	r0, #0
 800bbe0:	d145      	bne.n	800bc6e <_dtoa_r+0x6be>
 800bbe2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bbe6:	49a5      	ldr	r1, [pc, #660]	@ (800be7c <_dtoa_r+0x8cc>)
 800bbe8:	2000      	movs	r0, #0
 800bbea:	f7f4 fb85 	bl	80002f8 <__aeabi_dsub>
 800bbee:	4602      	mov	r2, r0
 800bbf0:	460b      	mov	r3, r1
 800bbf2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bbf6:	f7f4 ffa9 	bl	8000b4c <__aeabi_dcmplt>
 800bbfa:	2800      	cmp	r0, #0
 800bbfc:	f43f aef5 	beq.w	800b9ea <_dtoa_r+0x43a>
 800bc00:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800bc02:	1e73      	subs	r3, r6, #1
 800bc04:	9315      	str	r3, [sp, #84]	@ 0x54
 800bc06:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bc0a:	2b30      	cmp	r3, #48	@ 0x30
 800bc0c:	d0f8      	beq.n	800bc00 <_dtoa_r+0x650>
 800bc0e:	9f04      	ldr	r7, [sp, #16]
 800bc10:	e73e      	b.n	800ba90 <_dtoa_r+0x4e0>
 800bc12:	4b9b      	ldr	r3, [pc, #620]	@ (800be80 <_dtoa_r+0x8d0>)
 800bc14:	f7f4 fd28 	bl	8000668 <__aeabi_dmul>
 800bc18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bc1c:	e7bc      	b.n	800bb98 <_dtoa_r+0x5e8>
 800bc1e:	d10c      	bne.n	800bc3a <_dtoa_r+0x68a>
 800bc20:	4b98      	ldr	r3, [pc, #608]	@ (800be84 <_dtoa_r+0x8d4>)
 800bc22:	2200      	movs	r2, #0
 800bc24:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bc28:	f7f4 fd1e 	bl	8000668 <__aeabi_dmul>
 800bc2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bc30:	f7f4 ffa0 	bl	8000b74 <__aeabi_dcmpge>
 800bc34:	2800      	cmp	r0, #0
 800bc36:	f000 8157 	beq.w	800bee8 <_dtoa_r+0x938>
 800bc3a:	2400      	movs	r4, #0
 800bc3c:	4625      	mov	r5, r4
 800bc3e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bc40:	43db      	mvns	r3, r3
 800bc42:	9304      	str	r3, [sp, #16]
 800bc44:	4656      	mov	r6, sl
 800bc46:	2700      	movs	r7, #0
 800bc48:	4621      	mov	r1, r4
 800bc4a:	4658      	mov	r0, fp
 800bc4c:	f000 ff00 	bl	800ca50 <_Bfree>
 800bc50:	2d00      	cmp	r5, #0
 800bc52:	d0dc      	beq.n	800bc0e <_dtoa_r+0x65e>
 800bc54:	b12f      	cbz	r7, 800bc62 <_dtoa_r+0x6b2>
 800bc56:	42af      	cmp	r7, r5
 800bc58:	d003      	beq.n	800bc62 <_dtoa_r+0x6b2>
 800bc5a:	4639      	mov	r1, r7
 800bc5c:	4658      	mov	r0, fp
 800bc5e:	f000 fef7 	bl	800ca50 <_Bfree>
 800bc62:	4629      	mov	r1, r5
 800bc64:	4658      	mov	r0, fp
 800bc66:	f000 fef3 	bl	800ca50 <_Bfree>
 800bc6a:	e7d0      	b.n	800bc0e <_dtoa_r+0x65e>
 800bc6c:	9704      	str	r7, [sp, #16]
 800bc6e:	4633      	mov	r3, r6
 800bc70:	461e      	mov	r6, r3
 800bc72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bc76:	2a39      	cmp	r2, #57	@ 0x39
 800bc78:	d107      	bne.n	800bc8a <_dtoa_r+0x6da>
 800bc7a:	459a      	cmp	sl, r3
 800bc7c:	d1f8      	bne.n	800bc70 <_dtoa_r+0x6c0>
 800bc7e:	9a04      	ldr	r2, [sp, #16]
 800bc80:	3201      	adds	r2, #1
 800bc82:	9204      	str	r2, [sp, #16]
 800bc84:	2230      	movs	r2, #48	@ 0x30
 800bc86:	f88a 2000 	strb.w	r2, [sl]
 800bc8a:	781a      	ldrb	r2, [r3, #0]
 800bc8c:	3201      	adds	r2, #1
 800bc8e:	701a      	strb	r2, [r3, #0]
 800bc90:	e7bd      	b.n	800bc0e <_dtoa_r+0x65e>
 800bc92:	4b7b      	ldr	r3, [pc, #492]	@ (800be80 <_dtoa_r+0x8d0>)
 800bc94:	2200      	movs	r2, #0
 800bc96:	f7f4 fce7 	bl	8000668 <__aeabi_dmul>
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	4604      	mov	r4, r0
 800bca0:	460d      	mov	r5, r1
 800bca2:	f7f4 ff49 	bl	8000b38 <__aeabi_dcmpeq>
 800bca6:	2800      	cmp	r0, #0
 800bca8:	f43f aebb 	beq.w	800ba22 <_dtoa_r+0x472>
 800bcac:	e6f0      	b.n	800ba90 <_dtoa_r+0x4e0>
 800bcae:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800bcb0:	2a00      	cmp	r2, #0
 800bcb2:	f000 80db 	beq.w	800be6c <_dtoa_r+0x8bc>
 800bcb6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bcb8:	2a01      	cmp	r2, #1
 800bcba:	f300 80bf 	bgt.w	800be3c <_dtoa_r+0x88c>
 800bcbe:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800bcc0:	2a00      	cmp	r2, #0
 800bcc2:	f000 80b7 	beq.w	800be34 <_dtoa_r+0x884>
 800bcc6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800bcca:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bccc:	4646      	mov	r6, r8
 800bcce:	9a08      	ldr	r2, [sp, #32]
 800bcd0:	2101      	movs	r1, #1
 800bcd2:	441a      	add	r2, r3
 800bcd4:	4658      	mov	r0, fp
 800bcd6:	4498      	add	r8, r3
 800bcd8:	9208      	str	r2, [sp, #32]
 800bcda:	f000 ffb7 	bl	800cc4c <__i2b>
 800bcde:	4605      	mov	r5, r0
 800bce0:	b15e      	cbz	r6, 800bcfa <_dtoa_r+0x74a>
 800bce2:	9b08      	ldr	r3, [sp, #32]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	dd08      	ble.n	800bcfa <_dtoa_r+0x74a>
 800bce8:	42b3      	cmp	r3, r6
 800bcea:	9a08      	ldr	r2, [sp, #32]
 800bcec:	bfa8      	it	ge
 800bcee:	4633      	movge	r3, r6
 800bcf0:	eba8 0803 	sub.w	r8, r8, r3
 800bcf4:	1af6      	subs	r6, r6, r3
 800bcf6:	1ad3      	subs	r3, r2, r3
 800bcf8:	9308      	str	r3, [sp, #32]
 800bcfa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bcfc:	b1f3      	cbz	r3, 800bd3c <_dtoa_r+0x78c>
 800bcfe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	f000 80b7 	beq.w	800be74 <_dtoa_r+0x8c4>
 800bd06:	b18c      	cbz	r4, 800bd2c <_dtoa_r+0x77c>
 800bd08:	4629      	mov	r1, r5
 800bd0a:	4622      	mov	r2, r4
 800bd0c:	4658      	mov	r0, fp
 800bd0e:	f001 f85d 	bl	800cdcc <__pow5mult>
 800bd12:	464a      	mov	r2, r9
 800bd14:	4601      	mov	r1, r0
 800bd16:	4605      	mov	r5, r0
 800bd18:	4658      	mov	r0, fp
 800bd1a:	f000 ffad 	bl	800cc78 <__multiply>
 800bd1e:	4649      	mov	r1, r9
 800bd20:	9004      	str	r0, [sp, #16]
 800bd22:	4658      	mov	r0, fp
 800bd24:	f000 fe94 	bl	800ca50 <_Bfree>
 800bd28:	9b04      	ldr	r3, [sp, #16]
 800bd2a:	4699      	mov	r9, r3
 800bd2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bd2e:	1b1a      	subs	r2, r3, r4
 800bd30:	d004      	beq.n	800bd3c <_dtoa_r+0x78c>
 800bd32:	4649      	mov	r1, r9
 800bd34:	4658      	mov	r0, fp
 800bd36:	f001 f849 	bl	800cdcc <__pow5mult>
 800bd3a:	4681      	mov	r9, r0
 800bd3c:	2101      	movs	r1, #1
 800bd3e:	4658      	mov	r0, fp
 800bd40:	f000 ff84 	bl	800cc4c <__i2b>
 800bd44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bd46:	4604      	mov	r4, r0
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	f000 81cf 	beq.w	800c0ec <_dtoa_r+0xb3c>
 800bd4e:	461a      	mov	r2, r3
 800bd50:	4601      	mov	r1, r0
 800bd52:	4658      	mov	r0, fp
 800bd54:	f001 f83a 	bl	800cdcc <__pow5mult>
 800bd58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd5a:	2b01      	cmp	r3, #1
 800bd5c:	4604      	mov	r4, r0
 800bd5e:	f300 8095 	bgt.w	800be8c <_dtoa_r+0x8dc>
 800bd62:	9b02      	ldr	r3, [sp, #8]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	f040 8087 	bne.w	800be78 <_dtoa_r+0x8c8>
 800bd6a:	9b03      	ldr	r3, [sp, #12]
 800bd6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	f040 8089 	bne.w	800be88 <_dtoa_r+0x8d8>
 800bd76:	9b03      	ldr	r3, [sp, #12]
 800bd78:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bd7c:	0d1b      	lsrs	r3, r3, #20
 800bd7e:	051b      	lsls	r3, r3, #20
 800bd80:	b12b      	cbz	r3, 800bd8e <_dtoa_r+0x7de>
 800bd82:	9b08      	ldr	r3, [sp, #32]
 800bd84:	3301      	adds	r3, #1
 800bd86:	9308      	str	r3, [sp, #32]
 800bd88:	f108 0801 	add.w	r8, r8, #1
 800bd8c:	2301      	movs	r3, #1
 800bd8e:	930a      	str	r3, [sp, #40]	@ 0x28
 800bd90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	f000 81b0 	beq.w	800c0f8 <_dtoa_r+0xb48>
 800bd98:	6923      	ldr	r3, [r4, #16]
 800bd9a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bd9e:	6918      	ldr	r0, [r3, #16]
 800bda0:	f000 ff08 	bl	800cbb4 <__hi0bits>
 800bda4:	f1c0 0020 	rsb	r0, r0, #32
 800bda8:	9b08      	ldr	r3, [sp, #32]
 800bdaa:	4418      	add	r0, r3
 800bdac:	f010 001f 	ands.w	r0, r0, #31
 800bdb0:	d077      	beq.n	800bea2 <_dtoa_r+0x8f2>
 800bdb2:	f1c0 0320 	rsb	r3, r0, #32
 800bdb6:	2b04      	cmp	r3, #4
 800bdb8:	dd6b      	ble.n	800be92 <_dtoa_r+0x8e2>
 800bdba:	9b08      	ldr	r3, [sp, #32]
 800bdbc:	f1c0 001c 	rsb	r0, r0, #28
 800bdc0:	4403      	add	r3, r0
 800bdc2:	4480      	add	r8, r0
 800bdc4:	4406      	add	r6, r0
 800bdc6:	9308      	str	r3, [sp, #32]
 800bdc8:	f1b8 0f00 	cmp.w	r8, #0
 800bdcc:	dd05      	ble.n	800bdda <_dtoa_r+0x82a>
 800bdce:	4649      	mov	r1, r9
 800bdd0:	4642      	mov	r2, r8
 800bdd2:	4658      	mov	r0, fp
 800bdd4:	f001 f854 	bl	800ce80 <__lshift>
 800bdd8:	4681      	mov	r9, r0
 800bdda:	9b08      	ldr	r3, [sp, #32]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	dd05      	ble.n	800bdec <_dtoa_r+0x83c>
 800bde0:	4621      	mov	r1, r4
 800bde2:	461a      	mov	r2, r3
 800bde4:	4658      	mov	r0, fp
 800bde6:	f001 f84b 	bl	800ce80 <__lshift>
 800bdea:	4604      	mov	r4, r0
 800bdec:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d059      	beq.n	800bea6 <_dtoa_r+0x8f6>
 800bdf2:	4621      	mov	r1, r4
 800bdf4:	4648      	mov	r0, r9
 800bdf6:	f001 f8af 	bl	800cf58 <__mcmp>
 800bdfa:	2800      	cmp	r0, #0
 800bdfc:	da53      	bge.n	800bea6 <_dtoa_r+0x8f6>
 800bdfe:	1e7b      	subs	r3, r7, #1
 800be00:	9304      	str	r3, [sp, #16]
 800be02:	4649      	mov	r1, r9
 800be04:	2300      	movs	r3, #0
 800be06:	220a      	movs	r2, #10
 800be08:	4658      	mov	r0, fp
 800be0a:	f000 fe43 	bl	800ca94 <__multadd>
 800be0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800be10:	4681      	mov	r9, r0
 800be12:	2b00      	cmp	r3, #0
 800be14:	f000 8172 	beq.w	800c0fc <_dtoa_r+0xb4c>
 800be18:	2300      	movs	r3, #0
 800be1a:	4629      	mov	r1, r5
 800be1c:	220a      	movs	r2, #10
 800be1e:	4658      	mov	r0, fp
 800be20:	f000 fe38 	bl	800ca94 <__multadd>
 800be24:	9b00      	ldr	r3, [sp, #0]
 800be26:	2b00      	cmp	r3, #0
 800be28:	4605      	mov	r5, r0
 800be2a:	dc67      	bgt.n	800befc <_dtoa_r+0x94c>
 800be2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be2e:	2b02      	cmp	r3, #2
 800be30:	dc41      	bgt.n	800beb6 <_dtoa_r+0x906>
 800be32:	e063      	b.n	800befc <_dtoa_r+0x94c>
 800be34:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800be36:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800be3a:	e746      	b.n	800bcca <_dtoa_r+0x71a>
 800be3c:	9b07      	ldr	r3, [sp, #28]
 800be3e:	1e5c      	subs	r4, r3, #1
 800be40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800be42:	42a3      	cmp	r3, r4
 800be44:	bfbf      	itttt	lt
 800be46:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800be48:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800be4a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800be4c:	1ae3      	sublt	r3, r4, r3
 800be4e:	bfb4      	ite	lt
 800be50:	18d2      	addlt	r2, r2, r3
 800be52:	1b1c      	subge	r4, r3, r4
 800be54:	9b07      	ldr	r3, [sp, #28]
 800be56:	bfbc      	itt	lt
 800be58:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800be5a:	2400      	movlt	r4, #0
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	bfb5      	itete	lt
 800be60:	eba8 0603 	sublt.w	r6, r8, r3
 800be64:	9b07      	ldrge	r3, [sp, #28]
 800be66:	2300      	movlt	r3, #0
 800be68:	4646      	movge	r6, r8
 800be6a:	e730      	b.n	800bcce <_dtoa_r+0x71e>
 800be6c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800be6e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800be70:	4646      	mov	r6, r8
 800be72:	e735      	b.n	800bce0 <_dtoa_r+0x730>
 800be74:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800be76:	e75c      	b.n	800bd32 <_dtoa_r+0x782>
 800be78:	2300      	movs	r3, #0
 800be7a:	e788      	b.n	800bd8e <_dtoa_r+0x7de>
 800be7c:	3fe00000 	.word	0x3fe00000
 800be80:	40240000 	.word	0x40240000
 800be84:	40140000 	.word	0x40140000
 800be88:	9b02      	ldr	r3, [sp, #8]
 800be8a:	e780      	b.n	800bd8e <_dtoa_r+0x7de>
 800be8c:	2300      	movs	r3, #0
 800be8e:	930a      	str	r3, [sp, #40]	@ 0x28
 800be90:	e782      	b.n	800bd98 <_dtoa_r+0x7e8>
 800be92:	d099      	beq.n	800bdc8 <_dtoa_r+0x818>
 800be94:	9a08      	ldr	r2, [sp, #32]
 800be96:	331c      	adds	r3, #28
 800be98:	441a      	add	r2, r3
 800be9a:	4498      	add	r8, r3
 800be9c:	441e      	add	r6, r3
 800be9e:	9208      	str	r2, [sp, #32]
 800bea0:	e792      	b.n	800bdc8 <_dtoa_r+0x818>
 800bea2:	4603      	mov	r3, r0
 800bea4:	e7f6      	b.n	800be94 <_dtoa_r+0x8e4>
 800bea6:	9b07      	ldr	r3, [sp, #28]
 800bea8:	9704      	str	r7, [sp, #16]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	dc20      	bgt.n	800bef0 <_dtoa_r+0x940>
 800beae:	9300      	str	r3, [sp, #0]
 800beb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800beb2:	2b02      	cmp	r3, #2
 800beb4:	dd1e      	ble.n	800bef4 <_dtoa_r+0x944>
 800beb6:	9b00      	ldr	r3, [sp, #0]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	f47f aec0 	bne.w	800bc3e <_dtoa_r+0x68e>
 800bebe:	4621      	mov	r1, r4
 800bec0:	2205      	movs	r2, #5
 800bec2:	4658      	mov	r0, fp
 800bec4:	f000 fde6 	bl	800ca94 <__multadd>
 800bec8:	4601      	mov	r1, r0
 800beca:	4604      	mov	r4, r0
 800becc:	4648      	mov	r0, r9
 800bece:	f001 f843 	bl	800cf58 <__mcmp>
 800bed2:	2800      	cmp	r0, #0
 800bed4:	f77f aeb3 	ble.w	800bc3e <_dtoa_r+0x68e>
 800bed8:	4656      	mov	r6, sl
 800beda:	2331      	movs	r3, #49	@ 0x31
 800bedc:	f806 3b01 	strb.w	r3, [r6], #1
 800bee0:	9b04      	ldr	r3, [sp, #16]
 800bee2:	3301      	adds	r3, #1
 800bee4:	9304      	str	r3, [sp, #16]
 800bee6:	e6ae      	b.n	800bc46 <_dtoa_r+0x696>
 800bee8:	9c07      	ldr	r4, [sp, #28]
 800beea:	9704      	str	r7, [sp, #16]
 800beec:	4625      	mov	r5, r4
 800beee:	e7f3      	b.n	800bed8 <_dtoa_r+0x928>
 800bef0:	9b07      	ldr	r3, [sp, #28]
 800bef2:	9300      	str	r3, [sp, #0]
 800bef4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	f000 8104 	beq.w	800c104 <_dtoa_r+0xb54>
 800befc:	2e00      	cmp	r6, #0
 800befe:	dd05      	ble.n	800bf0c <_dtoa_r+0x95c>
 800bf00:	4629      	mov	r1, r5
 800bf02:	4632      	mov	r2, r6
 800bf04:	4658      	mov	r0, fp
 800bf06:	f000 ffbb 	bl	800ce80 <__lshift>
 800bf0a:	4605      	mov	r5, r0
 800bf0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d05a      	beq.n	800bfc8 <_dtoa_r+0xa18>
 800bf12:	6869      	ldr	r1, [r5, #4]
 800bf14:	4658      	mov	r0, fp
 800bf16:	f000 fd5b 	bl	800c9d0 <_Balloc>
 800bf1a:	4606      	mov	r6, r0
 800bf1c:	b928      	cbnz	r0, 800bf2a <_dtoa_r+0x97a>
 800bf1e:	4b84      	ldr	r3, [pc, #528]	@ (800c130 <_dtoa_r+0xb80>)
 800bf20:	4602      	mov	r2, r0
 800bf22:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800bf26:	f7ff bb5a 	b.w	800b5de <_dtoa_r+0x2e>
 800bf2a:	692a      	ldr	r2, [r5, #16]
 800bf2c:	3202      	adds	r2, #2
 800bf2e:	0092      	lsls	r2, r2, #2
 800bf30:	f105 010c 	add.w	r1, r5, #12
 800bf34:	300c      	adds	r0, #12
 800bf36:	f7ff fa92 	bl	800b45e <memcpy>
 800bf3a:	2201      	movs	r2, #1
 800bf3c:	4631      	mov	r1, r6
 800bf3e:	4658      	mov	r0, fp
 800bf40:	f000 ff9e 	bl	800ce80 <__lshift>
 800bf44:	f10a 0301 	add.w	r3, sl, #1
 800bf48:	9307      	str	r3, [sp, #28]
 800bf4a:	9b00      	ldr	r3, [sp, #0]
 800bf4c:	4453      	add	r3, sl
 800bf4e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bf50:	9b02      	ldr	r3, [sp, #8]
 800bf52:	f003 0301 	and.w	r3, r3, #1
 800bf56:	462f      	mov	r7, r5
 800bf58:	930a      	str	r3, [sp, #40]	@ 0x28
 800bf5a:	4605      	mov	r5, r0
 800bf5c:	9b07      	ldr	r3, [sp, #28]
 800bf5e:	4621      	mov	r1, r4
 800bf60:	3b01      	subs	r3, #1
 800bf62:	4648      	mov	r0, r9
 800bf64:	9300      	str	r3, [sp, #0]
 800bf66:	f7ff fa99 	bl	800b49c <quorem>
 800bf6a:	4639      	mov	r1, r7
 800bf6c:	9002      	str	r0, [sp, #8]
 800bf6e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800bf72:	4648      	mov	r0, r9
 800bf74:	f000 fff0 	bl	800cf58 <__mcmp>
 800bf78:	462a      	mov	r2, r5
 800bf7a:	9008      	str	r0, [sp, #32]
 800bf7c:	4621      	mov	r1, r4
 800bf7e:	4658      	mov	r0, fp
 800bf80:	f001 f806 	bl	800cf90 <__mdiff>
 800bf84:	68c2      	ldr	r2, [r0, #12]
 800bf86:	4606      	mov	r6, r0
 800bf88:	bb02      	cbnz	r2, 800bfcc <_dtoa_r+0xa1c>
 800bf8a:	4601      	mov	r1, r0
 800bf8c:	4648      	mov	r0, r9
 800bf8e:	f000 ffe3 	bl	800cf58 <__mcmp>
 800bf92:	4602      	mov	r2, r0
 800bf94:	4631      	mov	r1, r6
 800bf96:	4658      	mov	r0, fp
 800bf98:	920e      	str	r2, [sp, #56]	@ 0x38
 800bf9a:	f000 fd59 	bl	800ca50 <_Bfree>
 800bf9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bfa0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bfa2:	9e07      	ldr	r6, [sp, #28]
 800bfa4:	ea43 0102 	orr.w	r1, r3, r2
 800bfa8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bfaa:	4319      	orrs	r1, r3
 800bfac:	d110      	bne.n	800bfd0 <_dtoa_r+0xa20>
 800bfae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bfb2:	d029      	beq.n	800c008 <_dtoa_r+0xa58>
 800bfb4:	9b08      	ldr	r3, [sp, #32]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	dd02      	ble.n	800bfc0 <_dtoa_r+0xa10>
 800bfba:	9b02      	ldr	r3, [sp, #8]
 800bfbc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800bfc0:	9b00      	ldr	r3, [sp, #0]
 800bfc2:	f883 8000 	strb.w	r8, [r3]
 800bfc6:	e63f      	b.n	800bc48 <_dtoa_r+0x698>
 800bfc8:	4628      	mov	r0, r5
 800bfca:	e7bb      	b.n	800bf44 <_dtoa_r+0x994>
 800bfcc:	2201      	movs	r2, #1
 800bfce:	e7e1      	b.n	800bf94 <_dtoa_r+0x9e4>
 800bfd0:	9b08      	ldr	r3, [sp, #32]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	db04      	blt.n	800bfe0 <_dtoa_r+0xa30>
 800bfd6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bfd8:	430b      	orrs	r3, r1
 800bfda:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bfdc:	430b      	orrs	r3, r1
 800bfde:	d120      	bne.n	800c022 <_dtoa_r+0xa72>
 800bfe0:	2a00      	cmp	r2, #0
 800bfe2:	dded      	ble.n	800bfc0 <_dtoa_r+0xa10>
 800bfe4:	4649      	mov	r1, r9
 800bfe6:	2201      	movs	r2, #1
 800bfe8:	4658      	mov	r0, fp
 800bfea:	f000 ff49 	bl	800ce80 <__lshift>
 800bfee:	4621      	mov	r1, r4
 800bff0:	4681      	mov	r9, r0
 800bff2:	f000 ffb1 	bl	800cf58 <__mcmp>
 800bff6:	2800      	cmp	r0, #0
 800bff8:	dc03      	bgt.n	800c002 <_dtoa_r+0xa52>
 800bffa:	d1e1      	bne.n	800bfc0 <_dtoa_r+0xa10>
 800bffc:	f018 0f01 	tst.w	r8, #1
 800c000:	d0de      	beq.n	800bfc0 <_dtoa_r+0xa10>
 800c002:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c006:	d1d8      	bne.n	800bfba <_dtoa_r+0xa0a>
 800c008:	9a00      	ldr	r2, [sp, #0]
 800c00a:	2339      	movs	r3, #57	@ 0x39
 800c00c:	7013      	strb	r3, [r2, #0]
 800c00e:	4633      	mov	r3, r6
 800c010:	461e      	mov	r6, r3
 800c012:	3b01      	subs	r3, #1
 800c014:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c018:	2a39      	cmp	r2, #57	@ 0x39
 800c01a:	d052      	beq.n	800c0c2 <_dtoa_r+0xb12>
 800c01c:	3201      	adds	r2, #1
 800c01e:	701a      	strb	r2, [r3, #0]
 800c020:	e612      	b.n	800bc48 <_dtoa_r+0x698>
 800c022:	2a00      	cmp	r2, #0
 800c024:	dd07      	ble.n	800c036 <_dtoa_r+0xa86>
 800c026:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c02a:	d0ed      	beq.n	800c008 <_dtoa_r+0xa58>
 800c02c:	9a00      	ldr	r2, [sp, #0]
 800c02e:	f108 0301 	add.w	r3, r8, #1
 800c032:	7013      	strb	r3, [r2, #0]
 800c034:	e608      	b.n	800bc48 <_dtoa_r+0x698>
 800c036:	9b07      	ldr	r3, [sp, #28]
 800c038:	9a07      	ldr	r2, [sp, #28]
 800c03a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c03e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c040:	4293      	cmp	r3, r2
 800c042:	d028      	beq.n	800c096 <_dtoa_r+0xae6>
 800c044:	4649      	mov	r1, r9
 800c046:	2300      	movs	r3, #0
 800c048:	220a      	movs	r2, #10
 800c04a:	4658      	mov	r0, fp
 800c04c:	f000 fd22 	bl	800ca94 <__multadd>
 800c050:	42af      	cmp	r7, r5
 800c052:	4681      	mov	r9, r0
 800c054:	f04f 0300 	mov.w	r3, #0
 800c058:	f04f 020a 	mov.w	r2, #10
 800c05c:	4639      	mov	r1, r7
 800c05e:	4658      	mov	r0, fp
 800c060:	d107      	bne.n	800c072 <_dtoa_r+0xac2>
 800c062:	f000 fd17 	bl	800ca94 <__multadd>
 800c066:	4607      	mov	r7, r0
 800c068:	4605      	mov	r5, r0
 800c06a:	9b07      	ldr	r3, [sp, #28]
 800c06c:	3301      	adds	r3, #1
 800c06e:	9307      	str	r3, [sp, #28]
 800c070:	e774      	b.n	800bf5c <_dtoa_r+0x9ac>
 800c072:	f000 fd0f 	bl	800ca94 <__multadd>
 800c076:	4629      	mov	r1, r5
 800c078:	4607      	mov	r7, r0
 800c07a:	2300      	movs	r3, #0
 800c07c:	220a      	movs	r2, #10
 800c07e:	4658      	mov	r0, fp
 800c080:	f000 fd08 	bl	800ca94 <__multadd>
 800c084:	4605      	mov	r5, r0
 800c086:	e7f0      	b.n	800c06a <_dtoa_r+0xaba>
 800c088:	9b00      	ldr	r3, [sp, #0]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	bfcc      	ite	gt
 800c08e:	461e      	movgt	r6, r3
 800c090:	2601      	movle	r6, #1
 800c092:	4456      	add	r6, sl
 800c094:	2700      	movs	r7, #0
 800c096:	4649      	mov	r1, r9
 800c098:	2201      	movs	r2, #1
 800c09a:	4658      	mov	r0, fp
 800c09c:	f000 fef0 	bl	800ce80 <__lshift>
 800c0a0:	4621      	mov	r1, r4
 800c0a2:	4681      	mov	r9, r0
 800c0a4:	f000 ff58 	bl	800cf58 <__mcmp>
 800c0a8:	2800      	cmp	r0, #0
 800c0aa:	dcb0      	bgt.n	800c00e <_dtoa_r+0xa5e>
 800c0ac:	d102      	bne.n	800c0b4 <_dtoa_r+0xb04>
 800c0ae:	f018 0f01 	tst.w	r8, #1
 800c0b2:	d1ac      	bne.n	800c00e <_dtoa_r+0xa5e>
 800c0b4:	4633      	mov	r3, r6
 800c0b6:	461e      	mov	r6, r3
 800c0b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c0bc:	2a30      	cmp	r2, #48	@ 0x30
 800c0be:	d0fa      	beq.n	800c0b6 <_dtoa_r+0xb06>
 800c0c0:	e5c2      	b.n	800bc48 <_dtoa_r+0x698>
 800c0c2:	459a      	cmp	sl, r3
 800c0c4:	d1a4      	bne.n	800c010 <_dtoa_r+0xa60>
 800c0c6:	9b04      	ldr	r3, [sp, #16]
 800c0c8:	3301      	adds	r3, #1
 800c0ca:	9304      	str	r3, [sp, #16]
 800c0cc:	2331      	movs	r3, #49	@ 0x31
 800c0ce:	f88a 3000 	strb.w	r3, [sl]
 800c0d2:	e5b9      	b.n	800bc48 <_dtoa_r+0x698>
 800c0d4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c0d6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c134 <_dtoa_r+0xb84>
 800c0da:	b11b      	cbz	r3, 800c0e4 <_dtoa_r+0xb34>
 800c0dc:	f10a 0308 	add.w	r3, sl, #8
 800c0e0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c0e2:	6013      	str	r3, [r2, #0]
 800c0e4:	4650      	mov	r0, sl
 800c0e6:	b019      	add	sp, #100	@ 0x64
 800c0e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0ee:	2b01      	cmp	r3, #1
 800c0f0:	f77f ae37 	ble.w	800bd62 <_dtoa_r+0x7b2>
 800c0f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c0f6:	930a      	str	r3, [sp, #40]	@ 0x28
 800c0f8:	2001      	movs	r0, #1
 800c0fa:	e655      	b.n	800bda8 <_dtoa_r+0x7f8>
 800c0fc:	9b00      	ldr	r3, [sp, #0]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	f77f aed6 	ble.w	800beb0 <_dtoa_r+0x900>
 800c104:	4656      	mov	r6, sl
 800c106:	4621      	mov	r1, r4
 800c108:	4648      	mov	r0, r9
 800c10a:	f7ff f9c7 	bl	800b49c <quorem>
 800c10e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c112:	f806 8b01 	strb.w	r8, [r6], #1
 800c116:	9b00      	ldr	r3, [sp, #0]
 800c118:	eba6 020a 	sub.w	r2, r6, sl
 800c11c:	4293      	cmp	r3, r2
 800c11e:	ddb3      	ble.n	800c088 <_dtoa_r+0xad8>
 800c120:	4649      	mov	r1, r9
 800c122:	2300      	movs	r3, #0
 800c124:	220a      	movs	r2, #10
 800c126:	4658      	mov	r0, fp
 800c128:	f000 fcb4 	bl	800ca94 <__multadd>
 800c12c:	4681      	mov	r9, r0
 800c12e:	e7ea      	b.n	800c106 <_dtoa_r+0xb56>
 800c130:	08016019 	.word	0x08016019
 800c134:	08015f9d 	.word	0x08015f9d

0800c138 <_free_r>:
 800c138:	b538      	push	{r3, r4, r5, lr}
 800c13a:	4605      	mov	r5, r0
 800c13c:	2900      	cmp	r1, #0
 800c13e:	d041      	beq.n	800c1c4 <_free_r+0x8c>
 800c140:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c144:	1f0c      	subs	r4, r1, #4
 800c146:	2b00      	cmp	r3, #0
 800c148:	bfb8      	it	lt
 800c14a:	18e4      	addlt	r4, r4, r3
 800c14c:	f000 fc34 	bl	800c9b8 <__malloc_lock>
 800c150:	4a1d      	ldr	r2, [pc, #116]	@ (800c1c8 <_free_r+0x90>)
 800c152:	6813      	ldr	r3, [r2, #0]
 800c154:	b933      	cbnz	r3, 800c164 <_free_r+0x2c>
 800c156:	6063      	str	r3, [r4, #4]
 800c158:	6014      	str	r4, [r2, #0]
 800c15a:	4628      	mov	r0, r5
 800c15c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c160:	f000 bc30 	b.w	800c9c4 <__malloc_unlock>
 800c164:	42a3      	cmp	r3, r4
 800c166:	d908      	bls.n	800c17a <_free_r+0x42>
 800c168:	6820      	ldr	r0, [r4, #0]
 800c16a:	1821      	adds	r1, r4, r0
 800c16c:	428b      	cmp	r3, r1
 800c16e:	bf01      	itttt	eq
 800c170:	6819      	ldreq	r1, [r3, #0]
 800c172:	685b      	ldreq	r3, [r3, #4]
 800c174:	1809      	addeq	r1, r1, r0
 800c176:	6021      	streq	r1, [r4, #0]
 800c178:	e7ed      	b.n	800c156 <_free_r+0x1e>
 800c17a:	461a      	mov	r2, r3
 800c17c:	685b      	ldr	r3, [r3, #4]
 800c17e:	b10b      	cbz	r3, 800c184 <_free_r+0x4c>
 800c180:	42a3      	cmp	r3, r4
 800c182:	d9fa      	bls.n	800c17a <_free_r+0x42>
 800c184:	6811      	ldr	r1, [r2, #0]
 800c186:	1850      	adds	r0, r2, r1
 800c188:	42a0      	cmp	r0, r4
 800c18a:	d10b      	bne.n	800c1a4 <_free_r+0x6c>
 800c18c:	6820      	ldr	r0, [r4, #0]
 800c18e:	4401      	add	r1, r0
 800c190:	1850      	adds	r0, r2, r1
 800c192:	4283      	cmp	r3, r0
 800c194:	6011      	str	r1, [r2, #0]
 800c196:	d1e0      	bne.n	800c15a <_free_r+0x22>
 800c198:	6818      	ldr	r0, [r3, #0]
 800c19a:	685b      	ldr	r3, [r3, #4]
 800c19c:	6053      	str	r3, [r2, #4]
 800c19e:	4408      	add	r0, r1
 800c1a0:	6010      	str	r0, [r2, #0]
 800c1a2:	e7da      	b.n	800c15a <_free_r+0x22>
 800c1a4:	d902      	bls.n	800c1ac <_free_r+0x74>
 800c1a6:	230c      	movs	r3, #12
 800c1a8:	602b      	str	r3, [r5, #0]
 800c1aa:	e7d6      	b.n	800c15a <_free_r+0x22>
 800c1ac:	6820      	ldr	r0, [r4, #0]
 800c1ae:	1821      	adds	r1, r4, r0
 800c1b0:	428b      	cmp	r3, r1
 800c1b2:	bf04      	itt	eq
 800c1b4:	6819      	ldreq	r1, [r3, #0]
 800c1b6:	685b      	ldreq	r3, [r3, #4]
 800c1b8:	6063      	str	r3, [r4, #4]
 800c1ba:	bf04      	itt	eq
 800c1bc:	1809      	addeq	r1, r1, r0
 800c1be:	6021      	streq	r1, [r4, #0]
 800c1c0:	6054      	str	r4, [r2, #4]
 800c1c2:	e7ca      	b.n	800c15a <_free_r+0x22>
 800c1c4:	bd38      	pop	{r3, r4, r5, pc}
 800c1c6:	bf00      	nop
 800c1c8:	20005e2c 	.word	0x20005e2c

0800c1cc <rshift>:
 800c1cc:	6903      	ldr	r3, [r0, #16]
 800c1ce:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c1d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c1d6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c1da:	f100 0414 	add.w	r4, r0, #20
 800c1de:	dd45      	ble.n	800c26c <rshift+0xa0>
 800c1e0:	f011 011f 	ands.w	r1, r1, #31
 800c1e4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c1e8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c1ec:	d10c      	bne.n	800c208 <rshift+0x3c>
 800c1ee:	f100 0710 	add.w	r7, r0, #16
 800c1f2:	4629      	mov	r1, r5
 800c1f4:	42b1      	cmp	r1, r6
 800c1f6:	d334      	bcc.n	800c262 <rshift+0x96>
 800c1f8:	1a9b      	subs	r3, r3, r2
 800c1fa:	009b      	lsls	r3, r3, #2
 800c1fc:	1eea      	subs	r2, r5, #3
 800c1fe:	4296      	cmp	r6, r2
 800c200:	bf38      	it	cc
 800c202:	2300      	movcc	r3, #0
 800c204:	4423      	add	r3, r4
 800c206:	e015      	b.n	800c234 <rshift+0x68>
 800c208:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c20c:	f1c1 0820 	rsb	r8, r1, #32
 800c210:	40cf      	lsrs	r7, r1
 800c212:	f105 0e04 	add.w	lr, r5, #4
 800c216:	46a1      	mov	r9, r4
 800c218:	4576      	cmp	r6, lr
 800c21a:	46f4      	mov	ip, lr
 800c21c:	d815      	bhi.n	800c24a <rshift+0x7e>
 800c21e:	1a9a      	subs	r2, r3, r2
 800c220:	0092      	lsls	r2, r2, #2
 800c222:	3a04      	subs	r2, #4
 800c224:	3501      	adds	r5, #1
 800c226:	42ae      	cmp	r6, r5
 800c228:	bf38      	it	cc
 800c22a:	2200      	movcc	r2, #0
 800c22c:	18a3      	adds	r3, r4, r2
 800c22e:	50a7      	str	r7, [r4, r2]
 800c230:	b107      	cbz	r7, 800c234 <rshift+0x68>
 800c232:	3304      	adds	r3, #4
 800c234:	1b1a      	subs	r2, r3, r4
 800c236:	42a3      	cmp	r3, r4
 800c238:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c23c:	bf08      	it	eq
 800c23e:	2300      	moveq	r3, #0
 800c240:	6102      	str	r2, [r0, #16]
 800c242:	bf08      	it	eq
 800c244:	6143      	streq	r3, [r0, #20]
 800c246:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c24a:	f8dc c000 	ldr.w	ip, [ip]
 800c24e:	fa0c fc08 	lsl.w	ip, ip, r8
 800c252:	ea4c 0707 	orr.w	r7, ip, r7
 800c256:	f849 7b04 	str.w	r7, [r9], #4
 800c25a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c25e:	40cf      	lsrs	r7, r1
 800c260:	e7da      	b.n	800c218 <rshift+0x4c>
 800c262:	f851 cb04 	ldr.w	ip, [r1], #4
 800c266:	f847 cf04 	str.w	ip, [r7, #4]!
 800c26a:	e7c3      	b.n	800c1f4 <rshift+0x28>
 800c26c:	4623      	mov	r3, r4
 800c26e:	e7e1      	b.n	800c234 <rshift+0x68>

0800c270 <__hexdig_fun>:
 800c270:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c274:	2b09      	cmp	r3, #9
 800c276:	d802      	bhi.n	800c27e <__hexdig_fun+0xe>
 800c278:	3820      	subs	r0, #32
 800c27a:	b2c0      	uxtb	r0, r0
 800c27c:	4770      	bx	lr
 800c27e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c282:	2b05      	cmp	r3, #5
 800c284:	d801      	bhi.n	800c28a <__hexdig_fun+0x1a>
 800c286:	3847      	subs	r0, #71	@ 0x47
 800c288:	e7f7      	b.n	800c27a <__hexdig_fun+0xa>
 800c28a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c28e:	2b05      	cmp	r3, #5
 800c290:	d801      	bhi.n	800c296 <__hexdig_fun+0x26>
 800c292:	3827      	subs	r0, #39	@ 0x27
 800c294:	e7f1      	b.n	800c27a <__hexdig_fun+0xa>
 800c296:	2000      	movs	r0, #0
 800c298:	4770      	bx	lr
	...

0800c29c <__gethex>:
 800c29c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2a0:	b085      	sub	sp, #20
 800c2a2:	468a      	mov	sl, r1
 800c2a4:	9302      	str	r3, [sp, #8]
 800c2a6:	680b      	ldr	r3, [r1, #0]
 800c2a8:	9001      	str	r0, [sp, #4]
 800c2aa:	4690      	mov	r8, r2
 800c2ac:	1c9c      	adds	r4, r3, #2
 800c2ae:	46a1      	mov	r9, r4
 800c2b0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c2b4:	2830      	cmp	r0, #48	@ 0x30
 800c2b6:	d0fa      	beq.n	800c2ae <__gethex+0x12>
 800c2b8:	eba9 0303 	sub.w	r3, r9, r3
 800c2bc:	f1a3 0b02 	sub.w	fp, r3, #2
 800c2c0:	f7ff ffd6 	bl	800c270 <__hexdig_fun>
 800c2c4:	4605      	mov	r5, r0
 800c2c6:	2800      	cmp	r0, #0
 800c2c8:	d168      	bne.n	800c39c <__gethex+0x100>
 800c2ca:	49a0      	ldr	r1, [pc, #640]	@ (800c54c <__gethex+0x2b0>)
 800c2cc:	2201      	movs	r2, #1
 800c2ce:	4648      	mov	r0, r9
 800c2d0:	f7ff f808 	bl	800b2e4 <strncmp>
 800c2d4:	4607      	mov	r7, r0
 800c2d6:	2800      	cmp	r0, #0
 800c2d8:	d167      	bne.n	800c3aa <__gethex+0x10e>
 800c2da:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c2de:	4626      	mov	r6, r4
 800c2e0:	f7ff ffc6 	bl	800c270 <__hexdig_fun>
 800c2e4:	2800      	cmp	r0, #0
 800c2e6:	d062      	beq.n	800c3ae <__gethex+0x112>
 800c2e8:	4623      	mov	r3, r4
 800c2ea:	7818      	ldrb	r0, [r3, #0]
 800c2ec:	2830      	cmp	r0, #48	@ 0x30
 800c2ee:	4699      	mov	r9, r3
 800c2f0:	f103 0301 	add.w	r3, r3, #1
 800c2f4:	d0f9      	beq.n	800c2ea <__gethex+0x4e>
 800c2f6:	f7ff ffbb 	bl	800c270 <__hexdig_fun>
 800c2fa:	fab0 f580 	clz	r5, r0
 800c2fe:	096d      	lsrs	r5, r5, #5
 800c300:	f04f 0b01 	mov.w	fp, #1
 800c304:	464a      	mov	r2, r9
 800c306:	4616      	mov	r6, r2
 800c308:	3201      	adds	r2, #1
 800c30a:	7830      	ldrb	r0, [r6, #0]
 800c30c:	f7ff ffb0 	bl	800c270 <__hexdig_fun>
 800c310:	2800      	cmp	r0, #0
 800c312:	d1f8      	bne.n	800c306 <__gethex+0x6a>
 800c314:	498d      	ldr	r1, [pc, #564]	@ (800c54c <__gethex+0x2b0>)
 800c316:	2201      	movs	r2, #1
 800c318:	4630      	mov	r0, r6
 800c31a:	f7fe ffe3 	bl	800b2e4 <strncmp>
 800c31e:	2800      	cmp	r0, #0
 800c320:	d13f      	bne.n	800c3a2 <__gethex+0x106>
 800c322:	b944      	cbnz	r4, 800c336 <__gethex+0x9a>
 800c324:	1c74      	adds	r4, r6, #1
 800c326:	4622      	mov	r2, r4
 800c328:	4616      	mov	r6, r2
 800c32a:	3201      	adds	r2, #1
 800c32c:	7830      	ldrb	r0, [r6, #0]
 800c32e:	f7ff ff9f 	bl	800c270 <__hexdig_fun>
 800c332:	2800      	cmp	r0, #0
 800c334:	d1f8      	bne.n	800c328 <__gethex+0x8c>
 800c336:	1ba4      	subs	r4, r4, r6
 800c338:	00a7      	lsls	r7, r4, #2
 800c33a:	7833      	ldrb	r3, [r6, #0]
 800c33c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c340:	2b50      	cmp	r3, #80	@ 0x50
 800c342:	d13e      	bne.n	800c3c2 <__gethex+0x126>
 800c344:	7873      	ldrb	r3, [r6, #1]
 800c346:	2b2b      	cmp	r3, #43	@ 0x2b
 800c348:	d033      	beq.n	800c3b2 <__gethex+0x116>
 800c34a:	2b2d      	cmp	r3, #45	@ 0x2d
 800c34c:	d034      	beq.n	800c3b8 <__gethex+0x11c>
 800c34e:	1c71      	adds	r1, r6, #1
 800c350:	2400      	movs	r4, #0
 800c352:	7808      	ldrb	r0, [r1, #0]
 800c354:	f7ff ff8c 	bl	800c270 <__hexdig_fun>
 800c358:	1e43      	subs	r3, r0, #1
 800c35a:	b2db      	uxtb	r3, r3
 800c35c:	2b18      	cmp	r3, #24
 800c35e:	d830      	bhi.n	800c3c2 <__gethex+0x126>
 800c360:	f1a0 0210 	sub.w	r2, r0, #16
 800c364:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c368:	f7ff ff82 	bl	800c270 <__hexdig_fun>
 800c36c:	f100 3cff 	add.w	ip, r0, #4294967295
 800c370:	fa5f fc8c 	uxtb.w	ip, ip
 800c374:	f1bc 0f18 	cmp.w	ip, #24
 800c378:	f04f 030a 	mov.w	r3, #10
 800c37c:	d91e      	bls.n	800c3bc <__gethex+0x120>
 800c37e:	b104      	cbz	r4, 800c382 <__gethex+0xe6>
 800c380:	4252      	negs	r2, r2
 800c382:	4417      	add	r7, r2
 800c384:	f8ca 1000 	str.w	r1, [sl]
 800c388:	b1ed      	cbz	r5, 800c3c6 <__gethex+0x12a>
 800c38a:	f1bb 0f00 	cmp.w	fp, #0
 800c38e:	bf0c      	ite	eq
 800c390:	2506      	moveq	r5, #6
 800c392:	2500      	movne	r5, #0
 800c394:	4628      	mov	r0, r5
 800c396:	b005      	add	sp, #20
 800c398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c39c:	2500      	movs	r5, #0
 800c39e:	462c      	mov	r4, r5
 800c3a0:	e7b0      	b.n	800c304 <__gethex+0x68>
 800c3a2:	2c00      	cmp	r4, #0
 800c3a4:	d1c7      	bne.n	800c336 <__gethex+0x9a>
 800c3a6:	4627      	mov	r7, r4
 800c3a8:	e7c7      	b.n	800c33a <__gethex+0x9e>
 800c3aa:	464e      	mov	r6, r9
 800c3ac:	462f      	mov	r7, r5
 800c3ae:	2501      	movs	r5, #1
 800c3b0:	e7c3      	b.n	800c33a <__gethex+0x9e>
 800c3b2:	2400      	movs	r4, #0
 800c3b4:	1cb1      	adds	r1, r6, #2
 800c3b6:	e7cc      	b.n	800c352 <__gethex+0xb6>
 800c3b8:	2401      	movs	r4, #1
 800c3ba:	e7fb      	b.n	800c3b4 <__gethex+0x118>
 800c3bc:	fb03 0002 	mla	r0, r3, r2, r0
 800c3c0:	e7ce      	b.n	800c360 <__gethex+0xc4>
 800c3c2:	4631      	mov	r1, r6
 800c3c4:	e7de      	b.n	800c384 <__gethex+0xe8>
 800c3c6:	eba6 0309 	sub.w	r3, r6, r9
 800c3ca:	3b01      	subs	r3, #1
 800c3cc:	4629      	mov	r1, r5
 800c3ce:	2b07      	cmp	r3, #7
 800c3d0:	dc0a      	bgt.n	800c3e8 <__gethex+0x14c>
 800c3d2:	9801      	ldr	r0, [sp, #4]
 800c3d4:	f000 fafc 	bl	800c9d0 <_Balloc>
 800c3d8:	4604      	mov	r4, r0
 800c3da:	b940      	cbnz	r0, 800c3ee <__gethex+0x152>
 800c3dc:	4b5c      	ldr	r3, [pc, #368]	@ (800c550 <__gethex+0x2b4>)
 800c3de:	4602      	mov	r2, r0
 800c3e0:	21e4      	movs	r1, #228	@ 0xe4
 800c3e2:	485c      	ldr	r0, [pc, #368]	@ (800c554 <__gethex+0x2b8>)
 800c3e4:	f001 f9e0 	bl	800d7a8 <__assert_func>
 800c3e8:	3101      	adds	r1, #1
 800c3ea:	105b      	asrs	r3, r3, #1
 800c3ec:	e7ef      	b.n	800c3ce <__gethex+0x132>
 800c3ee:	f100 0a14 	add.w	sl, r0, #20
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	4655      	mov	r5, sl
 800c3f6:	469b      	mov	fp, r3
 800c3f8:	45b1      	cmp	r9, r6
 800c3fa:	d337      	bcc.n	800c46c <__gethex+0x1d0>
 800c3fc:	f845 bb04 	str.w	fp, [r5], #4
 800c400:	eba5 050a 	sub.w	r5, r5, sl
 800c404:	10ad      	asrs	r5, r5, #2
 800c406:	6125      	str	r5, [r4, #16]
 800c408:	4658      	mov	r0, fp
 800c40a:	f000 fbd3 	bl	800cbb4 <__hi0bits>
 800c40e:	016d      	lsls	r5, r5, #5
 800c410:	f8d8 6000 	ldr.w	r6, [r8]
 800c414:	1a2d      	subs	r5, r5, r0
 800c416:	42b5      	cmp	r5, r6
 800c418:	dd54      	ble.n	800c4c4 <__gethex+0x228>
 800c41a:	1bad      	subs	r5, r5, r6
 800c41c:	4629      	mov	r1, r5
 800c41e:	4620      	mov	r0, r4
 800c420:	f000 ff67 	bl	800d2f2 <__any_on>
 800c424:	4681      	mov	r9, r0
 800c426:	b178      	cbz	r0, 800c448 <__gethex+0x1ac>
 800c428:	1e6b      	subs	r3, r5, #1
 800c42a:	1159      	asrs	r1, r3, #5
 800c42c:	f003 021f 	and.w	r2, r3, #31
 800c430:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c434:	f04f 0901 	mov.w	r9, #1
 800c438:	fa09 f202 	lsl.w	r2, r9, r2
 800c43c:	420a      	tst	r2, r1
 800c43e:	d003      	beq.n	800c448 <__gethex+0x1ac>
 800c440:	454b      	cmp	r3, r9
 800c442:	dc36      	bgt.n	800c4b2 <__gethex+0x216>
 800c444:	f04f 0902 	mov.w	r9, #2
 800c448:	4629      	mov	r1, r5
 800c44a:	4620      	mov	r0, r4
 800c44c:	f7ff febe 	bl	800c1cc <rshift>
 800c450:	442f      	add	r7, r5
 800c452:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c456:	42bb      	cmp	r3, r7
 800c458:	da42      	bge.n	800c4e0 <__gethex+0x244>
 800c45a:	9801      	ldr	r0, [sp, #4]
 800c45c:	4621      	mov	r1, r4
 800c45e:	f000 faf7 	bl	800ca50 <_Bfree>
 800c462:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c464:	2300      	movs	r3, #0
 800c466:	6013      	str	r3, [r2, #0]
 800c468:	25a3      	movs	r5, #163	@ 0xa3
 800c46a:	e793      	b.n	800c394 <__gethex+0xf8>
 800c46c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c470:	2a2e      	cmp	r2, #46	@ 0x2e
 800c472:	d012      	beq.n	800c49a <__gethex+0x1fe>
 800c474:	2b20      	cmp	r3, #32
 800c476:	d104      	bne.n	800c482 <__gethex+0x1e6>
 800c478:	f845 bb04 	str.w	fp, [r5], #4
 800c47c:	f04f 0b00 	mov.w	fp, #0
 800c480:	465b      	mov	r3, fp
 800c482:	7830      	ldrb	r0, [r6, #0]
 800c484:	9303      	str	r3, [sp, #12]
 800c486:	f7ff fef3 	bl	800c270 <__hexdig_fun>
 800c48a:	9b03      	ldr	r3, [sp, #12]
 800c48c:	f000 000f 	and.w	r0, r0, #15
 800c490:	4098      	lsls	r0, r3
 800c492:	ea4b 0b00 	orr.w	fp, fp, r0
 800c496:	3304      	adds	r3, #4
 800c498:	e7ae      	b.n	800c3f8 <__gethex+0x15c>
 800c49a:	45b1      	cmp	r9, r6
 800c49c:	d8ea      	bhi.n	800c474 <__gethex+0x1d8>
 800c49e:	492b      	ldr	r1, [pc, #172]	@ (800c54c <__gethex+0x2b0>)
 800c4a0:	9303      	str	r3, [sp, #12]
 800c4a2:	2201      	movs	r2, #1
 800c4a4:	4630      	mov	r0, r6
 800c4a6:	f7fe ff1d 	bl	800b2e4 <strncmp>
 800c4aa:	9b03      	ldr	r3, [sp, #12]
 800c4ac:	2800      	cmp	r0, #0
 800c4ae:	d1e1      	bne.n	800c474 <__gethex+0x1d8>
 800c4b0:	e7a2      	b.n	800c3f8 <__gethex+0x15c>
 800c4b2:	1ea9      	subs	r1, r5, #2
 800c4b4:	4620      	mov	r0, r4
 800c4b6:	f000 ff1c 	bl	800d2f2 <__any_on>
 800c4ba:	2800      	cmp	r0, #0
 800c4bc:	d0c2      	beq.n	800c444 <__gethex+0x1a8>
 800c4be:	f04f 0903 	mov.w	r9, #3
 800c4c2:	e7c1      	b.n	800c448 <__gethex+0x1ac>
 800c4c4:	da09      	bge.n	800c4da <__gethex+0x23e>
 800c4c6:	1b75      	subs	r5, r6, r5
 800c4c8:	4621      	mov	r1, r4
 800c4ca:	9801      	ldr	r0, [sp, #4]
 800c4cc:	462a      	mov	r2, r5
 800c4ce:	f000 fcd7 	bl	800ce80 <__lshift>
 800c4d2:	1b7f      	subs	r7, r7, r5
 800c4d4:	4604      	mov	r4, r0
 800c4d6:	f100 0a14 	add.w	sl, r0, #20
 800c4da:	f04f 0900 	mov.w	r9, #0
 800c4de:	e7b8      	b.n	800c452 <__gethex+0x1b6>
 800c4e0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c4e4:	42bd      	cmp	r5, r7
 800c4e6:	dd6f      	ble.n	800c5c8 <__gethex+0x32c>
 800c4e8:	1bed      	subs	r5, r5, r7
 800c4ea:	42ae      	cmp	r6, r5
 800c4ec:	dc34      	bgt.n	800c558 <__gethex+0x2bc>
 800c4ee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c4f2:	2b02      	cmp	r3, #2
 800c4f4:	d022      	beq.n	800c53c <__gethex+0x2a0>
 800c4f6:	2b03      	cmp	r3, #3
 800c4f8:	d024      	beq.n	800c544 <__gethex+0x2a8>
 800c4fa:	2b01      	cmp	r3, #1
 800c4fc:	d115      	bne.n	800c52a <__gethex+0x28e>
 800c4fe:	42ae      	cmp	r6, r5
 800c500:	d113      	bne.n	800c52a <__gethex+0x28e>
 800c502:	2e01      	cmp	r6, #1
 800c504:	d10b      	bne.n	800c51e <__gethex+0x282>
 800c506:	9a02      	ldr	r2, [sp, #8]
 800c508:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c50c:	6013      	str	r3, [r2, #0]
 800c50e:	2301      	movs	r3, #1
 800c510:	6123      	str	r3, [r4, #16]
 800c512:	f8ca 3000 	str.w	r3, [sl]
 800c516:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c518:	2562      	movs	r5, #98	@ 0x62
 800c51a:	601c      	str	r4, [r3, #0]
 800c51c:	e73a      	b.n	800c394 <__gethex+0xf8>
 800c51e:	1e71      	subs	r1, r6, #1
 800c520:	4620      	mov	r0, r4
 800c522:	f000 fee6 	bl	800d2f2 <__any_on>
 800c526:	2800      	cmp	r0, #0
 800c528:	d1ed      	bne.n	800c506 <__gethex+0x26a>
 800c52a:	9801      	ldr	r0, [sp, #4]
 800c52c:	4621      	mov	r1, r4
 800c52e:	f000 fa8f 	bl	800ca50 <_Bfree>
 800c532:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c534:	2300      	movs	r3, #0
 800c536:	6013      	str	r3, [r2, #0]
 800c538:	2550      	movs	r5, #80	@ 0x50
 800c53a:	e72b      	b.n	800c394 <__gethex+0xf8>
 800c53c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d1f3      	bne.n	800c52a <__gethex+0x28e>
 800c542:	e7e0      	b.n	800c506 <__gethex+0x26a>
 800c544:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c546:	2b00      	cmp	r3, #0
 800c548:	d1dd      	bne.n	800c506 <__gethex+0x26a>
 800c54a:	e7ee      	b.n	800c52a <__gethex+0x28e>
 800c54c:	08015e0c 	.word	0x08015e0c
 800c550:	08016019 	.word	0x08016019
 800c554:	0801602a 	.word	0x0801602a
 800c558:	1e6f      	subs	r7, r5, #1
 800c55a:	f1b9 0f00 	cmp.w	r9, #0
 800c55e:	d130      	bne.n	800c5c2 <__gethex+0x326>
 800c560:	b127      	cbz	r7, 800c56c <__gethex+0x2d0>
 800c562:	4639      	mov	r1, r7
 800c564:	4620      	mov	r0, r4
 800c566:	f000 fec4 	bl	800d2f2 <__any_on>
 800c56a:	4681      	mov	r9, r0
 800c56c:	117a      	asrs	r2, r7, #5
 800c56e:	2301      	movs	r3, #1
 800c570:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c574:	f007 071f 	and.w	r7, r7, #31
 800c578:	40bb      	lsls	r3, r7
 800c57a:	4213      	tst	r3, r2
 800c57c:	4629      	mov	r1, r5
 800c57e:	4620      	mov	r0, r4
 800c580:	bf18      	it	ne
 800c582:	f049 0902 	orrne.w	r9, r9, #2
 800c586:	f7ff fe21 	bl	800c1cc <rshift>
 800c58a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c58e:	1b76      	subs	r6, r6, r5
 800c590:	2502      	movs	r5, #2
 800c592:	f1b9 0f00 	cmp.w	r9, #0
 800c596:	d047      	beq.n	800c628 <__gethex+0x38c>
 800c598:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c59c:	2b02      	cmp	r3, #2
 800c59e:	d015      	beq.n	800c5cc <__gethex+0x330>
 800c5a0:	2b03      	cmp	r3, #3
 800c5a2:	d017      	beq.n	800c5d4 <__gethex+0x338>
 800c5a4:	2b01      	cmp	r3, #1
 800c5a6:	d109      	bne.n	800c5bc <__gethex+0x320>
 800c5a8:	f019 0f02 	tst.w	r9, #2
 800c5ac:	d006      	beq.n	800c5bc <__gethex+0x320>
 800c5ae:	f8da 3000 	ldr.w	r3, [sl]
 800c5b2:	ea49 0903 	orr.w	r9, r9, r3
 800c5b6:	f019 0f01 	tst.w	r9, #1
 800c5ba:	d10e      	bne.n	800c5da <__gethex+0x33e>
 800c5bc:	f045 0510 	orr.w	r5, r5, #16
 800c5c0:	e032      	b.n	800c628 <__gethex+0x38c>
 800c5c2:	f04f 0901 	mov.w	r9, #1
 800c5c6:	e7d1      	b.n	800c56c <__gethex+0x2d0>
 800c5c8:	2501      	movs	r5, #1
 800c5ca:	e7e2      	b.n	800c592 <__gethex+0x2f6>
 800c5cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c5ce:	f1c3 0301 	rsb	r3, r3, #1
 800c5d2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c5d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d0f0      	beq.n	800c5bc <__gethex+0x320>
 800c5da:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c5de:	f104 0314 	add.w	r3, r4, #20
 800c5e2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c5e6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c5ea:	f04f 0c00 	mov.w	ip, #0
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c5f4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c5f8:	d01b      	beq.n	800c632 <__gethex+0x396>
 800c5fa:	3201      	adds	r2, #1
 800c5fc:	6002      	str	r2, [r0, #0]
 800c5fe:	2d02      	cmp	r5, #2
 800c600:	f104 0314 	add.w	r3, r4, #20
 800c604:	d13c      	bne.n	800c680 <__gethex+0x3e4>
 800c606:	f8d8 2000 	ldr.w	r2, [r8]
 800c60a:	3a01      	subs	r2, #1
 800c60c:	42b2      	cmp	r2, r6
 800c60e:	d109      	bne.n	800c624 <__gethex+0x388>
 800c610:	1171      	asrs	r1, r6, #5
 800c612:	2201      	movs	r2, #1
 800c614:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c618:	f006 061f 	and.w	r6, r6, #31
 800c61c:	fa02 f606 	lsl.w	r6, r2, r6
 800c620:	421e      	tst	r6, r3
 800c622:	d13a      	bne.n	800c69a <__gethex+0x3fe>
 800c624:	f045 0520 	orr.w	r5, r5, #32
 800c628:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c62a:	601c      	str	r4, [r3, #0]
 800c62c:	9b02      	ldr	r3, [sp, #8]
 800c62e:	601f      	str	r7, [r3, #0]
 800c630:	e6b0      	b.n	800c394 <__gethex+0xf8>
 800c632:	4299      	cmp	r1, r3
 800c634:	f843 cc04 	str.w	ip, [r3, #-4]
 800c638:	d8d9      	bhi.n	800c5ee <__gethex+0x352>
 800c63a:	68a3      	ldr	r3, [r4, #8]
 800c63c:	459b      	cmp	fp, r3
 800c63e:	db17      	blt.n	800c670 <__gethex+0x3d4>
 800c640:	6861      	ldr	r1, [r4, #4]
 800c642:	9801      	ldr	r0, [sp, #4]
 800c644:	3101      	adds	r1, #1
 800c646:	f000 f9c3 	bl	800c9d0 <_Balloc>
 800c64a:	4681      	mov	r9, r0
 800c64c:	b918      	cbnz	r0, 800c656 <__gethex+0x3ba>
 800c64e:	4b1a      	ldr	r3, [pc, #104]	@ (800c6b8 <__gethex+0x41c>)
 800c650:	4602      	mov	r2, r0
 800c652:	2184      	movs	r1, #132	@ 0x84
 800c654:	e6c5      	b.n	800c3e2 <__gethex+0x146>
 800c656:	6922      	ldr	r2, [r4, #16]
 800c658:	3202      	adds	r2, #2
 800c65a:	f104 010c 	add.w	r1, r4, #12
 800c65e:	0092      	lsls	r2, r2, #2
 800c660:	300c      	adds	r0, #12
 800c662:	f7fe fefc 	bl	800b45e <memcpy>
 800c666:	4621      	mov	r1, r4
 800c668:	9801      	ldr	r0, [sp, #4]
 800c66a:	f000 f9f1 	bl	800ca50 <_Bfree>
 800c66e:	464c      	mov	r4, r9
 800c670:	6923      	ldr	r3, [r4, #16]
 800c672:	1c5a      	adds	r2, r3, #1
 800c674:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c678:	6122      	str	r2, [r4, #16]
 800c67a:	2201      	movs	r2, #1
 800c67c:	615a      	str	r2, [r3, #20]
 800c67e:	e7be      	b.n	800c5fe <__gethex+0x362>
 800c680:	6922      	ldr	r2, [r4, #16]
 800c682:	455a      	cmp	r2, fp
 800c684:	dd0b      	ble.n	800c69e <__gethex+0x402>
 800c686:	2101      	movs	r1, #1
 800c688:	4620      	mov	r0, r4
 800c68a:	f7ff fd9f 	bl	800c1cc <rshift>
 800c68e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c692:	3701      	adds	r7, #1
 800c694:	42bb      	cmp	r3, r7
 800c696:	f6ff aee0 	blt.w	800c45a <__gethex+0x1be>
 800c69a:	2501      	movs	r5, #1
 800c69c:	e7c2      	b.n	800c624 <__gethex+0x388>
 800c69e:	f016 061f 	ands.w	r6, r6, #31
 800c6a2:	d0fa      	beq.n	800c69a <__gethex+0x3fe>
 800c6a4:	4453      	add	r3, sl
 800c6a6:	f1c6 0620 	rsb	r6, r6, #32
 800c6aa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c6ae:	f000 fa81 	bl	800cbb4 <__hi0bits>
 800c6b2:	42b0      	cmp	r0, r6
 800c6b4:	dbe7      	blt.n	800c686 <__gethex+0x3ea>
 800c6b6:	e7f0      	b.n	800c69a <__gethex+0x3fe>
 800c6b8:	08016019 	.word	0x08016019

0800c6bc <L_shift>:
 800c6bc:	f1c2 0208 	rsb	r2, r2, #8
 800c6c0:	0092      	lsls	r2, r2, #2
 800c6c2:	b570      	push	{r4, r5, r6, lr}
 800c6c4:	f1c2 0620 	rsb	r6, r2, #32
 800c6c8:	6843      	ldr	r3, [r0, #4]
 800c6ca:	6804      	ldr	r4, [r0, #0]
 800c6cc:	fa03 f506 	lsl.w	r5, r3, r6
 800c6d0:	432c      	orrs	r4, r5
 800c6d2:	40d3      	lsrs	r3, r2
 800c6d4:	6004      	str	r4, [r0, #0]
 800c6d6:	f840 3f04 	str.w	r3, [r0, #4]!
 800c6da:	4288      	cmp	r0, r1
 800c6dc:	d3f4      	bcc.n	800c6c8 <L_shift+0xc>
 800c6de:	bd70      	pop	{r4, r5, r6, pc}

0800c6e0 <__match>:
 800c6e0:	b530      	push	{r4, r5, lr}
 800c6e2:	6803      	ldr	r3, [r0, #0]
 800c6e4:	3301      	adds	r3, #1
 800c6e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c6ea:	b914      	cbnz	r4, 800c6f2 <__match+0x12>
 800c6ec:	6003      	str	r3, [r0, #0]
 800c6ee:	2001      	movs	r0, #1
 800c6f0:	bd30      	pop	{r4, r5, pc}
 800c6f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c6f6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c6fa:	2d19      	cmp	r5, #25
 800c6fc:	bf98      	it	ls
 800c6fe:	3220      	addls	r2, #32
 800c700:	42a2      	cmp	r2, r4
 800c702:	d0f0      	beq.n	800c6e6 <__match+0x6>
 800c704:	2000      	movs	r0, #0
 800c706:	e7f3      	b.n	800c6f0 <__match+0x10>

0800c708 <__hexnan>:
 800c708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c70c:	680b      	ldr	r3, [r1, #0]
 800c70e:	6801      	ldr	r1, [r0, #0]
 800c710:	115e      	asrs	r6, r3, #5
 800c712:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c716:	f013 031f 	ands.w	r3, r3, #31
 800c71a:	b087      	sub	sp, #28
 800c71c:	bf18      	it	ne
 800c71e:	3604      	addne	r6, #4
 800c720:	2500      	movs	r5, #0
 800c722:	1f37      	subs	r7, r6, #4
 800c724:	4682      	mov	sl, r0
 800c726:	4690      	mov	r8, r2
 800c728:	9301      	str	r3, [sp, #4]
 800c72a:	f846 5c04 	str.w	r5, [r6, #-4]
 800c72e:	46b9      	mov	r9, r7
 800c730:	463c      	mov	r4, r7
 800c732:	9502      	str	r5, [sp, #8]
 800c734:	46ab      	mov	fp, r5
 800c736:	784a      	ldrb	r2, [r1, #1]
 800c738:	1c4b      	adds	r3, r1, #1
 800c73a:	9303      	str	r3, [sp, #12]
 800c73c:	b342      	cbz	r2, 800c790 <__hexnan+0x88>
 800c73e:	4610      	mov	r0, r2
 800c740:	9105      	str	r1, [sp, #20]
 800c742:	9204      	str	r2, [sp, #16]
 800c744:	f7ff fd94 	bl	800c270 <__hexdig_fun>
 800c748:	2800      	cmp	r0, #0
 800c74a:	d151      	bne.n	800c7f0 <__hexnan+0xe8>
 800c74c:	9a04      	ldr	r2, [sp, #16]
 800c74e:	9905      	ldr	r1, [sp, #20]
 800c750:	2a20      	cmp	r2, #32
 800c752:	d818      	bhi.n	800c786 <__hexnan+0x7e>
 800c754:	9b02      	ldr	r3, [sp, #8]
 800c756:	459b      	cmp	fp, r3
 800c758:	dd13      	ble.n	800c782 <__hexnan+0x7a>
 800c75a:	454c      	cmp	r4, r9
 800c75c:	d206      	bcs.n	800c76c <__hexnan+0x64>
 800c75e:	2d07      	cmp	r5, #7
 800c760:	dc04      	bgt.n	800c76c <__hexnan+0x64>
 800c762:	462a      	mov	r2, r5
 800c764:	4649      	mov	r1, r9
 800c766:	4620      	mov	r0, r4
 800c768:	f7ff ffa8 	bl	800c6bc <L_shift>
 800c76c:	4544      	cmp	r4, r8
 800c76e:	d952      	bls.n	800c816 <__hexnan+0x10e>
 800c770:	2300      	movs	r3, #0
 800c772:	f1a4 0904 	sub.w	r9, r4, #4
 800c776:	f844 3c04 	str.w	r3, [r4, #-4]
 800c77a:	f8cd b008 	str.w	fp, [sp, #8]
 800c77e:	464c      	mov	r4, r9
 800c780:	461d      	mov	r5, r3
 800c782:	9903      	ldr	r1, [sp, #12]
 800c784:	e7d7      	b.n	800c736 <__hexnan+0x2e>
 800c786:	2a29      	cmp	r2, #41	@ 0x29
 800c788:	d157      	bne.n	800c83a <__hexnan+0x132>
 800c78a:	3102      	adds	r1, #2
 800c78c:	f8ca 1000 	str.w	r1, [sl]
 800c790:	f1bb 0f00 	cmp.w	fp, #0
 800c794:	d051      	beq.n	800c83a <__hexnan+0x132>
 800c796:	454c      	cmp	r4, r9
 800c798:	d206      	bcs.n	800c7a8 <__hexnan+0xa0>
 800c79a:	2d07      	cmp	r5, #7
 800c79c:	dc04      	bgt.n	800c7a8 <__hexnan+0xa0>
 800c79e:	462a      	mov	r2, r5
 800c7a0:	4649      	mov	r1, r9
 800c7a2:	4620      	mov	r0, r4
 800c7a4:	f7ff ff8a 	bl	800c6bc <L_shift>
 800c7a8:	4544      	cmp	r4, r8
 800c7aa:	d936      	bls.n	800c81a <__hexnan+0x112>
 800c7ac:	f1a8 0204 	sub.w	r2, r8, #4
 800c7b0:	4623      	mov	r3, r4
 800c7b2:	f853 1b04 	ldr.w	r1, [r3], #4
 800c7b6:	f842 1f04 	str.w	r1, [r2, #4]!
 800c7ba:	429f      	cmp	r7, r3
 800c7bc:	d2f9      	bcs.n	800c7b2 <__hexnan+0xaa>
 800c7be:	1b3b      	subs	r3, r7, r4
 800c7c0:	f023 0303 	bic.w	r3, r3, #3
 800c7c4:	3304      	adds	r3, #4
 800c7c6:	3401      	adds	r4, #1
 800c7c8:	3e03      	subs	r6, #3
 800c7ca:	42b4      	cmp	r4, r6
 800c7cc:	bf88      	it	hi
 800c7ce:	2304      	movhi	r3, #4
 800c7d0:	4443      	add	r3, r8
 800c7d2:	2200      	movs	r2, #0
 800c7d4:	f843 2b04 	str.w	r2, [r3], #4
 800c7d8:	429f      	cmp	r7, r3
 800c7da:	d2fb      	bcs.n	800c7d4 <__hexnan+0xcc>
 800c7dc:	683b      	ldr	r3, [r7, #0]
 800c7de:	b91b      	cbnz	r3, 800c7e8 <__hexnan+0xe0>
 800c7e0:	4547      	cmp	r7, r8
 800c7e2:	d128      	bne.n	800c836 <__hexnan+0x12e>
 800c7e4:	2301      	movs	r3, #1
 800c7e6:	603b      	str	r3, [r7, #0]
 800c7e8:	2005      	movs	r0, #5
 800c7ea:	b007      	add	sp, #28
 800c7ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7f0:	3501      	adds	r5, #1
 800c7f2:	2d08      	cmp	r5, #8
 800c7f4:	f10b 0b01 	add.w	fp, fp, #1
 800c7f8:	dd06      	ble.n	800c808 <__hexnan+0x100>
 800c7fa:	4544      	cmp	r4, r8
 800c7fc:	d9c1      	bls.n	800c782 <__hexnan+0x7a>
 800c7fe:	2300      	movs	r3, #0
 800c800:	f844 3c04 	str.w	r3, [r4, #-4]
 800c804:	2501      	movs	r5, #1
 800c806:	3c04      	subs	r4, #4
 800c808:	6822      	ldr	r2, [r4, #0]
 800c80a:	f000 000f 	and.w	r0, r0, #15
 800c80e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c812:	6020      	str	r0, [r4, #0]
 800c814:	e7b5      	b.n	800c782 <__hexnan+0x7a>
 800c816:	2508      	movs	r5, #8
 800c818:	e7b3      	b.n	800c782 <__hexnan+0x7a>
 800c81a:	9b01      	ldr	r3, [sp, #4]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d0dd      	beq.n	800c7dc <__hexnan+0xd4>
 800c820:	f1c3 0320 	rsb	r3, r3, #32
 800c824:	f04f 32ff 	mov.w	r2, #4294967295
 800c828:	40da      	lsrs	r2, r3
 800c82a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c82e:	4013      	ands	r3, r2
 800c830:	f846 3c04 	str.w	r3, [r6, #-4]
 800c834:	e7d2      	b.n	800c7dc <__hexnan+0xd4>
 800c836:	3f04      	subs	r7, #4
 800c838:	e7d0      	b.n	800c7dc <__hexnan+0xd4>
 800c83a:	2004      	movs	r0, #4
 800c83c:	e7d5      	b.n	800c7ea <__hexnan+0xe2>
	...

0800c840 <malloc>:
 800c840:	4b02      	ldr	r3, [pc, #8]	@ (800c84c <malloc+0xc>)
 800c842:	4601      	mov	r1, r0
 800c844:	6818      	ldr	r0, [r3, #0]
 800c846:	f000 b825 	b.w	800c894 <_malloc_r>
 800c84a:	bf00      	nop
 800c84c:	200001d4 	.word	0x200001d4

0800c850 <sbrk_aligned>:
 800c850:	b570      	push	{r4, r5, r6, lr}
 800c852:	4e0f      	ldr	r6, [pc, #60]	@ (800c890 <sbrk_aligned+0x40>)
 800c854:	460c      	mov	r4, r1
 800c856:	6831      	ldr	r1, [r6, #0]
 800c858:	4605      	mov	r5, r0
 800c85a:	b911      	cbnz	r1, 800c862 <sbrk_aligned+0x12>
 800c85c:	f000 ff94 	bl	800d788 <_sbrk_r>
 800c860:	6030      	str	r0, [r6, #0]
 800c862:	4621      	mov	r1, r4
 800c864:	4628      	mov	r0, r5
 800c866:	f000 ff8f 	bl	800d788 <_sbrk_r>
 800c86a:	1c43      	adds	r3, r0, #1
 800c86c:	d103      	bne.n	800c876 <sbrk_aligned+0x26>
 800c86e:	f04f 34ff 	mov.w	r4, #4294967295
 800c872:	4620      	mov	r0, r4
 800c874:	bd70      	pop	{r4, r5, r6, pc}
 800c876:	1cc4      	adds	r4, r0, #3
 800c878:	f024 0403 	bic.w	r4, r4, #3
 800c87c:	42a0      	cmp	r0, r4
 800c87e:	d0f8      	beq.n	800c872 <sbrk_aligned+0x22>
 800c880:	1a21      	subs	r1, r4, r0
 800c882:	4628      	mov	r0, r5
 800c884:	f000 ff80 	bl	800d788 <_sbrk_r>
 800c888:	3001      	adds	r0, #1
 800c88a:	d1f2      	bne.n	800c872 <sbrk_aligned+0x22>
 800c88c:	e7ef      	b.n	800c86e <sbrk_aligned+0x1e>
 800c88e:	bf00      	nop
 800c890:	20005e28 	.word	0x20005e28

0800c894 <_malloc_r>:
 800c894:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c898:	1ccd      	adds	r5, r1, #3
 800c89a:	f025 0503 	bic.w	r5, r5, #3
 800c89e:	3508      	adds	r5, #8
 800c8a0:	2d0c      	cmp	r5, #12
 800c8a2:	bf38      	it	cc
 800c8a4:	250c      	movcc	r5, #12
 800c8a6:	2d00      	cmp	r5, #0
 800c8a8:	4606      	mov	r6, r0
 800c8aa:	db01      	blt.n	800c8b0 <_malloc_r+0x1c>
 800c8ac:	42a9      	cmp	r1, r5
 800c8ae:	d904      	bls.n	800c8ba <_malloc_r+0x26>
 800c8b0:	230c      	movs	r3, #12
 800c8b2:	6033      	str	r3, [r6, #0]
 800c8b4:	2000      	movs	r0, #0
 800c8b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c8ba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c990 <_malloc_r+0xfc>
 800c8be:	f000 f87b 	bl	800c9b8 <__malloc_lock>
 800c8c2:	f8d8 3000 	ldr.w	r3, [r8]
 800c8c6:	461c      	mov	r4, r3
 800c8c8:	bb44      	cbnz	r4, 800c91c <_malloc_r+0x88>
 800c8ca:	4629      	mov	r1, r5
 800c8cc:	4630      	mov	r0, r6
 800c8ce:	f7ff ffbf 	bl	800c850 <sbrk_aligned>
 800c8d2:	1c43      	adds	r3, r0, #1
 800c8d4:	4604      	mov	r4, r0
 800c8d6:	d158      	bne.n	800c98a <_malloc_r+0xf6>
 800c8d8:	f8d8 4000 	ldr.w	r4, [r8]
 800c8dc:	4627      	mov	r7, r4
 800c8de:	2f00      	cmp	r7, #0
 800c8e0:	d143      	bne.n	800c96a <_malloc_r+0xd6>
 800c8e2:	2c00      	cmp	r4, #0
 800c8e4:	d04b      	beq.n	800c97e <_malloc_r+0xea>
 800c8e6:	6823      	ldr	r3, [r4, #0]
 800c8e8:	4639      	mov	r1, r7
 800c8ea:	4630      	mov	r0, r6
 800c8ec:	eb04 0903 	add.w	r9, r4, r3
 800c8f0:	f000 ff4a 	bl	800d788 <_sbrk_r>
 800c8f4:	4581      	cmp	r9, r0
 800c8f6:	d142      	bne.n	800c97e <_malloc_r+0xea>
 800c8f8:	6821      	ldr	r1, [r4, #0]
 800c8fa:	1a6d      	subs	r5, r5, r1
 800c8fc:	4629      	mov	r1, r5
 800c8fe:	4630      	mov	r0, r6
 800c900:	f7ff ffa6 	bl	800c850 <sbrk_aligned>
 800c904:	3001      	adds	r0, #1
 800c906:	d03a      	beq.n	800c97e <_malloc_r+0xea>
 800c908:	6823      	ldr	r3, [r4, #0]
 800c90a:	442b      	add	r3, r5
 800c90c:	6023      	str	r3, [r4, #0]
 800c90e:	f8d8 3000 	ldr.w	r3, [r8]
 800c912:	685a      	ldr	r2, [r3, #4]
 800c914:	bb62      	cbnz	r2, 800c970 <_malloc_r+0xdc>
 800c916:	f8c8 7000 	str.w	r7, [r8]
 800c91a:	e00f      	b.n	800c93c <_malloc_r+0xa8>
 800c91c:	6822      	ldr	r2, [r4, #0]
 800c91e:	1b52      	subs	r2, r2, r5
 800c920:	d420      	bmi.n	800c964 <_malloc_r+0xd0>
 800c922:	2a0b      	cmp	r2, #11
 800c924:	d917      	bls.n	800c956 <_malloc_r+0xc2>
 800c926:	1961      	adds	r1, r4, r5
 800c928:	42a3      	cmp	r3, r4
 800c92a:	6025      	str	r5, [r4, #0]
 800c92c:	bf18      	it	ne
 800c92e:	6059      	strne	r1, [r3, #4]
 800c930:	6863      	ldr	r3, [r4, #4]
 800c932:	bf08      	it	eq
 800c934:	f8c8 1000 	streq.w	r1, [r8]
 800c938:	5162      	str	r2, [r4, r5]
 800c93a:	604b      	str	r3, [r1, #4]
 800c93c:	4630      	mov	r0, r6
 800c93e:	f000 f841 	bl	800c9c4 <__malloc_unlock>
 800c942:	f104 000b 	add.w	r0, r4, #11
 800c946:	1d23      	adds	r3, r4, #4
 800c948:	f020 0007 	bic.w	r0, r0, #7
 800c94c:	1ac2      	subs	r2, r0, r3
 800c94e:	bf1c      	itt	ne
 800c950:	1a1b      	subne	r3, r3, r0
 800c952:	50a3      	strne	r3, [r4, r2]
 800c954:	e7af      	b.n	800c8b6 <_malloc_r+0x22>
 800c956:	6862      	ldr	r2, [r4, #4]
 800c958:	42a3      	cmp	r3, r4
 800c95a:	bf0c      	ite	eq
 800c95c:	f8c8 2000 	streq.w	r2, [r8]
 800c960:	605a      	strne	r2, [r3, #4]
 800c962:	e7eb      	b.n	800c93c <_malloc_r+0xa8>
 800c964:	4623      	mov	r3, r4
 800c966:	6864      	ldr	r4, [r4, #4]
 800c968:	e7ae      	b.n	800c8c8 <_malloc_r+0x34>
 800c96a:	463c      	mov	r4, r7
 800c96c:	687f      	ldr	r7, [r7, #4]
 800c96e:	e7b6      	b.n	800c8de <_malloc_r+0x4a>
 800c970:	461a      	mov	r2, r3
 800c972:	685b      	ldr	r3, [r3, #4]
 800c974:	42a3      	cmp	r3, r4
 800c976:	d1fb      	bne.n	800c970 <_malloc_r+0xdc>
 800c978:	2300      	movs	r3, #0
 800c97a:	6053      	str	r3, [r2, #4]
 800c97c:	e7de      	b.n	800c93c <_malloc_r+0xa8>
 800c97e:	230c      	movs	r3, #12
 800c980:	6033      	str	r3, [r6, #0]
 800c982:	4630      	mov	r0, r6
 800c984:	f000 f81e 	bl	800c9c4 <__malloc_unlock>
 800c988:	e794      	b.n	800c8b4 <_malloc_r+0x20>
 800c98a:	6005      	str	r5, [r0, #0]
 800c98c:	e7d6      	b.n	800c93c <_malloc_r+0xa8>
 800c98e:	bf00      	nop
 800c990:	20005e2c 	.word	0x20005e2c

0800c994 <__ascii_mbtowc>:
 800c994:	b082      	sub	sp, #8
 800c996:	b901      	cbnz	r1, 800c99a <__ascii_mbtowc+0x6>
 800c998:	a901      	add	r1, sp, #4
 800c99a:	b142      	cbz	r2, 800c9ae <__ascii_mbtowc+0x1a>
 800c99c:	b14b      	cbz	r3, 800c9b2 <__ascii_mbtowc+0x1e>
 800c99e:	7813      	ldrb	r3, [r2, #0]
 800c9a0:	600b      	str	r3, [r1, #0]
 800c9a2:	7812      	ldrb	r2, [r2, #0]
 800c9a4:	1e10      	subs	r0, r2, #0
 800c9a6:	bf18      	it	ne
 800c9a8:	2001      	movne	r0, #1
 800c9aa:	b002      	add	sp, #8
 800c9ac:	4770      	bx	lr
 800c9ae:	4610      	mov	r0, r2
 800c9b0:	e7fb      	b.n	800c9aa <__ascii_mbtowc+0x16>
 800c9b2:	f06f 0001 	mvn.w	r0, #1
 800c9b6:	e7f8      	b.n	800c9aa <__ascii_mbtowc+0x16>

0800c9b8 <__malloc_lock>:
 800c9b8:	4801      	ldr	r0, [pc, #4]	@ (800c9c0 <__malloc_lock+0x8>)
 800c9ba:	f7fe bd46 	b.w	800b44a <__retarget_lock_acquire_recursive>
 800c9be:	bf00      	nop
 800c9c0:	20005e24 	.word	0x20005e24

0800c9c4 <__malloc_unlock>:
 800c9c4:	4801      	ldr	r0, [pc, #4]	@ (800c9cc <__malloc_unlock+0x8>)
 800c9c6:	f7fe bd41 	b.w	800b44c <__retarget_lock_release_recursive>
 800c9ca:	bf00      	nop
 800c9cc:	20005e24 	.word	0x20005e24

0800c9d0 <_Balloc>:
 800c9d0:	b570      	push	{r4, r5, r6, lr}
 800c9d2:	69c6      	ldr	r6, [r0, #28]
 800c9d4:	4604      	mov	r4, r0
 800c9d6:	460d      	mov	r5, r1
 800c9d8:	b976      	cbnz	r6, 800c9f8 <_Balloc+0x28>
 800c9da:	2010      	movs	r0, #16
 800c9dc:	f7ff ff30 	bl	800c840 <malloc>
 800c9e0:	4602      	mov	r2, r0
 800c9e2:	61e0      	str	r0, [r4, #28]
 800c9e4:	b920      	cbnz	r0, 800c9f0 <_Balloc+0x20>
 800c9e6:	4b18      	ldr	r3, [pc, #96]	@ (800ca48 <_Balloc+0x78>)
 800c9e8:	4818      	ldr	r0, [pc, #96]	@ (800ca4c <_Balloc+0x7c>)
 800c9ea:	216b      	movs	r1, #107	@ 0x6b
 800c9ec:	f000 fedc 	bl	800d7a8 <__assert_func>
 800c9f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c9f4:	6006      	str	r6, [r0, #0]
 800c9f6:	60c6      	str	r6, [r0, #12]
 800c9f8:	69e6      	ldr	r6, [r4, #28]
 800c9fa:	68f3      	ldr	r3, [r6, #12]
 800c9fc:	b183      	cbz	r3, 800ca20 <_Balloc+0x50>
 800c9fe:	69e3      	ldr	r3, [r4, #28]
 800ca00:	68db      	ldr	r3, [r3, #12]
 800ca02:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ca06:	b9b8      	cbnz	r0, 800ca38 <_Balloc+0x68>
 800ca08:	2101      	movs	r1, #1
 800ca0a:	fa01 f605 	lsl.w	r6, r1, r5
 800ca0e:	1d72      	adds	r2, r6, #5
 800ca10:	0092      	lsls	r2, r2, #2
 800ca12:	4620      	mov	r0, r4
 800ca14:	f000 fee6 	bl	800d7e4 <_calloc_r>
 800ca18:	b160      	cbz	r0, 800ca34 <_Balloc+0x64>
 800ca1a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ca1e:	e00e      	b.n	800ca3e <_Balloc+0x6e>
 800ca20:	2221      	movs	r2, #33	@ 0x21
 800ca22:	2104      	movs	r1, #4
 800ca24:	4620      	mov	r0, r4
 800ca26:	f000 fedd 	bl	800d7e4 <_calloc_r>
 800ca2a:	69e3      	ldr	r3, [r4, #28]
 800ca2c:	60f0      	str	r0, [r6, #12]
 800ca2e:	68db      	ldr	r3, [r3, #12]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d1e4      	bne.n	800c9fe <_Balloc+0x2e>
 800ca34:	2000      	movs	r0, #0
 800ca36:	bd70      	pop	{r4, r5, r6, pc}
 800ca38:	6802      	ldr	r2, [r0, #0]
 800ca3a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ca3e:	2300      	movs	r3, #0
 800ca40:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ca44:	e7f7      	b.n	800ca36 <_Balloc+0x66>
 800ca46:	bf00      	nop
 800ca48:	08015faa 	.word	0x08015faa
 800ca4c:	0801608a 	.word	0x0801608a

0800ca50 <_Bfree>:
 800ca50:	b570      	push	{r4, r5, r6, lr}
 800ca52:	69c6      	ldr	r6, [r0, #28]
 800ca54:	4605      	mov	r5, r0
 800ca56:	460c      	mov	r4, r1
 800ca58:	b976      	cbnz	r6, 800ca78 <_Bfree+0x28>
 800ca5a:	2010      	movs	r0, #16
 800ca5c:	f7ff fef0 	bl	800c840 <malloc>
 800ca60:	4602      	mov	r2, r0
 800ca62:	61e8      	str	r0, [r5, #28]
 800ca64:	b920      	cbnz	r0, 800ca70 <_Bfree+0x20>
 800ca66:	4b09      	ldr	r3, [pc, #36]	@ (800ca8c <_Bfree+0x3c>)
 800ca68:	4809      	ldr	r0, [pc, #36]	@ (800ca90 <_Bfree+0x40>)
 800ca6a:	218f      	movs	r1, #143	@ 0x8f
 800ca6c:	f000 fe9c 	bl	800d7a8 <__assert_func>
 800ca70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ca74:	6006      	str	r6, [r0, #0]
 800ca76:	60c6      	str	r6, [r0, #12]
 800ca78:	b13c      	cbz	r4, 800ca8a <_Bfree+0x3a>
 800ca7a:	69eb      	ldr	r3, [r5, #28]
 800ca7c:	6862      	ldr	r2, [r4, #4]
 800ca7e:	68db      	ldr	r3, [r3, #12]
 800ca80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ca84:	6021      	str	r1, [r4, #0]
 800ca86:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ca8a:	bd70      	pop	{r4, r5, r6, pc}
 800ca8c:	08015faa 	.word	0x08015faa
 800ca90:	0801608a 	.word	0x0801608a

0800ca94 <__multadd>:
 800ca94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca98:	690d      	ldr	r5, [r1, #16]
 800ca9a:	4607      	mov	r7, r0
 800ca9c:	460c      	mov	r4, r1
 800ca9e:	461e      	mov	r6, r3
 800caa0:	f101 0c14 	add.w	ip, r1, #20
 800caa4:	2000      	movs	r0, #0
 800caa6:	f8dc 3000 	ldr.w	r3, [ip]
 800caaa:	b299      	uxth	r1, r3
 800caac:	fb02 6101 	mla	r1, r2, r1, r6
 800cab0:	0c1e      	lsrs	r6, r3, #16
 800cab2:	0c0b      	lsrs	r3, r1, #16
 800cab4:	fb02 3306 	mla	r3, r2, r6, r3
 800cab8:	b289      	uxth	r1, r1
 800caba:	3001      	adds	r0, #1
 800cabc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cac0:	4285      	cmp	r5, r0
 800cac2:	f84c 1b04 	str.w	r1, [ip], #4
 800cac6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800caca:	dcec      	bgt.n	800caa6 <__multadd+0x12>
 800cacc:	b30e      	cbz	r6, 800cb12 <__multadd+0x7e>
 800cace:	68a3      	ldr	r3, [r4, #8]
 800cad0:	42ab      	cmp	r3, r5
 800cad2:	dc19      	bgt.n	800cb08 <__multadd+0x74>
 800cad4:	6861      	ldr	r1, [r4, #4]
 800cad6:	4638      	mov	r0, r7
 800cad8:	3101      	adds	r1, #1
 800cada:	f7ff ff79 	bl	800c9d0 <_Balloc>
 800cade:	4680      	mov	r8, r0
 800cae0:	b928      	cbnz	r0, 800caee <__multadd+0x5a>
 800cae2:	4602      	mov	r2, r0
 800cae4:	4b0c      	ldr	r3, [pc, #48]	@ (800cb18 <__multadd+0x84>)
 800cae6:	480d      	ldr	r0, [pc, #52]	@ (800cb1c <__multadd+0x88>)
 800cae8:	21ba      	movs	r1, #186	@ 0xba
 800caea:	f000 fe5d 	bl	800d7a8 <__assert_func>
 800caee:	6922      	ldr	r2, [r4, #16]
 800caf0:	3202      	adds	r2, #2
 800caf2:	f104 010c 	add.w	r1, r4, #12
 800caf6:	0092      	lsls	r2, r2, #2
 800caf8:	300c      	adds	r0, #12
 800cafa:	f7fe fcb0 	bl	800b45e <memcpy>
 800cafe:	4621      	mov	r1, r4
 800cb00:	4638      	mov	r0, r7
 800cb02:	f7ff ffa5 	bl	800ca50 <_Bfree>
 800cb06:	4644      	mov	r4, r8
 800cb08:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cb0c:	3501      	adds	r5, #1
 800cb0e:	615e      	str	r6, [r3, #20]
 800cb10:	6125      	str	r5, [r4, #16]
 800cb12:	4620      	mov	r0, r4
 800cb14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb18:	08016019 	.word	0x08016019
 800cb1c:	0801608a 	.word	0x0801608a

0800cb20 <__s2b>:
 800cb20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb24:	460c      	mov	r4, r1
 800cb26:	4615      	mov	r5, r2
 800cb28:	461f      	mov	r7, r3
 800cb2a:	2209      	movs	r2, #9
 800cb2c:	3308      	adds	r3, #8
 800cb2e:	4606      	mov	r6, r0
 800cb30:	fb93 f3f2 	sdiv	r3, r3, r2
 800cb34:	2100      	movs	r1, #0
 800cb36:	2201      	movs	r2, #1
 800cb38:	429a      	cmp	r2, r3
 800cb3a:	db09      	blt.n	800cb50 <__s2b+0x30>
 800cb3c:	4630      	mov	r0, r6
 800cb3e:	f7ff ff47 	bl	800c9d0 <_Balloc>
 800cb42:	b940      	cbnz	r0, 800cb56 <__s2b+0x36>
 800cb44:	4602      	mov	r2, r0
 800cb46:	4b19      	ldr	r3, [pc, #100]	@ (800cbac <__s2b+0x8c>)
 800cb48:	4819      	ldr	r0, [pc, #100]	@ (800cbb0 <__s2b+0x90>)
 800cb4a:	21d3      	movs	r1, #211	@ 0xd3
 800cb4c:	f000 fe2c 	bl	800d7a8 <__assert_func>
 800cb50:	0052      	lsls	r2, r2, #1
 800cb52:	3101      	adds	r1, #1
 800cb54:	e7f0      	b.n	800cb38 <__s2b+0x18>
 800cb56:	9b08      	ldr	r3, [sp, #32]
 800cb58:	6143      	str	r3, [r0, #20]
 800cb5a:	2d09      	cmp	r5, #9
 800cb5c:	f04f 0301 	mov.w	r3, #1
 800cb60:	6103      	str	r3, [r0, #16]
 800cb62:	dd16      	ble.n	800cb92 <__s2b+0x72>
 800cb64:	f104 0909 	add.w	r9, r4, #9
 800cb68:	46c8      	mov	r8, r9
 800cb6a:	442c      	add	r4, r5
 800cb6c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800cb70:	4601      	mov	r1, r0
 800cb72:	3b30      	subs	r3, #48	@ 0x30
 800cb74:	220a      	movs	r2, #10
 800cb76:	4630      	mov	r0, r6
 800cb78:	f7ff ff8c 	bl	800ca94 <__multadd>
 800cb7c:	45a0      	cmp	r8, r4
 800cb7e:	d1f5      	bne.n	800cb6c <__s2b+0x4c>
 800cb80:	f1a5 0408 	sub.w	r4, r5, #8
 800cb84:	444c      	add	r4, r9
 800cb86:	1b2d      	subs	r5, r5, r4
 800cb88:	1963      	adds	r3, r4, r5
 800cb8a:	42bb      	cmp	r3, r7
 800cb8c:	db04      	blt.n	800cb98 <__s2b+0x78>
 800cb8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb92:	340a      	adds	r4, #10
 800cb94:	2509      	movs	r5, #9
 800cb96:	e7f6      	b.n	800cb86 <__s2b+0x66>
 800cb98:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cb9c:	4601      	mov	r1, r0
 800cb9e:	3b30      	subs	r3, #48	@ 0x30
 800cba0:	220a      	movs	r2, #10
 800cba2:	4630      	mov	r0, r6
 800cba4:	f7ff ff76 	bl	800ca94 <__multadd>
 800cba8:	e7ee      	b.n	800cb88 <__s2b+0x68>
 800cbaa:	bf00      	nop
 800cbac:	08016019 	.word	0x08016019
 800cbb0:	0801608a 	.word	0x0801608a

0800cbb4 <__hi0bits>:
 800cbb4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800cbb8:	4603      	mov	r3, r0
 800cbba:	bf36      	itet	cc
 800cbbc:	0403      	lslcc	r3, r0, #16
 800cbbe:	2000      	movcs	r0, #0
 800cbc0:	2010      	movcc	r0, #16
 800cbc2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cbc6:	bf3c      	itt	cc
 800cbc8:	021b      	lslcc	r3, r3, #8
 800cbca:	3008      	addcc	r0, #8
 800cbcc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cbd0:	bf3c      	itt	cc
 800cbd2:	011b      	lslcc	r3, r3, #4
 800cbd4:	3004      	addcc	r0, #4
 800cbd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cbda:	bf3c      	itt	cc
 800cbdc:	009b      	lslcc	r3, r3, #2
 800cbde:	3002      	addcc	r0, #2
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	db05      	blt.n	800cbf0 <__hi0bits+0x3c>
 800cbe4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800cbe8:	f100 0001 	add.w	r0, r0, #1
 800cbec:	bf08      	it	eq
 800cbee:	2020      	moveq	r0, #32
 800cbf0:	4770      	bx	lr

0800cbf2 <__lo0bits>:
 800cbf2:	6803      	ldr	r3, [r0, #0]
 800cbf4:	4602      	mov	r2, r0
 800cbf6:	f013 0007 	ands.w	r0, r3, #7
 800cbfa:	d00b      	beq.n	800cc14 <__lo0bits+0x22>
 800cbfc:	07d9      	lsls	r1, r3, #31
 800cbfe:	d421      	bmi.n	800cc44 <__lo0bits+0x52>
 800cc00:	0798      	lsls	r0, r3, #30
 800cc02:	bf49      	itett	mi
 800cc04:	085b      	lsrmi	r3, r3, #1
 800cc06:	089b      	lsrpl	r3, r3, #2
 800cc08:	2001      	movmi	r0, #1
 800cc0a:	6013      	strmi	r3, [r2, #0]
 800cc0c:	bf5c      	itt	pl
 800cc0e:	6013      	strpl	r3, [r2, #0]
 800cc10:	2002      	movpl	r0, #2
 800cc12:	4770      	bx	lr
 800cc14:	b299      	uxth	r1, r3
 800cc16:	b909      	cbnz	r1, 800cc1c <__lo0bits+0x2a>
 800cc18:	0c1b      	lsrs	r3, r3, #16
 800cc1a:	2010      	movs	r0, #16
 800cc1c:	b2d9      	uxtb	r1, r3
 800cc1e:	b909      	cbnz	r1, 800cc24 <__lo0bits+0x32>
 800cc20:	3008      	adds	r0, #8
 800cc22:	0a1b      	lsrs	r3, r3, #8
 800cc24:	0719      	lsls	r1, r3, #28
 800cc26:	bf04      	itt	eq
 800cc28:	091b      	lsreq	r3, r3, #4
 800cc2a:	3004      	addeq	r0, #4
 800cc2c:	0799      	lsls	r1, r3, #30
 800cc2e:	bf04      	itt	eq
 800cc30:	089b      	lsreq	r3, r3, #2
 800cc32:	3002      	addeq	r0, #2
 800cc34:	07d9      	lsls	r1, r3, #31
 800cc36:	d403      	bmi.n	800cc40 <__lo0bits+0x4e>
 800cc38:	085b      	lsrs	r3, r3, #1
 800cc3a:	f100 0001 	add.w	r0, r0, #1
 800cc3e:	d003      	beq.n	800cc48 <__lo0bits+0x56>
 800cc40:	6013      	str	r3, [r2, #0]
 800cc42:	4770      	bx	lr
 800cc44:	2000      	movs	r0, #0
 800cc46:	4770      	bx	lr
 800cc48:	2020      	movs	r0, #32
 800cc4a:	4770      	bx	lr

0800cc4c <__i2b>:
 800cc4c:	b510      	push	{r4, lr}
 800cc4e:	460c      	mov	r4, r1
 800cc50:	2101      	movs	r1, #1
 800cc52:	f7ff febd 	bl	800c9d0 <_Balloc>
 800cc56:	4602      	mov	r2, r0
 800cc58:	b928      	cbnz	r0, 800cc66 <__i2b+0x1a>
 800cc5a:	4b05      	ldr	r3, [pc, #20]	@ (800cc70 <__i2b+0x24>)
 800cc5c:	4805      	ldr	r0, [pc, #20]	@ (800cc74 <__i2b+0x28>)
 800cc5e:	f240 1145 	movw	r1, #325	@ 0x145
 800cc62:	f000 fda1 	bl	800d7a8 <__assert_func>
 800cc66:	2301      	movs	r3, #1
 800cc68:	6144      	str	r4, [r0, #20]
 800cc6a:	6103      	str	r3, [r0, #16]
 800cc6c:	bd10      	pop	{r4, pc}
 800cc6e:	bf00      	nop
 800cc70:	08016019 	.word	0x08016019
 800cc74:	0801608a 	.word	0x0801608a

0800cc78 <__multiply>:
 800cc78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc7c:	4614      	mov	r4, r2
 800cc7e:	690a      	ldr	r2, [r1, #16]
 800cc80:	6923      	ldr	r3, [r4, #16]
 800cc82:	429a      	cmp	r2, r3
 800cc84:	bfa8      	it	ge
 800cc86:	4623      	movge	r3, r4
 800cc88:	460f      	mov	r7, r1
 800cc8a:	bfa4      	itt	ge
 800cc8c:	460c      	movge	r4, r1
 800cc8e:	461f      	movge	r7, r3
 800cc90:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800cc94:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800cc98:	68a3      	ldr	r3, [r4, #8]
 800cc9a:	6861      	ldr	r1, [r4, #4]
 800cc9c:	eb0a 0609 	add.w	r6, sl, r9
 800cca0:	42b3      	cmp	r3, r6
 800cca2:	b085      	sub	sp, #20
 800cca4:	bfb8      	it	lt
 800cca6:	3101      	addlt	r1, #1
 800cca8:	f7ff fe92 	bl	800c9d0 <_Balloc>
 800ccac:	b930      	cbnz	r0, 800ccbc <__multiply+0x44>
 800ccae:	4602      	mov	r2, r0
 800ccb0:	4b44      	ldr	r3, [pc, #272]	@ (800cdc4 <__multiply+0x14c>)
 800ccb2:	4845      	ldr	r0, [pc, #276]	@ (800cdc8 <__multiply+0x150>)
 800ccb4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ccb8:	f000 fd76 	bl	800d7a8 <__assert_func>
 800ccbc:	f100 0514 	add.w	r5, r0, #20
 800ccc0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ccc4:	462b      	mov	r3, r5
 800ccc6:	2200      	movs	r2, #0
 800ccc8:	4543      	cmp	r3, r8
 800ccca:	d321      	bcc.n	800cd10 <__multiply+0x98>
 800cccc:	f107 0114 	add.w	r1, r7, #20
 800ccd0:	f104 0214 	add.w	r2, r4, #20
 800ccd4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ccd8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ccdc:	9302      	str	r3, [sp, #8]
 800ccde:	1b13      	subs	r3, r2, r4
 800cce0:	3b15      	subs	r3, #21
 800cce2:	f023 0303 	bic.w	r3, r3, #3
 800cce6:	3304      	adds	r3, #4
 800cce8:	f104 0715 	add.w	r7, r4, #21
 800ccec:	42ba      	cmp	r2, r7
 800ccee:	bf38      	it	cc
 800ccf0:	2304      	movcc	r3, #4
 800ccf2:	9301      	str	r3, [sp, #4]
 800ccf4:	9b02      	ldr	r3, [sp, #8]
 800ccf6:	9103      	str	r1, [sp, #12]
 800ccf8:	428b      	cmp	r3, r1
 800ccfa:	d80c      	bhi.n	800cd16 <__multiply+0x9e>
 800ccfc:	2e00      	cmp	r6, #0
 800ccfe:	dd03      	ble.n	800cd08 <__multiply+0x90>
 800cd00:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d05b      	beq.n	800cdc0 <__multiply+0x148>
 800cd08:	6106      	str	r6, [r0, #16]
 800cd0a:	b005      	add	sp, #20
 800cd0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd10:	f843 2b04 	str.w	r2, [r3], #4
 800cd14:	e7d8      	b.n	800ccc8 <__multiply+0x50>
 800cd16:	f8b1 a000 	ldrh.w	sl, [r1]
 800cd1a:	f1ba 0f00 	cmp.w	sl, #0
 800cd1e:	d024      	beq.n	800cd6a <__multiply+0xf2>
 800cd20:	f104 0e14 	add.w	lr, r4, #20
 800cd24:	46a9      	mov	r9, r5
 800cd26:	f04f 0c00 	mov.w	ip, #0
 800cd2a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cd2e:	f8d9 3000 	ldr.w	r3, [r9]
 800cd32:	fa1f fb87 	uxth.w	fp, r7
 800cd36:	b29b      	uxth	r3, r3
 800cd38:	fb0a 330b 	mla	r3, sl, fp, r3
 800cd3c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800cd40:	f8d9 7000 	ldr.w	r7, [r9]
 800cd44:	4463      	add	r3, ip
 800cd46:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800cd4a:	fb0a c70b 	mla	r7, sl, fp, ip
 800cd4e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800cd52:	b29b      	uxth	r3, r3
 800cd54:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800cd58:	4572      	cmp	r2, lr
 800cd5a:	f849 3b04 	str.w	r3, [r9], #4
 800cd5e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800cd62:	d8e2      	bhi.n	800cd2a <__multiply+0xb2>
 800cd64:	9b01      	ldr	r3, [sp, #4]
 800cd66:	f845 c003 	str.w	ip, [r5, r3]
 800cd6a:	9b03      	ldr	r3, [sp, #12]
 800cd6c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800cd70:	3104      	adds	r1, #4
 800cd72:	f1b9 0f00 	cmp.w	r9, #0
 800cd76:	d021      	beq.n	800cdbc <__multiply+0x144>
 800cd78:	682b      	ldr	r3, [r5, #0]
 800cd7a:	f104 0c14 	add.w	ip, r4, #20
 800cd7e:	46ae      	mov	lr, r5
 800cd80:	f04f 0a00 	mov.w	sl, #0
 800cd84:	f8bc b000 	ldrh.w	fp, [ip]
 800cd88:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800cd8c:	fb09 770b 	mla	r7, r9, fp, r7
 800cd90:	4457      	add	r7, sl
 800cd92:	b29b      	uxth	r3, r3
 800cd94:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800cd98:	f84e 3b04 	str.w	r3, [lr], #4
 800cd9c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800cda0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cda4:	f8be 3000 	ldrh.w	r3, [lr]
 800cda8:	fb09 330a 	mla	r3, r9, sl, r3
 800cdac:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800cdb0:	4562      	cmp	r2, ip
 800cdb2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cdb6:	d8e5      	bhi.n	800cd84 <__multiply+0x10c>
 800cdb8:	9f01      	ldr	r7, [sp, #4]
 800cdba:	51eb      	str	r3, [r5, r7]
 800cdbc:	3504      	adds	r5, #4
 800cdbe:	e799      	b.n	800ccf4 <__multiply+0x7c>
 800cdc0:	3e01      	subs	r6, #1
 800cdc2:	e79b      	b.n	800ccfc <__multiply+0x84>
 800cdc4:	08016019 	.word	0x08016019
 800cdc8:	0801608a 	.word	0x0801608a

0800cdcc <__pow5mult>:
 800cdcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cdd0:	4615      	mov	r5, r2
 800cdd2:	f012 0203 	ands.w	r2, r2, #3
 800cdd6:	4607      	mov	r7, r0
 800cdd8:	460e      	mov	r6, r1
 800cdda:	d007      	beq.n	800cdec <__pow5mult+0x20>
 800cddc:	4c25      	ldr	r4, [pc, #148]	@ (800ce74 <__pow5mult+0xa8>)
 800cdde:	3a01      	subs	r2, #1
 800cde0:	2300      	movs	r3, #0
 800cde2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cde6:	f7ff fe55 	bl	800ca94 <__multadd>
 800cdea:	4606      	mov	r6, r0
 800cdec:	10ad      	asrs	r5, r5, #2
 800cdee:	d03d      	beq.n	800ce6c <__pow5mult+0xa0>
 800cdf0:	69fc      	ldr	r4, [r7, #28]
 800cdf2:	b97c      	cbnz	r4, 800ce14 <__pow5mult+0x48>
 800cdf4:	2010      	movs	r0, #16
 800cdf6:	f7ff fd23 	bl	800c840 <malloc>
 800cdfa:	4602      	mov	r2, r0
 800cdfc:	61f8      	str	r0, [r7, #28]
 800cdfe:	b928      	cbnz	r0, 800ce0c <__pow5mult+0x40>
 800ce00:	4b1d      	ldr	r3, [pc, #116]	@ (800ce78 <__pow5mult+0xac>)
 800ce02:	481e      	ldr	r0, [pc, #120]	@ (800ce7c <__pow5mult+0xb0>)
 800ce04:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ce08:	f000 fcce 	bl	800d7a8 <__assert_func>
 800ce0c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ce10:	6004      	str	r4, [r0, #0]
 800ce12:	60c4      	str	r4, [r0, #12]
 800ce14:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ce18:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ce1c:	b94c      	cbnz	r4, 800ce32 <__pow5mult+0x66>
 800ce1e:	f240 2171 	movw	r1, #625	@ 0x271
 800ce22:	4638      	mov	r0, r7
 800ce24:	f7ff ff12 	bl	800cc4c <__i2b>
 800ce28:	2300      	movs	r3, #0
 800ce2a:	f8c8 0008 	str.w	r0, [r8, #8]
 800ce2e:	4604      	mov	r4, r0
 800ce30:	6003      	str	r3, [r0, #0]
 800ce32:	f04f 0900 	mov.w	r9, #0
 800ce36:	07eb      	lsls	r3, r5, #31
 800ce38:	d50a      	bpl.n	800ce50 <__pow5mult+0x84>
 800ce3a:	4631      	mov	r1, r6
 800ce3c:	4622      	mov	r2, r4
 800ce3e:	4638      	mov	r0, r7
 800ce40:	f7ff ff1a 	bl	800cc78 <__multiply>
 800ce44:	4631      	mov	r1, r6
 800ce46:	4680      	mov	r8, r0
 800ce48:	4638      	mov	r0, r7
 800ce4a:	f7ff fe01 	bl	800ca50 <_Bfree>
 800ce4e:	4646      	mov	r6, r8
 800ce50:	106d      	asrs	r5, r5, #1
 800ce52:	d00b      	beq.n	800ce6c <__pow5mult+0xa0>
 800ce54:	6820      	ldr	r0, [r4, #0]
 800ce56:	b938      	cbnz	r0, 800ce68 <__pow5mult+0x9c>
 800ce58:	4622      	mov	r2, r4
 800ce5a:	4621      	mov	r1, r4
 800ce5c:	4638      	mov	r0, r7
 800ce5e:	f7ff ff0b 	bl	800cc78 <__multiply>
 800ce62:	6020      	str	r0, [r4, #0]
 800ce64:	f8c0 9000 	str.w	r9, [r0]
 800ce68:	4604      	mov	r4, r0
 800ce6a:	e7e4      	b.n	800ce36 <__pow5mult+0x6a>
 800ce6c:	4630      	mov	r0, r6
 800ce6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce72:	bf00      	nop
 800ce74:	080160e4 	.word	0x080160e4
 800ce78:	08015faa 	.word	0x08015faa
 800ce7c:	0801608a 	.word	0x0801608a

0800ce80 <__lshift>:
 800ce80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce84:	460c      	mov	r4, r1
 800ce86:	6849      	ldr	r1, [r1, #4]
 800ce88:	6923      	ldr	r3, [r4, #16]
 800ce8a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ce8e:	68a3      	ldr	r3, [r4, #8]
 800ce90:	4607      	mov	r7, r0
 800ce92:	4691      	mov	r9, r2
 800ce94:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ce98:	f108 0601 	add.w	r6, r8, #1
 800ce9c:	42b3      	cmp	r3, r6
 800ce9e:	db0b      	blt.n	800ceb8 <__lshift+0x38>
 800cea0:	4638      	mov	r0, r7
 800cea2:	f7ff fd95 	bl	800c9d0 <_Balloc>
 800cea6:	4605      	mov	r5, r0
 800cea8:	b948      	cbnz	r0, 800cebe <__lshift+0x3e>
 800ceaa:	4602      	mov	r2, r0
 800ceac:	4b28      	ldr	r3, [pc, #160]	@ (800cf50 <__lshift+0xd0>)
 800ceae:	4829      	ldr	r0, [pc, #164]	@ (800cf54 <__lshift+0xd4>)
 800ceb0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ceb4:	f000 fc78 	bl	800d7a8 <__assert_func>
 800ceb8:	3101      	adds	r1, #1
 800ceba:	005b      	lsls	r3, r3, #1
 800cebc:	e7ee      	b.n	800ce9c <__lshift+0x1c>
 800cebe:	2300      	movs	r3, #0
 800cec0:	f100 0114 	add.w	r1, r0, #20
 800cec4:	f100 0210 	add.w	r2, r0, #16
 800cec8:	4618      	mov	r0, r3
 800ceca:	4553      	cmp	r3, sl
 800cecc:	db33      	blt.n	800cf36 <__lshift+0xb6>
 800cece:	6920      	ldr	r0, [r4, #16]
 800ced0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ced4:	f104 0314 	add.w	r3, r4, #20
 800ced8:	f019 091f 	ands.w	r9, r9, #31
 800cedc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cee0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cee4:	d02b      	beq.n	800cf3e <__lshift+0xbe>
 800cee6:	f1c9 0e20 	rsb	lr, r9, #32
 800ceea:	468a      	mov	sl, r1
 800ceec:	2200      	movs	r2, #0
 800ceee:	6818      	ldr	r0, [r3, #0]
 800cef0:	fa00 f009 	lsl.w	r0, r0, r9
 800cef4:	4310      	orrs	r0, r2
 800cef6:	f84a 0b04 	str.w	r0, [sl], #4
 800cefa:	f853 2b04 	ldr.w	r2, [r3], #4
 800cefe:	459c      	cmp	ip, r3
 800cf00:	fa22 f20e 	lsr.w	r2, r2, lr
 800cf04:	d8f3      	bhi.n	800ceee <__lshift+0x6e>
 800cf06:	ebac 0304 	sub.w	r3, ip, r4
 800cf0a:	3b15      	subs	r3, #21
 800cf0c:	f023 0303 	bic.w	r3, r3, #3
 800cf10:	3304      	adds	r3, #4
 800cf12:	f104 0015 	add.w	r0, r4, #21
 800cf16:	4584      	cmp	ip, r0
 800cf18:	bf38      	it	cc
 800cf1a:	2304      	movcc	r3, #4
 800cf1c:	50ca      	str	r2, [r1, r3]
 800cf1e:	b10a      	cbz	r2, 800cf24 <__lshift+0xa4>
 800cf20:	f108 0602 	add.w	r6, r8, #2
 800cf24:	3e01      	subs	r6, #1
 800cf26:	4638      	mov	r0, r7
 800cf28:	612e      	str	r6, [r5, #16]
 800cf2a:	4621      	mov	r1, r4
 800cf2c:	f7ff fd90 	bl	800ca50 <_Bfree>
 800cf30:	4628      	mov	r0, r5
 800cf32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf36:	f842 0f04 	str.w	r0, [r2, #4]!
 800cf3a:	3301      	adds	r3, #1
 800cf3c:	e7c5      	b.n	800ceca <__lshift+0x4a>
 800cf3e:	3904      	subs	r1, #4
 800cf40:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf44:	f841 2f04 	str.w	r2, [r1, #4]!
 800cf48:	459c      	cmp	ip, r3
 800cf4a:	d8f9      	bhi.n	800cf40 <__lshift+0xc0>
 800cf4c:	e7ea      	b.n	800cf24 <__lshift+0xa4>
 800cf4e:	bf00      	nop
 800cf50:	08016019 	.word	0x08016019
 800cf54:	0801608a 	.word	0x0801608a

0800cf58 <__mcmp>:
 800cf58:	690a      	ldr	r2, [r1, #16]
 800cf5a:	4603      	mov	r3, r0
 800cf5c:	6900      	ldr	r0, [r0, #16]
 800cf5e:	1a80      	subs	r0, r0, r2
 800cf60:	b530      	push	{r4, r5, lr}
 800cf62:	d10e      	bne.n	800cf82 <__mcmp+0x2a>
 800cf64:	3314      	adds	r3, #20
 800cf66:	3114      	adds	r1, #20
 800cf68:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800cf6c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800cf70:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cf74:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cf78:	4295      	cmp	r5, r2
 800cf7a:	d003      	beq.n	800cf84 <__mcmp+0x2c>
 800cf7c:	d205      	bcs.n	800cf8a <__mcmp+0x32>
 800cf7e:	f04f 30ff 	mov.w	r0, #4294967295
 800cf82:	bd30      	pop	{r4, r5, pc}
 800cf84:	42a3      	cmp	r3, r4
 800cf86:	d3f3      	bcc.n	800cf70 <__mcmp+0x18>
 800cf88:	e7fb      	b.n	800cf82 <__mcmp+0x2a>
 800cf8a:	2001      	movs	r0, #1
 800cf8c:	e7f9      	b.n	800cf82 <__mcmp+0x2a>
	...

0800cf90 <__mdiff>:
 800cf90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf94:	4689      	mov	r9, r1
 800cf96:	4606      	mov	r6, r0
 800cf98:	4611      	mov	r1, r2
 800cf9a:	4648      	mov	r0, r9
 800cf9c:	4614      	mov	r4, r2
 800cf9e:	f7ff ffdb 	bl	800cf58 <__mcmp>
 800cfa2:	1e05      	subs	r5, r0, #0
 800cfa4:	d112      	bne.n	800cfcc <__mdiff+0x3c>
 800cfa6:	4629      	mov	r1, r5
 800cfa8:	4630      	mov	r0, r6
 800cfaa:	f7ff fd11 	bl	800c9d0 <_Balloc>
 800cfae:	4602      	mov	r2, r0
 800cfb0:	b928      	cbnz	r0, 800cfbe <__mdiff+0x2e>
 800cfb2:	4b3f      	ldr	r3, [pc, #252]	@ (800d0b0 <__mdiff+0x120>)
 800cfb4:	f240 2137 	movw	r1, #567	@ 0x237
 800cfb8:	483e      	ldr	r0, [pc, #248]	@ (800d0b4 <__mdiff+0x124>)
 800cfba:	f000 fbf5 	bl	800d7a8 <__assert_func>
 800cfbe:	2301      	movs	r3, #1
 800cfc0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cfc4:	4610      	mov	r0, r2
 800cfc6:	b003      	add	sp, #12
 800cfc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfcc:	bfbc      	itt	lt
 800cfce:	464b      	movlt	r3, r9
 800cfd0:	46a1      	movlt	r9, r4
 800cfd2:	4630      	mov	r0, r6
 800cfd4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800cfd8:	bfba      	itte	lt
 800cfda:	461c      	movlt	r4, r3
 800cfdc:	2501      	movlt	r5, #1
 800cfde:	2500      	movge	r5, #0
 800cfe0:	f7ff fcf6 	bl	800c9d0 <_Balloc>
 800cfe4:	4602      	mov	r2, r0
 800cfe6:	b918      	cbnz	r0, 800cff0 <__mdiff+0x60>
 800cfe8:	4b31      	ldr	r3, [pc, #196]	@ (800d0b0 <__mdiff+0x120>)
 800cfea:	f240 2145 	movw	r1, #581	@ 0x245
 800cfee:	e7e3      	b.n	800cfb8 <__mdiff+0x28>
 800cff0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800cff4:	6926      	ldr	r6, [r4, #16]
 800cff6:	60c5      	str	r5, [r0, #12]
 800cff8:	f109 0310 	add.w	r3, r9, #16
 800cffc:	f109 0514 	add.w	r5, r9, #20
 800d000:	f104 0e14 	add.w	lr, r4, #20
 800d004:	f100 0b14 	add.w	fp, r0, #20
 800d008:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d00c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d010:	9301      	str	r3, [sp, #4]
 800d012:	46d9      	mov	r9, fp
 800d014:	f04f 0c00 	mov.w	ip, #0
 800d018:	9b01      	ldr	r3, [sp, #4]
 800d01a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d01e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d022:	9301      	str	r3, [sp, #4]
 800d024:	fa1f f38a 	uxth.w	r3, sl
 800d028:	4619      	mov	r1, r3
 800d02a:	b283      	uxth	r3, r0
 800d02c:	1acb      	subs	r3, r1, r3
 800d02e:	0c00      	lsrs	r0, r0, #16
 800d030:	4463      	add	r3, ip
 800d032:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d036:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d03a:	b29b      	uxth	r3, r3
 800d03c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d040:	4576      	cmp	r6, lr
 800d042:	f849 3b04 	str.w	r3, [r9], #4
 800d046:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d04a:	d8e5      	bhi.n	800d018 <__mdiff+0x88>
 800d04c:	1b33      	subs	r3, r6, r4
 800d04e:	3b15      	subs	r3, #21
 800d050:	f023 0303 	bic.w	r3, r3, #3
 800d054:	3415      	adds	r4, #21
 800d056:	3304      	adds	r3, #4
 800d058:	42a6      	cmp	r6, r4
 800d05a:	bf38      	it	cc
 800d05c:	2304      	movcc	r3, #4
 800d05e:	441d      	add	r5, r3
 800d060:	445b      	add	r3, fp
 800d062:	461e      	mov	r6, r3
 800d064:	462c      	mov	r4, r5
 800d066:	4544      	cmp	r4, r8
 800d068:	d30e      	bcc.n	800d088 <__mdiff+0xf8>
 800d06a:	f108 0103 	add.w	r1, r8, #3
 800d06e:	1b49      	subs	r1, r1, r5
 800d070:	f021 0103 	bic.w	r1, r1, #3
 800d074:	3d03      	subs	r5, #3
 800d076:	45a8      	cmp	r8, r5
 800d078:	bf38      	it	cc
 800d07a:	2100      	movcc	r1, #0
 800d07c:	440b      	add	r3, r1
 800d07e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d082:	b191      	cbz	r1, 800d0aa <__mdiff+0x11a>
 800d084:	6117      	str	r7, [r2, #16]
 800d086:	e79d      	b.n	800cfc4 <__mdiff+0x34>
 800d088:	f854 1b04 	ldr.w	r1, [r4], #4
 800d08c:	46e6      	mov	lr, ip
 800d08e:	0c08      	lsrs	r0, r1, #16
 800d090:	fa1c fc81 	uxtah	ip, ip, r1
 800d094:	4471      	add	r1, lr
 800d096:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d09a:	b289      	uxth	r1, r1
 800d09c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d0a0:	f846 1b04 	str.w	r1, [r6], #4
 800d0a4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d0a8:	e7dd      	b.n	800d066 <__mdiff+0xd6>
 800d0aa:	3f01      	subs	r7, #1
 800d0ac:	e7e7      	b.n	800d07e <__mdiff+0xee>
 800d0ae:	bf00      	nop
 800d0b0:	08016019 	.word	0x08016019
 800d0b4:	0801608a 	.word	0x0801608a

0800d0b8 <__ulp>:
 800d0b8:	b082      	sub	sp, #8
 800d0ba:	ed8d 0b00 	vstr	d0, [sp]
 800d0be:	9a01      	ldr	r2, [sp, #4]
 800d0c0:	4b0f      	ldr	r3, [pc, #60]	@ (800d100 <__ulp+0x48>)
 800d0c2:	4013      	ands	r3, r2
 800d0c4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	dc08      	bgt.n	800d0de <__ulp+0x26>
 800d0cc:	425b      	negs	r3, r3
 800d0ce:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800d0d2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d0d6:	da04      	bge.n	800d0e2 <__ulp+0x2a>
 800d0d8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d0dc:	4113      	asrs	r3, r2
 800d0de:	2200      	movs	r2, #0
 800d0e0:	e008      	b.n	800d0f4 <__ulp+0x3c>
 800d0e2:	f1a2 0314 	sub.w	r3, r2, #20
 800d0e6:	2b1e      	cmp	r3, #30
 800d0e8:	bfda      	itte	le
 800d0ea:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800d0ee:	40da      	lsrle	r2, r3
 800d0f0:	2201      	movgt	r2, #1
 800d0f2:	2300      	movs	r3, #0
 800d0f4:	4619      	mov	r1, r3
 800d0f6:	4610      	mov	r0, r2
 800d0f8:	ec41 0b10 	vmov	d0, r0, r1
 800d0fc:	b002      	add	sp, #8
 800d0fe:	4770      	bx	lr
 800d100:	7ff00000 	.word	0x7ff00000

0800d104 <__b2d>:
 800d104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d108:	6906      	ldr	r6, [r0, #16]
 800d10a:	f100 0814 	add.w	r8, r0, #20
 800d10e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800d112:	1f37      	subs	r7, r6, #4
 800d114:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d118:	4610      	mov	r0, r2
 800d11a:	f7ff fd4b 	bl	800cbb4 <__hi0bits>
 800d11e:	f1c0 0320 	rsb	r3, r0, #32
 800d122:	280a      	cmp	r0, #10
 800d124:	600b      	str	r3, [r1, #0]
 800d126:	491b      	ldr	r1, [pc, #108]	@ (800d194 <__b2d+0x90>)
 800d128:	dc15      	bgt.n	800d156 <__b2d+0x52>
 800d12a:	f1c0 0c0b 	rsb	ip, r0, #11
 800d12e:	fa22 f30c 	lsr.w	r3, r2, ip
 800d132:	45b8      	cmp	r8, r7
 800d134:	ea43 0501 	orr.w	r5, r3, r1
 800d138:	bf34      	ite	cc
 800d13a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d13e:	2300      	movcs	r3, #0
 800d140:	3015      	adds	r0, #21
 800d142:	fa02 f000 	lsl.w	r0, r2, r0
 800d146:	fa23 f30c 	lsr.w	r3, r3, ip
 800d14a:	4303      	orrs	r3, r0
 800d14c:	461c      	mov	r4, r3
 800d14e:	ec45 4b10 	vmov	d0, r4, r5
 800d152:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d156:	45b8      	cmp	r8, r7
 800d158:	bf3a      	itte	cc
 800d15a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d15e:	f1a6 0708 	subcc.w	r7, r6, #8
 800d162:	2300      	movcs	r3, #0
 800d164:	380b      	subs	r0, #11
 800d166:	d012      	beq.n	800d18e <__b2d+0x8a>
 800d168:	f1c0 0120 	rsb	r1, r0, #32
 800d16c:	fa23 f401 	lsr.w	r4, r3, r1
 800d170:	4082      	lsls	r2, r0
 800d172:	4322      	orrs	r2, r4
 800d174:	4547      	cmp	r7, r8
 800d176:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800d17a:	bf8c      	ite	hi
 800d17c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800d180:	2200      	movls	r2, #0
 800d182:	4083      	lsls	r3, r0
 800d184:	40ca      	lsrs	r2, r1
 800d186:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800d18a:	4313      	orrs	r3, r2
 800d18c:	e7de      	b.n	800d14c <__b2d+0x48>
 800d18e:	ea42 0501 	orr.w	r5, r2, r1
 800d192:	e7db      	b.n	800d14c <__b2d+0x48>
 800d194:	3ff00000 	.word	0x3ff00000

0800d198 <__d2b>:
 800d198:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d19c:	460f      	mov	r7, r1
 800d19e:	2101      	movs	r1, #1
 800d1a0:	ec59 8b10 	vmov	r8, r9, d0
 800d1a4:	4616      	mov	r6, r2
 800d1a6:	f7ff fc13 	bl	800c9d0 <_Balloc>
 800d1aa:	4604      	mov	r4, r0
 800d1ac:	b930      	cbnz	r0, 800d1bc <__d2b+0x24>
 800d1ae:	4602      	mov	r2, r0
 800d1b0:	4b23      	ldr	r3, [pc, #140]	@ (800d240 <__d2b+0xa8>)
 800d1b2:	4824      	ldr	r0, [pc, #144]	@ (800d244 <__d2b+0xac>)
 800d1b4:	f240 310f 	movw	r1, #783	@ 0x30f
 800d1b8:	f000 faf6 	bl	800d7a8 <__assert_func>
 800d1bc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d1c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d1c4:	b10d      	cbz	r5, 800d1ca <__d2b+0x32>
 800d1c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d1ca:	9301      	str	r3, [sp, #4]
 800d1cc:	f1b8 0300 	subs.w	r3, r8, #0
 800d1d0:	d023      	beq.n	800d21a <__d2b+0x82>
 800d1d2:	4668      	mov	r0, sp
 800d1d4:	9300      	str	r3, [sp, #0]
 800d1d6:	f7ff fd0c 	bl	800cbf2 <__lo0bits>
 800d1da:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d1de:	b1d0      	cbz	r0, 800d216 <__d2b+0x7e>
 800d1e0:	f1c0 0320 	rsb	r3, r0, #32
 800d1e4:	fa02 f303 	lsl.w	r3, r2, r3
 800d1e8:	430b      	orrs	r3, r1
 800d1ea:	40c2      	lsrs	r2, r0
 800d1ec:	6163      	str	r3, [r4, #20]
 800d1ee:	9201      	str	r2, [sp, #4]
 800d1f0:	9b01      	ldr	r3, [sp, #4]
 800d1f2:	61a3      	str	r3, [r4, #24]
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	bf0c      	ite	eq
 800d1f8:	2201      	moveq	r2, #1
 800d1fa:	2202      	movne	r2, #2
 800d1fc:	6122      	str	r2, [r4, #16]
 800d1fe:	b1a5      	cbz	r5, 800d22a <__d2b+0x92>
 800d200:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d204:	4405      	add	r5, r0
 800d206:	603d      	str	r5, [r7, #0]
 800d208:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d20c:	6030      	str	r0, [r6, #0]
 800d20e:	4620      	mov	r0, r4
 800d210:	b003      	add	sp, #12
 800d212:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d216:	6161      	str	r1, [r4, #20]
 800d218:	e7ea      	b.n	800d1f0 <__d2b+0x58>
 800d21a:	a801      	add	r0, sp, #4
 800d21c:	f7ff fce9 	bl	800cbf2 <__lo0bits>
 800d220:	9b01      	ldr	r3, [sp, #4]
 800d222:	6163      	str	r3, [r4, #20]
 800d224:	3020      	adds	r0, #32
 800d226:	2201      	movs	r2, #1
 800d228:	e7e8      	b.n	800d1fc <__d2b+0x64>
 800d22a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d22e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d232:	6038      	str	r0, [r7, #0]
 800d234:	6918      	ldr	r0, [r3, #16]
 800d236:	f7ff fcbd 	bl	800cbb4 <__hi0bits>
 800d23a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d23e:	e7e5      	b.n	800d20c <__d2b+0x74>
 800d240:	08016019 	.word	0x08016019
 800d244:	0801608a 	.word	0x0801608a

0800d248 <__ratio>:
 800d248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d24c:	b085      	sub	sp, #20
 800d24e:	e9cd 1000 	strd	r1, r0, [sp]
 800d252:	a902      	add	r1, sp, #8
 800d254:	f7ff ff56 	bl	800d104 <__b2d>
 800d258:	9800      	ldr	r0, [sp, #0]
 800d25a:	a903      	add	r1, sp, #12
 800d25c:	ec55 4b10 	vmov	r4, r5, d0
 800d260:	f7ff ff50 	bl	800d104 <__b2d>
 800d264:	9b01      	ldr	r3, [sp, #4]
 800d266:	6919      	ldr	r1, [r3, #16]
 800d268:	9b00      	ldr	r3, [sp, #0]
 800d26a:	691b      	ldr	r3, [r3, #16]
 800d26c:	1ac9      	subs	r1, r1, r3
 800d26e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800d272:	1a9b      	subs	r3, r3, r2
 800d274:	ec5b ab10 	vmov	sl, fp, d0
 800d278:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	bfce      	itee	gt
 800d280:	462a      	movgt	r2, r5
 800d282:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d286:	465a      	movle	r2, fp
 800d288:	462f      	mov	r7, r5
 800d28a:	46d9      	mov	r9, fp
 800d28c:	bfcc      	ite	gt
 800d28e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d292:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800d296:	464b      	mov	r3, r9
 800d298:	4652      	mov	r2, sl
 800d29a:	4620      	mov	r0, r4
 800d29c:	4639      	mov	r1, r7
 800d29e:	f7f3 fb0d 	bl	80008bc <__aeabi_ddiv>
 800d2a2:	ec41 0b10 	vmov	d0, r0, r1
 800d2a6:	b005      	add	sp, #20
 800d2a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d2ac <__copybits>:
 800d2ac:	3901      	subs	r1, #1
 800d2ae:	b570      	push	{r4, r5, r6, lr}
 800d2b0:	1149      	asrs	r1, r1, #5
 800d2b2:	6914      	ldr	r4, [r2, #16]
 800d2b4:	3101      	adds	r1, #1
 800d2b6:	f102 0314 	add.w	r3, r2, #20
 800d2ba:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d2be:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d2c2:	1f05      	subs	r5, r0, #4
 800d2c4:	42a3      	cmp	r3, r4
 800d2c6:	d30c      	bcc.n	800d2e2 <__copybits+0x36>
 800d2c8:	1aa3      	subs	r3, r4, r2
 800d2ca:	3b11      	subs	r3, #17
 800d2cc:	f023 0303 	bic.w	r3, r3, #3
 800d2d0:	3211      	adds	r2, #17
 800d2d2:	42a2      	cmp	r2, r4
 800d2d4:	bf88      	it	hi
 800d2d6:	2300      	movhi	r3, #0
 800d2d8:	4418      	add	r0, r3
 800d2da:	2300      	movs	r3, #0
 800d2dc:	4288      	cmp	r0, r1
 800d2de:	d305      	bcc.n	800d2ec <__copybits+0x40>
 800d2e0:	bd70      	pop	{r4, r5, r6, pc}
 800d2e2:	f853 6b04 	ldr.w	r6, [r3], #4
 800d2e6:	f845 6f04 	str.w	r6, [r5, #4]!
 800d2ea:	e7eb      	b.n	800d2c4 <__copybits+0x18>
 800d2ec:	f840 3b04 	str.w	r3, [r0], #4
 800d2f0:	e7f4      	b.n	800d2dc <__copybits+0x30>

0800d2f2 <__any_on>:
 800d2f2:	f100 0214 	add.w	r2, r0, #20
 800d2f6:	6900      	ldr	r0, [r0, #16]
 800d2f8:	114b      	asrs	r3, r1, #5
 800d2fa:	4298      	cmp	r0, r3
 800d2fc:	b510      	push	{r4, lr}
 800d2fe:	db11      	blt.n	800d324 <__any_on+0x32>
 800d300:	dd0a      	ble.n	800d318 <__any_on+0x26>
 800d302:	f011 011f 	ands.w	r1, r1, #31
 800d306:	d007      	beq.n	800d318 <__any_on+0x26>
 800d308:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d30c:	fa24 f001 	lsr.w	r0, r4, r1
 800d310:	fa00 f101 	lsl.w	r1, r0, r1
 800d314:	428c      	cmp	r4, r1
 800d316:	d10b      	bne.n	800d330 <__any_on+0x3e>
 800d318:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d31c:	4293      	cmp	r3, r2
 800d31e:	d803      	bhi.n	800d328 <__any_on+0x36>
 800d320:	2000      	movs	r0, #0
 800d322:	bd10      	pop	{r4, pc}
 800d324:	4603      	mov	r3, r0
 800d326:	e7f7      	b.n	800d318 <__any_on+0x26>
 800d328:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d32c:	2900      	cmp	r1, #0
 800d32e:	d0f5      	beq.n	800d31c <__any_on+0x2a>
 800d330:	2001      	movs	r0, #1
 800d332:	e7f6      	b.n	800d322 <__any_on+0x30>

0800d334 <__ascii_wctomb>:
 800d334:	4603      	mov	r3, r0
 800d336:	4608      	mov	r0, r1
 800d338:	b141      	cbz	r1, 800d34c <__ascii_wctomb+0x18>
 800d33a:	2aff      	cmp	r2, #255	@ 0xff
 800d33c:	d904      	bls.n	800d348 <__ascii_wctomb+0x14>
 800d33e:	228a      	movs	r2, #138	@ 0x8a
 800d340:	601a      	str	r2, [r3, #0]
 800d342:	f04f 30ff 	mov.w	r0, #4294967295
 800d346:	4770      	bx	lr
 800d348:	700a      	strb	r2, [r1, #0]
 800d34a:	2001      	movs	r0, #1
 800d34c:	4770      	bx	lr

0800d34e <__ssputs_r>:
 800d34e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d352:	688e      	ldr	r6, [r1, #8]
 800d354:	461f      	mov	r7, r3
 800d356:	42be      	cmp	r6, r7
 800d358:	680b      	ldr	r3, [r1, #0]
 800d35a:	4682      	mov	sl, r0
 800d35c:	460c      	mov	r4, r1
 800d35e:	4690      	mov	r8, r2
 800d360:	d82d      	bhi.n	800d3be <__ssputs_r+0x70>
 800d362:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d366:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d36a:	d026      	beq.n	800d3ba <__ssputs_r+0x6c>
 800d36c:	6965      	ldr	r5, [r4, #20]
 800d36e:	6909      	ldr	r1, [r1, #16]
 800d370:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d374:	eba3 0901 	sub.w	r9, r3, r1
 800d378:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d37c:	1c7b      	adds	r3, r7, #1
 800d37e:	444b      	add	r3, r9
 800d380:	106d      	asrs	r5, r5, #1
 800d382:	429d      	cmp	r5, r3
 800d384:	bf38      	it	cc
 800d386:	461d      	movcc	r5, r3
 800d388:	0553      	lsls	r3, r2, #21
 800d38a:	d527      	bpl.n	800d3dc <__ssputs_r+0x8e>
 800d38c:	4629      	mov	r1, r5
 800d38e:	f7ff fa81 	bl	800c894 <_malloc_r>
 800d392:	4606      	mov	r6, r0
 800d394:	b360      	cbz	r0, 800d3f0 <__ssputs_r+0xa2>
 800d396:	6921      	ldr	r1, [r4, #16]
 800d398:	464a      	mov	r2, r9
 800d39a:	f7fe f860 	bl	800b45e <memcpy>
 800d39e:	89a3      	ldrh	r3, [r4, #12]
 800d3a0:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d3a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d3a8:	81a3      	strh	r3, [r4, #12]
 800d3aa:	6126      	str	r6, [r4, #16]
 800d3ac:	6165      	str	r5, [r4, #20]
 800d3ae:	444e      	add	r6, r9
 800d3b0:	eba5 0509 	sub.w	r5, r5, r9
 800d3b4:	6026      	str	r6, [r4, #0]
 800d3b6:	60a5      	str	r5, [r4, #8]
 800d3b8:	463e      	mov	r6, r7
 800d3ba:	42be      	cmp	r6, r7
 800d3bc:	d900      	bls.n	800d3c0 <__ssputs_r+0x72>
 800d3be:	463e      	mov	r6, r7
 800d3c0:	6820      	ldr	r0, [r4, #0]
 800d3c2:	4632      	mov	r2, r6
 800d3c4:	4641      	mov	r1, r8
 800d3c6:	f000 f9c5 	bl	800d754 <memmove>
 800d3ca:	68a3      	ldr	r3, [r4, #8]
 800d3cc:	1b9b      	subs	r3, r3, r6
 800d3ce:	60a3      	str	r3, [r4, #8]
 800d3d0:	6823      	ldr	r3, [r4, #0]
 800d3d2:	4433      	add	r3, r6
 800d3d4:	6023      	str	r3, [r4, #0]
 800d3d6:	2000      	movs	r0, #0
 800d3d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3dc:	462a      	mov	r2, r5
 800d3de:	f000 fa15 	bl	800d80c <_realloc_r>
 800d3e2:	4606      	mov	r6, r0
 800d3e4:	2800      	cmp	r0, #0
 800d3e6:	d1e0      	bne.n	800d3aa <__ssputs_r+0x5c>
 800d3e8:	6921      	ldr	r1, [r4, #16]
 800d3ea:	4650      	mov	r0, sl
 800d3ec:	f7fe fea4 	bl	800c138 <_free_r>
 800d3f0:	230c      	movs	r3, #12
 800d3f2:	f8ca 3000 	str.w	r3, [sl]
 800d3f6:	89a3      	ldrh	r3, [r4, #12]
 800d3f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d3fc:	81a3      	strh	r3, [r4, #12]
 800d3fe:	f04f 30ff 	mov.w	r0, #4294967295
 800d402:	e7e9      	b.n	800d3d8 <__ssputs_r+0x8a>

0800d404 <_svfiprintf_r>:
 800d404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d408:	4698      	mov	r8, r3
 800d40a:	898b      	ldrh	r3, [r1, #12]
 800d40c:	061b      	lsls	r3, r3, #24
 800d40e:	b09d      	sub	sp, #116	@ 0x74
 800d410:	4607      	mov	r7, r0
 800d412:	460d      	mov	r5, r1
 800d414:	4614      	mov	r4, r2
 800d416:	d510      	bpl.n	800d43a <_svfiprintf_r+0x36>
 800d418:	690b      	ldr	r3, [r1, #16]
 800d41a:	b973      	cbnz	r3, 800d43a <_svfiprintf_r+0x36>
 800d41c:	2140      	movs	r1, #64	@ 0x40
 800d41e:	f7ff fa39 	bl	800c894 <_malloc_r>
 800d422:	6028      	str	r0, [r5, #0]
 800d424:	6128      	str	r0, [r5, #16]
 800d426:	b930      	cbnz	r0, 800d436 <_svfiprintf_r+0x32>
 800d428:	230c      	movs	r3, #12
 800d42a:	603b      	str	r3, [r7, #0]
 800d42c:	f04f 30ff 	mov.w	r0, #4294967295
 800d430:	b01d      	add	sp, #116	@ 0x74
 800d432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d436:	2340      	movs	r3, #64	@ 0x40
 800d438:	616b      	str	r3, [r5, #20]
 800d43a:	2300      	movs	r3, #0
 800d43c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d43e:	2320      	movs	r3, #32
 800d440:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d444:	f8cd 800c 	str.w	r8, [sp, #12]
 800d448:	2330      	movs	r3, #48	@ 0x30
 800d44a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d5e8 <_svfiprintf_r+0x1e4>
 800d44e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d452:	f04f 0901 	mov.w	r9, #1
 800d456:	4623      	mov	r3, r4
 800d458:	469a      	mov	sl, r3
 800d45a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d45e:	b10a      	cbz	r2, 800d464 <_svfiprintf_r+0x60>
 800d460:	2a25      	cmp	r2, #37	@ 0x25
 800d462:	d1f9      	bne.n	800d458 <_svfiprintf_r+0x54>
 800d464:	ebba 0b04 	subs.w	fp, sl, r4
 800d468:	d00b      	beq.n	800d482 <_svfiprintf_r+0x7e>
 800d46a:	465b      	mov	r3, fp
 800d46c:	4622      	mov	r2, r4
 800d46e:	4629      	mov	r1, r5
 800d470:	4638      	mov	r0, r7
 800d472:	f7ff ff6c 	bl	800d34e <__ssputs_r>
 800d476:	3001      	adds	r0, #1
 800d478:	f000 80a7 	beq.w	800d5ca <_svfiprintf_r+0x1c6>
 800d47c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d47e:	445a      	add	r2, fp
 800d480:	9209      	str	r2, [sp, #36]	@ 0x24
 800d482:	f89a 3000 	ldrb.w	r3, [sl]
 800d486:	2b00      	cmp	r3, #0
 800d488:	f000 809f 	beq.w	800d5ca <_svfiprintf_r+0x1c6>
 800d48c:	2300      	movs	r3, #0
 800d48e:	f04f 32ff 	mov.w	r2, #4294967295
 800d492:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d496:	f10a 0a01 	add.w	sl, sl, #1
 800d49a:	9304      	str	r3, [sp, #16]
 800d49c:	9307      	str	r3, [sp, #28]
 800d49e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d4a2:	931a      	str	r3, [sp, #104]	@ 0x68
 800d4a4:	4654      	mov	r4, sl
 800d4a6:	2205      	movs	r2, #5
 800d4a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4ac:	484e      	ldr	r0, [pc, #312]	@ (800d5e8 <_svfiprintf_r+0x1e4>)
 800d4ae:	f7f2 fec7 	bl	8000240 <memchr>
 800d4b2:	9a04      	ldr	r2, [sp, #16]
 800d4b4:	b9d8      	cbnz	r0, 800d4ee <_svfiprintf_r+0xea>
 800d4b6:	06d0      	lsls	r0, r2, #27
 800d4b8:	bf44      	itt	mi
 800d4ba:	2320      	movmi	r3, #32
 800d4bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d4c0:	0711      	lsls	r1, r2, #28
 800d4c2:	bf44      	itt	mi
 800d4c4:	232b      	movmi	r3, #43	@ 0x2b
 800d4c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d4ca:	f89a 3000 	ldrb.w	r3, [sl]
 800d4ce:	2b2a      	cmp	r3, #42	@ 0x2a
 800d4d0:	d015      	beq.n	800d4fe <_svfiprintf_r+0xfa>
 800d4d2:	9a07      	ldr	r2, [sp, #28]
 800d4d4:	4654      	mov	r4, sl
 800d4d6:	2000      	movs	r0, #0
 800d4d8:	f04f 0c0a 	mov.w	ip, #10
 800d4dc:	4621      	mov	r1, r4
 800d4de:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d4e2:	3b30      	subs	r3, #48	@ 0x30
 800d4e4:	2b09      	cmp	r3, #9
 800d4e6:	d94b      	bls.n	800d580 <_svfiprintf_r+0x17c>
 800d4e8:	b1b0      	cbz	r0, 800d518 <_svfiprintf_r+0x114>
 800d4ea:	9207      	str	r2, [sp, #28]
 800d4ec:	e014      	b.n	800d518 <_svfiprintf_r+0x114>
 800d4ee:	eba0 0308 	sub.w	r3, r0, r8
 800d4f2:	fa09 f303 	lsl.w	r3, r9, r3
 800d4f6:	4313      	orrs	r3, r2
 800d4f8:	9304      	str	r3, [sp, #16]
 800d4fa:	46a2      	mov	sl, r4
 800d4fc:	e7d2      	b.n	800d4a4 <_svfiprintf_r+0xa0>
 800d4fe:	9b03      	ldr	r3, [sp, #12]
 800d500:	1d19      	adds	r1, r3, #4
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	9103      	str	r1, [sp, #12]
 800d506:	2b00      	cmp	r3, #0
 800d508:	bfbb      	ittet	lt
 800d50a:	425b      	neglt	r3, r3
 800d50c:	f042 0202 	orrlt.w	r2, r2, #2
 800d510:	9307      	strge	r3, [sp, #28]
 800d512:	9307      	strlt	r3, [sp, #28]
 800d514:	bfb8      	it	lt
 800d516:	9204      	strlt	r2, [sp, #16]
 800d518:	7823      	ldrb	r3, [r4, #0]
 800d51a:	2b2e      	cmp	r3, #46	@ 0x2e
 800d51c:	d10a      	bne.n	800d534 <_svfiprintf_r+0x130>
 800d51e:	7863      	ldrb	r3, [r4, #1]
 800d520:	2b2a      	cmp	r3, #42	@ 0x2a
 800d522:	d132      	bne.n	800d58a <_svfiprintf_r+0x186>
 800d524:	9b03      	ldr	r3, [sp, #12]
 800d526:	1d1a      	adds	r2, r3, #4
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	9203      	str	r2, [sp, #12]
 800d52c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d530:	3402      	adds	r4, #2
 800d532:	9305      	str	r3, [sp, #20]
 800d534:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d5f8 <_svfiprintf_r+0x1f4>
 800d538:	7821      	ldrb	r1, [r4, #0]
 800d53a:	2203      	movs	r2, #3
 800d53c:	4650      	mov	r0, sl
 800d53e:	f7f2 fe7f 	bl	8000240 <memchr>
 800d542:	b138      	cbz	r0, 800d554 <_svfiprintf_r+0x150>
 800d544:	9b04      	ldr	r3, [sp, #16]
 800d546:	eba0 000a 	sub.w	r0, r0, sl
 800d54a:	2240      	movs	r2, #64	@ 0x40
 800d54c:	4082      	lsls	r2, r0
 800d54e:	4313      	orrs	r3, r2
 800d550:	3401      	adds	r4, #1
 800d552:	9304      	str	r3, [sp, #16]
 800d554:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d558:	4824      	ldr	r0, [pc, #144]	@ (800d5ec <_svfiprintf_r+0x1e8>)
 800d55a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d55e:	2206      	movs	r2, #6
 800d560:	f7f2 fe6e 	bl	8000240 <memchr>
 800d564:	2800      	cmp	r0, #0
 800d566:	d036      	beq.n	800d5d6 <_svfiprintf_r+0x1d2>
 800d568:	4b21      	ldr	r3, [pc, #132]	@ (800d5f0 <_svfiprintf_r+0x1ec>)
 800d56a:	bb1b      	cbnz	r3, 800d5b4 <_svfiprintf_r+0x1b0>
 800d56c:	9b03      	ldr	r3, [sp, #12]
 800d56e:	3307      	adds	r3, #7
 800d570:	f023 0307 	bic.w	r3, r3, #7
 800d574:	3308      	adds	r3, #8
 800d576:	9303      	str	r3, [sp, #12]
 800d578:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d57a:	4433      	add	r3, r6
 800d57c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d57e:	e76a      	b.n	800d456 <_svfiprintf_r+0x52>
 800d580:	fb0c 3202 	mla	r2, ip, r2, r3
 800d584:	460c      	mov	r4, r1
 800d586:	2001      	movs	r0, #1
 800d588:	e7a8      	b.n	800d4dc <_svfiprintf_r+0xd8>
 800d58a:	2300      	movs	r3, #0
 800d58c:	3401      	adds	r4, #1
 800d58e:	9305      	str	r3, [sp, #20]
 800d590:	4619      	mov	r1, r3
 800d592:	f04f 0c0a 	mov.w	ip, #10
 800d596:	4620      	mov	r0, r4
 800d598:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d59c:	3a30      	subs	r2, #48	@ 0x30
 800d59e:	2a09      	cmp	r2, #9
 800d5a0:	d903      	bls.n	800d5aa <_svfiprintf_r+0x1a6>
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d0c6      	beq.n	800d534 <_svfiprintf_r+0x130>
 800d5a6:	9105      	str	r1, [sp, #20]
 800d5a8:	e7c4      	b.n	800d534 <_svfiprintf_r+0x130>
 800d5aa:	fb0c 2101 	mla	r1, ip, r1, r2
 800d5ae:	4604      	mov	r4, r0
 800d5b0:	2301      	movs	r3, #1
 800d5b2:	e7f0      	b.n	800d596 <_svfiprintf_r+0x192>
 800d5b4:	ab03      	add	r3, sp, #12
 800d5b6:	9300      	str	r3, [sp, #0]
 800d5b8:	462a      	mov	r2, r5
 800d5ba:	4b0e      	ldr	r3, [pc, #56]	@ (800d5f4 <_svfiprintf_r+0x1f0>)
 800d5bc:	a904      	add	r1, sp, #16
 800d5be:	4638      	mov	r0, r7
 800d5c0:	f7fd f992 	bl	800a8e8 <_printf_float>
 800d5c4:	1c42      	adds	r2, r0, #1
 800d5c6:	4606      	mov	r6, r0
 800d5c8:	d1d6      	bne.n	800d578 <_svfiprintf_r+0x174>
 800d5ca:	89ab      	ldrh	r3, [r5, #12]
 800d5cc:	065b      	lsls	r3, r3, #25
 800d5ce:	f53f af2d 	bmi.w	800d42c <_svfiprintf_r+0x28>
 800d5d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d5d4:	e72c      	b.n	800d430 <_svfiprintf_r+0x2c>
 800d5d6:	ab03      	add	r3, sp, #12
 800d5d8:	9300      	str	r3, [sp, #0]
 800d5da:	462a      	mov	r2, r5
 800d5dc:	4b05      	ldr	r3, [pc, #20]	@ (800d5f4 <_svfiprintf_r+0x1f0>)
 800d5de:	a904      	add	r1, sp, #16
 800d5e0:	4638      	mov	r0, r7
 800d5e2:	f7fd fc19 	bl	800ae18 <_printf_i>
 800d5e6:	e7ed      	b.n	800d5c4 <_svfiprintf_r+0x1c0>
 800d5e8:	080161e0 	.word	0x080161e0
 800d5ec:	080161ea 	.word	0x080161ea
 800d5f0:	0800a8e9 	.word	0x0800a8e9
 800d5f4:	0800d34f 	.word	0x0800d34f
 800d5f8:	080161e6 	.word	0x080161e6

0800d5fc <__sflush_r>:
 800d5fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d604:	0716      	lsls	r6, r2, #28
 800d606:	4605      	mov	r5, r0
 800d608:	460c      	mov	r4, r1
 800d60a:	d454      	bmi.n	800d6b6 <__sflush_r+0xba>
 800d60c:	684b      	ldr	r3, [r1, #4]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	dc02      	bgt.n	800d618 <__sflush_r+0x1c>
 800d612:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d614:	2b00      	cmp	r3, #0
 800d616:	dd48      	ble.n	800d6aa <__sflush_r+0xae>
 800d618:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d61a:	2e00      	cmp	r6, #0
 800d61c:	d045      	beq.n	800d6aa <__sflush_r+0xae>
 800d61e:	2300      	movs	r3, #0
 800d620:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d624:	682f      	ldr	r7, [r5, #0]
 800d626:	6a21      	ldr	r1, [r4, #32]
 800d628:	602b      	str	r3, [r5, #0]
 800d62a:	d030      	beq.n	800d68e <__sflush_r+0x92>
 800d62c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d62e:	89a3      	ldrh	r3, [r4, #12]
 800d630:	0759      	lsls	r1, r3, #29
 800d632:	d505      	bpl.n	800d640 <__sflush_r+0x44>
 800d634:	6863      	ldr	r3, [r4, #4]
 800d636:	1ad2      	subs	r2, r2, r3
 800d638:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d63a:	b10b      	cbz	r3, 800d640 <__sflush_r+0x44>
 800d63c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d63e:	1ad2      	subs	r2, r2, r3
 800d640:	2300      	movs	r3, #0
 800d642:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d644:	6a21      	ldr	r1, [r4, #32]
 800d646:	4628      	mov	r0, r5
 800d648:	47b0      	blx	r6
 800d64a:	1c43      	adds	r3, r0, #1
 800d64c:	89a3      	ldrh	r3, [r4, #12]
 800d64e:	d106      	bne.n	800d65e <__sflush_r+0x62>
 800d650:	6829      	ldr	r1, [r5, #0]
 800d652:	291d      	cmp	r1, #29
 800d654:	d82b      	bhi.n	800d6ae <__sflush_r+0xb2>
 800d656:	4a2a      	ldr	r2, [pc, #168]	@ (800d700 <__sflush_r+0x104>)
 800d658:	410a      	asrs	r2, r1
 800d65a:	07d6      	lsls	r6, r2, #31
 800d65c:	d427      	bmi.n	800d6ae <__sflush_r+0xb2>
 800d65e:	2200      	movs	r2, #0
 800d660:	6062      	str	r2, [r4, #4]
 800d662:	04d9      	lsls	r1, r3, #19
 800d664:	6922      	ldr	r2, [r4, #16]
 800d666:	6022      	str	r2, [r4, #0]
 800d668:	d504      	bpl.n	800d674 <__sflush_r+0x78>
 800d66a:	1c42      	adds	r2, r0, #1
 800d66c:	d101      	bne.n	800d672 <__sflush_r+0x76>
 800d66e:	682b      	ldr	r3, [r5, #0]
 800d670:	b903      	cbnz	r3, 800d674 <__sflush_r+0x78>
 800d672:	6560      	str	r0, [r4, #84]	@ 0x54
 800d674:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d676:	602f      	str	r7, [r5, #0]
 800d678:	b1b9      	cbz	r1, 800d6aa <__sflush_r+0xae>
 800d67a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d67e:	4299      	cmp	r1, r3
 800d680:	d002      	beq.n	800d688 <__sflush_r+0x8c>
 800d682:	4628      	mov	r0, r5
 800d684:	f7fe fd58 	bl	800c138 <_free_r>
 800d688:	2300      	movs	r3, #0
 800d68a:	6363      	str	r3, [r4, #52]	@ 0x34
 800d68c:	e00d      	b.n	800d6aa <__sflush_r+0xae>
 800d68e:	2301      	movs	r3, #1
 800d690:	4628      	mov	r0, r5
 800d692:	47b0      	blx	r6
 800d694:	4602      	mov	r2, r0
 800d696:	1c50      	adds	r0, r2, #1
 800d698:	d1c9      	bne.n	800d62e <__sflush_r+0x32>
 800d69a:	682b      	ldr	r3, [r5, #0]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d0c6      	beq.n	800d62e <__sflush_r+0x32>
 800d6a0:	2b1d      	cmp	r3, #29
 800d6a2:	d001      	beq.n	800d6a8 <__sflush_r+0xac>
 800d6a4:	2b16      	cmp	r3, #22
 800d6a6:	d11e      	bne.n	800d6e6 <__sflush_r+0xea>
 800d6a8:	602f      	str	r7, [r5, #0]
 800d6aa:	2000      	movs	r0, #0
 800d6ac:	e022      	b.n	800d6f4 <__sflush_r+0xf8>
 800d6ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d6b2:	b21b      	sxth	r3, r3
 800d6b4:	e01b      	b.n	800d6ee <__sflush_r+0xf2>
 800d6b6:	690f      	ldr	r7, [r1, #16]
 800d6b8:	2f00      	cmp	r7, #0
 800d6ba:	d0f6      	beq.n	800d6aa <__sflush_r+0xae>
 800d6bc:	0793      	lsls	r3, r2, #30
 800d6be:	680e      	ldr	r6, [r1, #0]
 800d6c0:	bf08      	it	eq
 800d6c2:	694b      	ldreq	r3, [r1, #20]
 800d6c4:	600f      	str	r7, [r1, #0]
 800d6c6:	bf18      	it	ne
 800d6c8:	2300      	movne	r3, #0
 800d6ca:	eba6 0807 	sub.w	r8, r6, r7
 800d6ce:	608b      	str	r3, [r1, #8]
 800d6d0:	f1b8 0f00 	cmp.w	r8, #0
 800d6d4:	dde9      	ble.n	800d6aa <__sflush_r+0xae>
 800d6d6:	6a21      	ldr	r1, [r4, #32]
 800d6d8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d6da:	4643      	mov	r3, r8
 800d6dc:	463a      	mov	r2, r7
 800d6de:	4628      	mov	r0, r5
 800d6e0:	47b0      	blx	r6
 800d6e2:	2800      	cmp	r0, #0
 800d6e4:	dc08      	bgt.n	800d6f8 <__sflush_r+0xfc>
 800d6e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d6ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d6ee:	81a3      	strh	r3, [r4, #12]
 800d6f0:	f04f 30ff 	mov.w	r0, #4294967295
 800d6f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6f8:	4407      	add	r7, r0
 800d6fa:	eba8 0800 	sub.w	r8, r8, r0
 800d6fe:	e7e7      	b.n	800d6d0 <__sflush_r+0xd4>
 800d700:	dfbffffe 	.word	0xdfbffffe

0800d704 <_fflush_r>:
 800d704:	b538      	push	{r3, r4, r5, lr}
 800d706:	690b      	ldr	r3, [r1, #16]
 800d708:	4605      	mov	r5, r0
 800d70a:	460c      	mov	r4, r1
 800d70c:	b913      	cbnz	r3, 800d714 <_fflush_r+0x10>
 800d70e:	2500      	movs	r5, #0
 800d710:	4628      	mov	r0, r5
 800d712:	bd38      	pop	{r3, r4, r5, pc}
 800d714:	b118      	cbz	r0, 800d71e <_fflush_r+0x1a>
 800d716:	6a03      	ldr	r3, [r0, #32]
 800d718:	b90b      	cbnz	r3, 800d71e <_fflush_r+0x1a>
 800d71a:	f7fd fd29 	bl	800b170 <__sinit>
 800d71e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d722:	2b00      	cmp	r3, #0
 800d724:	d0f3      	beq.n	800d70e <_fflush_r+0xa>
 800d726:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d728:	07d0      	lsls	r0, r2, #31
 800d72a:	d404      	bmi.n	800d736 <_fflush_r+0x32>
 800d72c:	0599      	lsls	r1, r3, #22
 800d72e:	d402      	bmi.n	800d736 <_fflush_r+0x32>
 800d730:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d732:	f7fd fe8a 	bl	800b44a <__retarget_lock_acquire_recursive>
 800d736:	4628      	mov	r0, r5
 800d738:	4621      	mov	r1, r4
 800d73a:	f7ff ff5f 	bl	800d5fc <__sflush_r>
 800d73e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d740:	07da      	lsls	r2, r3, #31
 800d742:	4605      	mov	r5, r0
 800d744:	d4e4      	bmi.n	800d710 <_fflush_r+0xc>
 800d746:	89a3      	ldrh	r3, [r4, #12]
 800d748:	059b      	lsls	r3, r3, #22
 800d74a:	d4e1      	bmi.n	800d710 <_fflush_r+0xc>
 800d74c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d74e:	f7fd fe7d 	bl	800b44c <__retarget_lock_release_recursive>
 800d752:	e7dd      	b.n	800d710 <_fflush_r+0xc>

0800d754 <memmove>:
 800d754:	4288      	cmp	r0, r1
 800d756:	b510      	push	{r4, lr}
 800d758:	eb01 0402 	add.w	r4, r1, r2
 800d75c:	d902      	bls.n	800d764 <memmove+0x10>
 800d75e:	4284      	cmp	r4, r0
 800d760:	4623      	mov	r3, r4
 800d762:	d807      	bhi.n	800d774 <memmove+0x20>
 800d764:	1e43      	subs	r3, r0, #1
 800d766:	42a1      	cmp	r1, r4
 800d768:	d008      	beq.n	800d77c <memmove+0x28>
 800d76a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d76e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d772:	e7f8      	b.n	800d766 <memmove+0x12>
 800d774:	4402      	add	r2, r0
 800d776:	4601      	mov	r1, r0
 800d778:	428a      	cmp	r2, r1
 800d77a:	d100      	bne.n	800d77e <memmove+0x2a>
 800d77c:	bd10      	pop	{r4, pc}
 800d77e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d782:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d786:	e7f7      	b.n	800d778 <memmove+0x24>

0800d788 <_sbrk_r>:
 800d788:	b538      	push	{r3, r4, r5, lr}
 800d78a:	4d06      	ldr	r5, [pc, #24]	@ (800d7a4 <_sbrk_r+0x1c>)
 800d78c:	2300      	movs	r3, #0
 800d78e:	4604      	mov	r4, r0
 800d790:	4608      	mov	r0, r1
 800d792:	602b      	str	r3, [r5, #0]
 800d794:	f7f6 fdf0 	bl	8004378 <_sbrk>
 800d798:	1c43      	adds	r3, r0, #1
 800d79a:	d102      	bne.n	800d7a2 <_sbrk_r+0x1a>
 800d79c:	682b      	ldr	r3, [r5, #0]
 800d79e:	b103      	cbz	r3, 800d7a2 <_sbrk_r+0x1a>
 800d7a0:	6023      	str	r3, [r4, #0]
 800d7a2:	bd38      	pop	{r3, r4, r5, pc}
 800d7a4:	20005e20 	.word	0x20005e20

0800d7a8 <__assert_func>:
 800d7a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d7aa:	4614      	mov	r4, r2
 800d7ac:	461a      	mov	r2, r3
 800d7ae:	4b09      	ldr	r3, [pc, #36]	@ (800d7d4 <__assert_func+0x2c>)
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	4605      	mov	r5, r0
 800d7b4:	68d8      	ldr	r0, [r3, #12]
 800d7b6:	b954      	cbnz	r4, 800d7ce <__assert_func+0x26>
 800d7b8:	4b07      	ldr	r3, [pc, #28]	@ (800d7d8 <__assert_func+0x30>)
 800d7ba:	461c      	mov	r4, r3
 800d7bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d7c0:	9100      	str	r1, [sp, #0]
 800d7c2:	462b      	mov	r3, r5
 800d7c4:	4905      	ldr	r1, [pc, #20]	@ (800d7dc <__assert_func+0x34>)
 800d7c6:	f000 f84f 	bl	800d868 <fiprintf>
 800d7ca:	f000 f85f 	bl	800d88c <abort>
 800d7ce:	4b04      	ldr	r3, [pc, #16]	@ (800d7e0 <__assert_func+0x38>)
 800d7d0:	e7f4      	b.n	800d7bc <__assert_func+0x14>
 800d7d2:	bf00      	nop
 800d7d4:	200001d4 	.word	0x200001d4
 800d7d8:	0801622c 	.word	0x0801622c
 800d7dc:	080161fe 	.word	0x080161fe
 800d7e0:	080161f1 	.word	0x080161f1

0800d7e4 <_calloc_r>:
 800d7e4:	b570      	push	{r4, r5, r6, lr}
 800d7e6:	fba1 5402 	umull	r5, r4, r1, r2
 800d7ea:	b93c      	cbnz	r4, 800d7fc <_calloc_r+0x18>
 800d7ec:	4629      	mov	r1, r5
 800d7ee:	f7ff f851 	bl	800c894 <_malloc_r>
 800d7f2:	4606      	mov	r6, r0
 800d7f4:	b928      	cbnz	r0, 800d802 <_calloc_r+0x1e>
 800d7f6:	2600      	movs	r6, #0
 800d7f8:	4630      	mov	r0, r6
 800d7fa:	bd70      	pop	{r4, r5, r6, pc}
 800d7fc:	220c      	movs	r2, #12
 800d7fe:	6002      	str	r2, [r0, #0]
 800d800:	e7f9      	b.n	800d7f6 <_calloc_r+0x12>
 800d802:	462a      	mov	r2, r5
 800d804:	4621      	mov	r1, r4
 800d806:	f7fd fd65 	bl	800b2d4 <memset>
 800d80a:	e7f5      	b.n	800d7f8 <_calloc_r+0x14>

0800d80c <_realloc_r>:
 800d80c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d810:	4680      	mov	r8, r0
 800d812:	4615      	mov	r5, r2
 800d814:	460c      	mov	r4, r1
 800d816:	b921      	cbnz	r1, 800d822 <_realloc_r+0x16>
 800d818:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d81c:	4611      	mov	r1, r2
 800d81e:	f7ff b839 	b.w	800c894 <_malloc_r>
 800d822:	b92a      	cbnz	r2, 800d830 <_realloc_r+0x24>
 800d824:	f7fe fc88 	bl	800c138 <_free_r>
 800d828:	2400      	movs	r4, #0
 800d82a:	4620      	mov	r0, r4
 800d82c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d830:	f000 f833 	bl	800d89a <_malloc_usable_size_r>
 800d834:	4285      	cmp	r5, r0
 800d836:	4606      	mov	r6, r0
 800d838:	d802      	bhi.n	800d840 <_realloc_r+0x34>
 800d83a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d83e:	d8f4      	bhi.n	800d82a <_realloc_r+0x1e>
 800d840:	4629      	mov	r1, r5
 800d842:	4640      	mov	r0, r8
 800d844:	f7ff f826 	bl	800c894 <_malloc_r>
 800d848:	4607      	mov	r7, r0
 800d84a:	2800      	cmp	r0, #0
 800d84c:	d0ec      	beq.n	800d828 <_realloc_r+0x1c>
 800d84e:	42b5      	cmp	r5, r6
 800d850:	462a      	mov	r2, r5
 800d852:	4621      	mov	r1, r4
 800d854:	bf28      	it	cs
 800d856:	4632      	movcs	r2, r6
 800d858:	f7fd fe01 	bl	800b45e <memcpy>
 800d85c:	4621      	mov	r1, r4
 800d85e:	4640      	mov	r0, r8
 800d860:	f7fe fc6a 	bl	800c138 <_free_r>
 800d864:	463c      	mov	r4, r7
 800d866:	e7e0      	b.n	800d82a <_realloc_r+0x1e>

0800d868 <fiprintf>:
 800d868:	b40e      	push	{r1, r2, r3}
 800d86a:	b503      	push	{r0, r1, lr}
 800d86c:	4601      	mov	r1, r0
 800d86e:	ab03      	add	r3, sp, #12
 800d870:	4805      	ldr	r0, [pc, #20]	@ (800d888 <fiprintf+0x20>)
 800d872:	f853 2b04 	ldr.w	r2, [r3], #4
 800d876:	6800      	ldr	r0, [r0, #0]
 800d878:	9301      	str	r3, [sp, #4]
 800d87a:	f000 f83f 	bl	800d8fc <_vfiprintf_r>
 800d87e:	b002      	add	sp, #8
 800d880:	f85d eb04 	ldr.w	lr, [sp], #4
 800d884:	b003      	add	sp, #12
 800d886:	4770      	bx	lr
 800d888:	200001d4 	.word	0x200001d4

0800d88c <abort>:
 800d88c:	b508      	push	{r3, lr}
 800d88e:	2006      	movs	r0, #6
 800d890:	f000 fa08 	bl	800dca4 <raise>
 800d894:	2001      	movs	r0, #1
 800d896:	f7f6 fd41 	bl	800431c <_exit>

0800d89a <_malloc_usable_size_r>:
 800d89a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d89e:	1f18      	subs	r0, r3, #4
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	bfbc      	itt	lt
 800d8a4:	580b      	ldrlt	r3, [r1, r0]
 800d8a6:	18c0      	addlt	r0, r0, r3
 800d8a8:	4770      	bx	lr

0800d8aa <__sfputc_r>:
 800d8aa:	6893      	ldr	r3, [r2, #8]
 800d8ac:	3b01      	subs	r3, #1
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	b410      	push	{r4}
 800d8b2:	6093      	str	r3, [r2, #8]
 800d8b4:	da08      	bge.n	800d8c8 <__sfputc_r+0x1e>
 800d8b6:	6994      	ldr	r4, [r2, #24]
 800d8b8:	42a3      	cmp	r3, r4
 800d8ba:	db01      	blt.n	800d8c0 <__sfputc_r+0x16>
 800d8bc:	290a      	cmp	r1, #10
 800d8be:	d103      	bne.n	800d8c8 <__sfputc_r+0x1e>
 800d8c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d8c4:	f000 b932 	b.w	800db2c <__swbuf_r>
 800d8c8:	6813      	ldr	r3, [r2, #0]
 800d8ca:	1c58      	adds	r0, r3, #1
 800d8cc:	6010      	str	r0, [r2, #0]
 800d8ce:	7019      	strb	r1, [r3, #0]
 800d8d0:	4608      	mov	r0, r1
 800d8d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d8d6:	4770      	bx	lr

0800d8d8 <__sfputs_r>:
 800d8d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8da:	4606      	mov	r6, r0
 800d8dc:	460f      	mov	r7, r1
 800d8de:	4614      	mov	r4, r2
 800d8e0:	18d5      	adds	r5, r2, r3
 800d8e2:	42ac      	cmp	r4, r5
 800d8e4:	d101      	bne.n	800d8ea <__sfputs_r+0x12>
 800d8e6:	2000      	movs	r0, #0
 800d8e8:	e007      	b.n	800d8fa <__sfputs_r+0x22>
 800d8ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d8ee:	463a      	mov	r2, r7
 800d8f0:	4630      	mov	r0, r6
 800d8f2:	f7ff ffda 	bl	800d8aa <__sfputc_r>
 800d8f6:	1c43      	adds	r3, r0, #1
 800d8f8:	d1f3      	bne.n	800d8e2 <__sfputs_r+0xa>
 800d8fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d8fc <_vfiprintf_r>:
 800d8fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d900:	460d      	mov	r5, r1
 800d902:	b09d      	sub	sp, #116	@ 0x74
 800d904:	4614      	mov	r4, r2
 800d906:	4698      	mov	r8, r3
 800d908:	4606      	mov	r6, r0
 800d90a:	b118      	cbz	r0, 800d914 <_vfiprintf_r+0x18>
 800d90c:	6a03      	ldr	r3, [r0, #32]
 800d90e:	b90b      	cbnz	r3, 800d914 <_vfiprintf_r+0x18>
 800d910:	f7fd fc2e 	bl	800b170 <__sinit>
 800d914:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d916:	07d9      	lsls	r1, r3, #31
 800d918:	d405      	bmi.n	800d926 <_vfiprintf_r+0x2a>
 800d91a:	89ab      	ldrh	r3, [r5, #12]
 800d91c:	059a      	lsls	r2, r3, #22
 800d91e:	d402      	bmi.n	800d926 <_vfiprintf_r+0x2a>
 800d920:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d922:	f7fd fd92 	bl	800b44a <__retarget_lock_acquire_recursive>
 800d926:	89ab      	ldrh	r3, [r5, #12]
 800d928:	071b      	lsls	r3, r3, #28
 800d92a:	d501      	bpl.n	800d930 <_vfiprintf_r+0x34>
 800d92c:	692b      	ldr	r3, [r5, #16]
 800d92e:	b99b      	cbnz	r3, 800d958 <_vfiprintf_r+0x5c>
 800d930:	4629      	mov	r1, r5
 800d932:	4630      	mov	r0, r6
 800d934:	f000 f938 	bl	800dba8 <__swsetup_r>
 800d938:	b170      	cbz	r0, 800d958 <_vfiprintf_r+0x5c>
 800d93a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d93c:	07dc      	lsls	r4, r3, #31
 800d93e:	d504      	bpl.n	800d94a <_vfiprintf_r+0x4e>
 800d940:	f04f 30ff 	mov.w	r0, #4294967295
 800d944:	b01d      	add	sp, #116	@ 0x74
 800d946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d94a:	89ab      	ldrh	r3, [r5, #12]
 800d94c:	0598      	lsls	r0, r3, #22
 800d94e:	d4f7      	bmi.n	800d940 <_vfiprintf_r+0x44>
 800d950:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d952:	f7fd fd7b 	bl	800b44c <__retarget_lock_release_recursive>
 800d956:	e7f3      	b.n	800d940 <_vfiprintf_r+0x44>
 800d958:	2300      	movs	r3, #0
 800d95a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d95c:	2320      	movs	r3, #32
 800d95e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d962:	f8cd 800c 	str.w	r8, [sp, #12]
 800d966:	2330      	movs	r3, #48	@ 0x30
 800d968:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800db18 <_vfiprintf_r+0x21c>
 800d96c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d970:	f04f 0901 	mov.w	r9, #1
 800d974:	4623      	mov	r3, r4
 800d976:	469a      	mov	sl, r3
 800d978:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d97c:	b10a      	cbz	r2, 800d982 <_vfiprintf_r+0x86>
 800d97e:	2a25      	cmp	r2, #37	@ 0x25
 800d980:	d1f9      	bne.n	800d976 <_vfiprintf_r+0x7a>
 800d982:	ebba 0b04 	subs.w	fp, sl, r4
 800d986:	d00b      	beq.n	800d9a0 <_vfiprintf_r+0xa4>
 800d988:	465b      	mov	r3, fp
 800d98a:	4622      	mov	r2, r4
 800d98c:	4629      	mov	r1, r5
 800d98e:	4630      	mov	r0, r6
 800d990:	f7ff ffa2 	bl	800d8d8 <__sfputs_r>
 800d994:	3001      	adds	r0, #1
 800d996:	f000 80a7 	beq.w	800dae8 <_vfiprintf_r+0x1ec>
 800d99a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d99c:	445a      	add	r2, fp
 800d99e:	9209      	str	r2, [sp, #36]	@ 0x24
 800d9a0:	f89a 3000 	ldrb.w	r3, [sl]
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	f000 809f 	beq.w	800dae8 <_vfiprintf_r+0x1ec>
 800d9aa:	2300      	movs	r3, #0
 800d9ac:	f04f 32ff 	mov.w	r2, #4294967295
 800d9b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d9b4:	f10a 0a01 	add.w	sl, sl, #1
 800d9b8:	9304      	str	r3, [sp, #16]
 800d9ba:	9307      	str	r3, [sp, #28]
 800d9bc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d9c0:	931a      	str	r3, [sp, #104]	@ 0x68
 800d9c2:	4654      	mov	r4, sl
 800d9c4:	2205      	movs	r2, #5
 800d9c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9ca:	4853      	ldr	r0, [pc, #332]	@ (800db18 <_vfiprintf_r+0x21c>)
 800d9cc:	f7f2 fc38 	bl	8000240 <memchr>
 800d9d0:	9a04      	ldr	r2, [sp, #16]
 800d9d2:	b9d8      	cbnz	r0, 800da0c <_vfiprintf_r+0x110>
 800d9d4:	06d1      	lsls	r1, r2, #27
 800d9d6:	bf44      	itt	mi
 800d9d8:	2320      	movmi	r3, #32
 800d9da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d9de:	0713      	lsls	r3, r2, #28
 800d9e0:	bf44      	itt	mi
 800d9e2:	232b      	movmi	r3, #43	@ 0x2b
 800d9e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d9e8:	f89a 3000 	ldrb.w	r3, [sl]
 800d9ec:	2b2a      	cmp	r3, #42	@ 0x2a
 800d9ee:	d015      	beq.n	800da1c <_vfiprintf_r+0x120>
 800d9f0:	9a07      	ldr	r2, [sp, #28]
 800d9f2:	4654      	mov	r4, sl
 800d9f4:	2000      	movs	r0, #0
 800d9f6:	f04f 0c0a 	mov.w	ip, #10
 800d9fa:	4621      	mov	r1, r4
 800d9fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800da00:	3b30      	subs	r3, #48	@ 0x30
 800da02:	2b09      	cmp	r3, #9
 800da04:	d94b      	bls.n	800da9e <_vfiprintf_r+0x1a2>
 800da06:	b1b0      	cbz	r0, 800da36 <_vfiprintf_r+0x13a>
 800da08:	9207      	str	r2, [sp, #28]
 800da0a:	e014      	b.n	800da36 <_vfiprintf_r+0x13a>
 800da0c:	eba0 0308 	sub.w	r3, r0, r8
 800da10:	fa09 f303 	lsl.w	r3, r9, r3
 800da14:	4313      	orrs	r3, r2
 800da16:	9304      	str	r3, [sp, #16]
 800da18:	46a2      	mov	sl, r4
 800da1a:	e7d2      	b.n	800d9c2 <_vfiprintf_r+0xc6>
 800da1c:	9b03      	ldr	r3, [sp, #12]
 800da1e:	1d19      	adds	r1, r3, #4
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	9103      	str	r1, [sp, #12]
 800da24:	2b00      	cmp	r3, #0
 800da26:	bfbb      	ittet	lt
 800da28:	425b      	neglt	r3, r3
 800da2a:	f042 0202 	orrlt.w	r2, r2, #2
 800da2e:	9307      	strge	r3, [sp, #28]
 800da30:	9307      	strlt	r3, [sp, #28]
 800da32:	bfb8      	it	lt
 800da34:	9204      	strlt	r2, [sp, #16]
 800da36:	7823      	ldrb	r3, [r4, #0]
 800da38:	2b2e      	cmp	r3, #46	@ 0x2e
 800da3a:	d10a      	bne.n	800da52 <_vfiprintf_r+0x156>
 800da3c:	7863      	ldrb	r3, [r4, #1]
 800da3e:	2b2a      	cmp	r3, #42	@ 0x2a
 800da40:	d132      	bne.n	800daa8 <_vfiprintf_r+0x1ac>
 800da42:	9b03      	ldr	r3, [sp, #12]
 800da44:	1d1a      	adds	r2, r3, #4
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	9203      	str	r2, [sp, #12]
 800da4a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800da4e:	3402      	adds	r4, #2
 800da50:	9305      	str	r3, [sp, #20]
 800da52:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800db28 <_vfiprintf_r+0x22c>
 800da56:	7821      	ldrb	r1, [r4, #0]
 800da58:	2203      	movs	r2, #3
 800da5a:	4650      	mov	r0, sl
 800da5c:	f7f2 fbf0 	bl	8000240 <memchr>
 800da60:	b138      	cbz	r0, 800da72 <_vfiprintf_r+0x176>
 800da62:	9b04      	ldr	r3, [sp, #16]
 800da64:	eba0 000a 	sub.w	r0, r0, sl
 800da68:	2240      	movs	r2, #64	@ 0x40
 800da6a:	4082      	lsls	r2, r0
 800da6c:	4313      	orrs	r3, r2
 800da6e:	3401      	adds	r4, #1
 800da70:	9304      	str	r3, [sp, #16]
 800da72:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da76:	4829      	ldr	r0, [pc, #164]	@ (800db1c <_vfiprintf_r+0x220>)
 800da78:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800da7c:	2206      	movs	r2, #6
 800da7e:	f7f2 fbdf 	bl	8000240 <memchr>
 800da82:	2800      	cmp	r0, #0
 800da84:	d03f      	beq.n	800db06 <_vfiprintf_r+0x20a>
 800da86:	4b26      	ldr	r3, [pc, #152]	@ (800db20 <_vfiprintf_r+0x224>)
 800da88:	bb1b      	cbnz	r3, 800dad2 <_vfiprintf_r+0x1d6>
 800da8a:	9b03      	ldr	r3, [sp, #12]
 800da8c:	3307      	adds	r3, #7
 800da8e:	f023 0307 	bic.w	r3, r3, #7
 800da92:	3308      	adds	r3, #8
 800da94:	9303      	str	r3, [sp, #12]
 800da96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da98:	443b      	add	r3, r7
 800da9a:	9309      	str	r3, [sp, #36]	@ 0x24
 800da9c:	e76a      	b.n	800d974 <_vfiprintf_r+0x78>
 800da9e:	fb0c 3202 	mla	r2, ip, r2, r3
 800daa2:	460c      	mov	r4, r1
 800daa4:	2001      	movs	r0, #1
 800daa6:	e7a8      	b.n	800d9fa <_vfiprintf_r+0xfe>
 800daa8:	2300      	movs	r3, #0
 800daaa:	3401      	adds	r4, #1
 800daac:	9305      	str	r3, [sp, #20]
 800daae:	4619      	mov	r1, r3
 800dab0:	f04f 0c0a 	mov.w	ip, #10
 800dab4:	4620      	mov	r0, r4
 800dab6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800daba:	3a30      	subs	r2, #48	@ 0x30
 800dabc:	2a09      	cmp	r2, #9
 800dabe:	d903      	bls.n	800dac8 <_vfiprintf_r+0x1cc>
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d0c6      	beq.n	800da52 <_vfiprintf_r+0x156>
 800dac4:	9105      	str	r1, [sp, #20]
 800dac6:	e7c4      	b.n	800da52 <_vfiprintf_r+0x156>
 800dac8:	fb0c 2101 	mla	r1, ip, r1, r2
 800dacc:	4604      	mov	r4, r0
 800dace:	2301      	movs	r3, #1
 800dad0:	e7f0      	b.n	800dab4 <_vfiprintf_r+0x1b8>
 800dad2:	ab03      	add	r3, sp, #12
 800dad4:	9300      	str	r3, [sp, #0]
 800dad6:	462a      	mov	r2, r5
 800dad8:	4b12      	ldr	r3, [pc, #72]	@ (800db24 <_vfiprintf_r+0x228>)
 800dada:	a904      	add	r1, sp, #16
 800dadc:	4630      	mov	r0, r6
 800dade:	f7fc ff03 	bl	800a8e8 <_printf_float>
 800dae2:	4607      	mov	r7, r0
 800dae4:	1c78      	adds	r0, r7, #1
 800dae6:	d1d6      	bne.n	800da96 <_vfiprintf_r+0x19a>
 800dae8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800daea:	07d9      	lsls	r1, r3, #31
 800daec:	d405      	bmi.n	800dafa <_vfiprintf_r+0x1fe>
 800daee:	89ab      	ldrh	r3, [r5, #12]
 800daf0:	059a      	lsls	r2, r3, #22
 800daf2:	d402      	bmi.n	800dafa <_vfiprintf_r+0x1fe>
 800daf4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800daf6:	f7fd fca9 	bl	800b44c <__retarget_lock_release_recursive>
 800dafa:	89ab      	ldrh	r3, [r5, #12]
 800dafc:	065b      	lsls	r3, r3, #25
 800dafe:	f53f af1f 	bmi.w	800d940 <_vfiprintf_r+0x44>
 800db02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800db04:	e71e      	b.n	800d944 <_vfiprintf_r+0x48>
 800db06:	ab03      	add	r3, sp, #12
 800db08:	9300      	str	r3, [sp, #0]
 800db0a:	462a      	mov	r2, r5
 800db0c:	4b05      	ldr	r3, [pc, #20]	@ (800db24 <_vfiprintf_r+0x228>)
 800db0e:	a904      	add	r1, sp, #16
 800db10:	4630      	mov	r0, r6
 800db12:	f7fd f981 	bl	800ae18 <_printf_i>
 800db16:	e7e4      	b.n	800dae2 <_vfiprintf_r+0x1e6>
 800db18:	080161e0 	.word	0x080161e0
 800db1c:	080161ea 	.word	0x080161ea
 800db20:	0800a8e9 	.word	0x0800a8e9
 800db24:	0800d8d9 	.word	0x0800d8d9
 800db28:	080161e6 	.word	0x080161e6

0800db2c <__swbuf_r>:
 800db2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db2e:	460e      	mov	r6, r1
 800db30:	4614      	mov	r4, r2
 800db32:	4605      	mov	r5, r0
 800db34:	b118      	cbz	r0, 800db3e <__swbuf_r+0x12>
 800db36:	6a03      	ldr	r3, [r0, #32]
 800db38:	b90b      	cbnz	r3, 800db3e <__swbuf_r+0x12>
 800db3a:	f7fd fb19 	bl	800b170 <__sinit>
 800db3e:	69a3      	ldr	r3, [r4, #24]
 800db40:	60a3      	str	r3, [r4, #8]
 800db42:	89a3      	ldrh	r3, [r4, #12]
 800db44:	071a      	lsls	r2, r3, #28
 800db46:	d501      	bpl.n	800db4c <__swbuf_r+0x20>
 800db48:	6923      	ldr	r3, [r4, #16]
 800db4a:	b943      	cbnz	r3, 800db5e <__swbuf_r+0x32>
 800db4c:	4621      	mov	r1, r4
 800db4e:	4628      	mov	r0, r5
 800db50:	f000 f82a 	bl	800dba8 <__swsetup_r>
 800db54:	b118      	cbz	r0, 800db5e <__swbuf_r+0x32>
 800db56:	f04f 37ff 	mov.w	r7, #4294967295
 800db5a:	4638      	mov	r0, r7
 800db5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db5e:	6823      	ldr	r3, [r4, #0]
 800db60:	6922      	ldr	r2, [r4, #16]
 800db62:	1a98      	subs	r0, r3, r2
 800db64:	6963      	ldr	r3, [r4, #20]
 800db66:	b2f6      	uxtb	r6, r6
 800db68:	4283      	cmp	r3, r0
 800db6a:	4637      	mov	r7, r6
 800db6c:	dc05      	bgt.n	800db7a <__swbuf_r+0x4e>
 800db6e:	4621      	mov	r1, r4
 800db70:	4628      	mov	r0, r5
 800db72:	f7ff fdc7 	bl	800d704 <_fflush_r>
 800db76:	2800      	cmp	r0, #0
 800db78:	d1ed      	bne.n	800db56 <__swbuf_r+0x2a>
 800db7a:	68a3      	ldr	r3, [r4, #8]
 800db7c:	3b01      	subs	r3, #1
 800db7e:	60a3      	str	r3, [r4, #8]
 800db80:	6823      	ldr	r3, [r4, #0]
 800db82:	1c5a      	adds	r2, r3, #1
 800db84:	6022      	str	r2, [r4, #0]
 800db86:	701e      	strb	r6, [r3, #0]
 800db88:	6962      	ldr	r2, [r4, #20]
 800db8a:	1c43      	adds	r3, r0, #1
 800db8c:	429a      	cmp	r2, r3
 800db8e:	d004      	beq.n	800db9a <__swbuf_r+0x6e>
 800db90:	89a3      	ldrh	r3, [r4, #12]
 800db92:	07db      	lsls	r3, r3, #31
 800db94:	d5e1      	bpl.n	800db5a <__swbuf_r+0x2e>
 800db96:	2e0a      	cmp	r6, #10
 800db98:	d1df      	bne.n	800db5a <__swbuf_r+0x2e>
 800db9a:	4621      	mov	r1, r4
 800db9c:	4628      	mov	r0, r5
 800db9e:	f7ff fdb1 	bl	800d704 <_fflush_r>
 800dba2:	2800      	cmp	r0, #0
 800dba4:	d0d9      	beq.n	800db5a <__swbuf_r+0x2e>
 800dba6:	e7d6      	b.n	800db56 <__swbuf_r+0x2a>

0800dba8 <__swsetup_r>:
 800dba8:	b538      	push	{r3, r4, r5, lr}
 800dbaa:	4b29      	ldr	r3, [pc, #164]	@ (800dc50 <__swsetup_r+0xa8>)
 800dbac:	4605      	mov	r5, r0
 800dbae:	6818      	ldr	r0, [r3, #0]
 800dbb0:	460c      	mov	r4, r1
 800dbb2:	b118      	cbz	r0, 800dbbc <__swsetup_r+0x14>
 800dbb4:	6a03      	ldr	r3, [r0, #32]
 800dbb6:	b90b      	cbnz	r3, 800dbbc <__swsetup_r+0x14>
 800dbb8:	f7fd fada 	bl	800b170 <__sinit>
 800dbbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dbc0:	0719      	lsls	r1, r3, #28
 800dbc2:	d422      	bmi.n	800dc0a <__swsetup_r+0x62>
 800dbc4:	06da      	lsls	r2, r3, #27
 800dbc6:	d407      	bmi.n	800dbd8 <__swsetup_r+0x30>
 800dbc8:	2209      	movs	r2, #9
 800dbca:	602a      	str	r2, [r5, #0]
 800dbcc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dbd0:	81a3      	strh	r3, [r4, #12]
 800dbd2:	f04f 30ff 	mov.w	r0, #4294967295
 800dbd6:	e033      	b.n	800dc40 <__swsetup_r+0x98>
 800dbd8:	0758      	lsls	r0, r3, #29
 800dbda:	d512      	bpl.n	800dc02 <__swsetup_r+0x5a>
 800dbdc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dbde:	b141      	cbz	r1, 800dbf2 <__swsetup_r+0x4a>
 800dbe0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dbe4:	4299      	cmp	r1, r3
 800dbe6:	d002      	beq.n	800dbee <__swsetup_r+0x46>
 800dbe8:	4628      	mov	r0, r5
 800dbea:	f7fe faa5 	bl	800c138 <_free_r>
 800dbee:	2300      	movs	r3, #0
 800dbf0:	6363      	str	r3, [r4, #52]	@ 0x34
 800dbf2:	89a3      	ldrh	r3, [r4, #12]
 800dbf4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800dbf8:	81a3      	strh	r3, [r4, #12]
 800dbfa:	2300      	movs	r3, #0
 800dbfc:	6063      	str	r3, [r4, #4]
 800dbfe:	6923      	ldr	r3, [r4, #16]
 800dc00:	6023      	str	r3, [r4, #0]
 800dc02:	89a3      	ldrh	r3, [r4, #12]
 800dc04:	f043 0308 	orr.w	r3, r3, #8
 800dc08:	81a3      	strh	r3, [r4, #12]
 800dc0a:	6923      	ldr	r3, [r4, #16]
 800dc0c:	b94b      	cbnz	r3, 800dc22 <__swsetup_r+0x7a>
 800dc0e:	89a3      	ldrh	r3, [r4, #12]
 800dc10:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800dc14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dc18:	d003      	beq.n	800dc22 <__swsetup_r+0x7a>
 800dc1a:	4621      	mov	r1, r4
 800dc1c:	4628      	mov	r0, r5
 800dc1e:	f000 f883 	bl	800dd28 <__smakebuf_r>
 800dc22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc26:	f013 0201 	ands.w	r2, r3, #1
 800dc2a:	d00a      	beq.n	800dc42 <__swsetup_r+0x9a>
 800dc2c:	2200      	movs	r2, #0
 800dc2e:	60a2      	str	r2, [r4, #8]
 800dc30:	6962      	ldr	r2, [r4, #20]
 800dc32:	4252      	negs	r2, r2
 800dc34:	61a2      	str	r2, [r4, #24]
 800dc36:	6922      	ldr	r2, [r4, #16]
 800dc38:	b942      	cbnz	r2, 800dc4c <__swsetup_r+0xa4>
 800dc3a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800dc3e:	d1c5      	bne.n	800dbcc <__swsetup_r+0x24>
 800dc40:	bd38      	pop	{r3, r4, r5, pc}
 800dc42:	0799      	lsls	r1, r3, #30
 800dc44:	bf58      	it	pl
 800dc46:	6962      	ldrpl	r2, [r4, #20]
 800dc48:	60a2      	str	r2, [r4, #8]
 800dc4a:	e7f4      	b.n	800dc36 <__swsetup_r+0x8e>
 800dc4c:	2000      	movs	r0, #0
 800dc4e:	e7f7      	b.n	800dc40 <__swsetup_r+0x98>
 800dc50:	200001d4 	.word	0x200001d4

0800dc54 <_raise_r>:
 800dc54:	291f      	cmp	r1, #31
 800dc56:	b538      	push	{r3, r4, r5, lr}
 800dc58:	4605      	mov	r5, r0
 800dc5a:	460c      	mov	r4, r1
 800dc5c:	d904      	bls.n	800dc68 <_raise_r+0x14>
 800dc5e:	2316      	movs	r3, #22
 800dc60:	6003      	str	r3, [r0, #0]
 800dc62:	f04f 30ff 	mov.w	r0, #4294967295
 800dc66:	bd38      	pop	{r3, r4, r5, pc}
 800dc68:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800dc6a:	b112      	cbz	r2, 800dc72 <_raise_r+0x1e>
 800dc6c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dc70:	b94b      	cbnz	r3, 800dc86 <_raise_r+0x32>
 800dc72:	4628      	mov	r0, r5
 800dc74:	f000 f830 	bl	800dcd8 <_getpid_r>
 800dc78:	4622      	mov	r2, r4
 800dc7a:	4601      	mov	r1, r0
 800dc7c:	4628      	mov	r0, r5
 800dc7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dc82:	f000 b817 	b.w	800dcb4 <_kill_r>
 800dc86:	2b01      	cmp	r3, #1
 800dc88:	d00a      	beq.n	800dca0 <_raise_r+0x4c>
 800dc8a:	1c59      	adds	r1, r3, #1
 800dc8c:	d103      	bne.n	800dc96 <_raise_r+0x42>
 800dc8e:	2316      	movs	r3, #22
 800dc90:	6003      	str	r3, [r0, #0]
 800dc92:	2001      	movs	r0, #1
 800dc94:	e7e7      	b.n	800dc66 <_raise_r+0x12>
 800dc96:	2100      	movs	r1, #0
 800dc98:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800dc9c:	4620      	mov	r0, r4
 800dc9e:	4798      	blx	r3
 800dca0:	2000      	movs	r0, #0
 800dca2:	e7e0      	b.n	800dc66 <_raise_r+0x12>

0800dca4 <raise>:
 800dca4:	4b02      	ldr	r3, [pc, #8]	@ (800dcb0 <raise+0xc>)
 800dca6:	4601      	mov	r1, r0
 800dca8:	6818      	ldr	r0, [r3, #0]
 800dcaa:	f7ff bfd3 	b.w	800dc54 <_raise_r>
 800dcae:	bf00      	nop
 800dcb0:	200001d4 	.word	0x200001d4

0800dcb4 <_kill_r>:
 800dcb4:	b538      	push	{r3, r4, r5, lr}
 800dcb6:	4d07      	ldr	r5, [pc, #28]	@ (800dcd4 <_kill_r+0x20>)
 800dcb8:	2300      	movs	r3, #0
 800dcba:	4604      	mov	r4, r0
 800dcbc:	4608      	mov	r0, r1
 800dcbe:	4611      	mov	r1, r2
 800dcc0:	602b      	str	r3, [r5, #0]
 800dcc2:	f7f6 fb23 	bl	800430c <_kill>
 800dcc6:	1c43      	adds	r3, r0, #1
 800dcc8:	d102      	bne.n	800dcd0 <_kill_r+0x1c>
 800dcca:	682b      	ldr	r3, [r5, #0]
 800dccc:	b103      	cbz	r3, 800dcd0 <_kill_r+0x1c>
 800dcce:	6023      	str	r3, [r4, #0]
 800dcd0:	bd38      	pop	{r3, r4, r5, pc}
 800dcd2:	bf00      	nop
 800dcd4:	20005e20 	.word	0x20005e20

0800dcd8 <_getpid_r>:
 800dcd8:	f7f6 bb16 	b.w	8004308 <_getpid>

0800dcdc <__swhatbuf_r>:
 800dcdc:	b570      	push	{r4, r5, r6, lr}
 800dcde:	460c      	mov	r4, r1
 800dce0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dce4:	2900      	cmp	r1, #0
 800dce6:	b096      	sub	sp, #88	@ 0x58
 800dce8:	4615      	mov	r5, r2
 800dcea:	461e      	mov	r6, r3
 800dcec:	da0d      	bge.n	800dd0a <__swhatbuf_r+0x2e>
 800dcee:	89a3      	ldrh	r3, [r4, #12]
 800dcf0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800dcf4:	f04f 0100 	mov.w	r1, #0
 800dcf8:	bf14      	ite	ne
 800dcfa:	2340      	movne	r3, #64	@ 0x40
 800dcfc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800dd00:	2000      	movs	r0, #0
 800dd02:	6031      	str	r1, [r6, #0]
 800dd04:	602b      	str	r3, [r5, #0]
 800dd06:	b016      	add	sp, #88	@ 0x58
 800dd08:	bd70      	pop	{r4, r5, r6, pc}
 800dd0a:	466a      	mov	r2, sp
 800dd0c:	f000 f848 	bl	800dda0 <_fstat_r>
 800dd10:	2800      	cmp	r0, #0
 800dd12:	dbec      	blt.n	800dcee <__swhatbuf_r+0x12>
 800dd14:	9901      	ldr	r1, [sp, #4]
 800dd16:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800dd1a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800dd1e:	4259      	negs	r1, r3
 800dd20:	4159      	adcs	r1, r3
 800dd22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dd26:	e7eb      	b.n	800dd00 <__swhatbuf_r+0x24>

0800dd28 <__smakebuf_r>:
 800dd28:	898b      	ldrh	r3, [r1, #12]
 800dd2a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dd2c:	079d      	lsls	r5, r3, #30
 800dd2e:	4606      	mov	r6, r0
 800dd30:	460c      	mov	r4, r1
 800dd32:	d507      	bpl.n	800dd44 <__smakebuf_r+0x1c>
 800dd34:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800dd38:	6023      	str	r3, [r4, #0]
 800dd3a:	6123      	str	r3, [r4, #16]
 800dd3c:	2301      	movs	r3, #1
 800dd3e:	6163      	str	r3, [r4, #20]
 800dd40:	b003      	add	sp, #12
 800dd42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd44:	ab01      	add	r3, sp, #4
 800dd46:	466a      	mov	r2, sp
 800dd48:	f7ff ffc8 	bl	800dcdc <__swhatbuf_r>
 800dd4c:	9f00      	ldr	r7, [sp, #0]
 800dd4e:	4605      	mov	r5, r0
 800dd50:	4639      	mov	r1, r7
 800dd52:	4630      	mov	r0, r6
 800dd54:	f7fe fd9e 	bl	800c894 <_malloc_r>
 800dd58:	b948      	cbnz	r0, 800dd6e <__smakebuf_r+0x46>
 800dd5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd5e:	059a      	lsls	r2, r3, #22
 800dd60:	d4ee      	bmi.n	800dd40 <__smakebuf_r+0x18>
 800dd62:	f023 0303 	bic.w	r3, r3, #3
 800dd66:	f043 0302 	orr.w	r3, r3, #2
 800dd6a:	81a3      	strh	r3, [r4, #12]
 800dd6c:	e7e2      	b.n	800dd34 <__smakebuf_r+0xc>
 800dd6e:	89a3      	ldrh	r3, [r4, #12]
 800dd70:	6020      	str	r0, [r4, #0]
 800dd72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dd76:	81a3      	strh	r3, [r4, #12]
 800dd78:	9b01      	ldr	r3, [sp, #4]
 800dd7a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800dd7e:	b15b      	cbz	r3, 800dd98 <__smakebuf_r+0x70>
 800dd80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dd84:	4630      	mov	r0, r6
 800dd86:	f000 f81d 	bl	800ddc4 <_isatty_r>
 800dd8a:	b128      	cbz	r0, 800dd98 <__smakebuf_r+0x70>
 800dd8c:	89a3      	ldrh	r3, [r4, #12]
 800dd8e:	f023 0303 	bic.w	r3, r3, #3
 800dd92:	f043 0301 	orr.w	r3, r3, #1
 800dd96:	81a3      	strh	r3, [r4, #12]
 800dd98:	89a3      	ldrh	r3, [r4, #12]
 800dd9a:	431d      	orrs	r5, r3
 800dd9c:	81a5      	strh	r5, [r4, #12]
 800dd9e:	e7cf      	b.n	800dd40 <__smakebuf_r+0x18>

0800dda0 <_fstat_r>:
 800dda0:	b538      	push	{r3, r4, r5, lr}
 800dda2:	4d07      	ldr	r5, [pc, #28]	@ (800ddc0 <_fstat_r+0x20>)
 800dda4:	2300      	movs	r3, #0
 800dda6:	4604      	mov	r4, r0
 800dda8:	4608      	mov	r0, r1
 800ddaa:	4611      	mov	r1, r2
 800ddac:	602b      	str	r3, [r5, #0]
 800ddae:	f7f6 fada 	bl	8004366 <_fstat>
 800ddb2:	1c43      	adds	r3, r0, #1
 800ddb4:	d102      	bne.n	800ddbc <_fstat_r+0x1c>
 800ddb6:	682b      	ldr	r3, [r5, #0]
 800ddb8:	b103      	cbz	r3, 800ddbc <_fstat_r+0x1c>
 800ddba:	6023      	str	r3, [r4, #0]
 800ddbc:	bd38      	pop	{r3, r4, r5, pc}
 800ddbe:	bf00      	nop
 800ddc0:	20005e20 	.word	0x20005e20

0800ddc4 <_isatty_r>:
 800ddc4:	b538      	push	{r3, r4, r5, lr}
 800ddc6:	4d06      	ldr	r5, [pc, #24]	@ (800dde0 <_isatty_r+0x1c>)
 800ddc8:	2300      	movs	r3, #0
 800ddca:	4604      	mov	r4, r0
 800ddcc:	4608      	mov	r0, r1
 800ddce:	602b      	str	r3, [r5, #0]
 800ddd0:	f7f6 face 	bl	8004370 <_isatty>
 800ddd4:	1c43      	adds	r3, r0, #1
 800ddd6:	d102      	bne.n	800ddde <_isatty_r+0x1a>
 800ddd8:	682b      	ldr	r3, [r5, #0]
 800ddda:	b103      	cbz	r3, 800ddde <_isatty_r+0x1a>
 800dddc:	6023      	str	r3, [r4, #0]
 800ddde:	bd38      	pop	{r3, r4, r5, pc}
 800dde0:	20005e20 	.word	0x20005e20

0800dde4 <sinf>:
 800dde4:	ee10 3a10 	vmov	r3, s0
 800dde8:	b507      	push	{r0, r1, r2, lr}
 800ddea:	4a1f      	ldr	r2, [pc, #124]	@ (800de68 <sinf+0x84>)
 800ddec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ddf0:	4293      	cmp	r3, r2
 800ddf2:	d807      	bhi.n	800de04 <sinf+0x20>
 800ddf4:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800de6c <sinf+0x88>
 800ddf8:	2000      	movs	r0, #0
 800ddfa:	b003      	add	sp, #12
 800ddfc:	f85d eb04 	ldr.w	lr, [sp], #4
 800de00:	f000 b91a 	b.w	800e038 <__kernel_sinf>
 800de04:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800de08:	d304      	bcc.n	800de14 <sinf+0x30>
 800de0a:	ee30 0a40 	vsub.f32	s0, s0, s0
 800de0e:	b003      	add	sp, #12
 800de10:	f85d fb04 	ldr.w	pc, [sp], #4
 800de14:	4668      	mov	r0, sp
 800de16:	f000 f957 	bl	800e0c8 <__ieee754_rem_pio2f>
 800de1a:	f000 0003 	and.w	r0, r0, #3
 800de1e:	2801      	cmp	r0, #1
 800de20:	d00a      	beq.n	800de38 <sinf+0x54>
 800de22:	2802      	cmp	r0, #2
 800de24:	d00f      	beq.n	800de46 <sinf+0x62>
 800de26:	b9c0      	cbnz	r0, 800de5a <sinf+0x76>
 800de28:	eddd 0a01 	vldr	s1, [sp, #4]
 800de2c:	ed9d 0a00 	vldr	s0, [sp]
 800de30:	2001      	movs	r0, #1
 800de32:	f000 f901 	bl	800e038 <__kernel_sinf>
 800de36:	e7ea      	b.n	800de0e <sinf+0x2a>
 800de38:	eddd 0a01 	vldr	s1, [sp, #4]
 800de3c:	ed9d 0a00 	vldr	s0, [sp]
 800de40:	f000 f8a2 	bl	800df88 <__kernel_cosf>
 800de44:	e7e3      	b.n	800de0e <sinf+0x2a>
 800de46:	eddd 0a01 	vldr	s1, [sp, #4]
 800de4a:	ed9d 0a00 	vldr	s0, [sp]
 800de4e:	2001      	movs	r0, #1
 800de50:	f000 f8f2 	bl	800e038 <__kernel_sinf>
 800de54:	eeb1 0a40 	vneg.f32	s0, s0
 800de58:	e7d9      	b.n	800de0e <sinf+0x2a>
 800de5a:	eddd 0a01 	vldr	s1, [sp, #4]
 800de5e:	ed9d 0a00 	vldr	s0, [sp]
 800de62:	f000 f891 	bl	800df88 <__kernel_cosf>
 800de66:	e7f5      	b.n	800de54 <sinf+0x70>
 800de68:	3f490fd8 	.word	0x3f490fd8
 800de6c:	00000000 	.word	0x00000000

0800de70 <rint>:
 800de70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800de72:	ec53 2b10 	vmov	r2, r3, d0
 800de76:	f3c3 500a 	ubfx	r0, r3, #20, #11
 800de7a:	f2a0 35ff 	subw	r5, r0, #1023	@ 0x3ff
 800de7e:	2d13      	cmp	r5, #19
 800de80:	461c      	mov	r4, r3
 800de82:	4611      	mov	r1, r2
 800de84:	ea4f 76d3 	mov.w	r6, r3, lsr #31
 800de88:	dc5b      	bgt.n	800df42 <rint+0xd2>
 800de8a:	2d00      	cmp	r5, #0
 800de8c:	da2f      	bge.n	800deee <rint+0x7e>
 800de8e:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800de92:	4310      	orrs	r0, r2
 800de94:	d027      	beq.n	800dee6 <rint+0x76>
 800de96:	f3c3 0513 	ubfx	r5, r3, #0, #20
 800de9a:	4315      	orrs	r5, r2
 800de9c:	426b      	negs	r3, r5
 800de9e:	432b      	orrs	r3, r5
 800dea0:	4610      	mov	r0, r2
 800dea2:	0b1b      	lsrs	r3, r3, #12
 800dea4:	0c62      	lsrs	r2, r4, #17
 800dea6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800deaa:	0452      	lsls	r2, r2, #17
 800deac:	ea43 0102 	orr.w	r1, r3, r2
 800deb0:	460b      	mov	r3, r1
 800deb2:	4933      	ldr	r1, [pc, #204]	@ (800df80 <rint+0x110>)
 800deb4:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800deb8:	e9d1 6700 	ldrd	r6, r7, [r1]
 800debc:	4602      	mov	r2, r0
 800debe:	4639      	mov	r1, r7
 800dec0:	4630      	mov	r0, r6
 800dec2:	f7f2 fa1b 	bl	80002fc <__adddf3>
 800dec6:	e9cd 0100 	strd	r0, r1, [sp]
 800deca:	463b      	mov	r3, r7
 800decc:	4632      	mov	r2, r6
 800dece:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ded2:	f7f2 fa11 	bl	80002f8 <__aeabi_dsub>
 800ded6:	f004 4400 	and.w	r4, r4, #2147483648	@ 0x80000000
 800deda:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800dede:	ea44 0703 	orr.w	r7, r4, r3
 800dee2:	4602      	mov	r2, r0
 800dee4:	463b      	mov	r3, r7
 800dee6:	ec43 2b10 	vmov	d0, r2, r3
 800deea:	b003      	add	sp, #12
 800deec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800deee:	4825      	ldr	r0, [pc, #148]	@ (800df84 <rint+0x114>)
 800def0:	4128      	asrs	r0, r5
 800def2:	ea00 0703 	and.w	r7, r0, r3
 800def6:	4317      	orrs	r7, r2
 800def8:	d0f5      	beq.n	800dee6 <rint+0x76>
 800defa:	0843      	lsrs	r3, r0, #1
 800defc:	ea04 0050 	and.w	r0, r4, r0, lsr #1
 800df00:	4301      	orrs	r1, r0
 800df02:	d00a      	beq.n	800df1a <rint+0xaa>
 800df04:	f1a5 0213 	sub.w	r2, r5, #19
 800df08:	ea24 0303 	bic.w	r3, r4, r3
 800df0c:	4251      	negs	r1, r2
 800df0e:	f44f 2480 	mov.w	r4, #262144	@ 0x40000
 800df12:	4151      	adcs	r1, r2
 800df14:	412c      	asrs	r4, r5
 800df16:	07c9      	lsls	r1, r1, #31
 800df18:	431c      	orrs	r4, r3
 800df1a:	460a      	mov	r2, r1
 800df1c:	4918      	ldr	r1, [pc, #96]	@ (800df80 <rint+0x110>)
 800df1e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800df22:	4623      	mov	r3, r4
 800df24:	e9d1 4500 	ldrd	r4, r5, [r1]
 800df28:	4620      	mov	r0, r4
 800df2a:	4629      	mov	r1, r5
 800df2c:	f7f2 f9e6 	bl	80002fc <__adddf3>
 800df30:	e9cd 0100 	strd	r0, r1, [sp]
 800df34:	e9dd 0100 	ldrd	r0, r1, [sp]
 800df38:	4622      	mov	r2, r4
 800df3a:	462b      	mov	r3, r5
 800df3c:	f7f2 f9dc 	bl	80002f8 <__aeabi_dsub>
 800df40:	e008      	b.n	800df54 <rint+0xe4>
 800df42:	2d33      	cmp	r5, #51	@ 0x33
 800df44:	dd09      	ble.n	800df5a <rint+0xea>
 800df46:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 800df4a:	d1cc      	bne.n	800dee6 <rint+0x76>
 800df4c:	4610      	mov	r0, r2
 800df4e:	4619      	mov	r1, r3
 800df50:	f7f2 f9d4 	bl	80002fc <__adddf3>
 800df54:	4602      	mov	r2, r0
 800df56:	460b      	mov	r3, r1
 800df58:	e7c5      	b.n	800dee6 <rint+0x76>
 800df5a:	f2a0 4513 	subw	r5, r0, #1043	@ 0x413
 800df5e:	f04f 30ff 	mov.w	r0, #4294967295
 800df62:	40e8      	lsrs	r0, r5
 800df64:	4202      	tst	r2, r0
 800df66:	d0be      	beq.n	800dee6 <rint+0x76>
 800df68:	0843      	lsrs	r3, r0, #1
 800df6a:	ea11 0050 	ands.w	r0, r1, r0, lsr #1
 800df6e:	bf1f      	itttt	ne
 800df70:	ea21 0303 	bicne.w	r3, r1, r3
 800df74:	f04f 4180 	movne.w	r1, #1073741824	@ 0x40000000
 800df78:	4129      	asrne	r1, r5
 800df7a:	4319      	orrne	r1, r3
 800df7c:	e7cd      	b.n	800df1a <rint+0xaa>
 800df7e:	bf00      	nop
 800df80:	08016230 	.word	0x08016230
 800df84:	000fffff 	.word	0x000fffff

0800df88 <__kernel_cosf>:
 800df88:	ee10 3a10 	vmov	r3, s0
 800df8c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800df90:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800df94:	eef0 6a40 	vmov.f32	s13, s0
 800df98:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800df9c:	d204      	bcs.n	800dfa8 <__kernel_cosf+0x20>
 800df9e:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800dfa2:	ee17 2a90 	vmov	r2, s15
 800dfa6:	b342      	cbz	r2, 800dffa <__kernel_cosf+0x72>
 800dfa8:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800dfac:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800e018 <__kernel_cosf+0x90>
 800dfb0:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800e01c <__kernel_cosf+0x94>
 800dfb4:	4a1a      	ldr	r2, [pc, #104]	@ (800e020 <__kernel_cosf+0x98>)
 800dfb6:	eea7 6a27 	vfma.f32	s12, s14, s15
 800dfba:	4293      	cmp	r3, r2
 800dfbc:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800e024 <__kernel_cosf+0x9c>
 800dfc0:	eee6 7a07 	vfma.f32	s15, s12, s14
 800dfc4:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800e028 <__kernel_cosf+0xa0>
 800dfc8:	eea7 6a87 	vfma.f32	s12, s15, s14
 800dfcc:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800e02c <__kernel_cosf+0xa4>
 800dfd0:	eee6 7a07 	vfma.f32	s15, s12, s14
 800dfd4:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800e030 <__kernel_cosf+0xa8>
 800dfd8:	eea7 6a87 	vfma.f32	s12, s15, s14
 800dfdc:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800dfe0:	ee26 6a07 	vmul.f32	s12, s12, s14
 800dfe4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800dfe8:	eee7 0a06 	vfma.f32	s1, s14, s12
 800dfec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dff0:	d804      	bhi.n	800dffc <__kernel_cosf+0x74>
 800dff2:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800dff6:	ee30 0a67 	vsub.f32	s0, s0, s15
 800dffa:	4770      	bx	lr
 800dffc:	4a0d      	ldr	r2, [pc, #52]	@ (800e034 <__kernel_cosf+0xac>)
 800dffe:	4293      	cmp	r3, r2
 800e000:	bf9a      	itte	ls
 800e002:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800e006:	ee07 3a10 	vmovls	s14, r3
 800e00a:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800e00e:	ee30 0a47 	vsub.f32	s0, s0, s14
 800e012:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e016:	e7ec      	b.n	800dff2 <__kernel_cosf+0x6a>
 800e018:	ad47d74e 	.word	0xad47d74e
 800e01c:	310f74f6 	.word	0x310f74f6
 800e020:	3e999999 	.word	0x3e999999
 800e024:	b493f27c 	.word	0xb493f27c
 800e028:	37d00d01 	.word	0x37d00d01
 800e02c:	bab60b61 	.word	0xbab60b61
 800e030:	3d2aaaab 	.word	0x3d2aaaab
 800e034:	3f480000 	.word	0x3f480000

0800e038 <__kernel_sinf>:
 800e038:	ee10 3a10 	vmov	r3, s0
 800e03c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e040:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800e044:	d204      	bcs.n	800e050 <__kernel_sinf+0x18>
 800e046:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800e04a:	ee17 3a90 	vmov	r3, s15
 800e04e:	b35b      	cbz	r3, 800e0a8 <__kernel_sinf+0x70>
 800e050:	ee20 7a00 	vmul.f32	s14, s0, s0
 800e054:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800e0ac <__kernel_sinf+0x74>
 800e058:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800e0b0 <__kernel_sinf+0x78>
 800e05c:	eea7 6a27 	vfma.f32	s12, s14, s15
 800e060:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800e0b4 <__kernel_sinf+0x7c>
 800e064:	eee6 7a07 	vfma.f32	s15, s12, s14
 800e068:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800e0b8 <__kernel_sinf+0x80>
 800e06c:	eea7 6a87 	vfma.f32	s12, s15, s14
 800e070:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800e0bc <__kernel_sinf+0x84>
 800e074:	ee60 6a07 	vmul.f32	s13, s0, s14
 800e078:	eee6 7a07 	vfma.f32	s15, s12, s14
 800e07c:	b930      	cbnz	r0, 800e08c <__kernel_sinf+0x54>
 800e07e:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800e0c0 <__kernel_sinf+0x88>
 800e082:	eea7 6a27 	vfma.f32	s12, s14, s15
 800e086:	eea6 0a26 	vfma.f32	s0, s12, s13
 800e08a:	4770      	bx	lr
 800e08c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800e090:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800e094:	eee0 7a86 	vfma.f32	s15, s1, s12
 800e098:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800e09c:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800e0c4 <__kernel_sinf+0x8c>
 800e0a0:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800e0a4:	ee30 0a60 	vsub.f32	s0, s0, s1
 800e0a8:	4770      	bx	lr
 800e0aa:	bf00      	nop
 800e0ac:	2f2ec9d3 	.word	0x2f2ec9d3
 800e0b0:	b2d72f34 	.word	0xb2d72f34
 800e0b4:	3638ef1b 	.word	0x3638ef1b
 800e0b8:	b9500d01 	.word	0xb9500d01
 800e0bc:	3c088889 	.word	0x3c088889
 800e0c0:	be2aaaab 	.word	0xbe2aaaab
 800e0c4:	3e2aaaab 	.word	0x3e2aaaab

0800e0c8 <__ieee754_rem_pio2f>:
 800e0c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e0ca:	ee10 6a10 	vmov	r6, s0
 800e0ce:	4b88      	ldr	r3, [pc, #544]	@ (800e2f0 <__ieee754_rem_pio2f+0x228>)
 800e0d0:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800e0d4:	429d      	cmp	r5, r3
 800e0d6:	b087      	sub	sp, #28
 800e0d8:	4604      	mov	r4, r0
 800e0da:	d805      	bhi.n	800e0e8 <__ieee754_rem_pio2f+0x20>
 800e0dc:	2300      	movs	r3, #0
 800e0de:	ed80 0a00 	vstr	s0, [r0]
 800e0e2:	6043      	str	r3, [r0, #4]
 800e0e4:	2000      	movs	r0, #0
 800e0e6:	e022      	b.n	800e12e <__ieee754_rem_pio2f+0x66>
 800e0e8:	4b82      	ldr	r3, [pc, #520]	@ (800e2f4 <__ieee754_rem_pio2f+0x22c>)
 800e0ea:	429d      	cmp	r5, r3
 800e0ec:	d83a      	bhi.n	800e164 <__ieee754_rem_pio2f+0x9c>
 800e0ee:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800e0f2:	2e00      	cmp	r6, #0
 800e0f4:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800e2f8 <__ieee754_rem_pio2f+0x230>
 800e0f8:	4a80      	ldr	r2, [pc, #512]	@ (800e2fc <__ieee754_rem_pio2f+0x234>)
 800e0fa:	f023 030f 	bic.w	r3, r3, #15
 800e0fe:	dd18      	ble.n	800e132 <__ieee754_rem_pio2f+0x6a>
 800e100:	4293      	cmp	r3, r2
 800e102:	ee70 7a47 	vsub.f32	s15, s0, s14
 800e106:	bf09      	itett	eq
 800e108:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800e300 <__ieee754_rem_pio2f+0x238>
 800e10c:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800e304 <__ieee754_rem_pio2f+0x23c>
 800e110:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800e308 <__ieee754_rem_pio2f+0x240>
 800e114:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800e118:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800e11c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e120:	ed80 7a00 	vstr	s14, [r0]
 800e124:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e128:	edc0 7a01 	vstr	s15, [r0, #4]
 800e12c:	2001      	movs	r0, #1
 800e12e:	b007      	add	sp, #28
 800e130:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e132:	4293      	cmp	r3, r2
 800e134:	ee70 7a07 	vadd.f32	s15, s0, s14
 800e138:	bf09      	itett	eq
 800e13a:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800e300 <__ieee754_rem_pio2f+0x238>
 800e13e:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800e304 <__ieee754_rem_pio2f+0x23c>
 800e142:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800e308 <__ieee754_rem_pio2f+0x240>
 800e146:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800e14a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800e14e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e152:	ed80 7a00 	vstr	s14, [r0]
 800e156:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e15a:	edc0 7a01 	vstr	s15, [r0, #4]
 800e15e:	f04f 30ff 	mov.w	r0, #4294967295
 800e162:	e7e4      	b.n	800e12e <__ieee754_rem_pio2f+0x66>
 800e164:	4b69      	ldr	r3, [pc, #420]	@ (800e30c <__ieee754_rem_pio2f+0x244>)
 800e166:	429d      	cmp	r5, r3
 800e168:	d873      	bhi.n	800e252 <__ieee754_rem_pio2f+0x18a>
 800e16a:	f000 f8dd 	bl	800e328 <fabsf>
 800e16e:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800e310 <__ieee754_rem_pio2f+0x248>
 800e172:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800e176:	eee0 7a07 	vfma.f32	s15, s0, s14
 800e17a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e17e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e182:	ee17 0a90 	vmov	r0, s15
 800e186:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800e2f8 <__ieee754_rem_pio2f+0x230>
 800e18a:	eea7 0a67 	vfms.f32	s0, s14, s15
 800e18e:	281f      	cmp	r0, #31
 800e190:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800e304 <__ieee754_rem_pio2f+0x23c>
 800e194:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e198:	eeb1 6a47 	vneg.f32	s12, s14
 800e19c:	ee70 6a67 	vsub.f32	s13, s0, s15
 800e1a0:	ee16 1a90 	vmov	r1, s13
 800e1a4:	dc09      	bgt.n	800e1ba <__ieee754_rem_pio2f+0xf2>
 800e1a6:	4a5b      	ldr	r2, [pc, #364]	@ (800e314 <__ieee754_rem_pio2f+0x24c>)
 800e1a8:	1e47      	subs	r7, r0, #1
 800e1aa:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800e1ae:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800e1b2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800e1b6:	4293      	cmp	r3, r2
 800e1b8:	d107      	bne.n	800e1ca <__ieee754_rem_pio2f+0x102>
 800e1ba:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800e1be:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800e1c2:	2a08      	cmp	r2, #8
 800e1c4:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800e1c8:	dc14      	bgt.n	800e1f4 <__ieee754_rem_pio2f+0x12c>
 800e1ca:	6021      	str	r1, [r4, #0]
 800e1cc:	ed94 7a00 	vldr	s14, [r4]
 800e1d0:	ee30 0a47 	vsub.f32	s0, s0, s14
 800e1d4:	2e00      	cmp	r6, #0
 800e1d6:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e1da:	ed84 0a01 	vstr	s0, [r4, #4]
 800e1de:	daa6      	bge.n	800e12e <__ieee754_rem_pio2f+0x66>
 800e1e0:	eeb1 7a47 	vneg.f32	s14, s14
 800e1e4:	eeb1 0a40 	vneg.f32	s0, s0
 800e1e8:	ed84 7a00 	vstr	s14, [r4]
 800e1ec:	ed84 0a01 	vstr	s0, [r4, #4]
 800e1f0:	4240      	negs	r0, r0
 800e1f2:	e79c      	b.n	800e12e <__ieee754_rem_pio2f+0x66>
 800e1f4:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800e300 <__ieee754_rem_pio2f+0x238>
 800e1f8:	eef0 6a40 	vmov.f32	s13, s0
 800e1fc:	eee6 6a25 	vfma.f32	s13, s12, s11
 800e200:	ee70 7a66 	vsub.f32	s15, s0, s13
 800e204:	eee6 7a25 	vfma.f32	s15, s12, s11
 800e208:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800e308 <__ieee754_rem_pio2f+0x240>
 800e20c:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800e210:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800e214:	ee15 2a90 	vmov	r2, s11
 800e218:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800e21c:	1a5b      	subs	r3, r3, r1
 800e21e:	2b19      	cmp	r3, #25
 800e220:	dc04      	bgt.n	800e22c <__ieee754_rem_pio2f+0x164>
 800e222:	edc4 5a00 	vstr	s11, [r4]
 800e226:	eeb0 0a66 	vmov.f32	s0, s13
 800e22a:	e7cf      	b.n	800e1cc <__ieee754_rem_pio2f+0x104>
 800e22c:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800e318 <__ieee754_rem_pio2f+0x250>
 800e230:	eeb0 0a66 	vmov.f32	s0, s13
 800e234:	eea6 0a25 	vfma.f32	s0, s12, s11
 800e238:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800e23c:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800e31c <__ieee754_rem_pio2f+0x254>
 800e240:	eee6 7a25 	vfma.f32	s15, s12, s11
 800e244:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800e248:	ee30 7a67 	vsub.f32	s14, s0, s15
 800e24c:	ed84 7a00 	vstr	s14, [r4]
 800e250:	e7bc      	b.n	800e1cc <__ieee754_rem_pio2f+0x104>
 800e252:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800e256:	d306      	bcc.n	800e266 <__ieee754_rem_pio2f+0x19e>
 800e258:	ee70 7a40 	vsub.f32	s15, s0, s0
 800e25c:	edc0 7a01 	vstr	s15, [r0, #4]
 800e260:	edc0 7a00 	vstr	s15, [r0]
 800e264:	e73e      	b.n	800e0e4 <__ieee754_rem_pio2f+0x1c>
 800e266:	15ea      	asrs	r2, r5, #23
 800e268:	3a86      	subs	r2, #134	@ 0x86
 800e26a:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800e26e:	ee07 3a90 	vmov	s15, r3
 800e272:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800e276:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800e320 <__ieee754_rem_pio2f+0x258>
 800e27a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e27e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e282:	ed8d 7a03 	vstr	s14, [sp, #12]
 800e286:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e28a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800e28e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e292:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e296:	ed8d 7a04 	vstr	s14, [sp, #16]
 800e29a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e29e:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e2a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2a6:	edcd 7a05 	vstr	s15, [sp, #20]
 800e2aa:	d11e      	bne.n	800e2ea <__ieee754_rem_pio2f+0x222>
 800e2ac:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800e2b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2b4:	bf0c      	ite	eq
 800e2b6:	2301      	moveq	r3, #1
 800e2b8:	2302      	movne	r3, #2
 800e2ba:	491a      	ldr	r1, [pc, #104]	@ (800e324 <__ieee754_rem_pio2f+0x25c>)
 800e2bc:	9101      	str	r1, [sp, #4]
 800e2be:	2102      	movs	r1, #2
 800e2c0:	9100      	str	r1, [sp, #0]
 800e2c2:	a803      	add	r0, sp, #12
 800e2c4:	4621      	mov	r1, r4
 800e2c6:	f000 f837 	bl	800e338 <__kernel_rem_pio2f>
 800e2ca:	2e00      	cmp	r6, #0
 800e2cc:	f6bf af2f 	bge.w	800e12e <__ieee754_rem_pio2f+0x66>
 800e2d0:	edd4 7a00 	vldr	s15, [r4]
 800e2d4:	eef1 7a67 	vneg.f32	s15, s15
 800e2d8:	edc4 7a00 	vstr	s15, [r4]
 800e2dc:	edd4 7a01 	vldr	s15, [r4, #4]
 800e2e0:	eef1 7a67 	vneg.f32	s15, s15
 800e2e4:	edc4 7a01 	vstr	s15, [r4, #4]
 800e2e8:	e782      	b.n	800e1f0 <__ieee754_rem_pio2f+0x128>
 800e2ea:	2303      	movs	r3, #3
 800e2ec:	e7e5      	b.n	800e2ba <__ieee754_rem_pio2f+0x1f2>
 800e2ee:	bf00      	nop
 800e2f0:	3f490fd8 	.word	0x3f490fd8
 800e2f4:	4016cbe3 	.word	0x4016cbe3
 800e2f8:	3fc90f80 	.word	0x3fc90f80
 800e2fc:	3fc90fd0 	.word	0x3fc90fd0
 800e300:	37354400 	.word	0x37354400
 800e304:	37354443 	.word	0x37354443
 800e308:	2e85a308 	.word	0x2e85a308
 800e30c:	43490f80 	.word	0x43490f80
 800e310:	3f22f984 	.word	0x3f22f984
 800e314:	08016240 	.word	0x08016240
 800e318:	2e85a300 	.word	0x2e85a300
 800e31c:	248d3132 	.word	0x248d3132
 800e320:	43800000 	.word	0x43800000
 800e324:	080162c0 	.word	0x080162c0

0800e328 <fabsf>:
 800e328:	ee10 3a10 	vmov	r3, s0
 800e32c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e330:	ee00 3a10 	vmov	s0, r3
 800e334:	4770      	bx	lr
	...

0800e338 <__kernel_rem_pio2f>:
 800e338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e33c:	ed2d 8b04 	vpush	{d8-d9}
 800e340:	b0d9      	sub	sp, #356	@ 0x164
 800e342:	4690      	mov	r8, r2
 800e344:	9001      	str	r0, [sp, #4]
 800e346:	4ab9      	ldr	r2, [pc, #740]	@ (800e62c <__kernel_rem_pio2f+0x2f4>)
 800e348:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800e34a:	f118 0f04 	cmn.w	r8, #4
 800e34e:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800e352:	460f      	mov	r7, r1
 800e354:	f103 3bff 	add.w	fp, r3, #4294967295
 800e358:	db27      	blt.n	800e3aa <__kernel_rem_pio2f+0x72>
 800e35a:	f1b8 0203 	subs.w	r2, r8, #3
 800e35e:	bf48      	it	mi
 800e360:	f108 0204 	addmi.w	r2, r8, #4
 800e364:	10d2      	asrs	r2, r2, #3
 800e366:	1c55      	adds	r5, r2, #1
 800e368:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800e36a:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 800e63c <__kernel_rem_pio2f+0x304>
 800e36e:	00e8      	lsls	r0, r5, #3
 800e370:	eba2 060b 	sub.w	r6, r2, fp
 800e374:	9002      	str	r0, [sp, #8]
 800e376:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800e37a:	eb0a 0c0b 	add.w	ip, sl, fp
 800e37e:	ac1c      	add	r4, sp, #112	@ 0x70
 800e380:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800e384:	2000      	movs	r0, #0
 800e386:	4560      	cmp	r0, ip
 800e388:	dd11      	ble.n	800e3ae <__kernel_rem_pio2f+0x76>
 800e38a:	a91c      	add	r1, sp, #112	@ 0x70
 800e38c:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800e390:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800e394:	f04f 0c00 	mov.w	ip, #0
 800e398:	45d4      	cmp	ip, sl
 800e39a:	dc27      	bgt.n	800e3ec <__kernel_rem_pio2f+0xb4>
 800e39c:	f8dd e004 	ldr.w	lr, [sp, #4]
 800e3a0:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 800e63c <__kernel_rem_pio2f+0x304>
 800e3a4:	4606      	mov	r6, r0
 800e3a6:	2400      	movs	r4, #0
 800e3a8:	e016      	b.n	800e3d8 <__kernel_rem_pio2f+0xa0>
 800e3aa:	2200      	movs	r2, #0
 800e3ac:	e7db      	b.n	800e366 <__kernel_rem_pio2f+0x2e>
 800e3ae:	42c6      	cmn	r6, r0
 800e3b0:	bf5d      	ittte	pl
 800e3b2:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800e3b6:	ee07 1a90 	vmovpl	s15, r1
 800e3ba:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800e3be:	eef0 7a47 	vmovmi.f32	s15, s14
 800e3c2:	ece4 7a01 	vstmia	r4!, {s15}
 800e3c6:	3001      	adds	r0, #1
 800e3c8:	e7dd      	b.n	800e386 <__kernel_rem_pio2f+0x4e>
 800e3ca:	ecfe 6a01 	vldmia	lr!, {s13}
 800e3ce:	ed96 7a00 	vldr	s14, [r6]
 800e3d2:	eee6 7a87 	vfma.f32	s15, s13, s14
 800e3d6:	3401      	adds	r4, #1
 800e3d8:	455c      	cmp	r4, fp
 800e3da:	f1a6 0604 	sub.w	r6, r6, #4
 800e3de:	ddf4      	ble.n	800e3ca <__kernel_rem_pio2f+0x92>
 800e3e0:	ece9 7a01 	vstmia	r9!, {s15}
 800e3e4:	f10c 0c01 	add.w	ip, ip, #1
 800e3e8:	3004      	adds	r0, #4
 800e3ea:	e7d5      	b.n	800e398 <__kernel_rem_pio2f+0x60>
 800e3ec:	a908      	add	r1, sp, #32
 800e3ee:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e3f2:	9104      	str	r1, [sp, #16]
 800e3f4:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800e3f6:	eddf 8a90 	vldr	s17, [pc, #576]	@ 800e638 <__kernel_rem_pio2f+0x300>
 800e3fa:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 800e634 <__kernel_rem_pio2f+0x2fc>
 800e3fe:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800e402:	9203      	str	r2, [sp, #12]
 800e404:	4654      	mov	r4, sl
 800e406:	00a2      	lsls	r2, r4, #2
 800e408:	9205      	str	r2, [sp, #20]
 800e40a:	aa58      	add	r2, sp, #352	@ 0x160
 800e40c:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800e410:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800e414:	a944      	add	r1, sp, #272	@ 0x110
 800e416:	aa08      	add	r2, sp, #32
 800e418:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800e41c:	4694      	mov	ip, r2
 800e41e:	4626      	mov	r6, r4
 800e420:	2e00      	cmp	r6, #0
 800e422:	f1a0 0004 	sub.w	r0, r0, #4
 800e426:	dc4c      	bgt.n	800e4c2 <__kernel_rem_pio2f+0x18a>
 800e428:	4628      	mov	r0, r5
 800e42a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e42e:	f000 f9f5 	bl	800e81c <scalbnf>
 800e432:	eeb0 8a40 	vmov.f32	s16, s0
 800e436:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800e43a:	ee28 0a00 	vmul.f32	s0, s16, s0
 800e43e:	f000 fa53 	bl	800e8e8 <floorf>
 800e442:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800e446:	eea0 8a67 	vfms.f32	s16, s0, s15
 800e44a:	2d00      	cmp	r5, #0
 800e44c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e450:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800e454:	ee17 9a90 	vmov	r9, s15
 800e458:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e45c:	ee38 8a67 	vsub.f32	s16, s16, s15
 800e460:	dd41      	ble.n	800e4e6 <__kernel_rem_pio2f+0x1ae>
 800e462:	f104 3cff 	add.w	ip, r4, #4294967295
 800e466:	a908      	add	r1, sp, #32
 800e468:	f1c5 0e08 	rsb	lr, r5, #8
 800e46c:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800e470:	fa46 f00e 	asr.w	r0, r6, lr
 800e474:	4481      	add	r9, r0
 800e476:	fa00 f00e 	lsl.w	r0, r0, lr
 800e47a:	1a36      	subs	r6, r6, r0
 800e47c:	f1c5 0007 	rsb	r0, r5, #7
 800e480:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800e484:	4106      	asrs	r6, r0
 800e486:	2e00      	cmp	r6, #0
 800e488:	dd3c      	ble.n	800e504 <__kernel_rem_pio2f+0x1cc>
 800e48a:	f04f 0e00 	mov.w	lr, #0
 800e48e:	f109 0901 	add.w	r9, r9, #1
 800e492:	4670      	mov	r0, lr
 800e494:	4574      	cmp	r4, lr
 800e496:	dc68      	bgt.n	800e56a <__kernel_rem_pio2f+0x232>
 800e498:	2d00      	cmp	r5, #0
 800e49a:	dd03      	ble.n	800e4a4 <__kernel_rem_pio2f+0x16c>
 800e49c:	2d01      	cmp	r5, #1
 800e49e:	d074      	beq.n	800e58a <__kernel_rem_pio2f+0x252>
 800e4a0:	2d02      	cmp	r5, #2
 800e4a2:	d07d      	beq.n	800e5a0 <__kernel_rem_pio2f+0x268>
 800e4a4:	2e02      	cmp	r6, #2
 800e4a6:	d12d      	bne.n	800e504 <__kernel_rem_pio2f+0x1cc>
 800e4a8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800e4ac:	ee30 8a48 	vsub.f32	s16, s0, s16
 800e4b0:	b340      	cbz	r0, 800e504 <__kernel_rem_pio2f+0x1cc>
 800e4b2:	4628      	mov	r0, r5
 800e4b4:	9306      	str	r3, [sp, #24]
 800e4b6:	f000 f9b1 	bl	800e81c <scalbnf>
 800e4ba:	9b06      	ldr	r3, [sp, #24]
 800e4bc:	ee38 8a40 	vsub.f32	s16, s16, s0
 800e4c0:	e020      	b.n	800e504 <__kernel_rem_pio2f+0x1cc>
 800e4c2:	ee60 7a28 	vmul.f32	s15, s0, s17
 800e4c6:	3e01      	subs	r6, #1
 800e4c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e4cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e4d0:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800e4d4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800e4d8:	ecac 0a01 	vstmia	ip!, {s0}
 800e4dc:	ed90 0a00 	vldr	s0, [r0]
 800e4e0:	ee37 0a80 	vadd.f32	s0, s15, s0
 800e4e4:	e79c      	b.n	800e420 <__kernel_rem_pio2f+0xe8>
 800e4e6:	d105      	bne.n	800e4f4 <__kernel_rem_pio2f+0x1bc>
 800e4e8:	1e60      	subs	r0, r4, #1
 800e4ea:	a908      	add	r1, sp, #32
 800e4ec:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800e4f0:	11f6      	asrs	r6, r6, #7
 800e4f2:	e7c8      	b.n	800e486 <__kernel_rem_pio2f+0x14e>
 800e4f4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800e4f8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800e4fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e500:	da31      	bge.n	800e566 <__kernel_rem_pio2f+0x22e>
 800e502:	2600      	movs	r6, #0
 800e504:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800e508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e50c:	f040 8098 	bne.w	800e640 <__kernel_rem_pio2f+0x308>
 800e510:	1e60      	subs	r0, r4, #1
 800e512:	2200      	movs	r2, #0
 800e514:	4550      	cmp	r0, sl
 800e516:	da4b      	bge.n	800e5b0 <__kernel_rem_pio2f+0x278>
 800e518:	2a00      	cmp	r2, #0
 800e51a:	d065      	beq.n	800e5e8 <__kernel_rem_pio2f+0x2b0>
 800e51c:	3c01      	subs	r4, #1
 800e51e:	ab08      	add	r3, sp, #32
 800e520:	3d08      	subs	r5, #8
 800e522:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800e526:	2b00      	cmp	r3, #0
 800e528:	d0f8      	beq.n	800e51c <__kernel_rem_pio2f+0x1e4>
 800e52a:	4628      	mov	r0, r5
 800e52c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800e530:	f000 f974 	bl	800e81c <scalbnf>
 800e534:	1c63      	adds	r3, r4, #1
 800e536:	aa44      	add	r2, sp, #272	@ 0x110
 800e538:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800e638 <__kernel_rem_pio2f+0x300>
 800e53c:	0099      	lsls	r1, r3, #2
 800e53e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800e542:	4623      	mov	r3, r4
 800e544:	2b00      	cmp	r3, #0
 800e546:	f280 80a9 	bge.w	800e69c <__kernel_rem_pio2f+0x364>
 800e54a:	4623      	mov	r3, r4
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	f2c0 80c7 	blt.w	800e6e0 <__kernel_rem_pio2f+0x3a8>
 800e552:	aa44      	add	r2, sp, #272	@ 0x110
 800e554:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800e558:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800e630 <__kernel_rem_pio2f+0x2f8>
 800e55c:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800e63c <__kernel_rem_pio2f+0x304>
 800e560:	2000      	movs	r0, #0
 800e562:	1ae2      	subs	r2, r4, r3
 800e564:	e0b1      	b.n	800e6ca <__kernel_rem_pio2f+0x392>
 800e566:	2602      	movs	r6, #2
 800e568:	e78f      	b.n	800e48a <__kernel_rem_pio2f+0x152>
 800e56a:	f852 1b04 	ldr.w	r1, [r2], #4
 800e56e:	b948      	cbnz	r0, 800e584 <__kernel_rem_pio2f+0x24c>
 800e570:	b121      	cbz	r1, 800e57c <__kernel_rem_pio2f+0x244>
 800e572:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800e576:	f842 1c04 	str.w	r1, [r2, #-4]
 800e57a:	2101      	movs	r1, #1
 800e57c:	f10e 0e01 	add.w	lr, lr, #1
 800e580:	4608      	mov	r0, r1
 800e582:	e787      	b.n	800e494 <__kernel_rem_pio2f+0x15c>
 800e584:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800e588:	e7f5      	b.n	800e576 <__kernel_rem_pio2f+0x23e>
 800e58a:	f104 3cff 	add.w	ip, r4, #4294967295
 800e58e:	aa08      	add	r2, sp, #32
 800e590:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800e594:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800e598:	a908      	add	r1, sp, #32
 800e59a:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800e59e:	e781      	b.n	800e4a4 <__kernel_rem_pio2f+0x16c>
 800e5a0:	f104 3cff 	add.w	ip, r4, #4294967295
 800e5a4:	aa08      	add	r2, sp, #32
 800e5a6:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800e5aa:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800e5ae:	e7f3      	b.n	800e598 <__kernel_rem_pio2f+0x260>
 800e5b0:	a908      	add	r1, sp, #32
 800e5b2:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800e5b6:	3801      	subs	r0, #1
 800e5b8:	430a      	orrs	r2, r1
 800e5ba:	e7ab      	b.n	800e514 <__kernel_rem_pio2f+0x1dc>
 800e5bc:	3201      	adds	r2, #1
 800e5be:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800e5c2:	2e00      	cmp	r6, #0
 800e5c4:	d0fa      	beq.n	800e5bc <__kernel_rem_pio2f+0x284>
 800e5c6:	9905      	ldr	r1, [sp, #20]
 800e5c8:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800e5cc:	eb0d 0001 	add.w	r0, sp, r1
 800e5d0:	18e6      	adds	r6, r4, r3
 800e5d2:	a91c      	add	r1, sp, #112	@ 0x70
 800e5d4:	f104 0c01 	add.w	ip, r4, #1
 800e5d8:	384c      	subs	r0, #76	@ 0x4c
 800e5da:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800e5de:	4422      	add	r2, r4
 800e5e0:	4562      	cmp	r2, ip
 800e5e2:	da04      	bge.n	800e5ee <__kernel_rem_pio2f+0x2b6>
 800e5e4:	4614      	mov	r4, r2
 800e5e6:	e70e      	b.n	800e406 <__kernel_rem_pio2f+0xce>
 800e5e8:	9804      	ldr	r0, [sp, #16]
 800e5ea:	2201      	movs	r2, #1
 800e5ec:	e7e7      	b.n	800e5be <__kernel_rem_pio2f+0x286>
 800e5ee:	9903      	ldr	r1, [sp, #12]
 800e5f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 800e5f4:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800e5f8:	9105      	str	r1, [sp, #20]
 800e5fa:	ee07 1a90 	vmov	s15, r1
 800e5fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e602:	2400      	movs	r4, #0
 800e604:	ece6 7a01 	vstmia	r6!, {s15}
 800e608:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800e63c <__kernel_rem_pio2f+0x304>
 800e60c:	46b1      	mov	r9, r6
 800e60e:	455c      	cmp	r4, fp
 800e610:	dd04      	ble.n	800e61c <__kernel_rem_pio2f+0x2e4>
 800e612:	ece0 7a01 	vstmia	r0!, {s15}
 800e616:	f10c 0c01 	add.w	ip, ip, #1
 800e61a:	e7e1      	b.n	800e5e0 <__kernel_rem_pio2f+0x2a8>
 800e61c:	ecfe 6a01 	vldmia	lr!, {s13}
 800e620:	ed39 7a01 	vldmdb	r9!, {s14}
 800e624:	3401      	adds	r4, #1
 800e626:	eee6 7a87 	vfma.f32	s15, s13, s14
 800e62a:	e7f0      	b.n	800e60e <__kernel_rem_pio2f+0x2d6>
 800e62c:	08016604 	.word	0x08016604
 800e630:	080165d8 	.word	0x080165d8
 800e634:	43800000 	.word	0x43800000
 800e638:	3b800000 	.word	0x3b800000
 800e63c:	00000000 	.word	0x00000000
 800e640:	9b02      	ldr	r3, [sp, #8]
 800e642:	eeb0 0a48 	vmov.f32	s0, s16
 800e646:	eba3 0008 	sub.w	r0, r3, r8
 800e64a:	f000 f8e7 	bl	800e81c <scalbnf>
 800e64e:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800e634 <__kernel_rem_pio2f+0x2fc>
 800e652:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800e656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e65a:	db19      	blt.n	800e690 <__kernel_rem_pio2f+0x358>
 800e65c:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800e638 <__kernel_rem_pio2f+0x300>
 800e660:	ee60 7a27 	vmul.f32	s15, s0, s15
 800e664:	aa08      	add	r2, sp, #32
 800e666:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e66a:	3508      	adds	r5, #8
 800e66c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e670:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800e674:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e678:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800e67c:	ee10 3a10 	vmov	r3, s0
 800e680:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800e684:	ee17 3a90 	vmov	r3, s15
 800e688:	3401      	adds	r4, #1
 800e68a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800e68e:	e74c      	b.n	800e52a <__kernel_rem_pio2f+0x1f2>
 800e690:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800e694:	aa08      	add	r2, sp, #32
 800e696:	ee10 3a10 	vmov	r3, s0
 800e69a:	e7f6      	b.n	800e68a <__kernel_rem_pio2f+0x352>
 800e69c:	a808      	add	r0, sp, #32
 800e69e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800e6a2:	9001      	str	r0, [sp, #4]
 800e6a4:	ee07 0a90 	vmov	s15, r0
 800e6a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e6ac:	3b01      	subs	r3, #1
 800e6ae:	ee67 7a80 	vmul.f32	s15, s15, s0
 800e6b2:	ee20 0a07 	vmul.f32	s0, s0, s14
 800e6b6:	ed62 7a01 	vstmdb	r2!, {s15}
 800e6ba:	e743      	b.n	800e544 <__kernel_rem_pio2f+0x20c>
 800e6bc:	ecfc 6a01 	vldmia	ip!, {s13}
 800e6c0:	ecb5 7a01 	vldmia	r5!, {s14}
 800e6c4:	eee6 7a87 	vfma.f32	s15, s13, s14
 800e6c8:	3001      	adds	r0, #1
 800e6ca:	4550      	cmp	r0, sl
 800e6cc:	dc01      	bgt.n	800e6d2 <__kernel_rem_pio2f+0x39a>
 800e6ce:	4282      	cmp	r2, r0
 800e6d0:	daf4      	bge.n	800e6bc <__kernel_rem_pio2f+0x384>
 800e6d2:	a858      	add	r0, sp, #352	@ 0x160
 800e6d4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800e6d8:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800e6dc:	3b01      	subs	r3, #1
 800e6de:	e735      	b.n	800e54c <__kernel_rem_pio2f+0x214>
 800e6e0:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800e6e2:	2b02      	cmp	r3, #2
 800e6e4:	dc09      	bgt.n	800e6fa <__kernel_rem_pio2f+0x3c2>
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	dc2b      	bgt.n	800e742 <__kernel_rem_pio2f+0x40a>
 800e6ea:	d044      	beq.n	800e776 <__kernel_rem_pio2f+0x43e>
 800e6ec:	f009 0007 	and.w	r0, r9, #7
 800e6f0:	b059      	add	sp, #356	@ 0x164
 800e6f2:	ecbd 8b04 	vpop	{d8-d9}
 800e6f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6fa:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800e6fc:	2b03      	cmp	r3, #3
 800e6fe:	d1f5      	bne.n	800e6ec <__kernel_rem_pio2f+0x3b4>
 800e700:	aa30      	add	r2, sp, #192	@ 0xc0
 800e702:	1f0b      	subs	r3, r1, #4
 800e704:	4413      	add	r3, r2
 800e706:	461a      	mov	r2, r3
 800e708:	4620      	mov	r0, r4
 800e70a:	2800      	cmp	r0, #0
 800e70c:	f1a2 0204 	sub.w	r2, r2, #4
 800e710:	dc52      	bgt.n	800e7b8 <__kernel_rem_pio2f+0x480>
 800e712:	4622      	mov	r2, r4
 800e714:	2a01      	cmp	r2, #1
 800e716:	f1a3 0304 	sub.w	r3, r3, #4
 800e71a:	dc5d      	bgt.n	800e7d8 <__kernel_rem_pio2f+0x4a0>
 800e71c:	ab30      	add	r3, sp, #192	@ 0xc0
 800e71e:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 800e63c <__kernel_rem_pio2f+0x304>
 800e722:	440b      	add	r3, r1
 800e724:	2c01      	cmp	r4, #1
 800e726:	dc67      	bgt.n	800e7f8 <__kernel_rem_pio2f+0x4c0>
 800e728:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800e72c:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800e730:	2e00      	cmp	r6, #0
 800e732:	d167      	bne.n	800e804 <__kernel_rem_pio2f+0x4cc>
 800e734:	edc7 6a00 	vstr	s13, [r7]
 800e738:	ed87 7a01 	vstr	s14, [r7, #4]
 800e73c:	edc7 7a02 	vstr	s15, [r7, #8]
 800e740:	e7d4      	b.n	800e6ec <__kernel_rem_pio2f+0x3b4>
 800e742:	ab30      	add	r3, sp, #192	@ 0xc0
 800e744:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 800e63c <__kernel_rem_pio2f+0x304>
 800e748:	440b      	add	r3, r1
 800e74a:	4622      	mov	r2, r4
 800e74c:	2a00      	cmp	r2, #0
 800e74e:	da24      	bge.n	800e79a <__kernel_rem_pio2f+0x462>
 800e750:	b34e      	cbz	r6, 800e7a6 <__kernel_rem_pio2f+0x46e>
 800e752:	eef1 7a47 	vneg.f32	s15, s14
 800e756:	edc7 7a00 	vstr	s15, [r7]
 800e75a:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800e75e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e762:	aa31      	add	r2, sp, #196	@ 0xc4
 800e764:	2301      	movs	r3, #1
 800e766:	429c      	cmp	r4, r3
 800e768:	da20      	bge.n	800e7ac <__kernel_rem_pio2f+0x474>
 800e76a:	b10e      	cbz	r6, 800e770 <__kernel_rem_pio2f+0x438>
 800e76c:	eef1 7a67 	vneg.f32	s15, s15
 800e770:	edc7 7a01 	vstr	s15, [r7, #4]
 800e774:	e7ba      	b.n	800e6ec <__kernel_rem_pio2f+0x3b4>
 800e776:	ab30      	add	r3, sp, #192	@ 0xc0
 800e778:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 800e63c <__kernel_rem_pio2f+0x304>
 800e77c:	440b      	add	r3, r1
 800e77e:	2c00      	cmp	r4, #0
 800e780:	da05      	bge.n	800e78e <__kernel_rem_pio2f+0x456>
 800e782:	b10e      	cbz	r6, 800e788 <__kernel_rem_pio2f+0x450>
 800e784:	eef1 7a67 	vneg.f32	s15, s15
 800e788:	edc7 7a00 	vstr	s15, [r7]
 800e78c:	e7ae      	b.n	800e6ec <__kernel_rem_pio2f+0x3b4>
 800e78e:	ed33 7a01 	vldmdb	r3!, {s14}
 800e792:	3c01      	subs	r4, #1
 800e794:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e798:	e7f1      	b.n	800e77e <__kernel_rem_pio2f+0x446>
 800e79a:	ed73 7a01 	vldmdb	r3!, {s15}
 800e79e:	3a01      	subs	r2, #1
 800e7a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e7a4:	e7d2      	b.n	800e74c <__kernel_rem_pio2f+0x414>
 800e7a6:	eef0 7a47 	vmov.f32	s15, s14
 800e7aa:	e7d4      	b.n	800e756 <__kernel_rem_pio2f+0x41e>
 800e7ac:	ecb2 7a01 	vldmia	r2!, {s14}
 800e7b0:	3301      	adds	r3, #1
 800e7b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e7b6:	e7d6      	b.n	800e766 <__kernel_rem_pio2f+0x42e>
 800e7b8:	edd2 7a00 	vldr	s15, [r2]
 800e7bc:	edd2 6a01 	vldr	s13, [r2, #4]
 800e7c0:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800e7c4:	3801      	subs	r0, #1
 800e7c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e7ca:	ed82 7a00 	vstr	s14, [r2]
 800e7ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e7d2:	edc2 7a01 	vstr	s15, [r2, #4]
 800e7d6:	e798      	b.n	800e70a <__kernel_rem_pio2f+0x3d2>
 800e7d8:	edd3 7a00 	vldr	s15, [r3]
 800e7dc:	edd3 6a01 	vldr	s13, [r3, #4]
 800e7e0:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800e7e4:	3a01      	subs	r2, #1
 800e7e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e7ea:	ed83 7a00 	vstr	s14, [r3]
 800e7ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e7f2:	edc3 7a01 	vstr	s15, [r3, #4]
 800e7f6:	e78d      	b.n	800e714 <__kernel_rem_pio2f+0x3dc>
 800e7f8:	ed33 7a01 	vldmdb	r3!, {s14}
 800e7fc:	3c01      	subs	r4, #1
 800e7fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e802:	e78f      	b.n	800e724 <__kernel_rem_pio2f+0x3ec>
 800e804:	eef1 6a66 	vneg.f32	s13, s13
 800e808:	eeb1 7a47 	vneg.f32	s14, s14
 800e80c:	edc7 6a00 	vstr	s13, [r7]
 800e810:	ed87 7a01 	vstr	s14, [r7, #4]
 800e814:	eef1 7a67 	vneg.f32	s15, s15
 800e818:	e790      	b.n	800e73c <__kernel_rem_pio2f+0x404>
 800e81a:	bf00      	nop

0800e81c <scalbnf>:
 800e81c:	ee10 3a10 	vmov	r3, s0
 800e820:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800e824:	d02b      	beq.n	800e87e <scalbnf+0x62>
 800e826:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800e82a:	d302      	bcc.n	800e832 <scalbnf+0x16>
 800e82c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e830:	4770      	bx	lr
 800e832:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800e836:	d123      	bne.n	800e880 <scalbnf+0x64>
 800e838:	4b24      	ldr	r3, [pc, #144]	@ (800e8cc <scalbnf+0xb0>)
 800e83a:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800e8d0 <scalbnf+0xb4>
 800e83e:	4298      	cmp	r0, r3
 800e840:	ee20 0a27 	vmul.f32	s0, s0, s15
 800e844:	db17      	blt.n	800e876 <scalbnf+0x5a>
 800e846:	ee10 3a10 	vmov	r3, s0
 800e84a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800e84e:	3a19      	subs	r2, #25
 800e850:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800e854:	4288      	cmp	r0, r1
 800e856:	dd15      	ble.n	800e884 <scalbnf+0x68>
 800e858:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800e8d4 <scalbnf+0xb8>
 800e85c:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800e8d8 <scalbnf+0xbc>
 800e860:	ee10 3a10 	vmov	r3, s0
 800e864:	eeb0 7a67 	vmov.f32	s14, s15
 800e868:	2b00      	cmp	r3, #0
 800e86a:	bfb8      	it	lt
 800e86c:	eef0 7a66 	vmovlt.f32	s15, s13
 800e870:	ee27 0a87 	vmul.f32	s0, s15, s14
 800e874:	4770      	bx	lr
 800e876:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800e8dc <scalbnf+0xc0>
 800e87a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800e87e:	4770      	bx	lr
 800e880:	0dd2      	lsrs	r2, r2, #23
 800e882:	e7e5      	b.n	800e850 <scalbnf+0x34>
 800e884:	4410      	add	r0, r2
 800e886:	28fe      	cmp	r0, #254	@ 0xfe
 800e888:	dce6      	bgt.n	800e858 <scalbnf+0x3c>
 800e88a:	2800      	cmp	r0, #0
 800e88c:	dd06      	ble.n	800e89c <scalbnf+0x80>
 800e88e:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800e892:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800e896:	ee00 3a10 	vmov	s0, r3
 800e89a:	4770      	bx	lr
 800e89c:	f110 0f16 	cmn.w	r0, #22
 800e8a0:	da09      	bge.n	800e8b6 <scalbnf+0x9a>
 800e8a2:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800e8dc <scalbnf+0xc0>
 800e8a6:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800e8e0 <scalbnf+0xc4>
 800e8aa:	ee10 3a10 	vmov	r3, s0
 800e8ae:	eeb0 7a67 	vmov.f32	s14, s15
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	e7d9      	b.n	800e86a <scalbnf+0x4e>
 800e8b6:	3019      	adds	r0, #25
 800e8b8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800e8bc:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800e8c0:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800e8e4 <scalbnf+0xc8>
 800e8c4:	ee07 3a90 	vmov	s15, r3
 800e8c8:	e7d7      	b.n	800e87a <scalbnf+0x5e>
 800e8ca:	bf00      	nop
 800e8cc:	ffff3cb0 	.word	0xffff3cb0
 800e8d0:	4c000000 	.word	0x4c000000
 800e8d4:	7149f2ca 	.word	0x7149f2ca
 800e8d8:	f149f2ca 	.word	0xf149f2ca
 800e8dc:	0da24260 	.word	0x0da24260
 800e8e0:	8da24260 	.word	0x8da24260
 800e8e4:	33000000 	.word	0x33000000

0800e8e8 <floorf>:
 800e8e8:	ee10 3a10 	vmov	r3, s0
 800e8ec:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800e8f0:	3a7f      	subs	r2, #127	@ 0x7f
 800e8f2:	2a16      	cmp	r2, #22
 800e8f4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800e8f8:	dc2b      	bgt.n	800e952 <floorf+0x6a>
 800e8fa:	2a00      	cmp	r2, #0
 800e8fc:	da12      	bge.n	800e924 <floorf+0x3c>
 800e8fe:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800e964 <floorf+0x7c>
 800e902:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e906:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800e90a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e90e:	dd06      	ble.n	800e91e <floorf+0x36>
 800e910:	2b00      	cmp	r3, #0
 800e912:	da24      	bge.n	800e95e <floorf+0x76>
 800e914:	2900      	cmp	r1, #0
 800e916:	4b14      	ldr	r3, [pc, #80]	@ (800e968 <floorf+0x80>)
 800e918:	bf08      	it	eq
 800e91a:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800e91e:	ee00 3a10 	vmov	s0, r3
 800e922:	4770      	bx	lr
 800e924:	4911      	ldr	r1, [pc, #68]	@ (800e96c <floorf+0x84>)
 800e926:	4111      	asrs	r1, r2
 800e928:	420b      	tst	r3, r1
 800e92a:	d0fa      	beq.n	800e922 <floorf+0x3a>
 800e92c:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800e964 <floorf+0x7c>
 800e930:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e934:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800e938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e93c:	ddef      	ble.n	800e91e <floorf+0x36>
 800e93e:	2b00      	cmp	r3, #0
 800e940:	bfbe      	ittt	lt
 800e942:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800e946:	fa40 f202 	asrlt.w	r2, r0, r2
 800e94a:	189b      	addlt	r3, r3, r2
 800e94c:	ea23 0301 	bic.w	r3, r3, r1
 800e950:	e7e5      	b.n	800e91e <floorf+0x36>
 800e952:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800e956:	d3e4      	bcc.n	800e922 <floorf+0x3a>
 800e958:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e95c:	4770      	bx	lr
 800e95e:	2300      	movs	r3, #0
 800e960:	e7dd      	b.n	800e91e <floorf+0x36>
 800e962:	bf00      	nop
 800e964:	7149f2ca 	.word	0x7149f2ca
 800e968:	bf800000 	.word	0xbf800000
 800e96c:	007fffff 	.word	0x007fffff

0800e970 <_init>:
 800e970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e972:	bf00      	nop
 800e974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e976:	bc08      	pop	{r3}
 800e978:	469e      	mov	lr, r3
 800e97a:	4770      	bx	lr

0800e97c <_fini>:
 800e97c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e97e:	bf00      	nop
 800e980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e982:	bc08      	pop	{r3}
 800e984:	469e      	mov	lr, r3
 800e986:	4770      	bx	lr
