
STM32G473CBT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e960  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00007cf0  0800eb40  0800eb40  0000fb40  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016830  08016830  00018224  2**0
                  CONTENTS
  4 .ARM          00000008  08016830  08016830  00017830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016838  08016838  00018224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016838  08016838  00017838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801683c  0801683c  0001783c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000224  20000000  08016840  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000069d0  20000240  08016a64  00018240  2**6
                  ALLOC
 10 ._user_heap_stack 00000600  20006c10  08016a64  00018c10  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00018224  2**0
                  CONTENTS, READONLY
 12 .debug_info   00036f09  00000000  00000000  00018254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006dbc  00000000  00000000  0004f15d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001fe8  00000000  00000000  00055f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001abe  00000000  00000000  00057f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002afca  00000000  00000000  000599c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003de10  00000000  00000000  00084990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fa69d  00000000  00000000  000c27a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001bce3d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c90  00000000  00000000  001bce80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 0001696b  00000000  00000000  001c3b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  001da47b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000240 	.word	0x20000240
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800eb28 	.word	0x0800eb28

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000244 	.word	0x20000244
 800021c:	0800eb28 	.word	0x0800eb28

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2iz>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d215      	bcs.n	8000bfe <__aeabi_d2iz+0x36>
 8000bd2:	d511      	bpl.n	8000bf8 <__aeabi_d2iz+0x30>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d912      	bls.n	8000c04 <__aeabi_d2iz+0x3c>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d105      	bne.n	8000c10 <__aeabi_d2iz+0x48>
 8000c04:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000c08:	bf08      	it	eq
 8000c0a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_d2uiz>:
 8000c18:	004a      	lsls	r2, r1, #1
 8000c1a:	d211      	bcs.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c1c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c20:	d211      	bcs.n	8000c46 <__aeabi_d2uiz+0x2e>
 8000c22:	d50d      	bpl.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c24:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c2c:	d40e      	bmi.n	8000c4c <__aeabi_d2uiz+0x34>
 8000c2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c32:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c3a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c3e:	4770      	bx	lr
 8000c40:	f04f 0000 	mov.w	r0, #0
 8000c44:	4770      	bx	lr
 8000c46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c4a:	d102      	bne.n	8000c52 <__aeabi_d2uiz+0x3a>
 8000c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c50:	4770      	bx	lr
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_d2f>:
 8000c58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c60:	bf24      	itt	cs
 8000c62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c6a:	d90d      	bls.n	8000c88 <__aeabi_d2f+0x30>
 8000c6c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c78:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c80:	bf08      	it	eq
 8000c82:	f020 0001 	biceq.w	r0, r0, #1
 8000c86:	4770      	bx	lr
 8000c88:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c8c:	d121      	bne.n	8000cd2 <__aeabi_d2f+0x7a>
 8000c8e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c92:	bfbc      	itt	lt
 8000c94:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c98:	4770      	bxlt	lr
 8000c9a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ca2:	f1c2 0218 	rsb	r2, r2, #24
 8000ca6:	f1c2 0c20 	rsb	ip, r2, #32
 8000caa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cae:	fa20 f002 	lsr.w	r0, r0, r2
 8000cb2:	bf18      	it	ne
 8000cb4:	f040 0001 	orrne.w	r0, r0, #1
 8000cb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cc4:	ea40 000c 	orr.w	r0, r0, ip
 8000cc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000ccc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cd0:	e7cc      	b.n	8000c6c <__aeabi_d2f+0x14>
 8000cd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cd6:	d107      	bne.n	8000ce8 <__aeabi_d2f+0x90>
 8000cd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cdc:	bf1e      	ittt	ne
 8000cde:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ce2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ce6:	4770      	bxne	lr
 8000ce8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cec:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cf0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_uldivmod>:
 8000cf8:	b953      	cbnz	r3, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfa:	b94a      	cbnz	r2, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	bf08      	it	eq
 8000d00:	2800      	cmpeq	r0, #0
 8000d02:	bf1c      	itt	ne
 8000d04:	f04f 31ff 	movne.w	r1, #4294967295
 8000d08:	f04f 30ff 	movne.w	r0, #4294967295
 8000d0c:	f000 b9a0 	b.w	8001050 <__aeabi_idiv0>
 8000d10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d18:	f000 f83c 	bl	8000d94 <__udivmoddi4>
 8000d1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d24:	b004      	add	sp, #16
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_d2lz>:
 8000d28:	b538      	push	{r3, r4, r5, lr}
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	4604      	mov	r4, r0
 8000d30:	460d      	mov	r5, r1
 8000d32:	f7ff ff0b 	bl	8000b4c <__aeabi_dcmplt>
 8000d36:	b928      	cbnz	r0, 8000d44 <__aeabi_d2lz+0x1c>
 8000d38:	4620      	mov	r0, r4
 8000d3a:	4629      	mov	r1, r5
 8000d3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d40:	f000 b80a 	b.w	8000d58 <__aeabi_d2ulz>
 8000d44:	4620      	mov	r0, r4
 8000d46:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d4a:	f000 f805 	bl	8000d58 <__aeabi_d2ulz>
 8000d4e:	4240      	negs	r0, r0
 8000d50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d54:	bd38      	pop	{r3, r4, r5, pc}
 8000d56:	bf00      	nop

08000d58 <__aeabi_d2ulz>:
 8000d58:	b5d0      	push	{r4, r6, r7, lr}
 8000d5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d8c <__aeabi_d2ulz+0x34>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	4606      	mov	r6, r0
 8000d60:	460f      	mov	r7, r1
 8000d62:	f7ff fc81 	bl	8000668 <__aeabi_dmul>
 8000d66:	f7ff ff57 	bl	8000c18 <__aeabi_d2uiz>
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	f7ff fc02 	bl	8000574 <__aeabi_ui2d>
 8000d70:	4b07      	ldr	r3, [pc, #28]	@ (8000d90 <__aeabi_d2ulz+0x38>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	f7ff fc78 	bl	8000668 <__aeabi_dmul>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	4630      	mov	r0, r6
 8000d7e:	4639      	mov	r1, r7
 8000d80:	f7ff faba 	bl	80002f8 <__aeabi_dsub>
 8000d84:	f7ff ff48 	bl	8000c18 <__aeabi_d2uiz>
 8000d88:	4621      	mov	r1, r4
 8000d8a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d8c:	3df00000 	.word	0x3df00000
 8000d90:	41f00000 	.word	0x41f00000

08000d94 <__udivmoddi4>:
 8000d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d98:	9d08      	ldr	r5, [sp, #32]
 8000d9a:	460c      	mov	r4, r1
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d14e      	bne.n	8000e3e <__udivmoddi4+0xaa>
 8000da0:	4694      	mov	ip, r2
 8000da2:	458c      	cmp	ip, r1
 8000da4:	4686      	mov	lr, r0
 8000da6:	fab2 f282 	clz	r2, r2
 8000daa:	d962      	bls.n	8000e72 <__udivmoddi4+0xde>
 8000dac:	b14a      	cbz	r2, 8000dc2 <__udivmoddi4+0x2e>
 8000dae:	f1c2 0320 	rsb	r3, r2, #32
 8000db2:	4091      	lsls	r1, r2
 8000db4:	fa20 f303 	lsr.w	r3, r0, r3
 8000db8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dbc:	4319      	orrs	r1, r3
 8000dbe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f f68c 	uxth.w	r6, ip
 8000dca:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dd2:	fb07 1114 	mls	r1, r7, r4, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb04 f106 	mul.w	r1, r4, r6
 8000dde:	4299      	cmp	r1, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x64>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dea:	f080 8112 	bcs.w	8001012 <__udivmoddi4+0x27e>
 8000dee:	4299      	cmp	r1, r3
 8000df0:	f240 810f 	bls.w	8001012 <__udivmoddi4+0x27e>
 8000df4:	3c02      	subs	r4, #2
 8000df6:	4463      	add	r3, ip
 8000df8:	1a59      	subs	r1, r3, r1
 8000dfa:	fa1f f38e 	uxth.w	r3, lr
 8000dfe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e02:	fb07 1110 	mls	r1, r7, r0, r1
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f606 	mul.w	r6, r0, r6
 8000e0e:	429e      	cmp	r6, r3
 8000e10:	d90a      	bls.n	8000e28 <__udivmoddi4+0x94>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e1a:	f080 80fc 	bcs.w	8001016 <__udivmoddi4+0x282>
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	f240 80f9 	bls.w	8001016 <__udivmoddi4+0x282>
 8000e24:	4463      	add	r3, ip
 8000e26:	3802      	subs	r0, #2
 8000e28:	1b9b      	subs	r3, r3, r6
 8000e2a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e2e:	2100      	movs	r1, #0
 8000e30:	b11d      	cbz	r5, 8000e3a <__udivmoddi4+0xa6>
 8000e32:	40d3      	lsrs	r3, r2
 8000e34:	2200      	movs	r2, #0
 8000e36:	e9c5 3200 	strd	r3, r2, [r5]
 8000e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d905      	bls.n	8000e4e <__udivmoddi4+0xba>
 8000e42:	b10d      	cbz	r5, 8000e48 <__udivmoddi4+0xb4>
 8000e44:	e9c5 0100 	strd	r0, r1, [r5]
 8000e48:	2100      	movs	r1, #0
 8000e4a:	4608      	mov	r0, r1
 8000e4c:	e7f5      	b.n	8000e3a <__udivmoddi4+0xa6>
 8000e4e:	fab3 f183 	clz	r1, r3
 8000e52:	2900      	cmp	r1, #0
 8000e54:	d146      	bne.n	8000ee4 <__udivmoddi4+0x150>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d302      	bcc.n	8000e60 <__udivmoddi4+0xcc>
 8000e5a:	4290      	cmp	r0, r2
 8000e5c:	f0c0 80f0 	bcc.w	8001040 <__udivmoddi4+0x2ac>
 8000e60:	1a86      	subs	r6, r0, r2
 8000e62:	eb64 0303 	sbc.w	r3, r4, r3
 8000e66:	2001      	movs	r0, #1
 8000e68:	2d00      	cmp	r5, #0
 8000e6a:	d0e6      	beq.n	8000e3a <__udivmoddi4+0xa6>
 8000e6c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e70:	e7e3      	b.n	8000e3a <__udivmoddi4+0xa6>
 8000e72:	2a00      	cmp	r2, #0
 8000e74:	f040 8090 	bne.w	8000f98 <__udivmoddi4+0x204>
 8000e78:	eba1 040c 	sub.w	r4, r1, ip
 8000e7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e80:	fa1f f78c 	uxth.w	r7, ip
 8000e84:	2101      	movs	r1, #1
 8000e86:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e8a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e8e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e92:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e96:	fb07 f006 	mul.w	r0, r7, r6
 8000e9a:	4298      	cmp	r0, r3
 8000e9c:	d908      	bls.n	8000eb0 <__udivmoddi4+0x11c>
 8000e9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000ea2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000ea6:	d202      	bcs.n	8000eae <__udivmoddi4+0x11a>
 8000ea8:	4298      	cmp	r0, r3
 8000eaa:	f200 80cd 	bhi.w	8001048 <__udivmoddi4+0x2b4>
 8000eae:	4626      	mov	r6, r4
 8000eb0:	1a1c      	subs	r4, r3, r0
 8000eb2:	fa1f f38e 	uxth.w	r3, lr
 8000eb6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000eba:	fb08 4410 	mls	r4, r8, r0, r4
 8000ebe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ec2:	fb00 f707 	mul.w	r7, r0, r7
 8000ec6:	429f      	cmp	r7, r3
 8000ec8:	d908      	bls.n	8000edc <__udivmoddi4+0x148>
 8000eca:	eb1c 0303 	adds.w	r3, ip, r3
 8000ece:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ed2:	d202      	bcs.n	8000eda <__udivmoddi4+0x146>
 8000ed4:	429f      	cmp	r7, r3
 8000ed6:	f200 80b0 	bhi.w	800103a <__udivmoddi4+0x2a6>
 8000eda:	4620      	mov	r0, r4
 8000edc:	1bdb      	subs	r3, r3, r7
 8000ede:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ee2:	e7a5      	b.n	8000e30 <__udivmoddi4+0x9c>
 8000ee4:	f1c1 0620 	rsb	r6, r1, #32
 8000ee8:	408b      	lsls	r3, r1
 8000eea:	fa22 f706 	lsr.w	r7, r2, r6
 8000eee:	431f      	orrs	r7, r3
 8000ef0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ef4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ef8:	ea43 030c 	orr.w	r3, r3, ip
 8000efc:	40f4      	lsrs	r4, r6
 8000efe:	fa00 f801 	lsl.w	r8, r0, r1
 8000f02:	0c38      	lsrs	r0, r7, #16
 8000f04:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000f08:	fbb4 fef0 	udiv	lr, r4, r0
 8000f0c:	fa1f fc87 	uxth.w	ip, r7
 8000f10:	fb00 441e 	mls	r4, r0, lr, r4
 8000f14:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f18:	fb0e f90c 	mul.w	r9, lr, ip
 8000f1c:	45a1      	cmp	r9, r4
 8000f1e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f22:	d90a      	bls.n	8000f3a <__udivmoddi4+0x1a6>
 8000f24:	193c      	adds	r4, r7, r4
 8000f26:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f2a:	f080 8084 	bcs.w	8001036 <__udivmoddi4+0x2a2>
 8000f2e:	45a1      	cmp	r9, r4
 8000f30:	f240 8081 	bls.w	8001036 <__udivmoddi4+0x2a2>
 8000f34:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f38:	443c      	add	r4, r7
 8000f3a:	eba4 0409 	sub.w	r4, r4, r9
 8000f3e:	fa1f f983 	uxth.w	r9, r3
 8000f42:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f46:	fb00 4413 	mls	r4, r0, r3, r4
 8000f4a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f4e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f52:	45a4      	cmp	ip, r4
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x1d2>
 8000f56:	193c      	adds	r4, r7, r4
 8000f58:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f5c:	d267      	bcs.n	800102e <__udivmoddi4+0x29a>
 8000f5e:	45a4      	cmp	ip, r4
 8000f60:	d965      	bls.n	800102e <__udivmoddi4+0x29a>
 8000f62:	3b02      	subs	r3, #2
 8000f64:	443c      	add	r4, r7
 8000f66:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f6a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f6e:	eba4 040c 	sub.w	r4, r4, ip
 8000f72:	429c      	cmp	r4, r3
 8000f74:	46ce      	mov	lr, r9
 8000f76:	469c      	mov	ip, r3
 8000f78:	d351      	bcc.n	800101e <__udivmoddi4+0x28a>
 8000f7a:	d04e      	beq.n	800101a <__udivmoddi4+0x286>
 8000f7c:	b155      	cbz	r5, 8000f94 <__udivmoddi4+0x200>
 8000f7e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f82:	eb64 040c 	sbc.w	r4, r4, ip
 8000f86:	fa04 f606 	lsl.w	r6, r4, r6
 8000f8a:	40cb      	lsrs	r3, r1
 8000f8c:	431e      	orrs	r6, r3
 8000f8e:	40cc      	lsrs	r4, r1
 8000f90:	e9c5 6400 	strd	r6, r4, [r5]
 8000f94:	2100      	movs	r1, #0
 8000f96:	e750      	b.n	8000e3a <__udivmoddi4+0xa6>
 8000f98:	f1c2 0320 	rsb	r3, r2, #32
 8000f9c:	fa20 f103 	lsr.w	r1, r0, r3
 8000fa0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fa4:	fa24 f303 	lsr.w	r3, r4, r3
 8000fa8:	4094      	lsls	r4, r2
 8000faa:	430c      	orrs	r4, r1
 8000fac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000fb0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000fb4:	fa1f f78c 	uxth.w	r7, ip
 8000fb8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000fbc:	fb08 3110 	mls	r1, r8, r0, r3
 8000fc0:	0c23      	lsrs	r3, r4, #16
 8000fc2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fc6:	fb00 f107 	mul.w	r1, r0, r7
 8000fca:	4299      	cmp	r1, r3
 8000fcc:	d908      	bls.n	8000fe0 <__udivmoddi4+0x24c>
 8000fce:	eb1c 0303 	adds.w	r3, ip, r3
 8000fd2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fd6:	d22c      	bcs.n	8001032 <__udivmoddi4+0x29e>
 8000fd8:	4299      	cmp	r1, r3
 8000fda:	d92a      	bls.n	8001032 <__udivmoddi4+0x29e>
 8000fdc:	3802      	subs	r0, #2
 8000fde:	4463      	add	r3, ip
 8000fe0:	1a5b      	subs	r3, r3, r1
 8000fe2:	b2a4      	uxth	r4, r4
 8000fe4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fe8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ff0:	fb01 f307 	mul.w	r3, r1, r7
 8000ff4:	42a3      	cmp	r3, r4
 8000ff6:	d908      	bls.n	800100a <__udivmoddi4+0x276>
 8000ff8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ffc:	f101 36ff 	add.w	r6, r1, #4294967295
 8001000:	d213      	bcs.n	800102a <__udivmoddi4+0x296>
 8001002:	42a3      	cmp	r3, r4
 8001004:	d911      	bls.n	800102a <__udivmoddi4+0x296>
 8001006:	3902      	subs	r1, #2
 8001008:	4464      	add	r4, ip
 800100a:	1ae4      	subs	r4, r4, r3
 800100c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001010:	e739      	b.n	8000e86 <__udivmoddi4+0xf2>
 8001012:	4604      	mov	r4, r0
 8001014:	e6f0      	b.n	8000df8 <__udivmoddi4+0x64>
 8001016:	4608      	mov	r0, r1
 8001018:	e706      	b.n	8000e28 <__udivmoddi4+0x94>
 800101a:	45c8      	cmp	r8, r9
 800101c:	d2ae      	bcs.n	8000f7c <__udivmoddi4+0x1e8>
 800101e:	ebb9 0e02 	subs.w	lr, r9, r2
 8001022:	eb63 0c07 	sbc.w	ip, r3, r7
 8001026:	3801      	subs	r0, #1
 8001028:	e7a8      	b.n	8000f7c <__udivmoddi4+0x1e8>
 800102a:	4631      	mov	r1, r6
 800102c:	e7ed      	b.n	800100a <__udivmoddi4+0x276>
 800102e:	4603      	mov	r3, r0
 8001030:	e799      	b.n	8000f66 <__udivmoddi4+0x1d2>
 8001032:	4630      	mov	r0, r6
 8001034:	e7d4      	b.n	8000fe0 <__udivmoddi4+0x24c>
 8001036:	46d6      	mov	lr, sl
 8001038:	e77f      	b.n	8000f3a <__udivmoddi4+0x1a6>
 800103a:	4463      	add	r3, ip
 800103c:	3802      	subs	r0, #2
 800103e:	e74d      	b.n	8000edc <__udivmoddi4+0x148>
 8001040:	4606      	mov	r6, r0
 8001042:	4623      	mov	r3, r4
 8001044:	4608      	mov	r0, r1
 8001046:	e70f      	b.n	8000e68 <__udivmoddi4+0xd4>
 8001048:	3e02      	subs	r6, #2
 800104a:	4463      	add	r3, ip
 800104c:	e730      	b.n	8000eb0 <__udivmoddi4+0x11c>
 800104e:	bf00      	nop

08001050 <__aeabi_idiv0>:
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <apInit>:
#include "ap.h"

static uint32_t pre_time = 0;

void apInit(void)
{
 8001054:	b508      	push	{r3, lr}
  cliOpen(_DEF_UART1, 115200);
 8001056:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 800105a:	2000      	movs	r0, #0
 800105c:	f002 fba0 	bl	80037a0 <cliOpen>
  
  monitorInit();
 8001060:	f000 f85a 	bl	8001118 <monitorInit>
  sequenceInit();
 8001064:	f000 ff48 	bl	8001ef8 <sequenceInit>
  controlInit();
 8001068:	f000 f844 	bl	80010f4 <controlInit>
}
 800106c:	bd08      	pop	{r3, pc}
	...

08001070 <apMain>:

void apMain(void)
{
 8001070:	b508      	push	{r3, lr}
  while (1)
  {
    cliMain();
 8001072:	f002 fdf7 	bl	8003c64 <cliMain>
    monitorMain();
 8001076:	f000 f923 	bl	80012c0 <monitorMain>
    controlUserMain();
 800107a:	f000 f84c 	bl	8001116 <controlUserMain>

     if (millis() - pre_time > 500)
 800107e:	f000 ff67 	bl	8001f50 <millis>
 8001082:	4b08      	ldr	r3, [pc, #32]	@ (80010a4 <apMain+0x34>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	1ac0      	subs	r0, r0, r3
 8001088:	f5b0 7ffa 	cmp.w	r0, #500	@ 0x1f4
 800108c:	d9f1      	bls.n	8001072 <apMain+0x2>
     {
       pre_time = millis();
 800108e:	f000 ff5f 	bl	8001f50 <millis>
 8001092:	4b04      	ldr	r3, [pc, #16]	@ (80010a4 <apMain+0x34>)
 8001094:	6018      	str	r0, [r3, #0]
       HAL_GPIO_TogglePin(ON_BOARD_LED_GPIO_Port, ON_BOARD_LED_Pin); // ON BOARD LED toggle 500ms
 8001096:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800109a:	4803      	ldr	r0, [pc, #12]	@ (80010a8 <apMain+0x38>)
 800109c:	f005 fc55 	bl	800694a <HAL_GPIO_TogglePin>
 80010a0:	e7e7      	b.n	8001072 <apMain+0x2>
 80010a2:	bf00      	nop
 80010a4:	2000025c 	.word	0x2000025c
 80010a8:	48000800 	.word	0x48000800

080010ac <cliCtrl>:
{
  // controlUserMain
}

void cliCtrl(cli_args_t *args)
{
 80010ac:	b508      	push	{r3, lr}
  bool ret = false;

  if (args->argc == 1 && args->isStr(0, "info") == true)
 80010ae:	8803      	ldrh	r3, [r0, #0]
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d10e      	bne.n	80010d2 <cliCtrl+0x26>
 80010b4:	6943      	ldr	r3, [r0, #20]
 80010b6:	4909      	ldr	r1, [pc, #36]	@ (80010dc <cliCtrl+0x30>)
 80010b8:	2000      	movs	r0, #0
 80010ba:	4798      	blx	r3
 80010bc:	b148      	cbz	r0, 80010d2 <cliCtrl+0x26>
  {
    cliPrintf("ctrl init : %s\n", is_init ? "OK" : "NG");
 80010be:	4b08      	ldr	r3, [pc, #32]	@ (80010e0 <cliCtrl+0x34>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	b123      	cbz	r3, 80010ce <cliCtrl+0x22>
 80010c4:	4907      	ldr	r1, [pc, #28]	@ (80010e4 <cliCtrl+0x38>)
 80010c6:	4808      	ldr	r0, [pc, #32]	@ (80010e8 <cliCtrl+0x3c>)
 80010c8:	f002 fbf4 	bl	80038b4 <cliPrintf>

    ret = true;
  }

  if (ret != true)
 80010cc:	e004      	b.n	80010d8 <cliCtrl+0x2c>
    cliPrintf("ctrl init : %s\n", is_init ? "OK" : "NG");
 80010ce:	4907      	ldr	r1, [pc, #28]	@ (80010ec <cliCtrl+0x40>)
 80010d0:	e7f9      	b.n	80010c6 <cliCtrl+0x1a>
  {
    cliPrintf("ctrl info\n");
 80010d2:	4807      	ldr	r0, [pc, #28]	@ (80010f0 <cliCtrl+0x44>)
 80010d4:	f002 fbee 	bl	80038b4 <cliPrintf>
  }
}
 80010d8:	bd08      	pop	{r3, pc}
 80010da:	bf00      	nop
 80010dc:	0800eb48 	.word	0x0800eb48
 80010e0:	20000260 	.word	0x20000260
 80010e4:	0800eb40 	.word	0x0800eb40
 80010e8:	0800eb50 	.word	0x0800eb50
 80010ec:	0800eb44 	.word	0x0800eb44
 80010f0:	0800eb60 	.word	0x0800eb60

080010f4 <controlInit>:
{
 80010f4:	b510      	push	{r4, lr}
  is_init = true;
 80010f6:	2401      	movs	r4, #1
 80010f8:	4b03      	ldr	r3, [pc, #12]	@ (8001108 <controlInit+0x14>)
 80010fa:	701c      	strb	r4, [r3, #0]
  cliAdd("ctrl", cliCtrl);
 80010fc:	4903      	ldr	r1, [pc, #12]	@ (800110c <controlInit+0x18>)
 80010fe:	4804      	ldr	r0, [pc, #16]	@ (8001110 <controlInit+0x1c>)
 8001100:	f002 fdfa 	bl	8003cf8 <cliAdd>
}
 8001104:	4620      	mov	r0, r4
 8001106:	bd10      	pop	{r4, pc}
 8001108:	20000260 	.word	0x20000260
 800110c:	080010ad 	.word	0x080010ad
 8001110:	0800eb6c 	.word	0x0800eb6c

08001114 <controlUserFunc>:
}
 8001114:	4770      	bx	lr

08001116 <controlUserMain>:
}
 8001116:	4770      	bx	lr

08001118 <monitorInit>:


static void cliMonitor(cli_args_t *args);

bool monitorInit(void)
{
 8001118:	b510      	push	{r4, lr}
  is_init = true;
 800111a:	2401      	movs	r4, #1
 800111c:	4b05      	ldr	r3, [pc, #20]	@ (8001134 <monitorInit+0x1c>)
 800111e:	701c      	strb	r4, [r3, #0]

  cliAdd("mon", cliMonitor);  
 8001120:	4905      	ldr	r1, [pc, #20]	@ (8001138 <monitorInit+0x20>)
 8001122:	4806      	ldr	r0, [pc, #24]	@ (800113c <monitorInit+0x24>)
 8001124:	f002 fde8 	bl	8003cf8 <cliAdd>
  }
  delay(500);
  lcdClear(black);
  #endif

  lcdSetFont(LCD_FONT_07x10);
 8001128:	2000      	movs	r0, #0
 800112a:	f001 fb33 	bl	8002794 <lcdSetFont>

  return true;
}
 800112e:	4620      	mov	r0, r4
 8001130:	bd10      	pop	{r4, pc}
 8001132:	bf00      	nop
 8001134:	20000261 	.word	0x20000261
 8001138:	08001175 	.word	0x08001175
 800113c:	0800eb74 	.word	0x0800eb74

08001140 <monitorUartUpdate>:
//     lcdRequestDraw();
//   }
// }

void monitorUartUpdate(void)
{
 8001140:	b500      	push	{lr}
 8001142:	b087      	sub	sp, #28
  value_buf_t buf;
  if (qbufferAvailable(&value_queue) > 0)
 8001144:	4809      	ldr	r0, [pc, #36]	@ (800116c <monitorUartUpdate+0x2c>)
 8001146:	f000 ff72 	bl	800202e <qbufferAvailable>
 800114a:	b910      	cbnz	r0, 8001152 <monitorUartUpdate+0x12>
  {
    qbufferRead(&value_queue, (uint8_t *)&buf, 1);
    HAL_UART_Transmit(&huart3, (uint8_t *)&buf, sizeof(value_buf_t), 10);
  }
}
 800114c:	b007      	add	sp, #28
 800114e:	f85d fb04 	ldr.w	pc, [sp], #4
    qbufferRead(&value_queue, (uint8_t *)&buf, 1);
 8001152:	2201      	movs	r2, #1
 8001154:	a901      	add	r1, sp, #4
 8001156:	4805      	ldr	r0, [pc, #20]	@ (800116c <monitorUartUpdate+0x2c>)
 8001158:	f000 ff3c 	bl	8001fd4 <qbufferRead>
    HAL_UART_Transmit(&huart3, (uint8_t *)&buf, sizeof(value_buf_t), 10);
 800115c:	230a      	movs	r3, #10
 800115e:	2212      	movs	r2, #18
 8001160:	a901      	add	r1, sp, #4
 8001162:	4803      	ldr	r0, [pc, #12]	@ (8001170 <monitorUartUpdate+0x30>)
 8001164:	f008 fac6 	bl	80096f4 <HAL_UART_Transmit>
}
 8001168:	e7f0      	b.n	800114c <monitorUartUpdate+0xc>
 800116a:	bf00      	nop
 800116c:	200002a8 	.word	0x200002a8
 8001170:	20006998 	.word	0x20006998

08001174 <cliMonitor>:
{  
  monitorUartUpdate();
}

void cliMonitor(cli_args_t *args)
{
 8001174:	b538      	push	{r3, r4, r5, lr}
 8001176:	4604      	mov	r4, r0
  bool ret = false;

  if (args->argc == 1 && args->isStr(0, "info") == true)
 8001178:	8803      	ldrh	r3, [r0, #0]
 800117a:	2b01      	cmp	r3, #1
 800117c:	d006      	beq.n	800118c <cliMonitor+0x18>
  bool ret = false;
 800117e:	2500      	movs	r5, #0
    cliPrintf("mon init : %s\n", is_init ? "OK" : "NG");

    ret = true;
  }

  if (args->argc == 1 && args->isStr(0, "view"))
 8001180:	8823      	ldrh	r3, [r4, #0]
 8001182:	2b01      	cmp	r3, #1
 8001184:	d013      	beq.n	80011ae <cliMonitor+0x3a>
    cliShowCursor(true);
    
    ret = true;
  }

  if (ret != true)
 8001186:	2d00      	cmp	r5, #0
 8001188:	d06d      	beq.n	8001266 <cliMonitor+0xf2>
  {
    cliPrintf("mon info\n");
    cliPrintf("mon view\n");
  }
}
 800118a:	bd38      	pop	{r3, r4, r5, pc}
  if (args->argc == 1 && args->isStr(0, "info") == true)
 800118c:	6943      	ldr	r3, [r0, #20]
 800118e:	4939      	ldr	r1, [pc, #228]	@ (8001274 <cliMonitor+0x100>)
 8001190:	2000      	movs	r0, #0
 8001192:	4798      	blx	r3
 8001194:	4605      	mov	r5, r0
 8001196:	2800      	cmp	r0, #0
 8001198:	d0f2      	beq.n	8001180 <cliMonitor+0xc>
    cliPrintf("mon init : %s\n", is_init ? "OK" : "NG");
 800119a:	4b37      	ldr	r3, [pc, #220]	@ (8001278 <cliMonitor+0x104>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	b123      	cbz	r3, 80011aa <cliMonitor+0x36>
 80011a0:	4936      	ldr	r1, [pc, #216]	@ (800127c <cliMonitor+0x108>)
 80011a2:	4837      	ldr	r0, [pc, #220]	@ (8001280 <cliMonitor+0x10c>)
 80011a4:	f002 fb86 	bl	80038b4 <cliPrintf>
    ret = true;
 80011a8:	e7ea      	b.n	8001180 <cliMonitor+0xc>
    cliPrintf("mon init : %s\n", is_init ? "OK" : "NG");
 80011aa:	4936      	ldr	r1, [pc, #216]	@ (8001284 <cliMonitor+0x110>)
 80011ac:	e7f9      	b.n	80011a2 <cliMonitor+0x2e>
  if (args->argc == 1 && args->isStr(0, "view"))
 80011ae:	6963      	ldr	r3, [r4, #20]
 80011b0:	4935      	ldr	r1, [pc, #212]	@ (8001288 <cliMonitor+0x114>)
 80011b2:	2000      	movs	r0, #0
 80011b4:	4798      	blx	r3
 80011b6:	2800      	cmp	r0, #0
 80011b8:	d0e5      	beq.n	8001186 <cliMonitor+0x12>
    cliShowCursor(false);
 80011ba:	2000      	movs	r0, #0
 80011bc:	f002 fdf4 	bl	8003da8 <cliShowCursor>
    uint32_t pre_time = 0;
 80011c0:	2400      	movs	r4, #0
    while (cliKeepLoop())
 80011c2:	f002 fd8d 	bl	8003ce0 <cliKeepLoop>
 80011c6:	2800      	cmp	r0, #0
 80011c8:	d046      	beq.n	8001258 <cliMonitor+0xe4>
      monitorUartUpdate();
 80011ca:	f7ff ffb9 	bl	8001140 <monitorUartUpdate>
      if (millis() - pre_time >= cli_update_period)
 80011ce:	f000 febf 	bl	8001f50 <millis>
 80011d2:	1b00      	subs	r0, r0, r4
 80011d4:	f5b0 7ffa 	cmp.w	r0, #500	@ 0x1f4
 80011d8:	d3f3      	bcc.n	80011c2 <cliMonitor+0x4e>
        pre_time = millis();
 80011da:	f000 feb9 	bl	8001f50 <millis>
 80011de:	4604      	mov	r4, r0
        cliPrintf("Freq  : %dHz\n", freq);
 80011e0:	4b2a      	ldr	r3, [pc, #168]	@ (800128c <cliMonitor+0x118>)
 80011e2:	8819      	ldrh	r1, [r3, #0]
 80011e4:	482a      	ldr	r0, [pc, #168]	@ (8001290 <cliMonitor+0x11c>)
 80011e6:	f002 fb65 	bl	80038b4 <cliPrintf>
        cliPrintf("Volt  : %2.1fVpp\n", vpp_out);
 80011ea:	4b2a      	ldr	r3, [pc, #168]	@ (8001294 <cliMonitor+0x120>)
 80011ec:	6818      	ldr	r0, [r3, #0]
 80011ee:	f7ff f9e3 	bl	80005b8 <__aeabi_f2d>
 80011f2:	4602      	mov	r2, r0
 80011f4:	460b      	mov	r3, r1
 80011f6:	4828      	ldr	r0, [pc, #160]	@ (8001298 <cliMonitor+0x124>)
 80011f8:	f002 fb5c 	bl	80038b4 <cliPrintf>
        cliPrintf("Vrms1 : %1.2fV\n", vrms[ADC_CH_VRMS_1]);
 80011fc:	4d27      	ldr	r5, [pc, #156]	@ (800129c <cliMonitor+0x128>)
 80011fe:	6828      	ldr	r0, [r5, #0]
 8001200:	f7ff f9da 	bl	80005b8 <__aeabi_f2d>
 8001204:	4602      	mov	r2, r0
 8001206:	460b      	mov	r3, r1
 8001208:	4825      	ldr	r0, [pc, #148]	@ (80012a0 <cliMonitor+0x12c>)
 800120a:	f002 fb53 	bl	80038b4 <cliPrintf>
        cliPrintf("Vrms2 : %1.2fV\n", vrms[ADC_CH_VRMS_2]);
 800120e:	6868      	ldr	r0, [r5, #4]
 8001210:	f7ff f9d2 	bl	80005b8 <__aeabi_f2d>
 8001214:	4602      	mov	r2, r0
 8001216:	460b      	mov	r3, r1
 8001218:	4822      	ldr	r0, [pc, #136]	@ (80012a4 <cliMonitor+0x130>)
 800121a:	f002 fb4b 	bl	80038b4 <cliPrintf>
        cliPrintf("Vrms3 : %1.2fV\n", vrms[ADC_CH_VRMS_3]);
 800121e:	68a8      	ldr	r0, [r5, #8]
 8001220:	f7ff f9ca 	bl	80005b8 <__aeabi_f2d>
 8001224:	4602      	mov	r2, r0
 8001226:	460b      	mov	r3, r1
 8001228:	481f      	ldr	r0, [pc, #124]	@ (80012a8 <cliMonitor+0x134>)
 800122a:	f002 fb43 	bl	80038b4 <cliPrintf>
        cliPrintf("Vrms4 : %1.2fV\n", vrms[ADC_CH_VRMS_4]);        
 800122e:	68e8      	ldr	r0, [r5, #12]
 8001230:	f7ff f9c2 	bl	80005b8 <__aeabi_f2d>
 8001234:	4602      	mov	r2, r0
 8001236:	460b      	mov	r3, r1
 8001238:	481c      	ldr	r0, [pc, #112]	@ (80012ac <cliMonitor+0x138>)
 800123a:	f002 fb3b 	bl	80038b4 <cliPrintf>
        cliPrintf("Irms1 : %1.2fA\n", irms);        
 800123e:	4b1c      	ldr	r3, [pc, #112]	@ (80012b0 <cliMonitor+0x13c>)
 8001240:	6818      	ldr	r0, [r3, #0]
 8001242:	f7ff f9b9 	bl	80005b8 <__aeabi_f2d>
 8001246:	4602      	mov	r2, r0
 8001248:	460b      	mov	r3, r1
 800124a:	481a      	ldr	r0, [pc, #104]	@ (80012b4 <cliMonitor+0x140>)
 800124c:	f002 fb32 	bl	80038b4 <cliPrintf>
        cliMoveUp(7);        
 8001250:	2007      	movs	r0, #7
 8001252:	f002 fdb7 	bl	8003dc4 <cliMoveUp>
 8001256:	e7b4      	b.n	80011c2 <cliMonitor+0x4e>
    cliMoveDown(7);
 8001258:	2007      	movs	r0, #7
 800125a:	f002 fdbb 	bl	8003dd4 <cliMoveDown>
    cliShowCursor(true);
 800125e:	2001      	movs	r0, #1
 8001260:	f002 fda2 	bl	8003da8 <cliShowCursor>
  if (ret != true)
 8001264:	e791      	b.n	800118a <cliMonitor+0x16>
    cliPrintf("mon info\n");
 8001266:	4814      	ldr	r0, [pc, #80]	@ (80012b8 <cliMonitor+0x144>)
 8001268:	f002 fb24 	bl	80038b4 <cliPrintf>
    cliPrintf("mon view\n");
 800126c:	4813      	ldr	r0, [pc, #76]	@ (80012bc <cliMonitor+0x148>)
 800126e:	f002 fb21 	bl	80038b4 <cliPrintf>
}
 8001272:	e78a      	b.n	800118a <cliMonitor+0x16>
 8001274:	0800eb48 	.word	0x0800eb48
 8001278:	20000261 	.word	0x20000261
 800127c:	0800eb40 	.word	0x0800eb40
 8001280:	0800eb78 	.word	0x0800eb78
 8001284:	0800eb44 	.word	0x0800eb44
 8001288:	0800eb88 	.word	0x0800eb88
 800128c:	20000008 	.word	0x20000008
 8001290:	0800eb90 	.word	0x0800eb90
 8001294:	200010fc 	.word	0x200010fc
 8001298:	0800eba0 	.word	0x0800eba0
 800129c:	200010d4 	.word	0x200010d4
 80012a0:	0800ebb4 	.word	0x0800ebb4
 80012a4:	0800ebc4 	.word	0x0800ebc4
 80012a8:	0800ebd4 	.word	0x0800ebd4
 80012ac:	0800ebe4 	.word	0x0800ebe4
 80012b0:	200010d0 	.word	0x200010d0
 80012b4:	0800ebf4 	.word	0x0800ebf4
 80012b8:	0800ec04 	.word	0x0800ec04
 80012bc:	0800ec10 	.word	0x0800ec10

080012c0 <monitorMain>:
{  
 80012c0:	b508      	push	{r3, lr}
  monitorUartUpdate();
 80012c2:	f7ff ff3d 	bl	8001140 <monitorUartUpdate>
}
 80012c6:	bd08      	pop	{r3, pc}

080012c8 <vrms1Upadate>:
  static float    sum = 0.0f;
  static float    avg = 0.0f;
  static uint32_t cnt = 0;
  uint32_t sample_cnt = 0;

  sample_cnt = sample_max * multi_sampling_num;
 80012c8:	4b33      	ldr	r3, [pc, #204]	@ (8001398 <vrms1Upadate+0xd0>)
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  adc_range  = adc_max - adc_offset[ch];
 80012d0:	4b32      	ldr	r3, [pc, #200]	@ (800139c <vrms1Upadate+0xd4>)
 80012d2:	ed93 6a00 	vldr	s12, [r3]
 80012d6:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 80013a0 <vrms1Upadate+0xd8>
 80012da:	ee37 7a46 	vsub.f32	s14, s14, s12
  adc_min    = adc_offset[ch] - adc_range;
 80012de:	ee76 7a47 	vsub.f32	s15, s12, s14

  value = adc_value[ch];
 80012e2:	4b30      	ldr	r3, [pc, #192]	@ (80013a4 <vrms1Upadate+0xdc>)
 80012e4:	edd3 6a00 	vldr	s13, [r3]
 80012e8:	eef8 6a66 	vcvt.f32.u32	s13, s13
  value = constrain(value, adc_min, adc_max);
 80012ec:	eef4 7ae6 	vcmpe.f32	s15, s13
 80012f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012f4:	dc08      	bgt.n	8001308 <vrms1Upadate+0x40>
 80012f6:	eddf 7a2a 	vldr	s15, [pc, #168]	@ 80013a0 <vrms1Upadate+0xd8>
 80012fa:	eef4 6ae7 	vcmpe.f32	s13, s15
 80012fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001302:	dc01      	bgt.n	8001308 <vrms1Upadate+0x40>
 8001304:	eef0 7a66 	vmov.f32	s15, s13
  value = abs(value - adc_offset[ch]);
 8001308:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800130c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001310:	ee17 3a90 	vmov	r3, s15
 8001314:	2b00      	cmp	r3, #0
 8001316:	bfb8      	it	lt
 8001318:	425b      	neglt	r3, r3
 800131a:	ee07 3a90 	vmov	s15, r3
 800131e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  value /= adc_range;
 8001322:	eec7 6a87 	vdiv.f32	s13, s15, s14
  sum += value;
 8001326:	4b20      	ldr	r3, [pc, #128]	@ (80013a8 <vrms1Upadate+0xe0>)
 8001328:	edd3 7a00 	vldr	s15, [r3]
 800132c:	ee36 7aa7 	vadd.f32	s14, s13, s15
 8001330:	ed83 7a00 	vstr	s14, [r3]

  cnt++;
 8001334:	491d      	ldr	r1, [pc, #116]	@ (80013ac <vrms1Upadate+0xe4>)
 8001336:	680b      	ldr	r3, [r1, #0]
 8001338:	3301      	adds	r3, #1
 800133a:	600b      	str	r3, [r1, #0]
  if(cnt >= sample_cnt)
 800133c:	4293      	cmp	r3, r2
 800133e:	d329      	bcc.n	8001394 <vrms1Upadate+0xcc>
  {
    avg = sum / cnt;
 8001340:	ee07 3a90 	vmov	s15, r3
 8001344:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001348:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800134c:	4b18      	ldr	r3, [pc, #96]	@ (80013b0 <vrms1Upadate+0xe8>)
 800134e:	edc3 6a00 	vstr	s13, [r3]
    vrms[ch] = avg * vpeak_max;
 8001352:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8001356:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800135a:	4b16      	ldr	r3, [pc, #88]	@ (80013b4 <vrms1Upadate+0xec>)
 800135c:	edc3 7a00 	vstr	s15, [r3]
    vrms[ch] = constrain(vrms[ch], 0, VRMS_MAX);
 8001360:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001368:	d409      	bmi.n	800137e <vrms1Upadate+0xb6>
 800136a:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 80013b8 <vrms1Upadate+0xf0>
 800136e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001376:	dd04      	ble.n	8001382 <vrms1Upadate+0xba>
 8001378:	eef0 7a47 	vmov.f32	s15, s14
 800137c:	e001      	b.n	8001382 <vrms1Upadate+0xba>
 800137e:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 80013bc <vrms1Upadate+0xf4>
 8001382:	4b0c      	ldr	r3, [pc, #48]	@ (80013b4 <vrms1Upadate+0xec>)
 8001384:	edc3 7a00 	vstr	s15, [r3]

    sum = 0.0f;
 8001388:	4b07      	ldr	r3, [pc, #28]	@ (80013a8 <vrms1Upadate+0xe0>)
 800138a:	2200      	movs	r2, #0
 800138c:	601a      	str	r2, [r3, #0]
    cnt = 0;
 800138e:	4b07      	ldr	r3, [pc, #28]	@ (80013ac <vrms1Upadate+0xe4>)
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
  }
}
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	20000004 	.word	0x20000004
 800139c:	2000000c 	.word	0x2000000c
 80013a0:	457fa000 	.word	0x457fa000
 80013a4:	200010e8 	.word	0x200010e8
 80013a8:	200002a4 	.word	0x200002a4
 80013ac:	200002a0 	.word	0x200002a0
 80013b0:	2000029c 	.word	0x2000029c
 80013b4:	200010d4 	.word	0x200010d4
 80013b8:	411fd70a 	.word	0x411fd70a
 80013bc:	00000000 	.word	0x00000000

080013c0 <vrms2Upadate>:
  static float    sum = 0.0f;
  static float    avg = 0.0f;
  static uint32_t cnt = 0;
  uint32_t sample_cnt = 0;

  sample_cnt = sample_max * multi_sampling_num;
 80013c0:	4b33      	ldr	r3, [pc, #204]	@ (8001490 <vrms2Upadate+0xd0>)
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  adc_range  = adc_max - adc_offset[ch];
 80013c8:	4b32      	ldr	r3, [pc, #200]	@ (8001494 <vrms2Upadate+0xd4>)
 80013ca:	ed93 6a01 	vldr	s12, [r3, #4]
 80013ce:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8001498 <vrms2Upadate+0xd8>
 80013d2:	ee37 7a46 	vsub.f32	s14, s14, s12
  adc_min    = adc_offset[ch] - adc_range;
 80013d6:	ee76 7a47 	vsub.f32	s15, s12, s14

  value = adc_value[ch];
 80013da:	4b30      	ldr	r3, [pc, #192]	@ (800149c <vrms2Upadate+0xdc>)
 80013dc:	edd3 6a01 	vldr	s13, [r3, #4]
 80013e0:	eef8 6a66 	vcvt.f32.u32	s13, s13
  value = constrain(value, adc_min, adc_max);
 80013e4:	eef4 7ae6 	vcmpe.f32	s15, s13
 80013e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ec:	dc08      	bgt.n	8001400 <vrms2Upadate+0x40>
 80013ee:	eddf 7a2a 	vldr	s15, [pc, #168]	@ 8001498 <vrms2Upadate+0xd8>
 80013f2:	eef4 6ae7 	vcmpe.f32	s13, s15
 80013f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013fa:	dc01      	bgt.n	8001400 <vrms2Upadate+0x40>
 80013fc:	eef0 7a66 	vmov.f32	s15, s13
  value = abs(value - adc_offset[ch]);
 8001400:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8001404:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001408:	ee17 3a90 	vmov	r3, s15
 800140c:	2b00      	cmp	r3, #0
 800140e:	bfb8      	it	lt
 8001410:	425b      	neglt	r3, r3
 8001412:	ee07 3a90 	vmov	s15, r3
 8001416:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  value /= adc_range;
 800141a:	eec7 6a87 	vdiv.f32	s13, s15, s14
  sum += value;
 800141e:	4b20      	ldr	r3, [pc, #128]	@ (80014a0 <vrms2Upadate+0xe0>)
 8001420:	edd3 7a00 	vldr	s15, [r3]
 8001424:	ee36 7aa7 	vadd.f32	s14, s13, s15
 8001428:	ed83 7a00 	vstr	s14, [r3]

  cnt++;
 800142c:	491d      	ldr	r1, [pc, #116]	@ (80014a4 <vrms2Upadate+0xe4>)
 800142e:	680b      	ldr	r3, [r1, #0]
 8001430:	3301      	adds	r3, #1
 8001432:	600b      	str	r3, [r1, #0]
  if(cnt >= sample_cnt)
 8001434:	4293      	cmp	r3, r2
 8001436:	d329      	bcc.n	800148c <vrms2Upadate+0xcc>
  {
    avg = sum / cnt;
 8001438:	ee07 3a90 	vmov	s15, r3
 800143c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001440:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001444:	4b18      	ldr	r3, [pc, #96]	@ (80014a8 <vrms2Upadate+0xe8>)
 8001446:	edc3 6a00 	vstr	s13, [r3]
    vrms[ch] = avg * vpeak_max;
 800144a:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 800144e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001452:	4b16      	ldr	r3, [pc, #88]	@ (80014ac <vrms2Upadate+0xec>)
 8001454:	edc3 7a01 	vstr	s15, [r3, #4]
    vrms[ch] = constrain(vrms[ch], 0, VRMS_MAX);
 8001458:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800145c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001460:	d409      	bmi.n	8001476 <vrms2Upadate+0xb6>
 8001462:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 80014b0 <vrms2Upadate+0xf0>
 8001466:	eef4 7ac7 	vcmpe.f32	s15, s14
 800146a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800146e:	dd04      	ble.n	800147a <vrms2Upadate+0xba>
 8001470:	eef0 7a47 	vmov.f32	s15, s14
 8001474:	e001      	b.n	800147a <vrms2Upadate+0xba>
 8001476:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 80014b4 <vrms2Upadate+0xf4>
 800147a:	4b0c      	ldr	r3, [pc, #48]	@ (80014ac <vrms2Upadate+0xec>)
 800147c:	edc3 7a01 	vstr	s15, [r3, #4]

    sum = 0.0f;
 8001480:	4b07      	ldr	r3, [pc, #28]	@ (80014a0 <vrms2Upadate+0xe0>)
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
    cnt = 0;
 8001486:	4b07      	ldr	r3, [pc, #28]	@ (80014a4 <vrms2Upadate+0xe4>)
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
  }
}
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	20000004 	.word	0x20000004
 8001494:	2000000c 	.word	0x2000000c
 8001498:	457fa000 	.word	0x457fa000
 800149c:	200010e8 	.word	0x200010e8
 80014a0:	20000298 	.word	0x20000298
 80014a4:	20000294 	.word	0x20000294
 80014a8:	20000290 	.word	0x20000290
 80014ac:	200010d4 	.word	0x200010d4
 80014b0:	411fd70a 	.word	0x411fd70a
 80014b4:	00000000 	.word	0x00000000

080014b8 <vrms3Upadate>:
  static float    sum = 0.0f;
  static float    avg = 0.0f;
  static uint32_t cnt = 0;
  uint32_t sample_cnt = 0;

  sample_cnt = sample_max * multi_sampling_num;
 80014b8:	4b33      	ldr	r3, [pc, #204]	@ (8001588 <vrms3Upadate+0xd0>)
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  adc_range  = adc_max - adc_offset[ch];
 80014c0:	4b32      	ldr	r3, [pc, #200]	@ (800158c <vrms3Upadate+0xd4>)
 80014c2:	ed93 6a02 	vldr	s12, [r3, #8]
 80014c6:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8001590 <vrms3Upadate+0xd8>
 80014ca:	ee37 7a46 	vsub.f32	s14, s14, s12
  adc_min    = adc_offset[ch] - adc_range;
 80014ce:	ee76 7a47 	vsub.f32	s15, s12, s14

  value = adc_value[ch];
 80014d2:	4b30      	ldr	r3, [pc, #192]	@ (8001594 <vrms3Upadate+0xdc>)
 80014d4:	edd3 6a02 	vldr	s13, [r3, #8]
 80014d8:	eef8 6a66 	vcvt.f32.u32	s13, s13
  value = constrain(value, adc_min, adc_max);
 80014dc:	eef4 7ae6 	vcmpe.f32	s15, s13
 80014e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014e4:	dc08      	bgt.n	80014f8 <vrms3Upadate+0x40>
 80014e6:	eddf 7a2a 	vldr	s15, [pc, #168]	@ 8001590 <vrms3Upadate+0xd8>
 80014ea:	eef4 6ae7 	vcmpe.f32	s13, s15
 80014ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014f2:	dc01      	bgt.n	80014f8 <vrms3Upadate+0x40>
 80014f4:	eef0 7a66 	vmov.f32	s15, s13
  value = abs(value - adc_offset[ch]);
 80014f8:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80014fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001500:	ee17 3a90 	vmov	r3, s15
 8001504:	2b00      	cmp	r3, #0
 8001506:	bfb8      	it	lt
 8001508:	425b      	neglt	r3, r3
 800150a:	ee07 3a90 	vmov	s15, r3
 800150e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  value /= adc_range;
 8001512:	eec7 6a87 	vdiv.f32	s13, s15, s14
  sum += value;
 8001516:	4b20      	ldr	r3, [pc, #128]	@ (8001598 <vrms3Upadate+0xe0>)
 8001518:	edd3 7a00 	vldr	s15, [r3]
 800151c:	ee36 7aa7 	vadd.f32	s14, s13, s15
 8001520:	ed83 7a00 	vstr	s14, [r3]

  cnt++;
 8001524:	491d      	ldr	r1, [pc, #116]	@ (800159c <vrms3Upadate+0xe4>)
 8001526:	680b      	ldr	r3, [r1, #0]
 8001528:	3301      	adds	r3, #1
 800152a:	600b      	str	r3, [r1, #0]
  if(cnt >= sample_cnt)
 800152c:	4293      	cmp	r3, r2
 800152e:	d329      	bcc.n	8001584 <vrms3Upadate+0xcc>
  {
    avg = sum / cnt;
 8001530:	ee07 3a90 	vmov	s15, r3
 8001534:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001538:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800153c:	4b18      	ldr	r3, [pc, #96]	@ (80015a0 <vrms3Upadate+0xe8>)
 800153e:	edc3 6a00 	vstr	s13, [r3]
    vrms[ch] = avg * vpeak_max;
 8001542:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8001546:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800154a:	4b16      	ldr	r3, [pc, #88]	@ (80015a4 <vrms3Upadate+0xec>)
 800154c:	edc3 7a02 	vstr	s15, [r3, #8]
    vrms[ch] = constrain(vrms[ch], 0, VRMS_MAX);
 8001550:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001558:	d409      	bmi.n	800156e <vrms3Upadate+0xb6>
 800155a:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 80015a8 <vrms3Upadate+0xf0>
 800155e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001566:	dd04      	ble.n	8001572 <vrms3Upadate+0xba>
 8001568:	eef0 7a47 	vmov.f32	s15, s14
 800156c:	e001      	b.n	8001572 <vrms3Upadate+0xba>
 800156e:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 80015ac <vrms3Upadate+0xf4>
 8001572:	4b0c      	ldr	r3, [pc, #48]	@ (80015a4 <vrms3Upadate+0xec>)
 8001574:	edc3 7a02 	vstr	s15, [r3, #8]

    sum = 0.0f;
 8001578:	4b07      	ldr	r3, [pc, #28]	@ (8001598 <vrms3Upadate+0xe0>)
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
    cnt = 0;
 800157e:	4b07      	ldr	r3, [pc, #28]	@ (800159c <vrms3Upadate+0xe4>)
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
  }
}
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	20000004 	.word	0x20000004
 800158c:	2000000c 	.word	0x2000000c
 8001590:	457fa000 	.word	0x457fa000
 8001594:	200010e8 	.word	0x200010e8
 8001598:	2000028c 	.word	0x2000028c
 800159c:	20000288 	.word	0x20000288
 80015a0:	20000284 	.word	0x20000284
 80015a4:	200010d4 	.word	0x200010d4
 80015a8:	411fd70a 	.word	0x411fd70a
 80015ac:	00000000 	.word	0x00000000

080015b0 <vrms4Upadate>:
  static float    sum = 0.0f;
  static float    avg = 0.0f;
  static uint32_t cnt = 0;
  uint32_t sample_cnt = 0;

  sample_cnt = sample_max * multi_sampling_num;
 80015b0:	4b33      	ldr	r3, [pc, #204]	@ (8001680 <vrms4Upadate+0xd0>)
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  adc_range  = adc_max - adc_offset[ch];
 80015b8:	4b32      	ldr	r3, [pc, #200]	@ (8001684 <vrms4Upadate+0xd4>)
 80015ba:	ed93 6a03 	vldr	s12, [r3, #12]
 80015be:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8001688 <vrms4Upadate+0xd8>
 80015c2:	ee37 7a46 	vsub.f32	s14, s14, s12
  adc_min    = adc_offset[ch] - adc_range;
 80015c6:	ee76 7a47 	vsub.f32	s15, s12, s14

  value = adc_value[ch];
 80015ca:	4b30      	ldr	r3, [pc, #192]	@ (800168c <vrms4Upadate+0xdc>)
 80015cc:	edd3 6a03 	vldr	s13, [r3, #12]
 80015d0:	eef8 6a66 	vcvt.f32.u32	s13, s13
  value = constrain(value, adc_min, adc_max);
 80015d4:	eef4 7ae6 	vcmpe.f32	s15, s13
 80015d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015dc:	dc08      	bgt.n	80015f0 <vrms4Upadate+0x40>
 80015de:	eddf 7a2a 	vldr	s15, [pc, #168]	@ 8001688 <vrms4Upadate+0xd8>
 80015e2:	eef4 6ae7 	vcmpe.f32	s13, s15
 80015e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ea:	dc01      	bgt.n	80015f0 <vrms4Upadate+0x40>
 80015ec:	eef0 7a66 	vmov.f32	s15, s13
  value = abs(value - adc_offset[ch]);
 80015f0:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80015f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015f8:	ee17 3a90 	vmov	r3, s15
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	bfb8      	it	lt
 8001600:	425b      	neglt	r3, r3
 8001602:	ee07 3a90 	vmov	s15, r3
 8001606:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  value /= adc_range;
 800160a:	eec7 6a87 	vdiv.f32	s13, s15, s14
  sum += value;
 800160e:	4b20      	ldr	r3, [pc, #128]	@ (8001690 <vrms4Upadate+0xe0>)
 8001610:	edd3 7a00 	vldr	s15, [r3]
 8001614:	ee36 7aa7 	vadd.f32	s14, s13, s15
 8001618:	ed83 7a00 	vstr	s14, [r3]

  cnt++;
 800161c:	491d      	ldr	r1, [pc, #116]	@ (8001694 <vrms4Upadate+0xe4>)
 800161e:	680b      	ldr	r3, [r1, #0]
 8001620:	3301      	adds	r3, #1
 8001622:	600b      	str	r3, [r1, #0]
  if(cnt >= sample_cnt)
 8001624:	4293      	cmp	r3, r2
 8001626:	d329      	bcc.n	800167c <vrms4Upadate+0xcc>
  {
    avg = sum / cnt;
 8001628:	ee07 3a90 	vmov	s15, r3
 800162c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001630:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001634:	4b18      	ldr	r3, [pc, #96]	@ (8001698 <vrms4Upadate+0xe8>)
 8001636:	edc3 6a00 	vstr	s13, [r3]
    vrms[ch] = avg * vpeak_max;
 800163a:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 800163e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001642:	4b16      	ldr	r3, [pc, #88]	@ (800169c <vrms4Upadate+0xec>)
 8001644:	edc3 7a03 	vstr	s15, [r3, #12]
    vrms[ch] = constrain(vrms[ch], 0, VRMS_MAX);
 8001648:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800164c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001650:	d409      	bmi.n	8001666 <vrms4Upadate+0xb6>
 8001652:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 80016a0 <vrms4Upadate+0xf0>
 8001656:	eef4 7ac7 	vcmpe.f32	s15, s14
 800165a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800165e:	dd04      	ble.n	800166a <vrms4Upadate+0xba>
 8001660:	eef0 7a47 	vmov.f32	s15, s14
 8001664:	e001      	b.n	800166a <vrms4Upadate+0xba>
 8001666:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 80016a4 <vrms4Upadate+0xf4>
 800166a:	4b0c      	ldr	r3, [pc, #48]	@ (800169c <vrms4Upadate+0xec>)
 800166c:	edc3 7a03 	vstr	s15, [r3, #12]

    sum = 0.0f;
 8001670:	4b07      	ldr	r3, [pc, #28]	@ (8001690 <vrms4Upadate+0xe0>)
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]
    cnt = 0;
 8001676:	4b07      	ldr	r3, [pc, #28]	@ (8001694 <vrms4Upadate+0xe4>)
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
  }
}
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	20000004 	.word	0x20000004
 8001684:	2000000c 	.word	0x2000000c
 8001688:	457fa000 	.word	0x457fa000
 800168c:	200010e8 	.word	0x200010e8
 8001690:	20000280 	.word	0x20000280
 8001694:	2000027c 	.word	0x2000027c
 8001698:	20000278 	.word	0x20000278
 800169c:	200010d4 	.word	0x200010d4
 80016a0:	411fd70a 	.word	0x411fd70a
 80016a4:	00000000 	.word	0x00000000

080016a8 <irms1Upadate>:
  static float    sum = 0.0f;
  static float    avg = 0.0f;
  static uint32_t cnt = 0;
  uint32_t sample_cnt = 0;

  sample_cnt = sample_max * multi_sampling_num;
 80016a8:	4b33      	ldr	r3, [pc, #204]	@ (8001778 <irms1Upadate+0xd0>)
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  adc_range  = adc_max - adc_offset[ch];
 80016b0:	4b32      	ldr	r3, [pc, #200]	@ (800177c <irms1Upadate+0xd4>)
 80016b2:	ed93 6a04 	vldr	s12, [r3, #16]
 80016b6:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8001780 <irms1Upadate+0xd8>
 80016ba:	ee37 7a46 	vsub.f32	s14, s14, s12
  adc_min    = adc_offset[ch] - adc_range;
 80016be:	ee76 7a47 	vsub.f32	s15, s12, s14

  value = adc_value[ch];
 80016c2:	4b30      	ldr	r3, [pc, #192]	@ (8001784 <irms1Upadate+0xdc>)
 80016c4:	edd3 6a04 	vldr	s13, [r3, #16]
 80016c8:	eef8 6a66 	vcvt.f32.u32	s13, s13
  value = constrain(value, adc_min, adc_max);
 80016cc:	eef4 7ae6 	vcmpe.f32	s15, s13
 80016d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016d4:	dc08      	bgt.n	80016e8 <irms1Upadate+0x40>
 80016d6:	eddf 7a2a 	vldr	s15, [pc, #168]	@ 8001780 <irms1Upadate+0xd8>
 80016da:	eef4 6ae7 	vcmpe.f32	s13, s15
 80016de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016e2:	dc01      	bgt.n	80016e8 <irms1Upadate+0x40>
 80016e4:	eef0 7a66 	vmov.f32	s15, s13
  value = abs(value - adc_offset[ch]);
 80016e8:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80016ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016f0:	ee17 3a90 	vmov	r3, s15
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	bfb8      	it	lt
 80016f8:	425b      	neglt	r3, r3
 80016fa:	ee07 3a90 	vmov	s15, r3
 80016fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  value /= adc_range;
 8001702:	eec7 6a87 	vdiv.f32	s13, s15, s14
  sum += value;
 8001706:	4b20      	ldr	r3, [pc, #128]	@ (8001788 <irms1Upadate+0xe0>)
 8001708:	edd3 7a00 	vldr	s15, [r3]
 800170c:	ee36 7aa7 	vadd.f32	s14, s13, s15
 8001710:	ed83 7a00 	vstr	s14, [r3]

  cnt++;
 8001714:	491d      	ldr	r1, [pc, #116]	@ (800178c <irms1Upadate+0xe4>)
 8001716:	680b      	ldr	r3, [r1, #0]
 8001718:	3301      	adds	r3, #1
 800171a:	600b      	str	r3, [r1, #0]
  if(cnt >= sample_cnt)
 800171c:	4293      	cmp	r3, r2
 800171e:	d32a      	bcc.n	8001776 <irms1Upadate+0xce>
  {
    avg = sum / cnt;
 8001720:	ee07 3a90 	vmov	s15, r3
 8001724:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001728:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800172c:	4b18      	ldr	r3, [pc, #96]	@ (8001790 <irms1Upadate+0xe8>)
 800172e:	edc3 6a00 	vstr	s13, [r3]
    irms = avg * ipeak_max;
 8001732:	4b18      	ldr	r3, [pc, #96]	@ (8001794 <irms1Upadate+0xec>)
 8001734:	edd3 7a00 	vldr	s15, [r3]
 8001738:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800173c:	4b16      	ldr	r3, [pc, #88]	@ (8001798 <irms1Upadate+0xf0>)
 800173e:	edc3 7a00 	vstr	s15, [r3]
    irms = constrain(irms, 0, IRMS_MAX);
 8001742:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800174a:	d409      	bmi.n	8001760 <irms1Upadate+0xb8>
 800174c:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001750:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001758:	dd04      	ble.n	8001764 <irms1Upadate+0xbc>
 800175a:	eef0 7a47 	vmov.f32	s15, s14
 800175e:	e001      	b.n	8001764 <irms1Upadate+0xbc>
 8001760:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800179c <irms1Upadate+0xf4>
 8001764:	4b0c      	ldr	r3, [pc, #48]	@ (8001798 <irms1Upadate+0xf0>)
 8001766:	edc3 7a00 	vstr	s15, [r3]

    sum = 0.0f;
 800176a:	4b07      	ldr	r3, [pc, #28]	@ (8001788 <irms1Upadate+0xe0>)
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
    cnt = 0;
 8001770:	4b06      	ldr	r3, [pc, #24]	@ (800178c <irms1Upadate+0xe4>)
 8001772:	2200      	movs	r2, #0
 8001774:	601a      	str	r2, [r3, #0]
  }
}
 8001776:	4770      	bx	lr
 8001778:	20000004 	.word	0x20000004
 800177c:	2000000c 	.word	0x2000000c
 8001780:	456d5000 	.word	0x456d5000
 8001784:	200010e8 	.word	0x200010e8
 8001788:	20000274 	.word	0x20000274
 800178c:	20000270 	.word	0x20000270
 8001790:	2000026c 	.word	0x2000026c
 8001794:	20000020 	.word	0x20000020
 8001798:	200010d0 	.word	0x200010d0
 800179c:	00000000 	.word	0x00000000

080017a0 <sequenceRmsUpdate>:
{
 80017a0:	b508      	push	{r3, lr}
  vrms1Upadate();
 80017a2:	f7ff fd91 	bl	80012c8 <vrms1Upadate>
  vrms2Upadate();
 80017a6:	f7ff fe0b 	bl	80013c0 <vrms2Upadate>
  vrms3Upadate();
 80017aa:	f7ff fe85 	bl	80014b8 <vrms3Upadate>
  vrms4Upadate();
 80017ae:	f7ff feff 	bl	80015b0 <vrms4Upadate>
  irms1Upadate();
 80017b2:	f7ff ff79 	bl	80016a8 <irms1Upadate>
}
 80017b6:	bd08      	pop	{r3, pc}

080017b8 <cliSequence>:
    }
  }
}

void cliSequence(cli_args_t *args)
{
 80017b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017bc:	b097      	sub	sp, #92	@ 0x5c
 80017be:	4604      	mov	r4, r0
  bool ret = false;

  if (args->argc == 1 && args->isStr(0, "info") == true)
 80017c0:	8803      	ldrh	r3, [r0, #0]
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d013      	beq.n	80017ee <cliSequence+0x36>
  bool ret = false;
 80017c6:	2500      	movs	r5, #0
    cliPrintf("ctrl init : %s\n", is_init ? "OK" : "NG");
    
    ret = true;
  }

  if (args->argc == 3 && args->isStr(0, "wave") == true)
 80017c8:	8823      	ldrh	r3, [r4, #0]
 80017ca:	2b03      	cmp	r3, #3
 80017cc:	d020      	beq.n	8001810 <cliSequence+0x58>
    cliPrintf("wave update.\nfreq: %3d -> %3d hz\nvpp : %2.1f -> %2.1f vpp\n", prev_freq, freq, prev_vpp, vpp_out);

    ret = true;
  }

  if (args->argc == 1 && args->isStr(0, "raw") == true)
 80017ce:	8823      	ldrh	r3, [r4, #0]
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d060      	beq.n	8001896 <cliSequence+0xde>
      }
    }
    ret = true;
  }

  if (args->argc == 1 && args->isStr(0, "cali") == true) // Calibration
 80017d4:	8823      	ldrh	r3, [r4, #0]
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d07e      	beq.n	80018d8 <cliSequence+0x120>

    ret = true;
  }

  // serial-plot 로 출력할 uart 데이터를 큐에 업로드 하는 주기 변경
  if (args->argc == 2 && args->isStr(0, "time") == true)
 80017da:	8823      	ldrh	r3, [r4, #0]
 80017dc:	2b02      	cmp	r3, #2
 80017de:	f000 8199 	beq.w	8001b14 <cliSequence+0x35c>
    }

    ret = true;
  }

  if (ret != true)
 80017e2:	2d00      	cmp	r5, #0
 80017e4:	f000 81ae 	beq.w	8001b44 <cliSequence+0x38c>
    cliPrintf("seq cali\n");
    cliPrintf("seq raw\n");
    cliPrintf("seq time [0-255]\n");    
    cliPrintf("seq wave freq[1-200] vpp[1.0-20.0]\n");
  }
}
 80017e8:	b017      	add	sp, #92	@ 0x5c
 80017ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (args->argc == 1 && args->isStr(0, "info") == true)
 80017ee:	6943      	ldr	r3, [r0, #20]
 80017f0:	49ae      	ldr	r1, [pc, #696]	@ (8001aac <cliSequence+0x2f4>)
 80017f2:	2000      	movs	r0, #0
 80017f4:	4798      	blx	r3
 80017f6:	4605      	mov	r5, r0
 80017f8:	2800      	cmp	r0, #0
 80017fa:	d0e5      	beq.n	80017c8 <cliSequence+0x10>
    cliPrintf("ctrl init : %s\n", is_init ? "OK" : "NG");
 80017fc:	4bac      	ldr	r3, [pc, #688]	@ (8001ab0 <cliSequence+0x2f8>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	b123      	cbz	r3, 800180c <cliSequence+0x54>
 8001802:	49ac      	ldr	r1, [pc, #688]	@ (8001ab4 <cliSequence+0x2fc>)
 8001804:	48ac      	ldr	r0, [pc, #688]	@ (8001ab8 <cliSequence+0x300>)
 8001806:	f002 f855 	bl	80038b4 <cliPrintf>
    ret = true;
 800180a:	e7dd      	b.n	80017c8 <cliSequence+0x10>
    cliPrintf("ctrl init : %s\n", is_init ? "OK" : "NG");
 800180c:	49ab      	ldr	r1, [pc, #684]	@ (8001abc <cliSequence+0x304>)
 800180e:	e7f9      	b.n	8001804 <cliSequence+0x4c>
  if (args->argc == 3 && args->isStr(0, "wave") == true)
 8001810:	6963      	ldr	r3, [r4, #20]
 8001812:	49ab      	ldr	r1, [pc, #684]	@ (8001ac0 <cliSequence+0x308>)
 8001814:	2000      	movs	r0, #0
 8001816:	4798      	blx	r3
 8001818:	4606      	mov	r6, r0
 800181a:	2800      	cmp	r0, #0
 800181c:	d0d7      	beq.n	80017ce <cliSequence+0x16>
    freq_tmp = args->getData(1);
 800181e:	68a3      	ldr	r3, [r4, #8]
 8001820:	2001      	movs	r0, #1
 8001822:	4798      	blx	r3
 8001824:	b285      	uxth	r5, r0
    vpp_tmp  = args->getFloat(2);
 8001826:	68e3      	ldr	r3, [r4, #12]
 8001828:	2002      	movs	r0, #2
 800182a:	4798      	blx	r3
    prev_freq = freq;
 800182c:	4ba5      	ldr	r3, [pc, #660]	@ (8001ac4 <cliSequence+0x30c>)
 800182e:	881f      	ldrh	r7, [r3, #0]
    prev_vpp = vpp_out;
 8001830:	4ba5      	ldr	r3, [pc, #660]	@ (8001ac8 <cliSequence+0x310>)
 8001832:	f8d3 8000 	ldr.w	r8, [r3]
    freq = constrain(freq_tmp, 1, 200);
 8001836:	b11d      	cbz	r5, 8001840 <cliSequence+0x88>
 8001838:	2dc8      	cmp	r5, #200	@ 0xc8
 800183a:	bf28      	it	cs
 800183c:	25c8      	movcs	r5, #200	@ 0xc8
 800183e:	e000      	b.n	8001842 <cliSequence+0x8a>
 8001840:	2501      	movs	r5, #1
 8001842:	4ba0      	ldr	r3, [pc, #640]	@ (8001ac4 <cliSequence+0x30c>)
 8001844:	801d      	strh	r5, [r3, #0]
    vpp_out = constrain(vpp_tmp, 1.0f, 20.0f);
 8001846:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800184a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800184e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001852:	d409      	bmi.n	8001868 <cliSequence+0xb0>
 8001854:	eef3 7a04 	vmov.f32	s15, #52	@ 0x41a00000  20.0
 8001858:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800185c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001860:	dd04      	ble.n	800186c <cliSequence+0xb4>
 8001862:	eeb0 0a67 	vmov.f32	s0, s15
 8001866:	e001      	b.n	800186c <cliSequence+0xb4>
 8001868:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800186c:	4b96      	ldr	r3, [pc, #600]	@ (8001ac8 <cliSequence+0x310>)
 800186e:	ed83 0a00 	vstr	s0, [r3]
    cliPrintf("wave update.\nfreq: %3d -> %3d hz\nvpp : %2.1f -> %2.1f vpp\n", prev_freq, freq, prev_vpp, vpp_out);
 8001872:	ee10 0a10 	vmov	r0, s0
 8001876:	f7fe fe9f 	bl	80005b8 <__aeabi_f2d>
 800187a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800187e:	4640      	mov	r0, r8
 8001880:	f7fe fe9a 	bl	80005b8 <__aeabi_f2d>
 8001884:	e9cd 0100 	strd	r0, r1, [sp]
 8001888:	462a      	mov	r2, r5
 800188a:	4639      	mov	r1, r7
 800188c:	488f      	ldr	r0, [pc, #572]	@ (8001acc <cliSequence+0x314>)
 800188e:	f002 f811 	bl	80038b4 <cliPrintf>
    ret = true;
 8001892:	4635      	mov	r5, r6
 8001894:	e79b      	b.n	80017ce <cliSequence+0x16>
  if (args->argc == 1 && args->isStr(0, "raw") == true)
 8001896:	6963      	ldr	r3, [r4, #20]
 8001898:	498d      	ldr	r1, [pc, #564]	@ (8001ad0 <cliSequence+0x318>)
 800189a:	2000      	movs	r0, #0
 800189c:	4798      	blx	r3
 800189e:	4606      	mov	r6, r0
 80018a0:	2800      	cmp	r0, #0
 80018a2:	d097      	beq.n	80017d4 <cliSequence+0x1c>
    uint32_t pre_time = 0;
 80018a4:	2500      	movs	r5, #0
    while (cliKeepLoop())
 80018a6:	f002 fa1b 	bl	8003ce0 <cliKeepLoop>
 80018aa:	b198      	cbz	r0, 80018d4 <cliSequence+0x11c>
      if (millis() - pre_time >= 100)
 80018ac:	f000 fb50 	bl	8001f50 <millis>
 80018b0:	1b43      	subs	r3, r0, r5
 80018b2:	2b63      	cmp	r3, #99	@ 0x63
 80018b4:	d9f7      	bls.n	80018a6 <cliSequence+0xee>
        pre_time = millis();
 80018b6:	f000 fb4b 	bl	8001f50 <millis>
 80018ba:	4605      	mov	r5, r0
        cliPrintf("adc raw : %d %d %d %d %d\n",
 80018bc:	4985      	ldr	r1, [pc, #532]	@ (8001ad4 <cliSequence+0x31c>)
 80018be:	690b      	ldr	r3, [r1, #16]
 80018c0:	9301      	str	r3, [sp, #4]
 80018c2:	68cb      	ldr	r3, [r1, #12]
 80018c4:	9300      	str	r3, [sp, #0]
 80018c6:	688b      	ldr	r3, [r1, #8]
 80018c8:	684a      	ldr	r2, [r1, #4]
 80018ca:	6809      	ldr	r1, [r1, #0]
 80018cc:	4882      	ldr	r0, [pc, #520]	@ (8001ad8 <cliSequence+0x320>)
 80018ce:	f001 fff1 	bl	80038b4 <cliPrintf>
 80018d2:	e7e8      	b.n	80018a6 <cliSequence+0xee>
    ret = true;
 80018d4:	4635      	mov	r5, r6
 80018d6:	e77d      	b.n	80017d4 <cliSequence+0x1c>
  if (args->argc == 1 && args->isStr(0, "cali") == true) // Calibration
 80018d8:	6963      	ldr	r3, [r4, #20]
 80018da:	4980      	ldr	r1, [pc, #512]	@ (8001adc <cliSequence+0x324>)
 80018dc:	2000      	movs	r0, #0
 80018de:	4798      	blx	r3
 80018e0:	4682      	mov	sl, r0
 80018e2:	2800      	cmp	r0, #0
 80018e4:	f43f af79 	beq.w	80017da <cliSequence+0x22>
    uint32_t sum[ADC_MAX_CH]   = {0,};
 80018e8:	2500      	movs	r5, #0
 80018ea:	9507      	str	r5, [sp, #28]
 80018ec:	9508      	str	r5, [sp, #32]
 80018ee:	9509      	str	r5, [sp, #36]	@ 0x24
 80018f0:	950a      	str	r5, [sp, #40]	@ 0x28
 80018f2:	950b      	str	r5, [sp, #44]	@ 0x2c
    uint32_t avg[ADC_MAX_CH]   = {0,};
 80018f4:	950c      	str	r5, [sp, #48]	@ 0x30
 80018f6:	950d      	str	r5, [sp, #52]	@ 0x34
 80018f8:	950e      	str	r5, [sp, #56]	@ 0x38
 80018fa:	950f      	str	r5, [sp, #60]	@ 0x3c
 80018fc:	9510      	str	r5, [sp, #64]	@ 0x40
    uint32_t old[ADC_MAX_CH]   = {0,};
 80018fe:	9511      	str	r5, [sp, #68]	@ 0x44
 8001900:	9512      	str	r5, [sp, #72]	@ 0x48
 8001902:	9513      	str	r5, [sp, #76]	@ 0x4c
 8001904:	9514      	str	r5, [sp, #80]	@ 0x50
 8001906:	9515      	str	r5, [sp, #84]	@ 0x54
    volatile uint32_t start_time = 0;
 8001908:	9505      	str	r5, [sp, #20]
    volatile uint32_t diff_time = 0;
 800190a:	9506      	str	r5, [sp, #24]
    cliPrintf("Offset Calibration start...\n");
 800190c:	4874      	ldr	r0, [pc, #464]	@ (8001ae0 <cliSequence+0x328>)
 800190e:	f001 ffd1 	bl	80038b4 <cliPrintf>
    cliPrintf("Disconnect the ADC terminal.\n");
 8001912:	4874      	ldr	r0, [pc, #464]	@ (8001ae4 <cliSequence+0x32c>)
 8001914:	f001 ffce 	bl	80038b4 <cliPrintf>
    for (uint8_t ch = 0; ch < adc_ch_max; ch++)
 8001918:	462b      	mov	r3, r5
 800191a:	e00d      	b.n	8001938 <cliSequence+0x180>
      old[ch] = adc_offset[ch];
 800191c:	4a72      	ldr	r2, [pc, #456]	@ (8001ae8 <cliSequence+0x330>)
 800191e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8001922:	edd2 7a00 	vldr	s15, [r2]
 8001926:	aa16      	add	r2, sp, #88	@ 0x58
 8001928:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800192c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001930:	ed42 7a05 	vstr	s15, [r2, #-20]	@ 0xffffffec
    for (uint8_t ch = 0; ch < adc_ch_max; ch++)
 8001934:	3301      	adds	r3, #1
 8001936:	b2db      	uxtb	r3, r3
 8001938:	2b04      	cmp	r3, #4
 800193a:	d9ef      	bls.n	800191c <cliSequence+0x164>
    start_time = millis();
 800193c:	f000 fb08 	bl	8001f50 <millis>
 8001940:	9005      	str	r0, [sp, #20]
    bool is_cali_done = false;
 8001942:	2700      	movs	r7, #0
    uint32_t cnt      = 0;
 8001944:	46b9      	mov	r9, r7
    uint32_t adc_time = 0;
 8001946:	463d      	mov	r5, r7
    uint32_t pre_time = 0;
 8001948:	463e      	mov	r6, r7
    uint16_t percent  = 0;
 800194a:	46b8      	mov	r8, r7
    while (cliKeepLoop())
 800194c:	f002 f9c8 	bl	8003ce0 <cliKeepLoop>
 8001950:	4683      	mov	fp, r0
 8001952:	2800      	cmp	r0, #0
 8001954:	d031      	beq.n	80019ba <cliSequence+0x202>
      if (millis() - adc_time >= 1)
 8001956:	f000 fafb 	bl	8001f50 <millis>
 800195a:	42a8      	cmp	r0, r5
 800195c:	d12f      	bne.n	80019be <cliSequence+0x206>
      if (millis() - pre_time > 150)
 800195e:	f000 faf7 	bl	8001f50 <millis>
 8001962:	1b80      	subs	r0, r0, r6
 8001964:	2896      	cmp	r0, #150	@ 0x96
 8001966:	d86b      	bhi.n	8001a40 <cliSequence+0x288>
      if (is_cali_done && (percent > 100))
 8001968:	2f00      	cmp	r7, #0
 800196a:	d0ef      	beq.n	800194c <cliSequence+0x194>
 800196c:	f1b8 0f64 	cmp.w	r8, #100	@ 0x64
 8001970:	d9ec      	bls.n	800194c <cliSequence+0x194>
        cliPrintf("sample_cnt: %d\n", cnt);
 8001972:	4649      	mov	r1, r9
 8001974:	485d      	ldr	r0, [pc, #372]	@ (8001aec <cliSequence+0x334>)
 8001976:	f001 ff9d 	bl	80038b4 <cliPrintf>
        cliPrintf("ch[0]: %d -> %d\n", old[0], avg[0]);
 800197a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800197c:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800197e:	485c      	ldr	r0, [pc, #368]	@ (8001af0 <cliSequence+0x338>)
 8001980:	f001 ff98 	bl	80038b4 <cliPrintf>
        cliPrintf("ch[1]: %d -> %d\n", old[1], avg[1]);
 8001984:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8001986:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8001988:	485a      	ldr	r0, [pc, #360]	@ (8001af4 <cliSequence+0x33c>)
 800198a:	f001 ff93 	bl	80038b4 <cliPrintf>
        cliPrintf("ch[2]: %d -> %d\n", old[2], avg[2]);
 800198e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8001990:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8001992:	4859      	ldr	r0, [pc, #356]	@ (8001af8 <cliSequence+0x340>)
 8001994:	f001 ff8e 	bl	80038b4 <cliPrintf>
        cliPrintf("ch[3]: %d -> %d\n", old[3], avg[3]);
 8001998:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800199a:	9914      	ldr	r1, [sp, #80]	@ 0x50
 800199c:	4857      	ldr	r0, [pc, #348]	@ (8001afc <cliSequence+0x344>)
 800199e:	f001 ff89 	bl	80038b4 <cliPrintf>
        cliPrintf("ch[4]: %d -> %d\n", old[4], avg[4]);
 80019a2:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80019a4:	9915      	ldr	r1, [sp, #84]	@ 0x54
 80019a6:	4856      	ldr	r0, [pc, #344]	@ (8001b00 <cliSequence+0x348>)
 80019a8:	f001 ff84 	bl	80038b4 <cliPrintf>
        cliPrintf("Offset Calibration Done!!\n");
 80019ac:	4855      	ldr	r0, [pc, #340]	@ (8001b04 <cliSequence+0x34c>)
 80019ae:	f001 ff81 	bl	80038b4 <cliPrintf>
        delay(1000);
 80019b2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019b6:	f000 fac7 	bl	8001f48 <delay>
    ret = true;
 80019ba:	4655      	mov	r5, sl
 80019bc:	e70d      	b.n	80017da <cliSequence+0x22>
        adc_time = millis();
 80019be:	f000 fac7 	bl	8001f50 <millis>
 80019c2:	4605      	mov	r5, r0
        if (cnt < 1000)
 80019c4:	f5b9 7f7a 	cmp.w	r9, #1000	@ 0x3e8
 80019c8:	d31e      	bcc.n	8001a08 <cliSequence+0x250>
        else if(is_cali_done == false)
 80019ca:	2f00      	cmp	r7, #0
 80019cc:	d1c7      	bne.n	800195e <cliSequence+0x1a6>
          diff_time = millis() - start_time;
 80019ce:	f000 fabf 	bl	8001f50 <millis>
 80019d2:	9b05      	ldr	r3, [sp, #20]
 80019d4:	1ac0      	subs	r0, r0, r3
 80019d6:	9006      	str	r0, [sp, #24]
          cliPrintf("Calculated Time: %dms\n", diff_time);
 80019d8:	9906      	ldr	r1, [sp, #24]
 80019da:	484b      	ldr	r0, [pc, #300]	@ (8001b08 <cliSequence+0x350>)
 80019dc:	f001 ff6a 	bl	80038b4 <cliPrintf>
          for (uint8_t ch = 0; ch < adc_ch_max; ch++)
 80019e0:	2300      	movs	r3, #0
 80019e2:	e029      	b.n	8001a38 <cliSequence+0x280>
            sum[ch] += adc_value[ch];
 80019e4:	aa16      	add	r2, sp, #88	@ 0x58
 80019e6:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 80019ea:	f851 2c3c 	ldr.w	r2, [r1, #-60]
 80019ee:	4839      	ldr	r0, [pc, #228]	@ (8001ad4 <cliSequence+0x31c>)
 80019f0:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80019f4:	4402      	add	r2, r0
 80019f6:	f841 2c3c 	str.w	r2, [r1, #-60]
          for (uint8_t ch = 0; ch < adc_ch_max; ch++)
 80019fa:	3301      	adds	r3, #1
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	2b04      	cmp	r3, #4
 8001a00:	d9f0      	bls.n	80019e4 <cliSequence+0x22c>
          cnt++;
 8001a02:	f109 0901 	add.w	r9, r9, #1
 8001a06:	e7aa      	b.n	800195e <cliSequence+0x1a6>
          for (uint8_t ch = 0; ch < adc_ch_max; ch++)
 8001a08:	2300      	movs	r3, #0
 8001a0a:	e7f8      	b.n	80019fe <cliSequence+0x246>
            avg[ch]        = sum[ch] / (cnt + 1);
 8001a0c:	aa16      	add	r2, sp, #88	@ 0x58
 8001a0e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8001a12:	f851 2c3c 	ldr.w	r2, [r1, #-60]
 8001a16:	f109 0001 	add.w	r0, r9, #1
 8001a1a:	fbb2 f2f0 	udiv	r2, r2, r0
 8001a1e:	f841 2c28 	str.w	r2, [r1, #-40]
            adc_offset[ch] = avg[ch];
 8001a22:	4931      	ldr	r1, [pc, #196]	@ (8001ae8 <cliSequence+0x330>)
 8001a24:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8001a28:	ee07 2a90 	vmov	s15, r2
 8001a2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a30:	edc1 7a00 	vstr	s15, [r1]
          for (uint8_t ch = 0; ch < adc_ch_max; ch++)
 8001a34:	3301      	adds	r3, #1
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	2b04      	cmp	r3, #4
 8001a3a:	d9e7      	bls.n	8001a0c <cliSequence+0x254>
          is_cali_done = true;
 8001a3c:	465f      	mov	r7, fp
 8001a3e:	e78e      	b.n	800195e <cliSequence+0x1a6>
        pre_time = millis();
 8001a40:	f000 fa86 	bl	8001f50 <millis>
 8001a44:	4606      	mov	r6, r0
        if (lcdDrawAvailable())
 8001a46:	f000 fc99 	bl	800237c <lcdDrawAvailable>
 8001a4a:	2800      	cmp	r0, #0
 8001a4c:	d08c      	beq.n	8001968 <cliSequence+0x1b0>
          lcdClearBuffer(black);
 8001a4e:	2000      	movs	r0, #0
 8001a50:	f000 fd00 	bl	8002454 <lcdClearBuffer>
          lcdPrintf(96, 0, white, "%3d%%", percent);
 8001a54:	f8cd 8000 	str.w	r8, [sp]
 8001a58:	4b2c      	ldr	r3, [pc, #176]	@ (8001b0c <cliSequence+0x354>)
 8001a5a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a5e:	2100      	movs	r1, #0
 8001a60:	2060      	movs	r0, #96	@ 0x60
 8001a62:	f000 fe2d 	bl	80026c0 <lcdPrintf>
          lcdDrawRect(0, 16, 128, 16, white);
 8001a66:	f64f 7bff 	movw	fp, #65535	@ 0xffff
 8001a6a:	f8cd b000 	str.w	fp, [sp]
 8001a6e:	2310      	movs	r3, #16
 8001a70:	2280      	movs	r2, #128	@ 0x80
 8001a72:	4619      	mov	r1, r3
 8001a74:	2000      	movs	r0, #0
 8001a76:	f000 fdfd 	bl	8002674 <lcdDrawRect>
          lcdDrawFillRect(2, 19, percent * 124 / 100, 10, white);
 8001a7a:	ebc8 1348 	rsb	r3, r8, r8, lsl #5
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	4a23      	ldr	r2, [pc, #140]	@ (8001b10 <cliSequence+0x358>)
 8001a82:	fb82 1203 	smull	r1, r2, r2, r3
 8001a86:	17db      	asrs	r3, r3, #31
 8001a88:	ebc3 1262 	rsb	r2, r3, r2, asr #5
 8001a8c:	f8cd b000 	str.w	fp, [sp]
 8001a90:	230a      	movs	r3, #10
 8001a92:	b212      	sxth	r2, r2
 8001a94:	2113      	movs	r1, #19
 8001a96:	2002      	movs	r0, #2
 8001a98:	f000 fd7a 	bl	8002590 <lcdDrawFillRect>
          lcdRequestDraw();
 8001a9c:	f000 fc98 	bl	80023d0 <lcdRequestDraw>
          percent += 10;
 8001aa0:	f108 080a 	add.w	r8, r8, #10
 8001aa4:	fa1f f888 	uxth.w	r8, r8
 8001aa8:	e75e      	b.n	8001968 <cliSequence+0x1b0>
 8001aaa:	bf00      	nop
 8001aac:	0800eb48 	.word	0x0800eb48
 8001ab0:	20001100 	.word	0x20001100
 8001ab4:	0800eb40 	.word	0x0800eb40
 8001ab8:	0800eb50 	.word	0x0800eb50
 8001abc:	0800eb44 	.word	0x0800eb44
 8001ac0:	0800ec1c 	.word	0x0800ec1c
 8001ac4:	20000008 	.word	0x20000008
 8001ac8:	200010fc 	.word	0x200010fc
 8001acc:	0800ec24 	.word	0x0800ec24
 8001ad0:	0800ec60 	.word	0x0800ec60
 8001ad4:	200010e8 	.word	0x200010e8
 8001ad8:	0800ec64 	.word	0x0800ec64
 8001adc:	0800ec80 	.word	0x0800ec80
 8001ae0:	0800ec88 	.word	0x0800ec88
 8001ae4:	0800eca8 	.word	0x0800eca8
 8001ae8:	2000000c 	.word	0x2000000c
 8001aec:	0800ece8 	.word	0x0800ece8
 8001af0:	0800ecf8 	.word	0x0800ecf8
 8001af4:	0800ed0c 	.word	0x0800ed0c
 8001af8:	0800ed20 	.word	0x0800ed20
 8001afc:	0800ed34 	.word	0x0800ed34
 8001b00:	0800ed48 	.word	0x0800ed48
 8001b04:	0800ed5c 	.word	0x0800ed5c
 8001b08:	0800ecc8 	.word	0x0800ecc8
 8001b0c:	0800ece0 	.word	0x0800ece0
 8001b10:	51eb851f 	.word	0x51eb851f
  if (args->argc == 2 && args->isStr(0, "time") == true)
 8001b14:	6963      	ldr	r3, [r4, #20]
 8001b16:	4913      	ldr	r1, [pc, #76]	@ (8001b64 <cliSequence+0x3ac>)
 8001b18:	2000      	movs	r0, #0
 8001b1a:	4798      	blx	r3
 8001b1c:	2800      	cmp	r0, #0
 8001b1e:	f43f ae60 	beq.w	80017e2 <cliSequence+0x2a>
    uint8_t old_time = uart3_send_time;
 8001b22:	4b11      	ldr	r3, [pc, #68]	@ (8001b68 <cliSequence+0x3b0>)
 8001b24:	781d      	ldrb	r5, [r3, #0]
    new_time             = args->getData(1);
 8001b26:	68a3      	ldr	r3, [r4, #8]
 8001b28:	2001      	movs	r0, #1
 8001b2a:	4798      	blx	r3
 8001b2c:	b2c3      	uxtb	r3, r0
    if(new_time != old_time)
 8001b2e:	429d      	cmp	r5, r3
 8001b30:	f43f ae5a 	beq.w	80017e8 <cliSequence+0x30>
      uart3_send_time = constrain(new_time, 0, 255);
 8001b34:	4a0c      	ldr	r2, [pc, #48]	@ (8001b68 <cliSequence+0x3b0>)
 8001b36:	7013      	strb	r3, [r2, #0]
      cliPrintf("uart3_tx_time : %d -> %d\n", old_time, uart3_send_time);
 8001b38:	461a      	mov	r2, r3
 8001b3a:	4629      	mov	r1, r5
 8001b3c:	480b      	ldr	r0, [pc, #44]	@ (8001b6c <cliSequence+0x3b4>)
 8001b3e:	f001 feb9 	bl	80038b4 <cliPrintf>
 8001b42:	e651      	b.n	80017e8 <cliSequence+0x30>
    cliPrintf("seq info\n");
 8001b44:	480a      	ldr	r0, [pc, #40]	@ (8001b70 <cliSequence+0x3b8>)
 8001b46:	f001 feb5 	bl	80038b4 <cliPrintf>
    cliPrintf("seq cali\n");
 8001b4a:	480a      	ldr	r0, [pc, #40]	@ (8001b74 <cliSequence+0x3bc>)
 8001b4c:	f001 feb2 	bl	80038b4 <cliPrintf>
    cliPrintf("seq raw\n");
 8001b50:	4809      	ldr	r0, [pc, #36]	@ (8001b78 <cliSequence+0x3c0>)
 8001b52:	f001 feaf 	bl	80038b4 <cliPrintf>
    cliPrintf("seq time [0-255]\n");    
 8001b56:	4809      	ldr	r0, [pc, #36]	@ (8001b7c <cliSequence+0x3c4>)
 8001b58:	f001 feac 	bl	80038b4 <cliPrintf>
    cliPrintf("seq wave freq[1-200] vpp[1.0-20.0]\n");
 8001b5c:	4808      	ldr	r0, [pc, #32]	@ (8001b80 <cliSequence+0x3c8>)
 8001b5e:	f001 fea9 	bl	80038b4 <cliPrintf>
}
 8001b62:	e641      	b.n	80017e8 <cliSequence+0x30>
 8001b64:	0800ed78 	.word	0x0800ed78
 8001b68:	20000000 	.word	0x20000000
 8001b6c:	0800ed80 	.word	0x0800ed80
 8001b70:	0800ed9c 	.word	0x0800ed9c
 8001b74:	0800eda8 	.word	0x0800eda8
 8001b78:	0800edb4 	.word	0x0800edb4
 8001b7c:	0800edc0 	.word	0x0800edc0
 8001b80:	0800edd4 	.word	0x0800edd4

08001b84 <sequenceMotorUpdate>:
{
 8001b84:	b538      	push	{r3, r4, r5, lr}
 8001b86:	ed2d 8b02 	vpush	{d8}
  float    arr       = (float)(__HAL_TIM_GET_AUTORELOAD(&htim1));
 8001b8a:	4b24      	ldr	r3, [pc, #144]	@ (8001c1c <sequenceMotorUpdate+0x98>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	ed93 8a0b 	vldr	s16, [r3, #44]	@ 0x2c
 8001b92:	eeb8 8a48 	vcvt.f32.u32	s16, s16
  int32_t  dac_value = dac_out_value;
 8001b96:	4b22      	ldr	r3, [pc, #136]	@ (8001c20 <sequenceMotorUpdate+0x9c>)
 8001b98:	681d      	ldr	r5, [r3, #0]
  float    vpp_ratio = (vpp_out / vpp_max);
 8001b9a:	4b22      	ldr	r3, [pc, #136]	@ (8001c24 <sequenceMotorUpdate+0xa0>)
 8001b9c:	edd3 6a00 	vldr	s13, [r3]
 8001ba0:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8001ba4:	eec6 7a87 	vdiv.f32	s15, s13, s14
  dac_offset = (int32_t)(vpp_ratio * (float)ADC_RESOLUTION_HALF);
 8001ba8:	eeb0 7a67 	vmov.f32	s14, s15
 8001bac:	eebe 7aea 	vcvt.s32.f32	s14, s14, #11
 8001bb0:	ee17 4a10 	vmov	r4, s14
  if (dac_value >= dac_offset)
 8001bb4:	42a5      	cmp	r5, r4
 8001bb6:	db23      	blt.n	8001c00 <sequenceMotorUpdate+0x7c>
    HAL_GPIO_WritePin(MT_PH_GPIO_Port, MT_PH_Pin, GPIO_PIN_SET);   
 8001bb8:	2201      	movs	r2, #1
 8001bba:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001bbe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bc2:	f004 febd 	bl	8006940 <HAL_GPIO_WritePin>
  if(dac_value >= 0)
 8001bc6:	1b2b      	subs	r3, r5, r4
 8001bc8:	d422      	bmi.n	8001c10 <sequenceMotorUpdate+0x8c>
    dac_value++;
 8001bca:	3301      	adds	r3, #1
  dac_value = constrain(dac_value, 1, ADC_RESOLUTION_HALF);
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	dd21      	ble.n	8001c14 <sequenceMotorUpdate+0x90>
 8001bd0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001bd4:	bfa8      	it	ge
 8001bd6:	f44f 6300 	movge.w	r3, #2048	@ 0x800
 8001bda:	ee07 3a90 	vmov	s15, r3
  pwm_ratio =  (float)dac_value / (float)ADC_RESOLUTION_HALF;
 8001bde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001be2:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8001c28 <sequenceMotorUpdate+0xa4>
 8001be6:	ee67 7a87 	vmul.f32	s15, s15, s14
  pwm_out   = (uint32_t)(pwm_ratio * arr);
 8001bea:	ee28 8a27 	vmul.f32	s16, s16, s15
 8001bee:	eebc 8ac8 	vcvt.u32.f32	s16, s16
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwm_out);
 8001bf2:	4b0a      	ldr	r3, [pc, #40]	@ (8001c1c <sequenceMotorUpdate+0x98>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	ed83 8a0d 	vstr	s16, [r3, #52]	@ 0x34
}
 8001bfa:	ecbd 8b02 	vpop	{d8}
 8001bfe:	bd38      	pop	{r3, r4, r5, pc}
    HAL_GPIO_WritePin(MT_PH_GPIO_Port, MT_PH_Pin, GPIO_PIN_RESET); 
 8001c00:	2200      	movs	r2, #0
 8001c02:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001c06:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c0a:	f004 fe99 	bl	8006940 <HAL_GPIO_WritePin>
 8001c0e:	e7da      	b.n	8001bc6 <sequenceMotorUpdate+0x42>
    dac_value *= -1;
 8001c10:	1b63      	subs	r3, r4, r5
 8001c12:	e7db      	b.n	8001bcc <sequenceMotorUpdate+0x48>
  dac_value = constrain(dac_value, 1, ADC_RESOLUTION_HALF);
 8001c14:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8001c2c <sequenceMotorUpdate+0xa8>
 8001c18:	e7e1      	b.n	8001bde <sequenceMotorUpdate+0x5a>
 8001c1a:	bf00      	nop
 8001c1c:	2000682c 	.word	0x2000682c
 8001c20:	200010e4 	.word	0x200010e4
 8001c24:	200010fc 	.word	0x200010fc
 8001c28:	3a000000 	.word	0x3a000000
 8001c2c:	00000001 	.word	0x00000001

08001c30 <sequenceTestPinToggle>:
{
 8001c30:	b508      	push	{r3, lr}
  toggle_cnt++;
 8001c32:	4a09      	ldr	r2, [pc, #36]	@ (8001c58 <sequenceTestPinToggle+0x28>)
 8001c34:	6813      	ldr	r3, [r2, #0]
 8001c36:	3301      	adds	r3, #1
 8001c38:	6013      	str	r3, [r2, #0]
  if (toggle_cnt >= 10000)
 8001c3a:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d800      	bhi.n	8001c44 <sequenceTestPinToggle+0x14>
}
 8001c42:	bd08      	pop	{r3, pc}
    toggle_cnt = 0;
 8001c44:	4b04      	ldr	r3, [pc, #16]	@ (8001c58 <sequenceTestPinToggle+0x28>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	601a      	str	r2, [r3, #0]
    HAL_GPIO_TogglePin(TEST_PIN_GPIO_Port, TEST_PIN_Pin); // PB13
 8001c4a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001c4e:	4803      	ldr	r0, [pc, #12]	@ (8001c5c <sequenceTestPinToggle+0x2c>)
 8001c50:	f004 fe7b 	bl	800694a <HAL_GPIO_TogglePin>
}
 8001c54:	e7f5      	b.n	8001c42 <sequenceTestPinToggle+0x12>
 8001c56:	bf00      	nop
 8001c58:	20000264 	.word	0x20000264
 8001c5c:	48000400 	.word	0x48000400

08001c60 <HAL_ADC_ConvCpltCallback>:
{
 8001c60:	b538      	push	{r3, r4, r5, lr}
  if (hadc->Instance == hadc1.Instance) //  10Khz(100us)
 8001c62:	6802      	ldr	r2, [r0, #0]
 8001c64:	4b0b      	ldr	r3, [pc, #44]	@ (8001c94 <HAL_ADC_ConvCpltCallback+0x34>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d000      	beq.n	8001c6e <HAL_ADC_ConvCpltCallback+0xe>
}
 8001c6c:	bd38      	pop	{r3, r4, r5, pc}
    adc_value[i] = HAL_ADC_GetValue(&hadc1);
 8001c6e:	4c0a      	ldr	r4, [pc, #40]	@ (8001c98 <HAL_ADC_ConvCpltCallback+0x38>)
 8001c70:	7825      	ldrb	r5, [r4, #0]
 8001c72:	4808      	ldr	r0, [pc, #32]	@ (8001c94 <HAL_ADC_ConvCpltCallback+0x34>)
 8001c74:	f003 f9a8 	bl	8004fc8 <HAL_ADC_GetValue>
 8001c78:	4b08      	ldr	r3, [pc, #32]	@ (8001c9c <HAL_ADC_ConvCpltCallback+0x3c>)
 8001c7a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
    i = next_idx(i, adc_ch_max);    
 8001c7e:	7822      	ldrb	r2, [r4, #0]
 8001c80:	3206      	adds	r2, #6
 8001c82:	4b07      	ldr	r3, [pc, #28]	@ (8001ca0 <HAL_ADC_ConvCpltCallback+0x40>)
 8001c84:	fb83 1302 	smull	r1, r3, r3, r2
 8001c88:	105b      	asrs	r3, r3, #1
 8001c8a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	7023      	strb	r3, [r4, #0]
}
 8001c92:	e7eb      	b.n	8001c6c <HAL_ADC_ConvCpltCallback+0xc>
 8001c94:	20005e04 	.word	0x20005e04
 8001c98:	20000262 	.word	0x20000262
 8001c9c:	200010e8 	.word	0x200010e8
 8001ca0:	66666667 	.word	0x66666667

08001ca4 <dacAvailableForWrite>:
{
 8001ca4:	b510      	push	{r4, lr}
  rx_len = qbufferAvailable(&value_queue);
 8001ca6:	4c04      	ldr	r4, [pc, #16]	@ (8001cb8 <dacAvailableForWrite+0x14>)
 8001ca8:	4620      	mov	r0, r4
 8001caa:	f000 f9c0 	bl	800202e <qbufferAvailable>
  wr_len = (value_queue.len - 1) - rx_len;
 8001cae:	68a3      	ldr	r3, [r4, #8]
 8001cb0:	1a18      	subs	r0, r3, r0
}
 8001cb2:	3801      	subs	r0, #1
 8001cb4:	bd10      	pop	{r4, pc}
 8001cb6:	bf00      	nop
 8001cb8:	200002a8 	.word	0x200002a8

08001cbc <sequenceDacUpdate>:
{
 8001cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cbe:	b087      	sub	sp, #28
  sample_max = sequence_freq / freq;
 8001cc0:	4b45      	ldr	r3, [pc, #276]	@ (8001dd8 <sequenceDacUpdate+0x11c>)
 8001cc2:	881b      	ldrh	r3, [r3, #0]
 8001cc4:	f242 7710 	movw	r7, #10000	@ 0x2710
 8001cc8:	fbb7 f7f3 	udiv	r7, r7, r3
 8001ccc:	4b43      	ldr	r3, [pc, #268]	@ (8001ddc <sequenceDacUpdate+0x120>)
 8001cce:	601f      	str	r7, [r3, #0]
  float radian       = (2.0f * PI) * ((float)sample_idx / (float)sample_max); // 라디안 각도 계산
 8001cd0:	4e43      	ldr	r6, [pc, #268]	@ (8001de0 <sequenceDacUpdate+0x124>)
 8001cd2:	6834      	ldr	r4, [r6, #0]
 8001cd4:	ee07 4a90 	vmov	s15, r4
 8001cd8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001cdc:	ee07 7a90 	vmov	s15, r7
 8001ce0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ce4:	ee87 0a27 	vdiv.f32	s0, s14, s15
  float sin_value    = sinf(radian);                                          // 사인 함수 계산
 8001ce8:	eddf 7a3e 	vldr	s15, [pc, #248]	@ 8001de4 <sequenceDacUpdate+0x128>
 8001cec:	ee20 0a27 	vmul.f32	s0, s0, s15
 8001cf0:	f00c f954 	bl	800df9c <sinf>
  float shifted_sin  = sin_value + 1.0f;                                      // 사인 값을 [0, 2] 범위로 이동
 8001cf4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8001cf8:	ee30 0a27 	vadd.f32	s0, s0, s15
  dac_out_value      = (uint16_t)rint(scaled_value);                          // 반올림 및 정수형으로 변환
 8001cfc:	eddf 7a3a 	vldr	s15, [pc, #232]	@ 8001de8 <sequenceDacUpdate+0x12c>
 8001d00:	ee60 7a27 	vmul.f32	s15, s0, s15
 8001d04:	ee17 0a90 	vmov	r0, s15
 8001d08:	f7fe fc56 	bl	80005b8 <__aeabi_f2d>
 8001d0c:	ec41 0b10 	vmov	d0, r0, r1
 8001d10:	f00c f98a 	bl	800e028 <rint>
 8001d14:	ec51 0b10 	vmov	r0, r1, d0
 8001d18:	f7fe ff7e 	bl	8000c18 <__aeabi_d2uiz>
 8001d1c:	b280      	uxth	r0, r0
 8001d1e:	4d33      	ldr	r5, [pc, #204]	@ (8001dec <sequenceDacUpdate+0x130>)
 8001d20:	6028      	str	r0, [r5, #0]
  dac_out_value = constrain(dac_out_value, 0, ADC_RESOLUTION - 1);
 8001d22:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8001d26:	4283      	cmp	r3, r0
 8001d28:	bfa8      	it	ge
 8001d2a:	4603      	movge	r3, r0
 8001d2c:	602b      	str	r3, [r5, #0]
  dac_out_value = dac_out_value * (vpp_out / vpp_max);
 8001d2e:	4a30      	ldr	r2, [pc, #192]	@ (8001df0 <sequenceDacUpdate+0x134>)
 8001d30:	edd2 6a00 	vldr	s13, [r2]
 8001d34:	eef3 7a04 	vmov.f32	s15, #52	@ 0x41a00000  20.0
 8001d38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001d3c:	ee07 3a90 	vmov	s15, r3
 8001d40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d4c:	ee17 3a90 	vmov	r3, s15
 8001d50:	edc5 7a00 	vstr	s15, [r5]
  sample_idx    = next_idx(sample_idx, sample_max);
 8001d54:	193a      	adds	r2, r7, r4
 8001d56:	3201      	adds	r2, #1
 8001d58:	fbb2 f1f7 	udiv	r1, r2, r7
 8001d5c:	fb07 2211 	mls	r2, r7, r1, r2
 8001d60:	6032      	str	r2, [r6, #0]
  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_out_value); // DAC1 OUT
 8001d62:	2200      	movs	r2, #0
 8001d64:	4611      	mov	r1, r2
 8001d66:	4823      	ldr	r0, [pc, #140]	@ (8001df4 <sequenceDacUpdate+0x138>)
 8001d68:	f004 f8da 	bl	8005f20 <HAL_DAC_SetValue>
  HAL_DAC_SetValue(&hdac2, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_out_value); // DAC2 OUT
 8001d6c:	682b      	ldr	r3, [r5, #0]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	4611      	mov	r1, r2
 8001d72:	4821      	ldr	r0, [pc, #132]	@ (8001df8 <sequenceDacUpdate+0x13c>)
 8001d74:	f004 f8d4 	bl	8005f20 <HAL_DAC_SetValue>
  if (millis() - pre_time >= uart3_send_time)
 8001d78:	f000 f8ea 	bl	8001f50 <millis>
 8001d7c:	4b1f      	ldr	r3, [pc, #124]	@ (8001dfc <sequenceDacUpdate+0x140>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	1ac0      	subs	r0, r0, r3
 8001d82:	4b1f      	ldr	r3, [pc, #124]	@ (8001e00 <sequenceDacUpdate+0x144>)
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	4298      	cmp	r0, r3
 8001d88:	d201      	bcs.n	8001d8e <sequenceDacUpdate+0xd2>
}
 8001d8a:	b007      	add	sp, #28
 8001d8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    pre_time = millis();
 8001d8e:	f000 f8df 	bl	8001f50 <millis>
 8001d92:	4b1a      	ldr	r3, [pc, #104]	@ (8001dfc <sequenceDacUpdate+0x140>)
 8001d94:	6018      	str	r0, [r3, #0]
    buf.frame_start = 0xBBAA;
 8001d96:	f64b 33aa 	movw	r3, #48042	@ 0xbbaa
 8001d9a:	f8ad 3004 	strh.w	r3, [sp, #4]
    buf.value[0] = (float)dac_out_value;
 8001d9e:	682b      	ldr	r3, [r5, #0]
 8001da0:	ee07 3a90 	vmov	s15, r3
 8001da4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001da8:	ee17 3a90 	vmov	r3, s15
 8001dac:	f8cd 3006 	str.w	r3, [sp, #6]
    buf.value[1] = 34.5f;
 8001db0:	4b14      	ldr	r3, [pc, #80]	@ (8001e04 <sequenceDacUpdate+0x148>)
 8001db2:	f8cd 300a 	str.w	r3, [sp, #10]
    buf.value[2] = 56.7f;
 8001db6:	4b14      	ldr	r3, [pc, #80]	@ (8001e08 <sequenceDacUpdate+0x14c>)
 8001db8:	f8cd 300e 	str.w	r3, [sp, #14]
    buf.value[3] = 78.9f;
 8001dbc:	4b13      	ldr	r3, [pc, #76]	@ (8001e0c <sequenceDacUpdate+0x150>)
 8001dbe:	f8cd 3012 	str.w	r3, [sp, #18]
    if (dacAvailableForWrite() > 0)
 8001dc2:	f7ff ff6f 	bl	8001ca4 <dacAvailableForWrite>
 8001dc6:	2800      	cmp	r0, #0
 8001dc8:	d0df      	beq.n	8001d8a <sequenceDacUpdate+0xce>
      qbufferWrite(&value_queue, (uint8_t *)&buf, 1);
 8001dca:	2201      	movs	r2, #1
 8001dcc:	a901      	add	r1, sp, #4
 8001dce:	4810      	ldr	r0, [pc, #64]	@ (8001e10 <sequenceDacUpdate+0x154>)
 8001dd0:	f000 f8d6 	bl	8001f80 <qbufferWrite>
}
 8001dd4:	e7d9      	b.n	8001d8a <sequenceDacUpdate+0xce>
 8001dd6:	bf00      	nop
 8001dd8:	20000008 	.word	0x20000008
 8001ddc:	20000004 	.word	0x20000004
 8001de0:	200010cc 	.word	0x200010cc
 8001de4:	40c90fdb 	.word	0x40c90fdb
 8001de8:	45000000 	.word	0x45000000
 8001dec:	200010e4 	.word	0x200010e4
 8001df0:	200010fc 	.word	0x200010fc
 8001df4:	20006574 	.word	0x20006574
 8001df8:	20006560 	.word	0x20006560
 8001dfc:	20000268 	.word	0x20000268
 8001e00:	20000000 	.word	0x20000000
 8001e04:	420a0000 	.word	0x420a0000
 8001e08:	4262cccd 	.word	0x4262cccd
 8001e0c:	429dcccd 	.word	0x429dcccd
 8001e10:	200002a8 	.word	0x200002a8

08001e14 <sequenceInterruptHandler>:
{
 8001e14:	b508      	push	{r3, lr}
  sequenceRmsUpdate();
 8001e16:	f7ff fcc3 	bl	80017a0 <sequenceRmsUpdate>
  controlUserFunc();
 8001e1a:	f7ff f97b 	bl	8001114 <controlUserFunc>
  sequenceDacUpdate();
 8001e1e:	f7ff ff4d 	bl	8001cbc <sequenceDacUpdate>
  sequenceMotorUpdate();
 8001e22:	f7ff feaf 	bl	8001b84 <sequenceMotorUpdate>
}
 8001e26:	bd08      	pop	{r3, pc}

08001e28 <HAL_TIM_PeriodElapsedCallback>:
{ 
 8001e28:	b508      	push	{r3, lr}
  if (htim->Instance == htim1.Instance) // 20Khz(50us)
 8001e2a:	6803      	ldr	r3, [r0, #0]
 8001e2c:	4a07      	ldr	r2, [pc, #28]	@ (8001e4c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001e2e:	6812      	ldr	r2, [r2, #0]
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d000      	beq.n	8001e36 <HAL_TIM_PeriodElapsedCallback+0xe>
}
 8001e34:	bd08      	pop	{r3, pc}
    if(htim->Instance->CNT >= (htim->Instance->ARR)/2) // 10Khz(100us)
 8001e36:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e3a:	ebb2 0f53 	cmp.w	r2, r3, lsr #1
 8001e3e:	d3f9      	bcc.n	8001e34 <HAL_TIM_PeriodElapsedCallback+0xc>
      sequenceTestPinToggle();
 8001e40:	f7ff fef6 	bl	8001c30 <sequenceTestPinToggle>
      sequenceInterruptHandler();
 8001e44:	f7ff ffe6 	bl	8001e14 <sequenceInterruptHandler>
}
 8001e48:	e7f4      	b.n	8001e34 <HAL_TIM_PeriodElapsedCallback+0xc>
 8001e4a:	bf00      	nop
 8001e4c:	2000682c 	.word	0x2000682c

08001e50 <sequenceCalibration>:
{
 8001e50:	b570      	push	{r4, r5, r6, lr}
 8001e52:	b08a      	sub	sp, #40	@ 0x28
  uint32_t sum[ADC_MAX_CH] = { 0, 0, 0, 0, 0 };
 8001e54:	2400      	movs	r4, #0
 8001e56:	9405      	str	r4, [sp, #20]
 8001e58:	9406      	str	r4, [sp, #24]
 8001e5a:	9407      	str	r4, [sp, #28]
 8001e5c:	9408      	str	r4, [sp, #32]
 8001e5e:	9409      	str	r4, [sp, #36]	@ 0x24
  uint32_t avg[ADC_MAX_CH] = { 0, 0, 0, 0, 0 };
 8001e60:	9400      	str	r4, [sp, #0]
 8001e62:	9401      	str	r4, [sp, #4]
 8001e64:	9402      	str	r4, [sp, #8]
 8001e66:	9403      	str	r4, [sp, #12]
 8001e68:	9404      	str	r4, [sp, #16]
  pre_time = millis();
 8001e6a:	f000 f871 	bl	8001f50 <millis>
 8001e6e:	4605      	mov	r5, r0
  uint32_t cnt      = 0;
 8001e70:	4626      	mov	r6, r4
  while (millis() - pre_time < 1000)
 8001e72:	f000 f86d 	bl	8001f50 <millis>
 8001e76:	1b40      	subs	r0, r0, r5
 8001e78:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8001e7c:	d235      	bcs.n	8001eea <sequenceCalibration+0x9a>
    if (millis() - adc_time >= 1)
 8001e7e:	f000 f867 	bl	8001f50 <millis>
 8001e82:	42a0      	cmp	r0, r4
 8001e84:	d0f5      	beq.n	8001e72 <sequenceCalibration+0x22>
      adc_time = millis();
 8001e86:	f000 f863 	bl	8001f50 <millis>
 8001e8a:	4604      	mov	r4, r0
      if (cnt < 500)
 8001e8c:	f5b6 7ffa 	cmp.w	r6, #500	@ 0x1f4
 8001e90:	d201      	bcs.n	8001e96 <sequenceCalibration+0x46>
        for (uint8_t ch = 0; ch < adc_ch_max; ch++)
 8001e92:	2300      	movs	r3, #0
 8001e94:	e025      	b.n	8001ee2 <sequenceCalibration+0x92>
        for (uint8_t ch = 0; ch < adc_ch_max; ch++)
 8001e96:	2300      	movs	r3, #0
 8001e98:	2b04      	cmp	r3, #4
 8001e9a:	d826      	bhi.n	8001eea <sequenceCalibration+0x9a>
          avg[ch]        = sum[ch] / (cnt + 1);
 8001e9c:	aa0a      	add	r2, sp, #40	@ 0x28
 8001e9e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8001ea2:	f851 2c14 	ldr.w	r2, [r1, #-20]
 8001ea6:	1c70      	adds	r0, r6, #1
 8001ea8:	fbb2 f2f0 	udiv	r2, r2, r0
 8001eac:	f841 2c28 	str.w	r2, [r1, #-40]
          adc_offset[ch] = avg[ch];
 8001eb0:	490f      	ldr	r1, [pc, #60]	@ (8001ef0 <sequenceCalibration+0xa0>)
 8001eb2:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8001eb6:	ee07 2a90 	vmov	s15, r2
 8001eba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ebe:	edc1 7a00 	vstr	s15, [r1]
        for (uint8_t ch = 0; ch < adc_ch_max; ch++)
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	e7e7      	b.n	8001e98 <sequenceCalibration+0x48>
          sum[ch] += adc_value[ch];
 8001ec8:	aa0a      	add	r2, sp, #40	@ 0x28
 8001eca:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8001ece:	f851 2c14 	ldr.w	r2, [r1, #-20]
 8001ed2:	4808      	ldr	r0, [pc, #32]	@ (8001ef4 <sequenceCalibration+0xa4>)
 8001ed4:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8001ed8:	4402      	add	r2, r0
 8001eda:	f841 2c14 	str.w	r2, [r1, #-20]
        for (uint8_t ch = 0; ch < adc_ch_max; ch++)
 8001ede:	3301      	adds	r3, #1
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	2b04      	cmp	r3, #4
 8001ee4:	d9f0      	bls.n	8001ec8 <sequenceCalibration+0x78>
        cnt++;
 8001ee6:	3601      	adds	r6, #1
 8001ee8:	e7c3      	b.n	8001e72 <sequenceCalibration+0x22>
}
 8001eea:	b00a      	add	sp, #40	@ 0x28
 8001eec:	bd70      	pop	{r4, r5, r6, pc}
 8001eee:	bf00      	nop
 8001ef0:	2000000c 	.word	0x2000000c
 8001ef4:	200010e8 	.word	0x200010e8

08001ef8 <sequenceInit>:
{
 8001ef8:	b538      	push	{r3, r4, r5, lr}
  is_init = true;
 8001efa:	2401      	movs	r4, #1
 8001efc:	4b0b      	ldr	r3, [pc, #44]	@ (8001f2c <sequenceInit+0x34>)
 8001efe:	701c      	strb	r4, [r3, #0]
  qbufferCreateBySize(&value_queue, (uint8_t *)queue_buffer, sizeof(value_buf_t), value_num);
 8001f00:	230a      	movs	r3, #10
 8001f02:	2212      	movs	r2, #18
 8001f04:	490a      	ldr	r1, [pc, #40]	@ (8001f30 <sequenceInit+0x38>)
 8001f06:	480b      	ldr	r0, [pc, #44]	@ (8001f34 <sequenceInit+0x3c>)
 8001f08:	f000 f82f 	bl	8001f6a <qbufferCreateBySize>
  HAL_TIM_Base_Start_IT(&htim1);
 8001f0c:	4d0a      	ldr	r5, [pc, #40]	@ (8001f38 <sequenceInit+0x40>)
 8001f0e:	4628      	mov	r0, r5
 8001f10:	f006 f918 	bl	8008144 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8001f14:	2100      	movs	r1, #0
 8001f16:	4628      	mov	r0, r5
 8001f18:	f006 fcda 	bl	80088d0 <HAL_TIM_PWM_Start>
  cliAdd("seq", cliSequence);  
 8001f1c:	4907      	ldr	r1, [pc, #28]	@ (8001f3c <sequenceInit+0x44>)
 8001f1e:	4808      	ldr	r0, [pc, #32]	@ (8001f40 <sequenceInit+0x48>)
 8001f20:	f001 feea 	bl	8003cf8 <cliAdd>
  sequenceCalibration();
 8001f24:	f7ff ff94 	bl	8001e50 <sequenceCalibration>
}
 8001f28:	4620      	mov	r0, r4
 8001f2a:	bd38      	pop	{r3, r4, r5, pc}
 8001f2c:	20001100 	.word	0x20001100
 8001f30:	200002bc 	.word	0x200002bc
 8001f34:	200002a8 	.word	0x200002a8
 8001f38:	2000682c 	.word	0x2000682c
 8001f3c:	080017b9 	.word	0x080017b9
 8001f40:	0800edf8 	.word	0x0800edf8

08001f44 <bspInit>:


bool bspInit(void)
{
  return true;
}
 8001f44:	2001      	movs	r0, #1
 8001f46:	4770      	bx	lr

08001f48 <delay>:

void delay(uint32_t ms)
{
 8001f48:	b508      	push	{r3, lr}
  HAL_Delay(ms);
 8001f4a:	f002 fead 	bl	8004ca8 <HAL_Delay>
}
 8001f4e:	bd08      	pop	{r3, pc}

08001f50 <millis>:

uint32_t millis(void)
{
 8001f50:	b508      	push	{r3, lr}
  return HAL_GetTick();
 8001f52:	f002 fea3 	bl	8004c9c <HAL_GetTick>
}
 8001f56:	bd08      	pop	{r3, pc}

08001f58 <qbufferCreate>:
{

}

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 8001f58:	4603      	mov	r3, r0
  bool ret = true;

  p_node->in    = 0;
 8001f5a:	2000      	movs	r0, #0
 8001f5c:	6018      	str	r0, [r3, #0]
  p_node->out   = 0;
 8001f5e:	6058      	str	r0, [r3, #4]
  p_node->len   = length;
 8001f60:	609a      	str	r2, [r3, #8]
  p_node->size  = 1;
 8001f62:	2001      	movs	r0, #1
 8001f64:	60d8      	str	r0, [r3, #12]
  p_node->p_buf = p_buf;
 8001f66:	6119      	str	r1, [r3, #16]

  return ret;
}
 8001f68:	4770      	bx	lr

08001f6a <qbufferCreateBySize>:

bool qbufferCreateBySize(qbuffer_t *p_node, uint8_t *p_buf, uint32_t size, uint32_t length)
{
 8001f6a:	b410      	push	{r4}
  bool ret = true;

  p_node->in    = 0;
 8001f6c:	2400      	movs	r4, #0
 8001f6e:	6004      	str	r4, [r0, #0]
  p_node->out   = 0;
 8001f70:	6044      	str	r4, [r0, #4]
  p_node->len   = length;
 8001f72:	6083      	str	r3, [r0, #8]
  p_node->size  = size;
 8001f74:	60c2      	str	r2, [r0, #12]
  p_node->p_buf = p_buf;
 8001f76:	6101      	str	r1, [r0, #16]

  return ret;
}
 8001f78:	2001      	movs	r0, #1
 8001f7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <qbufferWrite>:

bool qbufferWrite(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 8001f80:	b5f0      	push	{r4, r5, r6, r7, lr}
  bool ret = true;
  uint32_t next_in;


  for (int i=0; i<length; i++)
 8001f82:	2700      	movs	r7, #0
 8001f84:	e00c      	b.n	8001fa0 <qbufferWrite+0x20>
        uint8_t *p_buf;

        p_buf = &p_node->p_buf[p_node->in*p_node->size];
        for (int j=0; j<p_node->size; j++)
        {
          p_buf[j] = p_data[j];
 8001f86:	eb0c 0503 	add.w	r5, ip, r3
 8001f8a:	f811 e003 	ldrb.w	lr, [r1, r3]
 8001f8e:	f806 e005 	strb.w	lr, [r6, r5]
        for (int j=0; j<p_node->size; j++)
 8001f92:	3301      	adds	r3, #1
 8001f94:	68c5      	ldr	r5, [r0, #12]
 8001f96:	429d      	cmp	r5, r3
 8001f98:	d8f5      	bhi.n	8001f86 <qbufferWrite+0x6>
        }
        p_data += p_node->size;
 8001f9a:	4429      	add	r1, r5
      }
      p_node->in = next_in;
 8001f9c:	6004      	str	r4, [r0, #0]
  for (int i=0; i<length; i++)
 8001f9e:	3701      	adds	r7, #1
 8001fa0:	4297      	cmp	r7, r2
 8001fa2:	d213      	bcs.n	8001fcc <qbufferWrite+0x4c>
    next_in = (p_node->in + 1) % p_node->len;
 8001fa4:	6805      	ldr	r5, [r0, #0]
 8001fa6:	1c6b      	adds	r3, r5, #1
 8001fa8:	6884      	ldr	r4, [r0, #8]
 8001faa:	fbb3 f6f4 	udiv	r6, r3, r4
 8001fae:	fb04 3416 	mls	r4, r4, r6, r3
    if (next_in != p_node->out)
 8001fb2:	6843      	ldr	r3, [r0, #4]
 8001fb4:	42a3      	cmp	r3, r4
 8001fb6:	d00b      	beq.n	8001fd0 <qbufferWrite+0x50>
      if (p_node->p_buf != NULL && p_data != NULL)
 8001fb8:	6906      	ldr	r6, [r0, #16]
 8001fba:	2e00      	cmp	r6, #0
 8001fbc:	d0ee      	beq.n	8001f9c <qbufferWrite+0x1c>
 8001fbe:	2900      	cmp	r1, #0
 8001fc0:	d0ec      	beq.n	8001f9c <qbufferWrite+0x1c>
        p_buf = &p_node->p_buf[p_node->in*p_node->size];
 8001fc2:	68c3      	ldr	r3, [r0, #12]
 8001fc4:	fb03 fc05 	mul.w	ip, r3, r5
        for (int j=0; j<p_node->size; j++)
 8001fc8:	2300      	movs	r3, #0
 8001fca:	e7e3      	b.n	8001f94 <qbufferWrite+0x14>
  bool ret = true;
 8001fcc:	2001      	movs	r0, #1
      break;
    }
  }

  return ret;
}
 8001fce:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ret = false;
 8001fd0:	2000      	movs	r0, #0
 8001fd2:	e7fc      	b.n	8001fce <qbufferWrite+0x4e>

08001fd4 <qbufferRead>:

bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 8001fd4:	b570      	push	{r4, r5, r6, lr}
 8001fd6:	460c      	mov	r4, r1
 8001fd8:	4616      	mov	r6, r2
  bool ret = true;


  for (int i=0; i<length; i++)
 8001fda:	2500      	movs	r5, #0
 8001fdc:	e016      	b.n	800200c <qbufferRead+0x38>
      uint8_t *p_buf;

      p_buf = &p_node->p_buf[p_node->out*p_node->size];
      for (int j=0; j<p_node->size; j++)
      {
        p_data[j] = p_buf[j];
 8001fde:	eb01 0c0e 	add.w	ip, r1, lr
 8001fe2:	f81c c003 	ldrb.w	ip, [ip, r3]
 8001fe6:	f804 c003 	strb.w	ip, [r4, r3]
      for (int j=0; j<p_node->size; j++)
 8001fea:	3301      	adds	r3, #1
 8001fec:	68c2      	ldr	r2, [r0, #12]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d8f5      	bhi.n	8001fde <qbufferRead+0xa>
      }

      p_data += p_node->size;
 8001ff2:	4414      	add	r4, r2
    }

    if (p_node->out != p_node->in)
 8001ff4:	6843      	ldr	r3, [r0, #4]
 8001ff6:	6802      	ldr	r2, [r0, #0]
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d016      	beq.n	800202a <qbufferRead+0x56>
    {
      p_node->out = (p_node->out + 1) % p_node->len;
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	6882      	ldr	r2, [r0, #8]
 8002000:	fbb3 f1f2 	udiv	r1, r3, r2
 8002004:	fb02 3311 	mls	r3, r2, r1, r3
 8002008:	6043      	str	r3, [r0, #4]
  for (int i=0; i<length; i++)
 800200a:	3501      	adds	r5, #1
 800200c:	42b5      	cmp	r5, r6
 800200e:	d20a      	bcs.n	8002026 <qbufferRead+0x52>
    if (p_node->p_buf != NULL && p_data != NULL)
 8002010:	6901      	ldr	r1, [r0, #16]
 8002012:	2900      	cmp	r1, #0
 8002014:	d0ee      	beq.n	8001ff4 <qbufferRead+0x20>
 8002016:	2c00      	cmp	r4, #0
 8002018:	d0ec      	beq.n	8001ff4 <qbufferRead+0x20>
      p_buf = &p_node->p_buf[p_node->out*p_node->size];
 800201a:	6843      	ldr	r3, [r0, #4]
 800201c:	68c2      	ldr	r2, [r0, #12]
 800201e:	fb02 fe03 	mul.w	lr, r2, r3
      for (int j=0; j<p_node->size; j++)
 8002022:	2300      	movs	r3, #0
 8002024:	e7e2      	b.n	8001fec <qbufferRead+0x18>
  bool ret = true;
 8002026:	2001      	movs	r0, #1
      break;
    }
  }

  return ret;
}
 8002028:	bd70      	pop	{r4, r5, r6, pc}
      ret = false;
 800202a:	2000      	movs	r0, #0
 800202c:	e7fc      	b.n	8002028 <qbufferRead+0x54>

0800202e <qbufferAvailable>:
uint32_t qbufferAvailable(qbuffer_t *p_node)
{
  uint32_t ret;


  ret = (p_node->len + p_node->in - p_node->out) % p_node->len;
 800202e:	6882      	ldr	r2, [r0, #8]
 8002030:	6803      	ldr	r3, [r0, #0]
 8002032:	4413      	add	r3, r2
 8002034:	6841      	ldr	r1, [r0, #4]
 8002036:	1a5b      	subs	r3, r3, r1
 8002038:	fbb3 f0f2 	udiv	r0, r3, r2

  return ret;
}
 800203c:	fb02 3010 	mls	r0, r2, r0, r3
 8002040:	4770      	bx	lr
	...

08002044 <cliAdc>:

}

#ifdef _USE_HW_ADC
void cliAdc(cli_args_t *args)
{
 8002044:	b508      	push	{r3, lr}
  bool ret = false;

  if (args->argc == 1 && args->isStr(0, "info") == true)
 8002046:	8803      	ldrh	r3, [r0, #0]
 8002048:	2b01      	cmp	r3, #1
 800204a:	d10e      	bne.n	800206a <cliAdc+0x26>
 800204c:	6943      	ldr	r3, [r0, #20]
 800204e:	4909      	ldr	r1, [pc, #36]	@ (8002074 <cliAdc+0x30>)
 8002050:	2000      	movs	r0, #0
 8002052:	4798      	blx	r3
 8002054:	b148      	cbz	r0, 800206a <cliAdc+0x26>
  {
    cliPrintf("adc init : %s\n", is_init ? "OK" : "NG");
 8002056:	4b08      	ldr	r3, [pc, #32]	@ (8002078 <cliAdc+0x34>)
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	b123      	cbz	r3, 8002066 <cliAdc+0x22>
 800205c:	4907      	ldr	r1, [pc, #28]	@ (800207c <cliAdc+0x38>)
 800205e:	4808      	ldr	r0, [pc, #32]	@ (8002080 <cliAdc+0x3c>)
 8002060:	f001 fc28 	bl	80038b4 <cliPrintf>
    ret = true;
  }

  if (ret != true)
 8002064:	e004      	b.n	8002070 <cliAdc+0x2c>
    cliPrintf("adc init : %s\n", is_init ? "OK" : "NG");
 8002066:	4907      	ldr	r1, [pc, #28]	@ (8002084 <cliAdc+0x40>)
 8002068:	e7f9      	b.n	800205e <cliAdc+0x1a>
  {
    cliPrintf("adc info\n");
 800206a:	4807      	ldr	r0, [pc, #28]	@ (8002088 <cliAdc+0x44>)
 800206c:	f001 fc22 	bl	80038b4 <cliPrintf>
  }
}
 8002070:	bd08      	pop	{r3, pc}
 8002072:	bf00      	nop
 8002074:	0800eb48 	.word	0x0800eb48
 8002078:	20001101 	.word	0x20001101
 800207c:	0800eb40 	.word	0x0800eb40
 8002080:	0800edfc 	.word	0x0800edfc
 8002084:	0800eb44 	.word	0x0800eb44
 8002088:	0800ee0c 	.word	0x0800ee0c

0800208c <adcInit>:
{
 800208c:	b538      	push	{r3, r4, r5, lr}
  is_init = true;
 800208e:	2401      	movs	r4, #1
 8002090:	4b09      	ldr	r3, [pc, #36]	@ (80020b8 <adcInit+0x2c>)
 8002092:	701c      	strb	r4, [r3, #0]
  HAL_TIM_Base_Start(&htim8); //ADC TIM8
 8002094:	4809      	ldr	r0, [pc, #36]	@ (80020bc <adcInit+0x30>)
 8002096:	f006 f80f 	bl	80080b8 <HAL_TIM_Base_Start>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800209a:	4d09      	ldr	r5, [pc, #36]	@ (80020c0 <adcInit+0x34>)
 800209c:	217f      	movs	r1, #127	@ 0x7f
 800209e:	4628      	mov	r0, r5
 80020a0:	f003 fd10 	bl	8005ac4 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_IT(&hadc1);
 80020a4:	4628      	mov	r0, r5
 80020a6:	f003 fbdf 	bl	8005868 <HAL_ADC_Start_IT>
 cliAdd("adc", cliAdc);
 80020aa:	4906      	ldr	r1, [pc, #24]	@ (80020c4 <adcInit+0x38>)
 80020ac:	4806      	ldr	r0, [pc, #24]	@ (80020c8 <adcInit+0x3c>)
 80020ae:	f001 fe23 	bl	8003cf8 <cliAdd>
}
 80020b2:	4620      	mov	r0, r4
 80020b4:	bd38      	pop	{r3, r4, r5, pc}
 80020b6:	bf00      	nop
 80020b8:	20001101 	.word	0x20001101
 80020bc:	20006748 	.word	0x20006748
 80020c0:	20005e04 	.word	0x20005e04
 80020c4:	08002045 	.word	0x08002045
 80020c8:	0800ee18 	.word	0x0800ee18

080020cc <cliDac>:
  
}

#ifdef _USE_HW_DAC
void cliDac(cli_args_t *args)
{
 80020cc:	b508      	push	{r3, lr}
  bool ret = false;

  if (args->argc == 1 && args->isStr(0, "info") == true)
 80020ce:	8803      	ldrh	r3, [r0, #0]
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d10e      	bne.n	80020f2 <cliDac+0x26>
 80020d4:	6943      	ldr	r3, [r0, #20]
 80020d6:	4909      	ldr	r1, [pc, #36]	@ (80020fc <cliDac+0x30>)
 80020d8:	2000      	movs	r0, #0
 80020da:	4798      	blx	r3
 80020dc:	b148      	cbz	r0, 80020f2 <cliDac+0x26>
  {
    cliPrintf("dac init : %s\n", is_init ? "OK" : "NG");
 80020de:	4b08      	ldr	r3, [pc, #32]	@ (8002100 <cliDac+0x34>)
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	b123      	cbz	r3, 80020ee <cliDac+0x22>
 80020e4:	4907      	ldr	r1, [pc, #28]	@ (8002104 <cliDac+0x38>)
 80020e6:	4808      	ldr	r0, [pc, #32]	@ (8002108 <cliDac+0x3c>)
 80020e8:	f001 fbe4 	bl	80038b4 <cliPrintf>
    ret = true;
  }

  if (ret != true)
 80020ec:	e004      	b.n	80020f8 <cliDac+0x2c>
    cliPrintf("dac init : %s\n", is_init ? "OK" : "NG");
 80020ee:	4907      	ldr	r1, [pc, #28]	@ (800210c <cliDac+0x40>)
 80020f0:	e7f9      	b.n	80020e6 <cliDac+0x1a>
  {
    cliPrintf("dac info\n");
 80020f2:	4807      	ldr	r0, [pc, #28]	@ (8002110 <cliDac+0x44>)
 80020f4:	f001 fbde 	bl	80038b4 <cliPrintf>
  }
}
 80020f8:	bd08      	pop	{r3, pc}
 80020fa:	bf00      	nop
 80020fc:	0800eb48 	.word	0x0800eb48
 8002100:	20001102 	.word	0x20001102
 8002104:	0800eb40 	.word	0x0800eb40
 8002108:	0800ee1c 	.word	0x0800ee1c
 800210c:	0800eb44 	.word	0x0800eb44
 8002110:	0800ee2c 	.word	0x0800ee2c

08002114 <dacInit>:
{
 8002114:	b510      	push	{r4, lr}
  is_init = true;
 8002116:	2401      	movs	r4, #1
 8002118:	4b07      	ldr	r3, [pc, #28]	@ (8002138 <dacInit+0x24>)
 800211a:	701c      	strb	r4, [r3, #0]
  HAL_DAC_Start(&hdac1, DAC1_CHANNEL_1);
 800211c:	2100      	movs	r1, #0
 800211e:	4807      	ldr	r0, [pc, #28]	@ (800213c <dacInit+0x28>)
 8002120:	f003 feb2 	bl	8005e88 <HAL_DAC_Start>
  HAL_DAC_Start(&hdac2, DAC1_CHANNEL_1);
 8002124:	2100      	movs	r1, #0
 8002126:	4806      	ldr	r0, [pc, #24]	@ (8002140 <dacInit+0x2c>)
 8002128:	f003 feae 	bl	8005e88 <HAL_DAC_Start>
  cliAdd("dac", cliDac);
 800212c:	4905      	ldr	r1, [pc, #20]	@ (8002144 <dacInit+0x30>)
 800212e:	4806      	ldr	r0, [pc, #24]	@ (8002148 <dacInit+0x34>)
 8002130:	f001 fde2 	bl	8003cf8 <cliAdd>
}
 8002134:	4620      	mov	r0, r4
 8002136:	bd10      	pop	{r4, pc}
 8002138:	20001102 	.word	0x20001102
 800213c:	20006574 	.word	0x20006574
 8002140:	20006560 	.word	0x20006560
 8002144:	080020cd 	.word	0x080020cd
 8002148:	0800ee38 	.word	0x0800ee38

0800214c <i2cInit>:




bool i2cInit(void)
{
 800214c:	b508      	push	{r3, lr}

#ifdef _USE_HW_RTOS
 mutex_lock = xSemaphoreCreateMutex();
#endif

 for (i=0; i<I2C_MAX_CH; i++)
 800214e:	2300      	movs	r3, #0
 8002150:	b133      	cbz	r3, 8002160 <i2cInit+0x14>
   i2c_timeout[i] = 10;
   i2c_errcount[i] = 0;
   is_begin[i] = false;
 }

 logPrintf("[OK] i2cInit()\n");
 8002152:	4809      	ldr	r0, [pc, #36]	@ (8002178 <i2cInit+0x2c>)
 8002154:	f002 f8b4 	bl	80042c0 <logPrintf>

#if CLI_USE(HW_I2C)
 cliAdd("i2c", cliI2C);
#endif

 is_init = true;
 8002158:	2001      	movs	r0, #1
 800215a:	4b08      	ldr	r3, [pc, #32]	@ (800217c <i2cInit+0x30>)
 800215c:	7018      	strb	r0, [r3, #0]
 return true;
}
 800215e:	bd08      	pop	{r3, pc}
   i2c_timeout[i] = 10;
 8002160:	4a07      	ldr	r2, [pc, #28]	@ (8002180 <i2cInit+0x34>)
 8002162:	210a      	movs	r1, #10
 8002164:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   i2c_errcount[i] = 0;
 8002168:	2200      	movs	r2, #0
 800216a:	4906      	ldr	r1, [pc, #24]	@ (8002184 <i2cInit+0x38>)
 800216c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   is_begin[i] = false;
 8002170:	4905      	ldr	r1, [pc, #20]	@ (8002188 <i2cInit+0x3c>)
 8002172:	54ca      	strb	r2, [r1, r3]
 for (i=0; i<I2C_MAX_CH; i++)
 8002174:	3301      	adds	r3, #1
 8002176:	e7eb      	b.n	8002150 <i2cInit+0x4>
 8002178:	0800ee3c 	.word	0x0800ee3c
 800217c:	20001105 	.word	0x20001105
 8002180:	2000110c 	.word	0x2000110c
 8002184:	20001108 	.word	0x20001108
 8002188:	20001104 	.word	0x20001104

0800218c <i2cBegin>:
}

bool i2cBegin(uint8_t ch, uint32_t freq_khz)
{
 return true;
}
 800218c:	2001      	movs	r0, #1
 800218e:	4770      	bx	lr

08002190 <i2cIsDeviceReady>:
 HAL_GPIO_WritePin(p_pin->sda_port, p_pin->sda_pin, _DEF_HIGH);
 unLock();
}

bool i2cIsDeviceReady(uint8_t ch, uint8_t dev_addr)
{
 8002190:	b510      	push	{r4, lr}
 bool ret = false;

 lock();
 if (HAL_I2C_IsDeviceReady(i2c_tbl[ch].p_i2c, dev_addr << 1, 10, 10) == HAL_OK)
 8002192:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002196:	230a      	movs	r3, #10
 8002198:	461a      	mov	r2, r3
 800219a:	0049      	lsls	r1, r1, #1
 800219c:	4c05      	ldr	r4, [pc, #20]	@ (80021b4 <i2cIsDeviceReady+0x24>)
 800219e:	f854 0030 	ldr.w	r0, [r4, r0, lsl #3]
 80021a2:	f004 fea8 	bl	8006ef6 <HAL_I2C_IsDeviceReady>
 80021a6:	b910      	cbnz	r0, 80021ae <i2cIsDeviceReady+0x1e>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80021a8:	b662      	cpsie	i
 {
   __enable_irq();
   ret = true;
 80021aa:	2001      	movs	r0, #1
 }
 unLock();

 return ret;
}
 80021ac:	bd10      	pop	{r4, pc}
 bool ret = false;
 80021ae:	2000      	movs	r0, #0
 80021b0:	e7fc      	b.n	80021ac <i2cIsDeviceReady+0x1c>
 80021b2:	bf00      	nop
 80021b4:	0800ee4c 	.word	0x0800ee4c

080021b8 <i2cWriteBytes>:
{
 #if 1
 bool ret;
 HAL_StatusTypeDef i2c_ret;

 if (ch >= I2C_MAX_CH)
 80021b8:	b108      	cbz	r0, 80021be <i2cWriteBytes+0x6>
 {
   return false;
 80021ba:	2000      	movs	r0, #0

 return ret;
 #else
 return false;
 #endif
}
 80021bc:	4770      	bx	lr
{
 80021be:	b500      	push	{lr}
 80021c0:	b085      	sub	sp, #20
 i2c_ret = HAL_I2C_Mem_Write(i2c_tbl[ch].p_i2c, (uint16_t)(dev_addr << 1), reg_addr, I2C_MEMADD_SIZE_8BIT, p_data, length, timeout);
 80021c2:	0049      	lsls	r1, r1, #1
 80021c4:	b289      	uxth	r1, r1
 80021c6:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
 80021ca:	9807      	ldr	r0, [sp, #28]
 80021cc:	9002      	str	r0, [sp, #8]
 80021ce:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 80021d2:	9001      	str	r0, [sp, #4]
 80021d4:	9300      	str	r3, [sp, #0]
 80021d6:	2301      	movs	r3, #1
 80021d8:	4805      	ldr	r0, [pc, #20]	@ (80021f0 <i2cWriteBytes+0x38>)
 80021da:	f850 003c 	ldr.w	r0, [r0, ip, lsl #3]
 80021de:	f004 fdb6 	bl	8006d4e <HAL_I2C_Mem_Write>
 if(i2c_ret == HAL_OK)
 80021e2:	b918      	cbnz	r0, 80021ec <i2cWriteBytes+0x34>
   ret = true;
 80021e4:	2001      	movs	r0, #1
}
 80021e6:	b005      	add	sp, #20
 80021e8:	f85d fb04 	ldr.w	pc, [sp], #4
   ret = false;
 80021ec:	2000      	movs	r0, #0
 80021ee:	e7fa      	b.n	80021e6 <i2cWriteBytes+0x2e>
 80021f0:	0800ee4c 	.word	0x0800ee4c

080021f4 <i2cWriteByte>:
{
 80021f4:	b500      	push	{lr}
 80021f6:	b085      	sub	sp, #20
 80021f8:	f88d 300f 	strb.w	r3, [sp, #15]
 return i2cWriteBytes(ch, dev_addr, reg_addr, &data, 1, timeout);
 80021fc:	9b06      	ldr	r3, [sp, #24]
 80021fe:	9301      	str	r3, [sp, #4]
 8002200:	2301      	movs	r3, #1
 8002202:	9300      	str	r3, [sp, #0]
 8002204:	f10d 030f 	add.w	r3, sp, #15
 8002208:	f7ff ffd6 	bl	80021b8 <i2cWriteBytes>
}
 800220c:	b005      	add	sp, #20
 800220e:	f85d fb04 	ldr.w	pc, [sp], #4

08002212 <I2C1_EV_IRQHandler>:


void I2C1_EV_IRQHandler(void)
{
 return;
}
 8002212:	4770      	bx	lr

08002214 <TransferDoneISR>:
#ifdef _USE_HW_CLI
static void cliLcd(cli_args_t *args);
#endif

void TransferDoneISR(void)
{
 8002214:	b538      	push	{r3, r4, r5, lr}
  fps_time = millis() - fps_pre_time;
 8002216:	f7ff fe9b 	bl	8001f50 <millis>
 800221a:	4d0e      	ldr	r5, [pc, #56]	@ (8002254 <TransferDoneISR+0x40>)
 800221c:	682b      	ldr	r3, [r5, #0]
 800221e:	1ac0      	subs	r0, r0, r3
 8002220:	4c0d      	ldr	r4, [pc, #52]	@ (8002258 <TransferDoneISR+0x44>)
 8002222:	6020      	str	r0, [r4, #0]
  fps_pre_time = millis();
 8002224:	f7ff fe94 	bl	8001f50 <millis>
 8002228:	6028      	str	r0, [r5, #0]
  draw_frame_time = millis() - draw_pre_time;
 800222a:	f7ff fe91 	bl	8001f50 <millis>
 800222e:	4b0b      	ldr	r3, [pc, #44]	@ (800225c <TransferDoneISR+0x48>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	1ac0      	subs	r0, r0, r3
 8002234:	4b0a      	ldr	r3, [pc, #40]	@ (8002260 <TransferDoneISR+0x4c>)
 8002236:	6018      	str	r0, [r3, #0]

  if (fps_time > 0)
 8002238:	6823      	ldr	r3, [r4, #0]
 800223a:	b133      	cbz	r3, 800224a <TransferDoneISR+0x36>
  {
    fps_count = 1000 / fps_time;
 800223c:	6822      	ldr	r2, [r4, #0]
 800223e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002242:	fbb3 f3f2 	udiv	r3, r3, r2
 8002246:	4a07      	ldr	r2, [pc, #28]	@ (8002264 <TransferDoneISR+0x50>)
 8002248:	6013      	str	r3, [r2, #0]
  }

  lcd_request_draw = false;
 800224a:	4b07      	ldr	r3, [pc, #28]	@ (8002268 <TransferDoneISR+0x54>)
 800224c:	2200      	movs	r2, #0
 800224e:	701a      	strb	r2, [r3, #0]
}
 8002250:	bd38      	pop	{r3, r4, r5, pc}
 8002252:	bf00      	nop
 8002254:	20005154 	.word	0x20005154
 8002258:	20005150 	.word	0x20005150
 800225c:	20005148 	.word	0x20005148
 8002260:	20005144 	.word	0x20005144
 8002264:	2000514c 	.word	0x2000514c
 8002268:	20005158 	.word	0x20005158

0800226c <lcdDrawPixel>:
  return p_draw_frame_buf[y_pos * LCD_WIDTH + x_pos];
}

LCD_OPT_DEF void lcdDrawPixel(int16_t x_pos, int16_t y_pos, uint32_t rgb_code)
{
  if (x_pos < 0 || x_pos >= LCD_WIDTH) return;
 800226c:	b283      	uxth	r3, r0
 800226e:	2b7f      	cmp	r3, #127	@ 0x7f
 8002270:	d808      	bhi.n	8002284 <lcdDrawPixel+0x18>
  if (y_pos < 0 || y_pos >= LCD_HEIGHT) return;
 8002272:	b28b      	uxth	r3, r1
 8002274:	2b3f      	cmp	r3, #63	@ 0x3f
 8002276:	d805      	bhi.n	8002284 <lcdDrawPixel+0x18>

  p_draw_frame_buf[y_pos * LCD_WIDTH + x_pos] = rgb_code;
 8002278:	4b03      	ldr	r3, [pc, #12]	@ (8002288 <lcdDrawPixel+0x1c>)
 800227a:	eb00 10c1 	add.w	r0, r0, r1, lsl #7
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
}
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	20005140 	.word	0x20005140

0800228c <disEngFont>:
     }
   }
 }

void disEngFont(int x, int y, char ch, lcd_font_t *font, uint16_t textcolor)
{
 800228c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002290:	4681      	mov	r9, r0
 8002292:	4688      	mov	r8, r1
 8002294:	4693      	mov	fp, r2
 8002296:	461d      	mov	r5, r3
 8002298:	f8bd a028 	ldrh.w	sl, [sp, #40]	@ 0x28
  uint32_t i, b, j;


  // We gaan door het font
  for (i = 0; i < font->height; i++)
 800229c:	2700      	movs	r7, #0
 800229e:	e013      	b.n	80022c8 <disEngFont+0x3c>
  {
    b = font->data[(ch - 32) * font->height + i];
    for (j = 0; j < font->width; j++)
 80022a0:	3401      	adds	r4, #1
 80022a2:	782b      	ldrb	r3, [r5, #0]
 80022a4:	42a3      	cmp	r3, r4
 80022a6:	d90e      	bls.n	80022c6 <disEngFont+0x3a>
    {
      if ((b << j) & 0x8000)
 80022a8:	fa06 f304 	lsl.w	r3, r6, r4
 80022ac:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 80022b0:	d0f6      	beq.n	80022a0 <disEngFont+0x14>
      {
        lcdDrawPixel(x + j, (y + i), textcolor);
 80022b2:	eb09 0004 	add.w	r0, r9, r4
 80022b6:	eb08 0107 	add.w	r1, r8, r7
 80022ba:	4652      	mov	r2, sl
 80022bc:	b209      	sxth	r1, r1
 80022be:	b200      	sxth	r0, r0
 80022c0:	f7ff ffd4 	bl	800226c <lcdDrawPixel>
 80022c4:	e7ec      	b.n	80022a0 <disEngFont+0x14>
  for (i = 0; i < font->height; i++)
 80022c6:	3701      	adds	r7, #1
 80022c8:	786a      	ldrb	r2, [r5, #1]
 80022ca:	42ba      	cmp	r2, r7
 80022cc:	d908      	bls.n	80022e0 <disEngFont+0x54>
    b = font->data[(ch - 32) * font->height + i];
 80022ce:	6869      	ldr	r1, [r5, #4]
 80022d0:	f1ab 0320 	sub.w	r3, fp, #32
 80022d4:	fb02 7303 	mla	r3, r2, r3, r7
 80022d8:	f831 6013 	ldrh.w	r6, [r1, r3, lsl #1]
    for (j = 0; j < font->width; j++)
 80022dc:	2400      	movs	r4, #0
 80022de:	e7e0      	b.n	80022a2 <disEngFont+0x16>
      }
    }
  }
}
 80022e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080022e4 <disHanFont>:
 {
 80022e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022e8:	b083      	sub	sp, #12
 80022ea:	4607      	mov	r7, r0
 80022ec:	4688      	mov	r8, r1
 80022ee:	9201      	str	r2, [sp, #4]
 80022f0:	4699      	mov	r9, r3
   uint16_t  FontSize = FontPtr->Size_Char;
 80022f2:	f8b2 c002 	ldrh.w	ip, [r2, #2]
   if (FontSize > 2)
 80022f6:	f1bc 0f02 	cmp.w	ip, #2
 80022fa:	d901      	bls.n	8002300 <disHanFont+0x1c>
     FontSize = 2;
 80022fc:	f04f 0c02 	mov.w	ip, #2
   for ( i = 0 ; i < 16 ; i++ )        // 16 Lines per Font/Char
 8002300:	f04f 0a00 	mov.w	sl, #0
 8002304:	46d3      	mov	fp, sl
 8002306:	e02a      	b.n	800235e <disHanFont+0x7a>
         index_x++;
 8002308:	3501      	adds	r5, #1
 800230a:	b2ad      	uxth	r5, r5
       for( Loop=0; Loop<8; Loop++ )
 800230c:	3401      	adds	r4, #1
 800230e:	b2a4      	uxth	r4, r4
 8002310:	2c07      	cmp	r4, #7
 8002312:	d80d      	bhi.n	8002330 <disHanFont+0x4c>
         if( (font_data<<Loop) & (0x80))
 8002314:	fa06 f304 	lsl.w	r3, r6, r4
 8002318:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800231c:	d0f4      	beq.n	8002308 <disHanFont+0x24>
           lcdDrawPixel(x + index_x, y + i, textcolor);
 800231e:	19e8      	adds	r0, r5, r7
 8002320:	eb0b 0108 	add.w	r1, fp, r8
 8002324:	464a      	mov	r2, r9
 8002326:	b209      	sxth	r1, r1
 8002328:	b200      	sxth	r0, r0
 800232a:	f7ff ff9f 	bl	800226c <lcdDrawPixel>
 800232e:	e7eb      	b.n	8002308 <disHanFont+0x24>
     for ( j = 0 ; j < FontSize ; j++ )      // 16 x 16 (2 Bytes)
 8002330:	46d4      	mov	ip, sl
 8002332:	f8dd a000 	ldr.w	sl, [sp]
 8002336:	f10a 0201 	add.w	r2, sl, #1
 800233a:	fa1f fa82 	uxth.w	sl, r2
 800233e:	45e2      	cmp	sl, ip
 8002340:	d209      	bcs.n	8002356 <disHanFont+0x72>
       font_data = FontPtr->FontBuffer[i*FontSize +j];
 8002342:	fb0c a30b 	mla	r3, ip, fp, sl
 8002346:	9a01      	ldr	r2, [sp, #4]
 8002348:	4413      	add	r3, r2
 800234a:	799e      	ldrb	r6, [r3, #6]
       for( Loop=0; Loop<8; Loop++ )
 800234c:	2400      	movs	r4, #0
 800234e:	f8cd a000 	str.w	sl, [sp]
 8002352:	46e2      	mov	sl, ip
 8002354:	e7dc      	b.n	8002310 <disHanFont+0x2c>
   for ( i = 0 ; i < 16 ; i++ )        // 16 Lines per Font/Char
 8002356:	f10b 0201 	add.w	r2, fp, #1
 800235a:	fa1f fb82 	uxth.w	fp, r2
 800235e:	f1bb 0f0f 	cmp.w	fp, #15
 8002362:	d802      	bhi.n	800236a <disHanFont+0x86>
     index_x = 0;
 8002364:	2500      	movs	r5, #0
     for ( j = 0 ; j < FontSize ; j++ )      // 16 x 16 (2 Bytes)
 8002366:	46aa      	mov	sl, r5
 8002368:	e7e9      	b.n	800233e <disHanFont+0x5a>
 }
 800236a:	b003      	add	sp, #12
 800236c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002370 <lcdGetFps>:
  return fps_count;
 8002370:	4b01      	ldr	r3, [pc, #4]	@ (8002378 <lcdGetFps+0x8>)
 8002372:	6818      	ldr	r0, [r3, #0]
}
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	2000514c 	.word	0x2000514c

0800237c <lcdDrawAvailable>:
{
 800237c:	b510      	push	{r4, lr}
  if (draw_fps > 0)
 800237e:	4b11      	ldr	r3, [pc, #68]	@ (80023c4 <lcdDrawAvailable+0x48>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2b00      	cmp	r3, #0
 8002384:	dd17      	ble.n	80023b6 <lcdDrawAvailable+0x3a>
    if (!lcd_request_draw && millis()-draw_pre_time >= (1000/draw_fps))
 8002386:	4b10      	ldr	r3, [pc, #64]	@ (80023c8 <lcdDrawAvailable+0x4c>)
 8002388:	781c      	ldrb	r4, [r3, #0]
 800238a:	b10c      	cbz	r4, 8002390 <lcdDrawAvailable+0x14>
  bool ret = false;
 800238c:	2400      	movs	r4, #0
 800238e:	e016      	b.n	80023be <lcdDrawAvailable+0x42>
    if (!lcd_request_draw && millis()-draw_pre_time >= (1000/draw_fps))
 8002390:	f7ff fdde 	bl	8001f50 <millis>
 8002394:	4b0d      	ldr	r3, [pc, #52]	@ (80023cc <lcdDrawAvailable+0x50>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	1ac0      	subs	r0, r0, r3
 800239a:	4b0a      	ldr	r3, [pc, #40]	@ (80023c4 <lcdDrawAvailable+0x48>)
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023a2:	fb93 f3f2 	sdiv	r3, r3, r2
 80023a6:	4298      	cmp	r0, r3
 80023a8:	d309      	bcc.n	80023be <lcdDrawAvailable+0x42>
      draw_pre_time = millis();
 80023aa:	f7ff fdd1 	bl	8001f50 <millis>
 80023ae:	4b07      	ldr	r3, [pc, #28]	@ (80023cc <lcdDrawAvailable+0x50>)
 80023b0:	6018      	str	r0, [r3, #0]
      ret = true;
 80023b2:	2401      	movs	r4, #1
 80023b4:	e003      	b.n	80023be <lcdDrawAvailable+0x42>
    ret = !lcd_request_draw;
 80023b6:	4b04      	ldr	r3, [pc, #16]	@ (80023c8 <lcdDrawAvailable+0x4c>)
 80023b8:	781c      	ldrb	r4, [r3, #0]
 80023ba:	f084 0401 	eor.w	r4, r4, #1
}
 80023be:	4620      	mov	r0, r4
 80023c0:	bd10      	pop	{r4, pc}
 80023c2:	bf00      	nop
 80023c4:	20000024 	.word	0x20000024
 80023c8:	20005158 	.word	0x20005158
 80023cc:	20005148 	.word	0x20005148

080023d0 <lcdRequestDraw>:
{
 80023d0:	b570      	push	{r4, r5, r6, lr}
  if (is_init != true)
 80023d2:	4b0d      	ldr	r3, [pc, #52]	@ (8002408 <lcdRequestDraw+0x38>)
 80023d4:	781c      	ldrb	r4, [r3, #0]
 80023d6:	b194      	cbz	r4, 80023fe <lcdRequestDraw+0x2e>
  if (lcd_request_draw == true)
 80023d8:	4b0c      	ldr	r3, [pc, #48]	@ (800240c <lcdRequestDraw+0x3c>)
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	b98b      	cbnz	r3, 8002402 <lcdRequestDraw+0x32>
  lcd.setWindow(0, 0, LCD_WIDTH-1, LCD_HEIGHT-1);
 80023de:	4d0c      	ldr	r5, [pc, #48]	@ (8002410 <lcdRequestDraw+0x40>)
 80023e0:	233f      	movs	r3, #63	@ 0x3f
 80023e2:	227f      	movs	r2, #127	@ 0x7f
 80023e4:	2100      	movs	r1, #0
 80023e6:	4608      	mov	r0, r1
 80023e8:	68ae      	ldr	r6, [r5, #8]
 80023ea:	47b0      	blx	r6
  lcd_request_draw = true;
 80023ec:	4b07      	ldr	r3, [pc, #28]	@ (800240c <lcdRequestDraw+0x3c>)
 80023ee:	2201      	movs	r2, #1
 80023f0:	701a      	strb	r2, [r3, #0]
  lcd.sendBuffer((uint8_t *)frame_buffer[frame_index], LCD_WIDTH * LCD_HEIGHT, 0);
 80023f2:	69eb      	ldr	r3, [r5, #28]
 80023f4:	2200      	movs	r2, #0
 80023f6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80023fa:	4806      	ldr	r0, [pc, #24]	@ (8002414 <lcdRequestDraw+0x44>)
 80023fc:	4798      	blx	r3
}
 80023fe:	4620      	mov	r0, r4
 8002400:	bd70      	pop	{r4, r5, r6, pc}
    return false;
 8002402:	2400      	movs	r4, #0
 8002404:	e7fb      	b.n	80023fe <lcdRequestDraw+0x2e>
 8002406:	bf00      	nop
 8002408:	2000515a 	.word	0x2000515a
 800240c:	20005158 	.word	0x20005158
 8002410:	2000515c 	.word	0x2000515c
 8002414:	20001140 	.word	0x20001140

08002418 <lcdUpdateDraw>:
  if (is_init != true)
 8002418:	4b0a      	ldr	r3, [pc, #40]	@ (8002444 <lcdUpdateDraw+0x2c>)
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	b903      	cbnz	r3, 8002420 <lcdUpdateDraw+0x8>
 800241e:	4770      	bx	lr
{
 8002420:	b510      	push	{r4, lr}
  lcdRequestDraw();
 8002422:	f7ff ffd5 	bl	80023d0 <lcdRequestDraw>
  pre_time = millis();
 8002426:	f7ff fd93 	bl	8001f50 <millis>
 800242a:	4604      	mov	r4, r0
  while(lcdDrawAvailable() != true)
 800242c:	f7ff ffa6 	bl	800237c <lcdDrawAvailable>
 8002430:	b938      	cbnz	r0, 8002442 <lcdUpdateDraw+0x2a>
    delay(1);
 8002432:	2001      	movs	r0, #1
 8002434:	f7ff fd88 	bl	8001f48 <delay>
    if (millis()-pre_time >= 100)
 8002438:	f7ff fd8a 	bl	8001f50 <millis>
 800243c:	1b00      	subs	r0, r0, r4
 800243e:	2863      	cmp	r0, #99	@ 0x63
 8002440:	d9f4      	bls.n	800242c <lcdUpdateDraw+0x14>
}
 8002442:	bd10      	pop	{r4, pc}
 8002444:	2000515a 	.word	0x2000515a

08002448 <lcdGetFrameBuffer>:
}
 8002448:	4b01      	ldr	r3, [pc, #4]	@ (8002450 <lcdGetFrameBuffer+0x8>)
 800244a:	6818      	ldr	r0, [r3, #0]
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	20005140 	.word	0x20005140

08002454 <lcdClearBuffer>:
{
 8002454:	b510      	push	{r4, lr}
 8002456:	4604      	mov	r4, r0
  uint16_t *p_buf = lcdGetFrameBuffer();
 8002458:	f7ff fff6 	bl	8002448 <lcdGetFrameBuffer>
  for (int i=0; i<LCD_WIDTH * LCD_HEIGHT; i++)
 800245c:	2300      	movs	r3, #0
    p_buf[i] = rgb_code;
 800245e:	b2a1      	uxth	r1, r4
 8002460:	461a      	mov	r2, r3
 8002462:	f361 020f 	bfi	r2, r1, #0, #16
 8002466:	f361 030f 	bfi	r3, r1, #0, #16
 800246a:	f361 431f 	bfi	r3, r1, #16, #16
 800246e:	f361 421f 	bfi	r2, r1, #16, #16
 8002472:	f500 4180 	add.w	r1, r0, #16384	@ 0x4000
 8002476:	6003      	str	r3, [r0, #0]
 8002478:	6042      	str	r2, [r0, #4]
  for (int i=0; i<LCD_WIDTH * LCD_HEIGHT; i++)
 800247a:	3008      	adds	r0, #8
 800247c:	4281      	cmp	r1, r0
 800247e:	d1fa      	bne.n	8002476 <lcdClearBuffer+0x22>
}
 8002480:	bd10      	pop	{r4, pc}
 8002482:	bf00      	nop

08002484 <lcdDrawLine>:
{
 8002484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002488:	b083      	sub	sp, #12
 800248a:	468b      	mov	fp, r1
 800248c:	4616      	mov	r6, r2
 800248e:	461c      	mov	r4, r3
 8002490:	f8bd 8030 	ldrh.w	r8, [sp, #48]	@ 0x30
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 8002494:	1a5a      	subs	r2, r3, r1
 8002496:	ea82 79e2 	eor.w	r9, r2, r2, asr #31
 800249a:	eba9 79e2 	sub.w	r9, r9, r2, asr #31
 800249e:	1a31      	subs	r1, r6, r0
 80024a0:	ea81 7ae1 	eor.w	sl, r1, r1, asr #31
 80024a4:	ebaa 7ae1 	sub.w	sl, sl, r1, asr #31
  if (x0 < 0) x0 = 0;
 80024a8:	2800      	cmp	r0, #0
 80024aa:	db29      	blt.n	8002500 <lcdDrawLine+0x7c>
  if (y0 < 0) y0 = 0;
 80024ac:	f1bb 0f00 	cmp.w	fp, #0
 80024b0:	db28      	blt.n	8002504 <lcdDrawLine+0x80>
  if (x1 < 0) x1 = 0;
 80024b2:	2e00      	cmp	r6, #0
 80024b4:	db29      	blt.n	800250a <lcdDrawLine+0x86>
  if (y1 < 0) y1 = 0;
 80024b6:	2c00      	cmp	r4, #0
 80024b8:	db29      	blt.n	800250e <lcdDrawLine+0x8a>
  if (steep)
 80024ba:	45d1      	cmp	r9, sl
 80024bc:	dc05      	bgt.n	80024ca <lcdDrawLine+0x46>
 80024be:	4623      	mov	r3, r4
 80024c0:	4634      	mov	r4, r6
 80024c2:	461e      	mov	r6, r3
 80024c4:	465b      	mov	r3, fp
 80024c6:	4683      	mov	fp, r0
 80024c8:	4618      	mov	r0, r3
  if (x0 > x1)
 80024ca:	45a3      	cmp	fp, r4
 80024cc:	dc05      	bgt.n	80024da <lcdDrawLine+0x56>
 80024ce:	4633      	mov	r3, r6
 80024d0:	4606      	mov	r6, r0
 80024d2:	4618      	mov	r0, r3
 80024d4:	4623      	mov	r3, r4
 80024d6:	465c      	mov	r4, fp
 80024d8:	469b      	mov	fp, r3
  dx = x1 - x0;
 80024da:	ebab 0504 	sub.w	r5, fp, r4
 80024de:	b2ab      	uxth	r3, r5
 80024e0:	9300      	str	r3, [sp, #0]
  dy = abs(y1 - y0);
 80024e2:	1b87      	subs	r7, r0, r6
 80024e4:	2f00      	cmp	r7, #0
 80024e6:	bfb8      	it	lt
 80024e8:	427f      	neglt	r7, r7
  int16_t err = dx / 2;
 80024ea:	f3c5 33c0 	ubfx	r3, r5, #15, #1
 80024ee:	fa03 f585 	sxtah	r5, r3, r5
 80024f2:	106d      	asrs	r5, r5, #1
  if (y0 < y1)
 80024f4:	4286      	cmp	r6, r0
 80024f6:	db29      	blt.n	800254c <lcdDrawLine+0xc8>
    ystep = -1;
 80024f8:	f04f 33ff 	mov.w	r3, #4294967295
 80024fc:	9301      	str	r3, [sp, #4]
 80024fe:	e014      	b.n	800252a <lcdDrawLine+0xa6>
  if (x0 < 0) x0 = 0;
 8002500:	2000      	movs	r0, #0
 8002502:	e7d3      	b.n	80024ac <lcdDrawLine+0x28>
  if (y0 < 0) y0 = 0;
 8002504:	f04f 0b00 	mov.w	fp, #0
 8002508:	e7d3      	b.n	80024b2 <lcdDrawLine+0x2e>
  if (x1 < 0) x1 = 0;
 800250a:	2600      	movs	r6, #0
 800250c:	e7d3      	b.n	80024b6 <lcdDrawLine+0x32>
  if (y1 < 0) y1 = 0;
 800250e:	2400      	movs	r4, #0
 8002510:	e7d3      	b.n	80024ba <lcdDrawLine+0x36>
      lcdDrawPixel(x0, y0, color);
 8002512:	4642      	mov	r2, r8
 8002514:	4631      	mov	r1, r6
 8002516:	4620      	mov	r0, r4
 8002518:	f7ff fea8 	bl	800226c <lcdDrawPixel>
    err -= dy;
 800251c:	1bed      	subs	r5, r5, r7
 800251e:	b2ab      	uxth	r3, r5
 8002520:	b22d      	sxth	r5, r5
    if (err < 0)
 8002522:	2d00      	cmp	r5, #0
 8002524:	db0b      	blt.n	800253e <lcdDrawLine+0xba>
  for (; x0<=x1; x0++)
 8002526:	3401      	adds	r4, #1
 8002528:	b224      	sxth	r4, r4
 800252a:	455c      	cmp	r4, fp
 800252c:	dc11      	bgt.n	8002552 <lcdDrawLine+0xce>
    if (steep)
 800252e:	45d1      	cmp	r9, sl
 8002530:	ddef      	ble.n	8002512 <lcdDrawLine+0x8e>
      lcdDrawPixel(y0, x0, color);
 8002532:	4642      	mov	r2, r8
 8002534:	4621      	mov	r1, r4
 8002536:	4630      	mov	r0, r6
 8002538:	f7ff fe98 	bl	800226c <lcdDrawPixel>
 800253c:	e7ee      	b.n	800251c <lcdDrawLine+0x98>
      y0 += ystep;
 800253e:	9a01      	ldr	r2, [sp, #4]
 8002540:	4416      	add	r6, r2
 8002542:	b236      	sxth	r6, r6
      err += dx;
 8002544:	9a00      	ldr	r2, [sp, #0]
 8002546:	4413      	add	r3, r2
 8002548:	b21d      	sxth	r5, r3
 800254a:	e7ec      	b.n	8002526 <lcdDrawLine+0xa2>
    ystep = 1;
 800254c:	2301      	movs	r3, #1
 800254e:	9301      	str	r3, [sp, #4]
 8002550:	e7eb      	b.n	800252a <lcdDrawLine+0xa6>
}
 8002552:	b003      	add	sp, #12
 8002554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002558 <lcdDrawVLine>:
{
 8002558:	b500      	push	{lr}
 800255a:	b083      	sub	sp, #12
  lcdDrawLine(x, y, x, y+h-1, color);
 800255c:	440a      	add	r2, r1
 800255e:	b292      	uxth	r2, r2
 8002560:	3a01      	subs	r2, #1
 8002562:	9300      	str	r3, [sp, #0]
 8002564:	b213      	sxth	r3, r2
 8002566:	4602      	mov	r2, r0
 8002568:	f7ff ff8c 	bl	8002484 <lcdDrawLine>
}
 800256c:	b003      	add	sp, #12
 800256e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002572:	bf00      	nop

08002574 <lcdDrawHLine>:
{
 8002574:	b500      	push	{lr}
 8002576:	b083      	sub	sp, #12
  lcdDrawLine(x, y, x+w-1, y, color);
 8002578:	4402      	add	r2, r0
 800257a:	b292      	uxth	r2, r2
 800257c:	3a01      	subs	r2, #1
 800257e:	9300      	str	r3, [sp, #0]
 8002580:	460b      	mov	r3, r1
 8002582:	b212      	sxth	r2, r2
 8002584:	f7ff ff7e 	bl	8002484 <lcdDrawLine>
}
 8002588:	b003      	add	sp, #12
 800258a:	f85d fb04 	ldr.w	pc, [sp], #4
 800258e:	bf00      	nop

08002590 <lcdDrawFillRect>:
{
 8002590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002594:	4605      	mov	r5, r0
 8002596:	4688      	mov	r8, r1
 8002598:	4616      	mov	r6, r2
 800259a:	461f      	mov	r7, r3
 800259c:	f8bd 9020 	ldrh.w	r9, [sp, #32]
  for (int16_t i=x; i<x+w; i++)
 80025a0:	4604      	mov	r4, r0
 80025a2:	e007      	b.n	80025b4 <lcdDrawFillRect+0x24>
    lcdDrawVLine(i, y, h, color);
 80025a4:	464b      	mov	r3, r9
 80025a6:	463a      	mov	r2, r7
 80025a8:	4641      	mov	r1, r8
 80025aa:	4620      	mov	r0, r4
 80025ac:	f7ff ffd4 	bl	8002558 <lcdDrawVLine>
  for (int16_t i=x; i<x+w; i++)
 80025b0:	3401      	adds	r4, #1
 80025b2:	b224      	sxth	r4, r4
 80025b4:	eb05 0c06 	add.w	ip, r5, r6
 80025b8:	4564      	cmp	r4, ip
 80025ba:	dbf3      	blt.n	80025a4 <lcdDrawFillRect+0x14>
}
 80025bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080025c0 <lcdInit>:
{
 80025c0:	b510      	push	{r4, lr}
 80025c2:	b082      	sub	sp, #8
  backlight_value = 100;
 80025c4:	4b20      	ldr	r3, [pc, #128]	@ (8002648 <lcdInit+0x88>)
 80025c6:	2264      	movs	r2, #100	@ 0x64
 80025c8:	701a      	strb	r2, [r3, #0]
  is_init = ssd1306Init();
 80025ca:	f000 fe78 	bl	80032be <ssd1306Init>
 80025ce:	4b1f      	ldr	r3, [pc, #124]	@ (800264c <lcdInit+0x8c>)
 80025d0:	7018      	strb	r0, [r3, #0]
  ssd1306InitDriver(&lcd);
 80025d2:	4c1f      	ldr	r4, [pc, #124]	@ (8002650 <lcdInit+0x90>)
 80025d4:	4620      	mov	r0, r4
 80025d6:	f000 fd8f 	bl	80030f8 <ssd1306InitDriver>
  lcd.setCallBack(TransferDoneISR);
 80025da:	69a3      	ldr	r3, [r4, #24]
 80025dc:	481d      	ldr	r0, [pc, #116]	@ (8002654 <lcdInit+0x94>)
 80025de:	4798      	blx	r3
  for (int i=0; i<LCD_WIDTH*LCD_HEIGHT; i++)
 80025e0:	2300      	movs	r3, #0
 80025e2:	e004      	b.n	80025ee <lcdInit+0x2e>
    frame_buffer[0][i] = black;
 80025e4:	4a1c      	ldr	r2, [pc, #112]	@ (8002658 <lcdInit+0x98>)
 80025e6:	2100      	movs	r1, #0
 80025e8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (int i=0; i<LCD_WIDTH*LCD_HEIGHT; i++)
 80025ec:	3301      	adds	r3, #1
 80025ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80025f2:	dbf7      	blt.n	80025e4 <lcdInit+0x24>
  memset(frame_buffer, 0x00, sizeof(frame_buffer));
 80025f4:	4c18      	ldr	r4, [pc, #96]	@ (8002658 <lcdInit+0x98>)
 80025f6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80025fa:	2100      	movs	r1, #0
 80025fc:	4620      	mov	r0, r4
 80025fe:	f008 ff45 	bl	800b48c <memset>
  p_draw_frame_buf = frame_buffer[frame_index];
 8002602:	4b16      	ldr	r3, [pc, #88]	@ (800265c <lcdInit+0x9c>)
 8002604:	601c      	str	r4, [r3, #0]
  if (is_init)
 8002606:	4b11      	ldr	r3, [pc, #68]	@ (800264c <lcdInit+0x8c>)
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	b963      	cbnz	r3, 8002626 <lcdInit+0x66>
  logPrintf("[%s] lcdInit()\n", is_init ? "OK":"NG");
 800260c:	4b0f      	ldr	r3, [pc, #60]	@ (800264c <lcdInit+0x8c>)
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	b19b      	cbz	r3, 800263a <lcdInit+0x7a>
 8002612:	4913      	ldr	r1, [pc, #76]	@ (8002660 <lcdInit+0xa0>)
 8002614:	4813      	ldr	r0, [pc, #76]	@ (8002664 <lcdInit+0xa4>)
 8002616:	f001 fe53 	bl	80042c0 <logPrintf>
  if (is_init != true)
 800261a:	4b0c      	ldr	r3, [pc, #48]	@ (800264c <lcdInit+0x8c>)
 800261c:	781c      	ldrb	r4, [r3, #0]
 800261e:	b974      	cbnz	r4, 800263e <lcdInit+0x7e>
}
 8002620:	4620      	mov	r0, r4
 8002622:	b002      	add	sp, #8
 8002624:	bd10      	pop	{r4, pc}
    lcdDrawFillRect(0, 0, LCD_WIDTH, LCD_HEIGHT, black);
 8002626:	2000      	movs	r0, #0
 8002628:	9000      	str	r0, [sp, #0]
 800262a:	2340      	movs	r3, #64	@ 0x40
 800262c:	2280      	movs	r2, #128	@ 0x80
 800262e:	4601      	mov	r1, r0
 8002630:	f7ff ffae 	bl	8002590 <lcdDrawFillRect>
    lcdUpdateDraw();
 8002634:	f7ff fef0 	bl	8002418 <lcdUpdateDraw>
 8002638:	e7e8      	b.n	800260c <lcdInit+0x4c>
  logPrintf("[%s] lcdInit()\n", is_init ? "OK":"NG");
 800263a:	490b      	ldr	r1, [pc, #44]	@ (8002668 <lcdInit+0xa8>)
 800263c:	e7ea      	b.n	8002614 <lcdInit+0x54>
  cliAdd("lcd", cliLcd);
 800263e:	490b      	ldr	r1, [pc, #44]	@ (800266c <lcdInit+0xac>)
 8002640:	480b      	ldr	r0, [pc, #44]	@ (8002670 <lcdInit+0xb0>)
 8002642:	f001 fb59 	bl	8003cf8 <cliAdd>
  return true;
 8002646:	e7eb      	b.n	8002620 <lcdInit+0x60>
 8002648:	20000028 	.word	0x20000028
 800264c:	2000515a 	.word	0x2000515a
 8002650:	2000515c 	.word	0x2000515c
 8002654:	08002215 	.word	0x08002215
 8002658:	20001140 	.word	0x20001140
 800265c:	20005140 	.word	0x20005140
 8002660:	0800eb40 	.word	0x0800eb40
 8002664:	0800ee64 	.word	0x0800ee64
 8002668:	0800eb44 	.word	0x0800eb44
 800266c:	080027a1 	.word	0x080027a1
 8002670:	0800ee74 	.word	0x0800ee74

08002674 <lcdDrawRect>:
{
 8002674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002678:	4604      	mov	r4, r0
 800267a:	460d      	mov	r5, r1
 800267c:	4690      	mov	r8, r2
 800267e:	461e      	mov	r6, r3
 8002680:	f8bd 7018 	ldrh.w	r7, [sp, #24]
  lcdDrawHLine(x, y, w, color);
 8002684:	463b      	mov	r3, r7
 8002686:	f7ff ff75 	bl	8002574 <lcdDrawHLine>
  lcdDrawHLine(x, y+h-1, w, color);
 800268a:	19a9      	adds	r1, r5, r6
 800268c:	b289      	uxth	r1, r1
 800268e:	3901      	subs	r1, #1
 8002690:	463b      	mov	r3, r7
 8002692:	4642      	mov	r2, r8
 8002694:	b209      	sxth	r1, r1
 8002696:	4620      	mov	r0, r4
 8002698:	f7ff ff6c 	bl	8002574 <lcdDrawHLine>
  lcdDrawVLine(x, y, h, color);
 800269c:	463b      	mov	r3, r7
 800269e:	4632      	mov	r2, r6
 80026a0:	4629      	mov	r1, r5
 80026a2:	4620      	mov	r0, r4
 80026a4:	f7ff ff58 	bl	8002558 <lcdDrawVLine>
  lcdDrawVLine(x+w-1, y, h, color);
 80026a8:	eb04 0008 	add.w	r0, r4, r8
 80026ac:	b280      	uxth	r0, r0
 80026ae:	3801      	subs	r0, #1
 80026b0:	463b      	mov	r3, r7
 80026b2:	4632      	mov	r2, r6
 80026b4:	4629      	mov	r1, r5
 80026b6:	b200      	sxth	r0, r0
 80026b8:	f7ff ff4e 	bl	8002558 <lcdDrawVLine>
}
 80026bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080026c0 <lcdPrintf>:
 {
 80026c0:	b408      	push	{r3}
 80026c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026c6:	b0ce      	sub	sp, #312	@ 0x138
 80026c8:	4681      	mov	r9, r0
 80026ca:	460e      	mov	r6, r1
 80026cc:	4690      	mov	r8, r2
 80026ce:	ab57      	add	r3, sp, #348	@ 0x15c
 80026d0:	f853 2b04 	ldr.w	r2, [r3], #4
   va_start (arg, fmt);
 80026d4:	934d      	str	r3, [sp, #308]	@ 0x134
   len = vsnprintf(print_buffer, 255, fmt, arg);
 80026d6:	21ff      	movs	r1, #255	@ 0xff
 80026d8:	a80d      	add	r0, sp, #52	@ 0x34
 80026da:	f008 fec9 	bl	800b470 <vsniprintf>
 80026de:	4607      	mov	r7, r0
   if (font_tbl[lcd_font]->data != NULL)
 80026e0:	4b2a      	ldr	r3, [pc, #168]	@ (800278c <lcdPrintf+0xcc>)
 80026e2:	781a      	ldrb	r2, [r3, #0]
 80026e4:	4b2a      	ldr	r3, [pc, #168]	@ (8002790 <lcdPrintf+0xd0>)
 80026e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	b113      	cbz	r3, 80026f4 <lcdPrintf+0x34>
 80026ee:	464c      	mov	r4, r9
     for( i=0; i<len; i+=Size_Char )
 80026f0:	2500      	movs	r5, #0
 80026f2:	e003      	b.n	80026fc <lcdPrintf+0x3c>
 80026f4:	464c      	mov	r4, r9
    for (i = 0; i < len; i += Size_Char)
 80026f6:	2500      	movs	r5, #0
 80026f8:	e029      	b.n	800274e <lcdPrintf+0x8e>
     for( i=0; i<len; i+=Size_Char )
 80026fa:	3501      	adds	r5, #1
 80026fc:	42bd      	cmp	r5, r7
 80026fe:	da3f      	bge.n	8002780 <lcdPrintf+0xc0>
       disEngFont(x, y, print_buffer[i], font_tbl[lcd_font], color);
 8002700:	f8df a08c 	ldr.w	sl, [pc, #140]	@ 8002790 <lcdPrintf+0xd0>
 8002704:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800278c <lcdPrintf+0xcc>
 8002708:	f89b 3000 	ldrb.w	r3, [fp]
 800270c:	f8cd 8000 	str.w	r8, [sp]
 8002710:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
 8002714:	aa0d      	add	r2, sp, #52	@ 0x34
 8002716:	5d52      	ldrb	r2, [r2, r5]
 8002718:	4631      	mov	r1, r6
 800271a:	4620      	mov	r0, r4
 800271c:	f7ff fdb6 	bl	800228c <disEngFont>
       font_width = font_tbl[lcd_font]->width;
 8002720:	f89b 3000 	ldrb.w	r3, [fp]
 8002724:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
 8002728:	f893 c000 	ldrb.w	ip, [r3]
       font_height = font_tbl[lcd_font]->height;
 800272c:	785b      	ldrb	r3, [r3, #1]
       x += font_width;
 800272e:	4464      	add	r4, ip
       if ((x+font_width) > HW_LCD_WIDTH)
 8002730:	44a4      	add	ip, r4
 8002732:	f1bc 0f80 	cmp.w	ip, #128	@ 0x80
 8002736:	dde0      	ble.n	80026fa <lcdPrintf+0x3a>
         y += font_height;
 8002738:	441e      	add	r6, r3
         x  = x_Pre;
 800273a:	464c      	mov	r4, r9
 800273c:	e7dd      	b.n	80026fa <lcdPrintf+0x3a>
        x += 1 * 8;
 800273e:	3408      	adds	r4, #8
        font_width = 8;
 8002740:	2308      	movs	r3, #8
 8002742:	e017      	b.n	8002774 <lcdPrintf+0xb4>
      if (FontBuf.Code_Type == PHAN_END_CODE)
 8002744:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8002748:	2b04      	cmp	r3, #4
 800274a:	d019      	beq.n	8002780 <lcdPrintf+0xc0>
    for (i = 0; i < len; i += Size_Char)
 800274c:	4415      	add	r5, r2
 800274e:	42bd      	cmp	r5, r7
 8002750:	da16      	bge.n	8002780 <lcdPrintf+0xc0>
      hanFontLoad (&print_buffer[i], &FontBuf);
 8002752:	a903      	add	r1, sp, #12
 8002754:	ab0d      	add	r3, sp, #52	@ 0x34
 8002756:	1958      	adds	r0, r3, r5
 8002758:	f000 fc4a 	bl	8002ff0 <hanFontLoad>
      disHanFont (x, y, &FontBuf, color);
 800275c:	4643      	mov	r3, r8
 800275e:	aa03      	add	r2, sp, #12
 8002760:	4631      	mov	r1, r6
 8002762:	4620      	mov	r0, r4
 8002764:	f7ff fdbe 	bl	80022e4 <disHanFont>
      Size_Char = FontBuf.Size_Char;
 8002768:	f8bd 200e 	ldrh.w	r2, [sp, #14]
      if (Size_Char >= 2)
 800276c:	2a01      	cmp	r2, #1
 800276e:	dde6      	ble.n	800273e <lcdPrintf+0x7e>
        x += 2 * 8;
 8002770:	3410      	adds	r4, #16
        font_width = 16;
 8002772:	2310      	movs	r3, #16
      if ((x + font_width) > HW_LCD_WIDTH)
 8002774:	4423      	add	r3, r4
 8002776:	2b80      	cmp	r3, #128	@ 0x80
 8002778:	dde4      	ble.n	8002744 <lcdPrintf+0x84>
        y += 16;
 800277a:	3610      	adds	r6, #16
        x = x_Pre;
 800277c:	464c      	mov	r4, r9
 800277e:	e7e1      	b.n	8002744 <lcdPrintf+0x84>
}
 8002780:	b04e      	add	sp, #312	@ 0x138
 8002782:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002786:	b001      	add	sp, #4
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	20005159 	.word	0x20005159
 8002790:	0800eea4 	.word	0x0800eea4

08002794 <lcdSetFont>:

void lcdSetFont(LcdFont font)
{
  lcd_font = font;
 8002794:	4b01      	ldr	r3, [pc, #4]	@ (800279c <lcdSetFont+0x8>)
 8002796:	7018      	strb	r0, [r3, #0]
}
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	20005159 	.word	0x20005159

080027a0 <cliLcd>:
  return lcd_font;
}

#ifdef _USE_HW_CLI
void cliLcd(cli_args_t *args)
{
 80027a0:	b500      	push	{lr}
 80027a2:	b083      	sub	sp, #12
  bool ret = false;


  if (args->argc == 1 && args->isStr(0, "test") == true)
 80027a4:	8803      	ldrh	r3, [r0, #0]
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d104      	bne.n	80027b4 <cliLcd+0x14>
 80027aa:	6943      	ldr	r3, [r0, #20]
 80027ac:	4919      	ldr	r1, [pc, #100]	@ (8002814 <cliLcd+0x74>)
 80027ae:	2000      	movs	r0, #0
 80027b0:	4798      	blx	r3
 80027b2:	b928      	cbnz	r0, 80027c0 <cliLcd+0x20>
    ret = true;
  }

  if (ret != true)
  {
    cliPrintf("lcd test\n");
 80027b4:	4818      	ldr	r0, [pc, #96]	@ (8002818 <cliLcd+0x78>)
 80027b6:	f001 f87d 	bl	80038b4 <cliPrintf>
  }
}
 80027ba:	b003      	add	sp, #12
 80027bc:	f85d fb04 	ldr.w	pc, [sp], #4
    lcdSetFont(LCD_FONT_07x10);
 80027c0:	2000      	movs	r0, #0
 80027c2:	f7ff ffe7 	bl	8002794 <lcdSetFont>
    while (cliKeepLoop())
 80027c6:	f001 fa8b 	bl	8003ce0 <cliKeepLoop>
 80027ca:	b1d0      	cbz	r0, 8002802 <cliLcd+0x62>
      if (lcdDrawAvailable() == true)
 80027cc:	f7ff fdd6 	bl	800237c <lcdDrawAvailable>
 80027d0:	2800      	cmp	r0, #0
 80027d2:	d0f8      	beq.n	80027c6 <cliLcd+0x26>
        lcdClearBuffer(black);
 80027d4:	2000      	movs	r0, #0
 80027d6:	f7ff fe3d 	bl	8002454 <lcdClearBuffer>
        lcdPrintf(20, 16 * 0, white, "[ LCD TEST ]");
 80027da:	4b10      	ldr	r3, [pc, #64]	@ (800281c <cliLcd+0x7c>)
 80027dc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80027e0:	2100      	movs	r1, #0
 80027e2:	2014      	movs	r0, #20
 80027e4:	f7ff ff6c 	bl	80026c0 <lcdPrintf>
        lcdPrintf(20, 16 * 1, white, "%d fps", lcdGetFps());
 80027e8:	f7ff fdc2 	bl	8002370 <lcdGetFps>
 80027ec:	9000      	str	r0, [sp, #0]
 80027ee:	4b0c      	ldr	r3, [pc, #48]	@ (8002820 <cliLcd+0x80>)
 80027f0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80027f4:	2110      	movs	r1, #16
 80027f6:	2014      	movs	r0, #20
 80027f8:	f7ff ff62 	bl	80026c0 <lcdPrintf>
        lcdRequestDraw();
 80027fc:	f7ff fde8 	bl	80023d0 <lcdRequestDraw>
 8002800:	e7e1      	b.n	80027c6 <cliLcd+0x26>
    lcdSetFont(LCD_FONT_HAN);
 8002802:	2003      	movs	r0, #3
 8002804:	f7ff ffc6 	bl	8002794 <lcdSetFont>
    lcdClearBuffer(black);
 8002808:	2000      	movs	r0, #0
 800280a:	f7ff fe23 	bl	8002454 <lcdClearBuffer>
    lcdUpdateDraw();
 800280e:	f7ff fe03 	bl	8002418 <lcdUpdateDraw>
  if (ret != true)
 8002812:	e7d2      	b.n	80027ba <cliLcd+0x1a>
 8002814:	0800ee78 	.word	0x0800ee78
 8002818:	0800ee98 	.word	0x0800ee98
 800281c:	0800ee80 	.word	0x0800ee80
 8002820:	0800ee90 	.word	0x0800ee90

08002824 <uartInit>:




bool uartInit(void)
{
 8002824:	b510      	push	{r4, lr}
  for (int i=0; i<UART_MAX_CH; i++)
 8002826:	2300      	movs	r3, #0
 8002828:	e00c      	b.n	8002844 <uartInit+0x20>
  {
    uart_tbl[i].is_open = false;
 800282a:	4c0e      	ldr	r4, [pc, #56]	@ (8002864 <uartInit+0x40>)
 800282c:	2234      	movs	r2, #52	@ 0x34
 800282e:	fb03 f202 	mul.w	r2, r3, r2
 8002832:	18a1      	adds	r1, r4, r2
 8002834:	2000      	movs	r0, #0
 8002836:	54a0      	strb	r0, [r4, r2]
    uart_tbl[i].baud = 115200;
 8002838:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800283c:	604a      	str	r2, [r1, #4]
    uart_tbl[i].rx_cnt = 0;
 800283e:	62c8      	str	r0, [r1, #44]	@ 0x2c
    uart_tbl[i].tx_cnt = 0;
 8002840:	6308      	str	r0, [r1, #48]	@ 0x30
  for (int i=0; i<UART_MAX_CH; i++)
 8002842:	3301      	adds	r3, #1
 8002844:	2b01      	cmp	r3, #1
 8002846:	ddf0      	ble.n	800282a <uartInit+0x6>
  }

  uart_tbl[_DEF_UART1].rx_buf = rx_buf_1;
 8002848:	4b06      	ldr	r3, [pc, #24]	@ (8002864 <uartInit+0x40>)
 800284a:	4a07      	ldr	r2, [pc, #28]	@ (8002868 <uartInit+0x44>)
 800284c:	609a      	str	r2, [r3, #8]
  uart_tbl[_DEF_UART2].rx_buf = rx_buf_2;
 800284e:	4a07      	ldr	r2, [pc, #28]	@ (800286c <uartInit+0x48>)
 8002850:	63da      	str	r2, [r3, #60]	@ 0x3c

  is_init = true;
 8002852:	2401      	movs	r4, #1
 8002854:	4b06      	ldr	r3, [pc, #24]	@ (8002870 <uartInit+0x4c>)
 8002856:	701c      	strb	r4, [r3, #0]

#if CLI_USE(HW_UART)
  cliAdd("uart", cliUart);
 8002858:	4906      	ldr	r1, [pc, #24]	@ (8002874 <uartInit+0x50>)
 800285a:	4807      	ldr	r0, [pc, #28]	@ (8002878 <uartInit+0x54>)
 800285c:	f001 fa4c 	bl	8003cf8 <cliAdd>
#endif
  return true;
}
 8002860:	4620      	mov	r0, r4
 8002862:	bd10      	pop	{r4, pc}
 8002864:	2000597c 	.word	0x2000597c
 8002868:	2000557c 	.word	0x2000557c
 800286c:	2000517c 	.word	0x2000517c
 8002870:	200059e4 	.word	0x200059e4
 8002874:	08002bf9 	.word	0x08002bf9
 8002878:	0800eeb4 	.word	0x0800eeb4

0800287c <uartOpen>:
{
  bool ret = false;
  HAL_StatusTypeDef ret_hal;


  if (ch >= UART_MAX_CH) return false;
 800287c:	2801      	cmp	r0, #1
 800287e:	f200 8106 	bhi.w	8002a8e <uartOpen+0x212>
{
 8002882:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002884:	b085      	sub	sp, #20
 8002886:	4604      	mov	r4, r0

  if (uart_tbl[ch].is_open == true && uart_tbl[ch].baud == baud)
 8002888:	2334      	movs	r3, #52	@ 0x34
 800288a:	fb00 f303 	mul.w	r3, r0, r3
 800288e:	4a81      	ldr	r2, [pc, #516]	@ (8002a94 <uartOpen+0x218>)
 8002890:	5cd0      	ldrb	r0, [r2, r3]
 8002892:	b130      	cbz	r0, 80028a2 <uartOpen+0x26>
 8002894:	4613      	mov	r3, r2
 8002896:	2234      	movs	r2, #52	@ 0x34
 8002898:	fb02 3304 	mla	r3, r2, r4, r3
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	428b      	cmp	r3, r1
 80028a0:	d003      	beq.n	80028aa <uartOpen+0x2e>
  {
    return true;
  }


  switch(ch)
 80028a2:	b124      	cbz	r4, 80028ae <uartOpen+0x32>
 80028a4:	2c01      	cmp	r4, #1
 80028a6:	d079      	beq.n	800299c <uartOpen+0x120>
 80028a8:	2000      	movs	r0, #0
      }
      break;
  }

  return ret;
}
 80028aa:	b005      	add	sp, #20
 80028ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
      uart_tbl[ch].baud      = baud;
 80028ae:	4a79      	ldr	r2, [pc, #484]	@ (8002a94 <uartOpen+0x218>)
 80028b0:	2034      	movs	r0, #52	@ 0x34
 80028b2:	fb04 f000 	mul.w	r0, r4, r0
 80028b6:	1815      	adds	r5, r2, r0
 80028b8:	6069      	str	r1, [r5, #4]
      uart_tbl[ch].p_huart   = uart_hw_tbl[ch].p_huart;
 80028ba:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 80028be:	4e76      	ldr	r6, [pc, #472]	@ (8002a98 <uartOpen+0x21c>)
 80028c0:	eb06 06c3 	add.w	r6, r6, r3, lsl #3
 80028c4:	68b3      	ldr	r3, [r6, #8]
 80028c6:	622b      	str	r3, [r5, #32]
      uart_tbl[ch].p_hdma_rx = uart_hw_tbl[ch].p_hdma_rx;
 80028c8:	68f7      	ldr	r7, [r6, #12]
 80028ca:	626f      	str	r7, [r5, #36]	@ 0x24
      uart_tbl[ch].p_huart->Instance = uart_hw_tbl[ch].p_uart;
 80028cc:	6877      	ldr	r7, [r6, #4]
 80028ce:	601f      	str	r7, [r3, #0]
      uart_tbl[ch].p_huart->Init.BaudRate       = baud;
 80028d0:	6a2b      	ldr	r3, [r5, #32]
 80028d2:	6059      	str	r1, [r3, #4]
      uart_tbl[ch].p_huart->Init.WordLength     = UART_WORDLENGTH_8B;
 80028d4:	6a29      	ldr	r1, [r5, #32]
 80028d6:	2300      	movs	r3, #0
 80028d8:	608b      	str	r3, [r1, #8]
      uart_tbl[ch].p_huart->Init.StopBits       = UART_STOPBITS_1;
 80028da:	6a29      	ldr	r1, [r5, #32]
 80028dc:	60cb      	str	r3, [r1, #12]
      uart_tbl[ch].p_huart->Init.Parity         = UART_PARITY_NONE;
 80028de:	6a29      	ldr	r1, [r5, #32]
 80028e0:	610b      	str	r3, [r1, #16]
      uart_tbl[ch].p_huart->Init.Mode           = UART_MODE_TX_RX;
 80028e2:	6a29      	ldr	r1, [r5, #32]
 80028e4:	270c      	movs	r7, #12
 80028e6:	614f      	str	r7, [r1, #20]
      uart_tbl[ch].p_huart->Init.HwFlowCtl      = UART_HWCONTROL_NONE;
 80028e8:	6a29      	ldr	r1, [r5, #32]
 80028ea:	618b      	str	r3, [r1, #24]
      uart_tbl[ch].p_huart->Init.OverSampling   = UART_OVERSAMPLING_16;
 80028ec:	6a29      	ldr	r1, [r5, #32]
 80028ee:	61cb      	str	r3, [r1, #28]
      uart_tbl[ch].p_huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80028f0:	6a29      	ldr	r1, [r5, #32]
 80028f2:	620b      	str	r3, [r1, #32]
      uart_tbl[ch].p_huart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80028f4:	6a29      	ldr	r1, [r5, #32]
 80028f6:	624b      	str	r3, [r1, #36]	@ 0x24
      uart_tbl[ch].p_huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80028f8:	6a29      	ldr	r1, [r5, #32]
 80028fa:	628b      	str	r3, [r1, #40]	@ 0x28
      qbufferCreate(&uart_tbl[ch].qbuffer, &uart_tbl[ch].rx_buf[0], UART_RX_BUF_LENGTH);
 80028fc:	3008      	adds	r0, #8
 80028fe:	4410      	add	r0, r2
 8002900:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002904:	68a9      	ldr	r1, [r5, #8]
 8002906:	3004      	adds	r0, #4
 8002908:	f7ff fb26 	bl	8001f58 <qbufferCreate>
      __HAL_RCC_USART1_CLK_ENABLE();
 800290c:	4b63      	ldr	r3, [pc, #396]	@ (8002a9c <uartOpen+0x220>)
 800290e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002910:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002914:	661a      	str	r2, [r3, #96]	@ 0x60
 8002916:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002918:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 800291c:	9200      	str	r2, [sp, #0]
 800291e:	9a00      	ldr	r2, [sp, #0]
      __HAL_RCC_GPIOA_CLK_ENABLE();
 8002920:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002922:	f042 0201 	orr.w	r2, r2, #1
 8002926:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002928:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800292a:	f003 0301 	and.w	r3, r3, #1
 800292e:	9301      	str	r3, [sp, #4]
 8002930:	9b01      	ldr	r3, [sp, #4]
      HAL_UART_DeInit(uart_tbl[ch].p_huart);
 8002932:	6a28      	ldr	r0, [r5, #32]
 8002934:	f006 f97f 	bl	8008c36 <HAL_UART_DeInit>
      if (uart_hw_tbl[ch].is_rs485 == true)
 8002938:	7d33      	ldrb	r3, [r6, #20]
 800293a:	b143      	cbz	r3, 800294e <uartOpen+0xd2>
        ret_hal = HAL_RS485Ex_Init(uart_tbl[ch].p_huart, UART_DE_POLARITY_HIGH, 0, 0);
 800293c:	2300      	movs	r3, #0
 800293e:	461a      	mov	r2, r3
 8002940:	4619      	mov	r1, r3
 8002942:	6a28      	ldr	r0, [r5, #32]
 8002944:	f007 f87c 	bl	8009a40 <HAL_RS485Ex_Init>
      if (ret_hal == HAL_OK)
 8002948:	b148      	cbz	r0, 800295e <uartOpen+0xe2>
  bool ret = false;
 800294a:	2000      	movs	r0, #0
 800294c:	e7ad      	b.n	80028aa <uartOpen+0x2e>
        ret_hal = HAL_UART_Init(uart_tbl[ch].p_huart);
 800294e:	4b51      	ldr	r3, [pc, #324]	@ (8002a94 <uartOpen+0x218>)
 8002950:	2234      	movs	r2, #52	@ 0x34
 8002952:	fb02 3304 	mla	r3, r2, r4, r3
 8002956:	6a18      	ldr	r0, [r3, #32]
 8002958:	f006 ff9a 	bl	8009890 <HAL_UART_Init>
 800295c:	e7f4      	b.n	8002948 <uartOpen+0xcc>
        uart_tbl[ch].is_open = true;
 800295e:	4a4d      	ldr	r2, [pc, #308]	@ (8002a94 <uartOpen+0x218>)
 8002960:	2334      	movs	r3, #52	@ 0x34
 8002962:	fb04 f303 	mul.w	r3, r4, r3
 8002966:	18d0      	adds	r0, r2, r3
 8002968:	2101      	movs	r1, #1
 800296a:	54d1      	strb	r1, [r2, r3]
        if(HAL_UART_Receive_DMA(uart_tbl[ch].p_huart, (uint8_t *)&uart_tbl[ch].rx_buf[0], UART_RX_BUF_LENGTH) != HAL_OK)
 800296c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002970:	6881      	ldr	r1, [r0, #8]
 8002972:	6a00      	ldr	r0, [r0, #32]
 8002974:	f007 f818 	bl	80099a8 <HAL_UART_Receive_DMA>
 8002978:	b970      	cbnz	r0, 8002998 <uartOpen+0x11c>
        ret = true;
 800297a:	2001      	movs	r0, #1
        uart_tbl[ch].qbuffer.in  = uart_tbl[ch].qbuffer.len - ((DMA_Channel_TypeDef *)uart_tbl[ch].p_huart->hdmarx->Instance)->CNDTR;
 800297c:	4b45      	ldr	r3, [pc, #276]	@ (8002a94 <uartOpen+0x218>)
 800297e:	2234      	movs	r2, #52	@ 0x34
 8002980:	fb02 3304 	mla	r3, r2, r4, r3
 8002984:	695a      	ldr	r2, [r3, #20]
 8002986:	6a19      	ldr	r1, [r3, #32]
 8002988:	f8d1 1080 	ldr.w	r1, [r1, #128]	@ 0x80
 800298c:	6809      	ldr	r1, [r1, #0]
 800298e:	6849      	ldr	r1, [r1, #4]
 8002990:	1a52      	subs	r2, r2, r1
 8002992:	60da      	str	r2, [r3, #12]
        uart_tbl[ch].qbuffer.out = uart_tbl[ch].qbuffer.in;
 8002994:	611a      	str	r2, [r3, #16]
 8002996:	e788      	b.n	80028aa <uartOpen+0x2e>
          ret = false;
 8002998:	2000      	movs	r0, #0
 800299a:	e7ef      	b.n	800297c <uartOpen+0x100>
      uart_tbl[ch].baud = baud;
 800299c:	4a3d      	ldr	r2, [pc, #244]	@ (8002a94 <uartOpen+0x218>)
 800299e:	2034      	movs	r0, #52	@ 0x34
 80029a0:	fb04 f000 	mul.w	r0, r4, r0
 80029a4:	1815      	adds	r5, r2, r0
 80029a6:	6069      	str	r1, [r5, #4]
      uart_tbl[ch].p_huart           = uart_hw_tbl[ch].p_huart;
 80029a8:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 80029ac:	4e3a      	ldr	r6, [pc, #232]	@ (8002a98 <uartOpen+0x21c>)
 80029ae:	eb06 06c3 	add.w	r6, r6, r3, lsl #3
 80029b2:	68b3      	ldr	r3, [r6, #8]
 80029b4:	622b      	str	r3, [r5, #32]
      uart_tbl[ch].p_hdma_rx         = uart_hw_tbl[ch].p_hdma_rx;
 80029b6:	68f7      	ldr	r7, [r6, #12]
 80029b8:	626f      	str	r7, [r5, #36]	@ 0x24
      uart_tbl[ch].p_hdma_tx         = uart_hw_tbl[ch].p_hdma_tx;
 80029ba:	6937      	ldr	r7, [r6, #16]
 80029bc:	62af      	str	r7, [r5, #40]	@ 0x28
      uart_tbl[ch].p_huart->Instance = uart_hw_tbl[ch].p_uart;
 80029be:	6877      	ldr	r7, [r6, #4]
 80029c0:	601f      	str	r7, [r3, #0]
      uart_tbl[ch].p_huart->Init.BaudRate               = baud;
 80029c2:	6a2b      	ldr	r3, [r5, #32]
 80029c4:	6059      	str	r1, [r3, #4]
      uart_tbl[ch].p_huart->Init.WordLength             = UART_WORDLENGTH_8B;
 80029c6:	6a29      	ldr	r1, [r5, #32]
 80029c8:	2300      	movs	r3, #0
 80029ca:	608b      	str	r3, [r1, #8]
      uart_tbl[ch].p_huart->Init.StopBits               = UART_STOPBITS_1;
 80029cc:	6a29      	ldr	r1, [r5, #32]
 80029ce:	60cb      	str	r3, [r1, #12]
      uart_tbl[ch].p_huart->Init.Parity                 = UART_PARITY_NONE;
 80029d0:	6a29      	ldr	r1, [r5, #32]
 80029d2:	610b      	str	r3, [r1, #16]
      uart_tbl[ch].p_huart->Init.Mode                   = UART_MODE_TX_RX;
 80029d4:	6a29      	ldr	r1, [r5, #32]
 80029d6:	270c      	movs	r7, #12
 80029d8:	614f      	str	r7, [r1, #20]
      uart_tbl[ch].p_huart->Init.HwFlowCtl              = UART_HWCONTROL_NONE;
 80029da:	6a29      	ldr	r1, [r5, #32]
 80029dc:	618b      	str	r3, [r1, #24]
      uart_tbl[ch].p_huart->Init.OverSampling           = UART_OVERSAMPLING_16;
 80029de:	6a29      	ldr	r1, [r5, #32]
 80029e0:	61cb      	str	r3, [r1, #28]
      uart_tbl[ch].p_huart->Init.OneBitSampling         = UART_ONE_BIT_SAMPLE_DISABLE;
 80029e2:	6a29      	ldr	r1, [r5, #32]
 80029e4:	620b      	str	r3, [r1, #32]
      uart_tbl[ch].p_huart->Init.ClockPrescaler         = UART_PRESCALER_DIV1;
 80029e6:	6a29      	ldr	r1, [r5, #32]
 80029e8:	624b      	str	r3, [r1, #36]	@ 0x24
      uart_tbl[ch].p_huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80029ea:	6a29      	ldr	r1, [r5, #32]
 80029ec:	628b      	str	r3, [r1, #40]	@ 0x28
      qbufferCreate(&uart_tbl[ch].qbuffer, &uart_tbl[ch].rx_buf[0], UART_RX_BUF_LENGTH);
 80029ee:	3008      	adds	r0, #8
 80029f0:	4410      	add	r0, r2
 80029f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80029f6:	68a9      	ldr	r1, [r5, #8]
 80029f8:	3004      	adds	r0, #4
 80029fa:	f7ff faad 	bl	8001f58 <qbufferCreate>
      __HAL_RCC_USART3_CLK_ENABLE();
 80029fe:	4b27      	ldr	r3, [pc, #156]	@ (8002a9c <uartOpen+0x220>)
 8002a00:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002a02:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002a06:	659a      	str	r2, [r3, #88]	@ 0x58
 8002a08:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002a0a:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 8002a0e:	9202      	str	r2, [sp, #8]
 8002a10:	9a02      	ldr	r2, [sp, #8]
      __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a12:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002a14:	f042 0202 	orr.w	r2, r2, #2
 8002a18:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002a1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a1c:	f003 0302 	and.w	r3, r3, #2
 8002a20:	9303      	str	r3, [sp, #12]
 8002a22:	9b03      	ldr	r3, [sp, #12]
      HAL_UART_DeInit(uart_tbl[ch].p_huart);
 8002a24:	6a28      	ldr	r0, [r5, #32]
 8002a26:	f006 f906 	bl	8008c36 <HAL_UART_DeInit>
      if (uart_hw_tbl[ch].is_rs485 == true)
 8002a2a:	7d33      	ldrb	r3, [r6, #20]
 8002a2c:	b143      	cbz	r3, 8002a40 <uartOpen+0x1c4>
        ret_hal = HAL_RS485Ex_Init(uart_tbl[ch].p_huart, UART_DE_POLARITY_HIGH, 0, 0);
 8002a2e:	2300      	movs	r3, #0
 8002a30:	461a      	mov	r2, r3
 8002a32:	4619      	mov	r1, r3
 8002a34:	6a28      	ldr	r0, [r5, #32]
 8002a36:	f007 f803 	bl	8009a40 <HAL_RS485Ex_Init>
      if (ret_hal == HAL_OK)
 8002a3a:	b148      	cbz	r0, 8002a50 <uartOpen+0x1d4>
  bool ret = false;
 8002a3c:	2000      	movs	r0, #0
 8002a3e:	e734      	b.n	80028aa <uartOpen+0x2e>
        ret_hal = HAL_UART_Init(uart_tbl[ch].p_huart);
 8002a40:	4b14      	ldr	r3, [pc, #80]	@ (8002a94 <uartOpen+0x218>)
 8002a42:	2234      	movs	r2, #52	@ 0x34
 8002a44:	fb02 3304 	mla	r3, r2, r4, r3
 8002a48:	6a18      	ldr	r0, [r3, #32]
 8002a4a:	f006 ff21 	bl	8009890 <HAL_UART_Init>
 8002a4e:	e7f4      	b.n	8002a3a <uartOpen+0x1be>
        uart_tbl[ch].is_open = true;
 8002a50:	4a10      	ldr	r2, [pc, #64]	@ (8002a94 <uartOpen+0x218>)
 8002a52:	2334      	movs	r3, #52	@ 0x34
 8002a54:	fb04 f303 	mul.w	r3, r4, r3
 8002a58:	18d0      	adds	r0, r2, r3
 8002a5a:	2101      	movs	r1, #1
 8002a5c:	54d1      	strb	r1, [r2, r3]
        if (HAL_UART_Receive_DMA(uart_tbl[ch].p_huart, (uint8_t *)&uart_tbl[ch].rx_buf[0], UART_RX_BUF_LENGTH) != HAL_OK)
 8002a5e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a62:	6881      	ldr	r1, [r0, #8]
 8002a64:	6a00      	ldr	r0, [r0, #32]
 8002a66:	f006 ff9f 	bl	80099a8 <HAL_UART_Receive_DMA>
 8002a6a:	b970      	cbnz	r0, 8002a8a <uartOpen+0x20e>
        ret                  = true;
 8002a6c:	2001      	movs	r0, #1
        uart_tbl[ch].qbuffer.in  = uart_tbl[ch].qbuffer.len - ((DMA_Channel_TypeDef *)uart_tbl[ch].p_huart->hdmarx->Instance)->CNDTR;
 8002a6e:	4b09      	ldr	r3, [pc, #36]	@ (8002a94 <uartOpen+0x218>)
 8002a70:	2234      	movs	r2, #52	@ 0x34
 8002a72:	fb02 3304 	mla	r3, r2, r4, r3
 8002a76:	695a      	ldr	r2, [r3, #20]
 8002a78:	6a19      	ldr	r1, [r3, #32]
 8002a7a:	f8d1 1080 	ldr.w	r1, [r1, #128]	@ 0x80
 8002a7e:	6809      	ldr	r1, [r1, #0]
 8002a80:	6849      	ldr	r1, [r1, #4]
 8002a82:	1a52      	subs	r2, r2, r1
 8002a84:	60da      	str	r2, [r3, #12]
        uart_tbl[ch].qbuffer.out = uart_tbl[ch].qbuffer.in;
 8002a86:	611a      	str	r2, [r3, #16]
 8002a88:	e70f      	b.n	80028aa <uartOpen+0x2e>
          ret = false;
 8002a8a:	2000      	movs	r0, #0
 8002a8c:	e7ef      	b.n	8002a6e <uartOpen+0x1f2>
  if (ch >= UART_MAX_CH) return false;
 8002a8e:	2000      	movs	r0, #0
}
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	2000597c 	.word	0x2000597c
 8002a98:	0800ef64 	.word	0x0800ef64
 8002a9c:	40021000 	.word	0x40021000

08002aa0 <uartAvailable>:

  return true;
}

uint32_t uartAvailable(uint8_t ch)
{
 8002aa0:	b510      	push	{r4, lr}
  uint32_t ret = 0;


  switch(ch)
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	b118      	cbz	r0, 8002aae <uartAvailable+0xe>
 8002aa6:	2801      	cmp	r0, #1
 8002aa8:	d012      	beq.n	8002ad0 <uartAvailable+0x30>
 8002aaa:	2000      	movs	r0, #0
      ret = qbufferAvailable(&uart_tbl[ch].qbuffer);
      break;
  }

  return ret;
}
 8002aac:	bd10      	pop	{r4, pc}
      uart_tbl[ch].qbuffer.in = (uart_tbl[ch].qbuffer.len - ((DMA_Channel_TypeDef *)uart_tbl[ch].p_hdma_rx->Instance)->CNDTR);
 8002aae:	4811      	ldr	r0, [pc, #68]	@ (8002af4 <uartAvailable+0x54>)
 8002ab0:	2234      	movs	r2, #52	@ 0x34
 8002ab2:	fb02 f303 	mul.w	r3, r2, r3
 8002ab6:	18c2      	adds	r2, r0, r3
 8002ab8:	6951      	ldr	r1, [r2, #20]
 8002aba:	6a54      	ldr	r4, [r2, #36]	@ 0x24
 8002abc:	6824      	ldr	r4, [r4, #0]
 8002abe:	6864      	ldr	r4, [r4, #4]
 8002ac0:	1b09      	subs	r1, r1, r4
 8002ac2:	60d1      	str	r1, [r2, #12]
      ret = qbufferAvailable(&uart_tbl[ch].qbuffer);
 8002ac4:	3308      	adds	r3, #8
 8002ac6:	4418      	add	r0, r3
 8002ac8:	3004      	adds	r0, #4
 8002aca:	f7ff fab0 	bl	800202e <qbufferAvailable>
      break;
 8002ace:	e7ed      	b.n	8002aac <uartAvailable+0xc>
      uart_tbl[ch].qbuffer.in = (uart_tbl[ch].qbuffer.len - ((DMA_Channel_TypeDef *)uart_tbl[ch].p_hdma_rx->Instance)->CNDTR);
 8002ad0:	4808      	ldr	r0, [pc, #32]	@ (8002af4 <uartAvailable+0x54>)
 8002ad2:	2234      	movs	r2, #52	@ 0x34
 8002ad4:	fb02 f303 	mul.w	r3, r2, r3
 8002ad8:	18c2      	adds	r2, r0, r3
 8002ada:	6951      	ldr	r1, [r2, #20]
 8002adc:	6a54      	ldr	r4, [r2, #36]	@ 0x24
 8002ade:	6824      	ldr	r4, [r4, #0]
 8002ae0:	6864      	ldr	r4, [r4, #4]
 8002ae2:	1b09      	subs	r1, r1, r4
 8002ae4:	60d1      	str	r1, [r2, #12]
      ret = qbufferAvailable(&uart_tbl[ch].qbuffer);
 8002ae6:	3308      	adds	r3, #8
 8002ae8:	4418      	add	r0, r3
 8002aea:	3004      	adds	r0, #4
 8002aec:	f7ff fa9f 	bl	800202e <qbufferAvailable>
  return ret;
 8002af0:	e7dc      	b.n	8002aac <uartAvailable+0xc>
 8002af2:	bf00      	nop
 8002af4:	2000597c 	.word	0x2000597c

08002af8 <uartRead>:

  return true;
}

uint8_t uartRead(uint8_t ch)
{
 8002af8:	b510      	push	{r4, lr}
 8002afa:	b082      	sub	sp, #8
  uint8_t ret = 0;
 8002afc:	2300      	movs	r3, #0
 8002afe:	f88d 3007 	strb.w	r3, [sp, #7]


  switch(ch)
 8002b02:	4604      	mov	r4, r0
 8002b04:	b160      	cbz	r0, 8002b20 <uartRead+0x28>
 8002b06:	2801      	cmp	r0, #1
 8002b08:	d017      	beq.n	8002b3a <uartRead+0x42>

    case _DEF_UART2:
      qbufferRead(&uart_tbl[ch].qbuffer, &ret, 1);
      break;
  }
  uart_tbl[ch].rx_cnt++;
 8002b0a:	4b12      	ldr	r3, [pc, #72]	@ (8002b54 <uartRead+0x5c>)
 8002b0c:	2234      	movs	r2, #52	@ 0x34
 8002b0e:	fb02 3304 	mla	r3, r2, r4, r3
 8002b12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b14:	3201      	adds	r2, #1
 8002b16:	62da      	str	r2, [r3, #44]	@ 0x2c

  return ret;
}
 8002b18:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8002b1c:	b002      	add	sp, #8
 8002b1e:	bd10      	pop	{r4, pc}
      qbufferRead(&uart_tbl[ch].qbuffer, &ret, 1);
 8002b20:	2034      	movs	r0, #52	@ 0x34
 8002b22:	fb04 f000 	mul.w	r0, r4, r0
 8002b26:	3008      	adds	r0, #8
 8002b28:	4b0a      	ldr	r3, [pc, #40]	@ (8002b54 <uartRead+0x5c>)
 8002b2a:	4418      	add	r0, r3
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	f10d 0107 	add.w	r1, sp, #7
 8002b32:	3004      	adds	r0, #4
 8002b34:	f7ff fa4e 	bl	8001fd4 <qbufferRead>
      break;
 8002b38:	e7e7      	b.n	8002b0a <uartRead+0x12>
      qbufferRead(&uart_tbl[ch].qbuffer, &ret, 1);
 8002b3a:	2034      	movs	r0, #52	@ 0x34
 8002b3c:	fb04 f000 	mul.w	r0, r4, r0
 8002b40:	3008      	adds	r0, #8
 8002b42:	4b04      	ldr	r3, [pc, #16]	@ (8002b54 <uartRead+0x5c>)
 8002b44:	4418      	add	r0, r3
 8002b46:	2201      	movs	r2, #1
 8002b48:	f10d 0107 	add.w	r1, sp, #7
 8002b4c:	3004      	adds	r0, #4
 8002b4e:	f7ff fa41 	bl	8001fd4 <qbufferRead>
      break;
 8002b52:	e7da      	b.n	8002b0a <uartRead+0x12>
 8002b54:	2000597c 	.word	0x2000597c

08002b58 <uartWrite>:

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 8002b58:	b538      	push	{r3, r4, r5, lr}
 8002b5a:	4614      	mov	r4, r2
  uint32_t ret = 0;


  switch(ch)
 8002b5c:	4605      	mov	r5, r0
 8002b5e:	b150      	cbz	r0, 8002b76 <uartWrite+0x1e>
 8002b60:	2801      	cmp	r0, #1
 8002b62:	d014      	beq.n	8002b8e <uartWrite+0x36>
 8002b64:	2000      	movs	r0, #0
      {
        ret = length;
      }
      break;
  }
  uart_tbl[ch].tx_cnt += ret;
 8002b66:	4b11      	ldr	r3, [pc, #68]	@ (8002bac <uartWrite+0x54>)
 8002b68:	2234      	movs	r2, #52	@ 0x34
 8002b6a:	fb02 3305 	mla	r3, r2, r5, r3
 8002b6e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b70:	4402      	add	r2, r0
 8002b72:	631a      	str	r2, [r3, #48]	@ 0x30

  return ret;
}
 8002b74:	bd38      	pop	{r3, r4, r5, pc}
      if (HAL_UART_Transmit(uart_tbl[ch].p_huart, p_data, length, 100) == HAL_OK)
 8002b76:	480d      	ldr	r0, [pc, #52]	@ (8002bac <uartWrite+0x54>)
 8002b78:	2334      	movs	r3, #52	@ 0x34
 8002b7a:	fb03 0005 	mla	r0, r3, r5, r0
 8002b7e:	2364      	movs	r3, #100	@ 0x64
 8002b80:	b292      	uxth	r2, r2
 8002b82:	6a00      	ldr	r0, [r0, #32]
 8002b84:	f006 fdb6 	bl	80096f4 <HAL_UART_Transmit>
 8002b88:	b160      	cbz	r0, 8002ba4 <uartWrite+0x4c>
  uint32_t ret = 0;
 8002b8a:	2000      	movs	r0, #0
 8002b8c:	e7eb      	b.n	8002b66 <uartWrite+0xe>
      if (HAL_UART_Transmit_DMA(uart_tbl[ch].p_huart, p_data, length) == HAL_OK)
 8002b8e:	4b07      	ldr	r3, [pc, #28]	@ (8002bac <uartWrite+0x54>)
 8002b90:	2234      	movs	r2, #52	@ 0x34
 8002b92:	fb02 3300 	mla	r3, r2, r0, r3
 8002b96:	b2a2      	uxth	r2, r4
 8002b98:	6a18      	ldr	r0, [r3, #32]
 8002b9a:	f006 f86f 	bl	8008c7c <HAL_UART_Transmit_DMA>
 8002b9e:	b118      	cbz	r0, 8002ba8 <uartWrite+0x50>
  uint32_t ret = 0;
 8002ba0:	2000      	movs	r0, #0
 8002ba2:	e7e0      	b.n	8002b66 <uartWrite+0xe>
        ret = length;
 8002ba4:	4620      	mov	r0, r4
 8002ba6:	e7de      	b.n	8002b66 <uartWrite+0xe>
        ret = length;
 8002ba8:	4620      	mov	r0, r4
 8002baa:	e7dc      	b.n	8002b66 <uartWrite+0xe>
 8002bac:	2000597c 	.word	0x2000597c

08002bb0 <uartPrintf>:

  return ret;
}

uint32_t uartPrintf(uint8_t ch, const char *fmt, ...)
{
 8002bb0:	b40e      	push	{r1, r2, r3}
 8002bb2:	b510      	push	{r4, lr}
 8002bb4:	b0c3      	sub	sp, #268	@ 0x10c
 8002bb6:	4604      	mov	r4, r0
 8002bb8:	ab45      	add	r3, sp, #276	@ 0x114
 8002bba:	f853 2b04 	ldr.w	r2, [r3], #4
  char buf[256];
  va_list args;
  int len;
  uint32_t ret;

  va_start(args, fmt);
 8002bbe:	9301      	str	r3, [sp, #4]
  len = vsnprintf(buf, 256, fmt, args);
 8002bc0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002bc4:	a802      	add	r0, sp, #8
 8002bc6:	f008 fc53 	bl	800b470 <vsniprintf>
 8002bca:	4602      	mov	r2, r0

  ret = uartWrite(ch, (uint8_t *)buf, len);
 8002bcc:	a902      	add	r1, sp, #8
 8002bce:	4620      	mov	r0, r4
 8002bd0:	f7ff ffc2 	bl	8002b58 <uartWrite>

  va_end(args);


  return ret;
}
 8002bd4:	b043      	add	sp, #268	@ 0x10c
 8002bd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002bda:	b003      	add	sp, #12
 8002bdc:	4770      	bx	lr
	...

08002be0 <uartGetBaud>:
uint32_t uartGetBaud(uint8_t ch)
{
  uint32_t ret = 0;


  if (ch >= UART_MAX_CH) return 0;
 8002be0:	2801      	cmp	r0, #1
 8002be2:	d805      	bhi.n	8002bf0 <uartGetBaud+0x10>

  ret = uart_tbl[ch].baud;
 8002be4:	4b03      	ldr	r3, [pc, #12]	@ (8002bf4 <uartGetBaud+0x14>)
 8002be6:	2234      	movs	r2, #52	@ 0x34
 8002be8:	fb02 3300 	mla	r3, r2, r0, r3
 8002bec:	6858      	ldr	r0, [r3, #4]

  return ret;
 8002bee:	4770      	bx	lr
  if (ch >= UART_MAX_CH) return 0;
 8002bf0:	2000      	movs	r0, #0
}
 8002bf2:	4770      	bx	lr
 8002bf4:	2000597c 	.word	0x2000597c

08002bf8 <cliUart>:
  return uart_tbl[ch].tx_cnt;
}

#if CLI_USE(HW_UART)
void cliUart(cli_args_t *args)
{
 8002bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	4604      	mov	r4, r0
  bool ret = false;


  if (args->argc == 1 && args->isStr(0, "info"))
 8002bfe:	8803      	ldrh	r3, [r0, #0]
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d007      	beq.n	8002c14 <cliUart+0x1c>
  bool ret = false;
 8002c04:	2500      	movs	r5, #0
      cliPrintf("_DEF_UART%d : %s, %d bps\n", i+1, uart_hw_tbl[i].p_msg, uartGetBaud(i));
    }
    ret = true;
  }

  if (args->argc == 2 && args->isStr(0, "test"))
 8002c06:	8823      	ldrh	r3, [r4, #0]
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d01f      	beq.n	8002c4c <cliUart+0x54>
      cliPrintf("This is cliPort\n");
    }
    ret = true;
  }

  if (ret == false)
 8002c0c:	2d00      	cmp	r5, #0
 8002c0e:	d065      	beq.n	8002cdc <cliUart+0xe4>
  {
    cliPrintf("uart info\n");
    cliPrintf("uart test ch[1~%d]\n", HW_UART_MAX_CH);
  }
}
 8002c10:	b003      	add	sp, #12
 8002c12:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (args->argc == 1 && args->isStr(0, "info"))
 8002c14:	6943      	ldr	r3, [r0, #20]
 8002c16:	4935      	ldr	r1, [pc, #212]	@ (8002cec <cliUart+0xf4>)
 8002c18:	2000      	movs	r0, #0
 8002c1a:	4798      	blx	r3
 8002c1c:	4605      	mov	r5, r0
 8002c1e:	2800      	cmp	r0, #0
 8002c20:	d0f1      	beq.n	8002c06 <cliUart+0xe>
    for (int i=0; i<UART_MAX_CH; i++)
 8002c22:	2000      	movs	r0, #0
 8002c24:	e00f      	b.n	8002c46 <cliUart+0x4e>
      cliPrintf("_DEF_UART%d : %s, %d bps\n", i+1, uart_hw_tbl[i].p_msg, uartGetBaud(i));
 8002c26:	1c46      	adds	r6, r0, #1
 8002c28:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8002c2c:	4b30      	ldr	r3, [pc, #192]	@ (8002cf0 <cliUart+0xf8>)
 8002c2e:	f853 7032 	ldr.w	r7, [r3, r2, lsl #3]
 8002c32:	b2c0      	uxtb	r0, r0
 8002c34:	f7ff ffd4 	bl	8002be0 <uartGetBaud>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	463a      	mov	r2, r7
 8002c3c:	4631      	mov	r1, r6
 8002c3e:	482d      	ldr	r0, [pc, #180]	@ (8002cf4 <cliUart+0xfc>)
 8002c40:	f000 fe38 	bl	80038b4 <cliPrintf>
    for (int i=0; i<UART_MAX_CH; i++)
 8002c44:	4630      	mov	r0, r6
 8002c46:	2801      	cmp	r0, #1
 8002c48:	dded      	ble.n	8002c26 <cliUart+0x2e>
 8002c4a:	e7dc      	b.n	8002c06 <cliUart+0xe>
  if (args->argc == 2 && args->isStr(0, "test"))
 8002c4c:	6963      	ldr	r3, [r4, #20]
 8002c4e:	492a      	ldr	r1, [pc, #168]	@ (8002cf8 <cliUart+0x100>)
 8002c50:	2000      	movs	r0, #0
 8002c52:	4798      	blx	r3
 8002c54:	2800      	cmp	r0, #0
 8002c56:	d0d9      	beq.n	8002c0c <cliUart+0x14>
    uart_ch = constrain(args->getData(1), 1, UART_MAX_CH) - 1;
 8002c58:	68a3      	ldr	r3, [r4, #8]
 8002c5a:	2001      	movs	r0, #1
 8002c5c:	4798      	blx	r3
 8002c5e:	2800      	cmp	r0, #0
 8002c60:	dd0b      	ble.n	8002c7a <cliUart+0x82>
 8002c62:	68a3      	ldr	r3, [r4, #8]
 8002c64:	2001      	movs	r0, #1
 8002c66:	4798      	blx	r3
 8002c68:	2802      	cmp	r0, #2
 8002c6a:	dc0f      	bgt.n	8002c8c <cliUart+0x94>
 8002c6c:	68a3      	ldr	r3, [r4, #8]
 8002c6e:	2001      	movs	r0, #1
 8002c70:	4798      	blx	r3
 8002c72:	b2c4      	uxtb	r4, r0
 8002c74:	3c01      	subs	r4, #1
 8002c76:	b2e4      	uxtb	r4, r4
 8002c78:	e000      	b.n	8002c7c <cliUart+0x84>
 8002c7a:	2400      	movs	r4, #0
    if (uart_ch != cliGetPort())
 8002c7c:	f000 fda8 	bl	80037d0 <cliGetPort>
 8002c80:	42a0      	cmp	r0, r4
 8002c82:	d108      	bne.n	8002c96 <cliUart+0x9e>
      cliPrintf("This is cliPort\n");
 8002c84:	481d      	ldr	r0, [pc, #116]	@ (8002cfc <cliUart+0x104>)
 8002c86:	f000 fe15 	bl	80038b4 <cliPrintf>
 8002c8a:	e7c1      	b.n	8002c10 <cliUart+0x18>
    uart_ch = constrain(args->getData(1), 1, UART_MAX_CH) - 1;
 8002c8c:	2401      	movs	r4, #1
 8002c8e:	e7f5      	b.n	8002c7c <cliUart+0x84>
        if (cliAvailable() > 0)
 8002c90:	f000 fe00 	bl	8003894 <cliAvailable>
 8002c94:	b978      	cbnz	r0, 8002cb6 <cliUart+0xbe>
        if (uartAvailable(uart_ch) > 0)
 8002c96:	4620      	mov	r0, r4
 8002c98:	f7ff ff02 	bl	8002aa0 <uartAvailable>
 8002c9c:	2800      	cmp	r0, #0
 8002c9e:	d0f7      	beq.n	8002c90 <cliUart+0x98>
          rx_data = uartRead(uart_ch);
 8002ca0:	4620      	mov	r0, r4
 8002ca2:	f7ff ff29 	bl	8002af8 <uartRead>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	f88d 0007 	strb.w	r0, [sp, #7]
          cliPrintf("<- _DEF_UART%d RX : 0x%X\n", uart_ch + 1, rx_data);
 8002cac:	1c61      	adds	r1, r4, #1
 8002cae:	4814      	ldr	r0, [pc, #80]	@ (8002d00 <cliUart+0x108>)
 8002cb0:	f000 fe00 	bl	80038b4 <cliPrintf>
 8002cb4:	e7ec      	b.n	8002c90 <cliUart+0x98>
          rx_data = cliRead();
 8002cb6:	f000 fdf5 	bl	80038a4 <cliRead>
 8002cba:	f88d 0007 	strb.w	r0, [sp, #7]
          if (rx_data == 'q')
 8002cbe:	2871      	cmp	r0, #113	@ 0x71
 8002cc0:	d0a6      	beq.n	8002c10 <cliUart+0x18>
            uartWrite(uart_ch, &rx_data, 1);
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f10d 0107 	add.w	r1, sp, #7
 8002cc8:	4620      	mov	r0, r4
 8002cca:	f7ff ff45 	bl	8002b58 <uartWrite>
            cliPrintf("-> _DEF_UART%d TX : 0x%X\n", uart_ch + 1, rx_data);
 8002cce:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8002cd2:	1c61      	adds	r1, r4, #1
 8002cd4:	480b      	ldr	r0, [pc, #44]	@ (8002d04 <cliUart+0x10c>)
 8002cd6:	f000 fded 	bl	80038b4 <cliPrintf>
 8002cda:	e7dc      	b.n	8002c96 <cliUart+0x9e>
    cliPrintf("uart info\n");
 8002cdc:	480a      	ldr	r0, [pc, #40]	@ (8002d08 <cliUart+0x110>)
 8002cde:	f000 fde9 	bl	80038b4 <cliPrintf>
    cliPrintf("uart test ch[1~%d]\n", HW_UART_MAX_CH);
 8002ce2:	2102      	movs	r1, #2
 8002ce4:	4809      	ldr	r0, [pc, #36]	@ (8002d0c <cliUart+0x114>)
 8002ce6:	f000 fde5 	bl	80038b4 <cliPrintf>
}
 8002cea:	e791      	b.n	8002c10 <cliUart+0x18>
 8002cec:	0800eb48 	.word	0x0800eb48
 8002cf0:	0800ef64 	.word	0x0800ef64
 8002cf4:	0800eebc 	.word	0x0800eebc
 8002cf8:	0800ee78 	.word	0x0800ee78
 8002cfc:	0800ef10 	.word	0x0800ef10
 8002d00:	0800eed8 	.word	0x0800eed8
 8002d04:	0800eef4 	.word	0x0800eef4
 8002d08:	0800ef24 	.word	0x0800ef24
 8002d0c:	0800ef30 	.word	0x0800ef30

08002d10 <hanUniFontLoad>:
    for(i = 0; i < 32; i++)   FontPtr->FontBuffer[i] |= K_font[248 + uJonType*28+uJongsung][i];
  }
}

void hanUniFontLoad(char *HanCode, han_font_t *FontPtr)
{
 8002d10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002d14:	460c      	mov	r4, r1
  static uint16_t uChosung, uJoongsung, uJongsung, uChoType, uJooType,uJonType;




  utf16 = (uint8_t)(HanCode[0] & 0x0f) << 12 | (uint8_t)(HanCode[1] & 0x3f) << 6 | (uint8_t)(HanCode[2] & 0x3f);
 8002d16:	7802      	ldrb	r2, [r0, #0]
 8002d18:	7843      	ldrb	r3, [r0, #1]
 8002d1a:	019b      	lsls	r3, r3, #6
 8002d1c:	f403 637c 	and.w	r3, r3, #4032	@ 0xfc0
 8002d20:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8002d24:	b21b      	sxth	r3, r3
 8002d26:	7882      	ldrb	r2, [r0, #2]
 8002d28:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	b29b      	uxth	r3, r3


  //seperate phoneme code
  utf16 -= 0xac00;
 8002d30:	f503 43a8 	add.w	r3, r3, #21504	@ 0x5400
 8002d34:	b298      	uxth	r0, r3
  uJongsung  = utf16 % 28;
 8002d36:	f3c3 038d 	ubfx	r3, r3, #2, #14
 8002d3a:	4a41      	ldr	r2, [pc, #260]	@ (8002e40 <hanUniFontLoad+0x130>)
 8002d3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d40:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8002d44:	eba0 0082 	sub.w	r0, r0, r2, lsl #2
 8002d48:	b280      	uxth	r0, r0
 8002d4a:	493e      	ldr	r1, [pc, #248]	@ (8002e44 <hanUniFontLoad+0x134>)
 8002d4c:	8008      	strh	r0, [r1, #0]
  utf16 /= 28;
 8002d4e:	b29b      	uxth	r3, r3
  uJoongsung = utf16 % 21;
 8002d50:	4a3d      	ldr	r2, [pc, #244]	@ (8002e48 <hanUniFontLoad+0x138>)
 8002d52:	fba2 5203 	umull	r5, r2, r2, r3
 8002d56:	1a9d      	subs	r5, r3, r2
 8002d58:	eb02 0255 	add.w	r2, r2, r5, lsr #1
 8002d5c:	0912      	lsrs	r2, r2, #4
 8002d5e:	eb02 0542 	add.w	r5, r2, r2, lsl #1
 8002d62:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
 8002d66:	1b5b      	subs	r3, r3, r5
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	4d38      	ldr	r5, [pc, #224]	@ (8002e4c <hanUniFontLoad+0x13c>)
 8002d6c:	802b      	strh	r3, [r5, #0]
  uChosung   = utf16 / 21;
 8002d6e:	b292      	uxth	r2, r2
 8002d70:	4e37      	ldr	r6, [pc, #220]	@ (8002e50 <hanUniFontLoad+0x140>)
 8002d72:	8032      	strh	r2, [r6, #0]


  //make font index
  uChosung   = UniChoIdxTbl[uChosung];    //Chosung index
 8002d74:	4f37      	ldr	r7, [pc, #220]	@ (8002e54 <hanUniFontLoad+0x144>)
 8002d76:	5cbf      	ldrb	r7, [r7, r2]
 8002d78:	8037      	strh	r7, [r6, #0]
  uJoongsung = UniJooIdxTbl[uJoongsung];  //Joongsung index
 8002d7a:	4a37      	ldr	r2, [pc, #220]	@ (8002e58 <hanUniFontLoad+0x148>)
 8002d7c:	5cd6      	ldrb	r6, [r2, r3]
 8002d7e:	802e      	strh	r6, [r5, #0]
  uJongsung  = UniJonIdxTbl[uJongsung];   //Jongsung index
 8002d80:	4b36      	ldr	r3, [pc, #216]	@ (8002e5c <hanUniFontLoad+0x14c>)
 8002d82:	f813 9000 	ldrb.w	r9, [r3, r0]
 8002d86:	f8a1 9000 	strh.w	r9, [r1]


  //decide a character type (몇번째 벌을 사용할지 결정)
  uChoType = uJongsung ? ChoTypeCaseJongYes[uJoongsung]:ChoTypeCaseJongNo [uJoongsung];
 8002d8a:	f1b9 0f00 	cmp.w	r9, #0
 8002d8e:	d00b      	beq.n	8002da8 <hanUniFontLoad+0x98>
 8002d90:	4b33      	ldr	r3, [pc, #204]	@ (8002e60 <hanUniFontLoad+0x150>)
 8002d92:	f813 e006 	ldrb.w	lr, [r3, r6]
 8002d96:	4b33      	ldr	r3, [pc, #204]	@ (8002e64 <hanUniFontLoad+0x154>)
 8002d98:	f8a3 e000 	strh.w	lr, [r3]
    //'ㄱ'(1) 이나 'ㅋ'(16) 인경우는
  uJooType = ((uChosung == 0 || uChosung == 1 ||uChosung == 16 ) ? 0: 1) + (uJongsung ? 2: 0);
 8002d9c:	2f01      	cmp	r7, #1
 8002d9e:	d909      	bls.n	8002db4 <hanUniFontLoad+0xa4>
 8002da0:	2f10      	cmp	r7, #16
 8002da2:	d005      	beq.n	8002db0 <hanUniFontLoad+0xa0>
 8002da4:	2501      	movs	r5, #1
 8002da6:	e006      	b.n	8002db6 <hanUniFontLoad+0xa6>
  uChoType = uJongsung ? ChoTypeCaseJongYes[uJoongsung]:ChoTypeCaseJongNo [uJoongsung];
 8002da8:	4b2f      	ldr	r3, [pc, #188]	@ (8002e68 <hanUniFontLoad+0x158>)
 8002daa:	f813 e006 	ldrb.w	lr, [r3, r6]
 8002dae:	e7f2      	b.n	8002d96 <hanUniFontLoad+0x86>
  uJooType = ((uChosung == 0 || uChosung == 1 ||uChosung == 16 ) ? 0: 1) + (uJongsung ? 2: 0);
 8002db0:	2500      	movs	r5, #0
 8002db2:	e000      	b.n	8002db6 <hanUniFontLoad+0xa6>
 8002db4:	2500      	movs	r5, #0
 8002db6:	b2ad      	uxth	r5, r5
 8002db8:	f1b9 0f00 	cmp.w	r9, #0
 8002dbc:	d00b      	beq.n	8002dd6 <hanUniFontLoad+0xc6>
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	441d      	add	r5, r3
 8002dc2:	4b2a      	ldr	r3, [pc, #168]	@ (8002e6c <hanUniFontLoad+0x15c>)
 8002dc4:	801d      	strh	r5, [r3, #0]
  uJonType = JonType[uJoongsung];
 8002dc6:	4b2a      	ldr	r3, [pc, #168]	@ (8002e70 <hanUniFontLoad+0x160>)
 8002dc8:	f813 8006 	ldrb.w	r8, [r3, r6]
 8002dcc:	4b29      	ldr	r3, [pc, #164]	@ (8002e74 <hanUniFontLoad+0x164>)
 8002dce:	f8a3 8000 	strh.w	r8, [r3]

  for(i = 0; i<32; i++)
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	e01a      	b.n	8002e0c <hanUniFontLoad+0xfc>
  uJooType = ((uChosung == 0 || uChosung == 1 ||uChosung == 16 ) ? 0: 1) + (uJongsung ? 2: 0);
 8002dd6:	464b      	mov	r3, r9
 8002dd8:	e7f2      	b.n	8002dc0 <hanUniFontLoad+0xb0>
  {
    FontPtr->FontBuffer[i]  = (uint8_t)K_font[uChoType*20+uChosung][i];
 8002dda:	eb0e 028e 	add.w	r2, lr, lr, lsl #2
 8002dde:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 8002de2:	4925      	ldr	r1, [pc, #148]	@ (8002e78 <hanUniFontLoad+0x168>)
 8002de4:	eb01 1242 	add.w	r2, r1, r2, lsl #5
 8002de8:	5cd0      	ldrb	r0, [r2, r3]
 8002dea:	eb04 0c03 	add.w	ip, r4, r3
 8002dee:	f88c 0006 	strb.w	r0, [ip, #6]
    FontPtr->FontBuffer[i] |= (uint8_t)K_font[160 + uJooType*22+uJoongsung][i];
 8002df2:	2216      	movs	r2, #22
 8002df4:	fb05 f202 	mul.w	r2, r5, r2
 8002df8:	32a0      	adds	r2, #160	@ 0xa0
 8002dfa:	4432      	add	r2, r6
 8002dfc:	eb01 1142 	add.w	r1, r1, r2, lsl #5
 8002e00:	5cca      	ldrb	r2, [r1, r3]
 8002e02:	4310      	orrs	r0, r2
 8002e04:	f88c 0006 	strb.w	r0, [ip, #6]
  for(i = 0; i<32; i++)
 8002e08:	3301      	adds	r3, #1
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	2b1f      	cmp	r3, #31
 8002e0e:	d9e4      	bls.n	8002dda <hanUniFontLoad+0xca>
  }

  //combine Jongsung
  if(uJongsung)
 8002e10:	f1b9 0f00 	cmp.w	r9, #0
 8002e14:	d101      	bne.n	8002e1a <hanUniFontLoad+0x10a>
  {
    for(i = 0; i < 32; i++)   FontPtr->FontBuffer[i] |= K_font[248 + uJonType*28+uJongsung][i];
  }
}
 8002e16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    for(i = 0; i < 32; i++)   FontPtr->FontBuffer[i] |= K_font[248 + uJonType*28+uJongsung][i];
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	2a1f      	cmp	r2, #31
 8002e1e:	d8fa      	bhi.n	8002e16 <hanUniFontLoad+0x106>
 8002e20:	18a5      	adds	r5, r4, r2
 8002e22:	79a9      	ldrb	r1, [r5, #6]
 8002e24:	ebc8 03c8 	rsb	r3, r8, r8, lsl #3
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	33f8      	adds	r3, #248	@ 0xf8
 8002e2c:	444b      	add	r3, r9
 8002e2e:	4812      	ldr	r0, [pc, #72]	@ (8002e78 <hanUniFontLoad+0x168>)
 8002e30:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8002e34:	5c9b      	ldrb	r3, [r3, r2]
 8002e36:	430b      	orrs	r3, r1
 8002e38:	71ab      	strb	r3, [r5, #6]
 8002e3a:	3201      	adds	r2, #1
 8002e3c:	b292      	uxth	r2, r2
 8002e3e:	e7ed      	b.n	8002e1c <hanUniFontLoad+0x10c>
 8002e40:	24924925 	.word	0x24924925
 8002e44:	200059f0 	.word	0x200059f0
 8002e48:	86186187 	.word	0x86186187
 8002e4c:	200059ee 	.word	0x200059ee
 8002e50:	200059ec 	.word	0x200059ec
 8002e54:	08012fa4 	.word	0x08012fa4
 8002e58:	08012f84 	.word	0x08012f84
 8002e5c:	08012f64 	.word	0x08012f64
 8002e60:	08012f34 	.word	0x08012f34
 8002e64:	200059ea 	.word	0x200059ea
 8002e68:	08012f4c 	.word	0x08012f4c
 8002e6c:	200059e8 	.word	0x200059e8
 8002e70:	08012f1c 	.word	0x08012f1c
 8002e74:	200059e6 	.word	0x200059e6
 8002e78:	0800efc0 	.word	0x0800efc0

08002e7c <hanEngFontLoad>:
void hanEngFontLoad(char *HanCode, han_font_t *FontPtr)
{
  uint16_t i;
  char EngCode;

  EngCode = *HanCode;
 8002e7c:	f890 c000 	ldrb.w	ip, [r0]

  EngCode -= 0x20;  // FONT는 스페이스 부터 시작한다.
 8002e80:	f1ac 0c20 	sub.w	ip, ip, #32
 8002e84:	fa5f fc8c 	uxtb.w	ip, ip

  for ( i = 0 ; i < 16 ; i++ )
 8002e88:	2300      	movs	r3, #0
 8002e8a:	e007      	b.n	8002e9c <hanEngFontLoad+0x20>
  {
     FontPtr->FontBuffer[ i ] = (char)wEngFon[(int)EngCode][i];
 8002e8c:	4a05      	ldr	r2, [pc, #20]	@ (8002ea4 <hanEngFontLoad+0x28>)
 8002e8e:	eb02 120c 	add.w	r2, r2, ip, lsl #4
 8002e92:	5cd0      	ldrb	r0, [r2, r3]
 8002e94:	18ca      	adds	r2, r1, r3
 8002e96:	7190      	strb	r0, [r2, #6]
  for ( i = 0 ; i < 16 ; i++ )
 8002e98:	3301      	adds	r3, #1
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	2b0f      	cmp	r3, #15
 8002e9e:	d9f5      	bls.n	8002e8c <hanEngFontLoad+0x10>
  }
}
 8002ea0:	4770      	bx	lr
 8002ea2:	bf00      	nop
 8002ea4:	08013024 	.word	0x08013024

08002ea8 <hanCnvCodeWan2Johab>:
uint16_t hanCnvCodeWan2Johab(uint16_t WanCode)
{
  int index;
  uint16_t hcode, lcode;

  hcode = (WanCode >> 8) & 0xFF;
 8002ea8:	0a03      	lsrs	r3, r0, #8
  lcode = WanCode & 0x0ff;
 8002eaa:	b2c0      	uxtb	r0, r0

  index = (hcode - 0x0B0) * 94 + (lcode - 0x0A1);
 8002eac:	3bb0      	subs	r3, #176	@ 0xb0
 8002eae:	38a1      	subs	r0, #161	@ 0xa1
 8002eb0:	225e      	movs	r2, #94	@ 0x5e
 8002eb2:	fb02 0003 	mla	r0, r2, r3, r0

  return wWanToJohabTable[index];
}
 8002eb6:	4b02      	ldr	r3, [pc, #8]	@ (8002ec0 <hanCnvCodeWan2Johab+0x18>)
 8002eb8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop
 8002ec0:	08011cc0 	.word	0x08011cc0

08002ec4 <hanWanFontLoad>:
{
 8002ec4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002ec8:	460c      	mov	r4, r1
  wHanCode = (uint16_t)HanCode[0]<<8  | ((uint16_t)HanCode[1] & 0x00FF);
 8002eca:	7802      	ldrb	r2, [r0, #0]
 8002ecc:	7840      	ldrb	r0, [r0, #1]
  wHanCode = hanCnvCodeWan2Johab(wHanCode);
 8002ece:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8002ed2:	f7ff ffe9 	bl	8002ea8 <hanCnvCodeWan2Johab>
  uChosung   = (wHanCode>>10)&0x001F;//Chosung code
 8002ed6:	f3c0 2684 	ubfx	r6, r0, #10, #5
 8002eda:	4d38      	ldr	r5, [pc, #224]	@ (8002fbc <hanWanFontLoad+0xf8>)
 8002edc:	802e      	strh	r6, [r5, #0]
  uJoongsung = (wHanCode>>5) &0x001F;//Joongsung code
 8002ede:	f3c0 1144 	ubfx	r1, r0, #5, #5
 8002ee2:	4a37      	ldr	r2, [pc, #220]	@ (8002fc0 <hanWanFontLoad+0xfc>)
 8002ee4:	8011      	strh	r1, [r2, #0]
  uJongsung  = wHanCode & 0x001F;    //Jongsung code
 8002ee6:	f000 001f 	and.w	r0, r0, #31
 8002eea:	4b36      	ldr	r3, [pc, #216]	@ (8002fc4 <hanWanFontLoad+0x100>)
 8002eec:	8018      	strh	r0, [r3, #0]
  uChosung   = ChoIdxTbl[uChosung];    //Chosung index
 8002eee:	4f36      	ldr	r7, [pc, #216]	@ (8002fc8 <hanWanFontLoad+0x104>)
 8002ef0:	5dbf      	ldrb	r7, [r7, r6]
 8002ef2:	802f      	strh	r7, [r5, #0]
  uJoongsung = JooIdxTbl[uJoongsung];  //Joongsung index
 8002ef4:	4d35      	ldr	r5, [pc, #212]	@ (8002fcc <hanWanFontLoad+0x108>)
 8002ef6:	5c6e      	ldrb	r6, [r5, r1]
 8002ef8:	8016      	strh	r6, [r2, #0]
  uJongsung  = JonIdxTbl[uJongsung];   //Jongsung index
 8002efa:	4a35      	ldr	r2, [pc, #212]	@ (8002fd0 <hanWanFontLoad+0x10c>)
 8002efc:	f812 9000 	ldrb.w	r9, [r2, r0]
 8002f00:	f8a3 9000 	strh.w	r9, [r3]
  uChoType = uJongsung ? ChoTypeCaseJongYes[uJoongsung]:ChoTypeCaseJongNo [uJoongsung];
 8002f04:	f1b9 0f00 	cmp.w	r9, #0
 8002f08:	d00b      	beq.n	8002f22 <hanWanFontLoad+0x5e>
 8002f0a:	4b32      	ldr	r3, [pc, #200]	@ (8002fd4 <hanWanFontLoad+0x110>)
 8002f0c:	f813 e006 	ldrb.w	lr, [r3, r6]
 8002f10:	4b31      	ldr	r3, [pc, #196]	@ (8002fd8 <hanWanFontLoad+0x114>)
 8002f12:	f8a3 e000 	strh.w	lr, [r3]
  uJooType = ((uChosung == 0 || uChosung == 1 ||uChosung == 16 ) ? 0: 1) + (uJongsung ? 2: 0);
 8002f16:	2f01      	cmp	r7, #1
 8002f18:	d909      	bls.n	8002f2e <hanWanFontLoad+0x6a>
 8002f1a:	2f10      	cmp	r7, #16
 8002f1c:	d005      	beq.n	8002f2a <hanWanFontLoad+0x66>
 8002f1e:	2501      	movs	r5, #1
 8002f20:	e006      	b.n	8002f30 <hanWanFontLoad+0x6c>
  uChoType = uJongsung ? ChoTypeCaseJongYes[uJoongsung]:ChoTypeCaseJongNo [uJoongsung];
 8002f22:	4b2e      	ldr	r3, [pc, #184]	@ (8002fdc <hanWanFontLoad+0x118>)
 8002f24:	f813 e006 	ldrb.w	lr, [r3, r6]
 8002f28:	e7f2      	b.n	8002f10 <hanWanFontLoad+0x4c>
  uJooType = ((uChosung == 0 || uChosung == 1 ||uChosung == 16 ) ? 0: 1) + (uJongsung ? 2: 0);
 8002f2a:	2500      	movs	r5, #0
 8002f2c:	e000      	b.n	8002f30 <hanWanFontLoad+0x6c>
 8002f2e:	2500      	movs	r5, #0
 8002f30:	b2ad      	uxth	r5, r5
 8002f32:	f1b9 0f00 	cmp.w	r9, #0
 8002f36:	d00b      	beq.n	8002f50 <hanWanFontLoad+0x8c>
 8002f38:	2302      	movs	r3, #2
 8002f3a:	441d      	add	r5, r3
 8002f3c:	4b28      	ldr	r3, [pc, #160]	@ (8002fe0 <hanWanFontLoad+0x11c>)
 8002f3e:	801d      	strh	r5, [r3, #0]
  uJonType = JonType[uJoongsung];
 8002f40:	4b28      	ldr	r3, [pc, #160]	@ (8002fe4 <hanWanFontLoad+0x120>)
 8002f42:	f813 8006 	ldrb.w	r8, [r3, r6]
 8002f46:	4b28      	ldr	r3, [pc, #160]	@ (8002fe8 <hanWanFontLoad+0x124>)
 8002f48:	f8a3 8000 	strh.w	r8, [r3]
  for(i = 0; i<32; i++)
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	e01a      	b.n	8002f86 <hanWanFontLoad+0xc2>
  uJooType = ((uChosung == 0 || uChosung == 1 ||uChosung == 16 ) ? 0: 1) + (uJongsung ? 2: 0);
 8002f50:	464b      	mov	r3, r9
 8002f52:	e7f2      	b.n	8002f3a <hanWanFontLoad+0x76>
    FontPtr->FontBuffer[i]  = K_font[uChoType*20+uChosung][i];
 8002f54:	eb0e 028e 	add.w	r2, lr, lr, lsl #2
 8002f58:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 8002f5c:	4923      	ldr	r1, [pc, #140]	@ (8002fec <hanWanFontLoad+0x128>)
 8002f5e:	eb01 1242 	add.w	r2, r1, r2, lsl #5
 8002f62:	5cd0      	ldrb	r0, [r2, r3]
 8002f64:	eb04 0c03 	add.w	ip, r4, r3
 8002f68:	f88c 0006 	strb.w	r0, [ip, #6]
    FontPtr->FontBuffer[i] |= K_font[160 + uJooType*22+uJoongsung][i];
 8002f6c:	2216      	movs	r2, #22
 8002f6e:	fb05 f202 	mul.w	r2, r5, r2
 8002f72:	32a0      	adds	r2, #160	@ 0xa0
 8002f74:	4432      	add	r2, r6
 8002f76:	eb01 1142 	add.w	r1, r1, r2, lsl #5
 8002f7a:	5cca      	ldrb	r2, [r1, r3]
 8002f7c:	4310      	orrs	r0, r2
 8002f7e:	f88c 0006 	strb.w	r0, [ip, #6]
  for(i = 0; i<32; i++)
 8002f82:	3301      	adds	r3, #1
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	2b1f      	cmp	r3, #31
 8002f88:	d9e4      	bls.n	8002f54 <hanWanFontLoad+0x90>
  if(uJongsung)
 8002f8a:	f1b9 0f00 	cmp.w	r9, #0
 8002f8e:	d101      	bne.n	8002f94 <hanWanFontLoad+0xd0>
}
 8002f90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    for(i = 0; i < 32; i++)   FontPtr->FontBuffer[i] |= K_font[248 + uJonType*28+uJongsung][i];
 8002f94:	2200      	movs	r2, #0
 8002f96:	2a1f      	cmp	r2, #31
 8002f98:	d8fa      	bhi.n	8002f90 <hanWanFontLoad+0xcc>
 8002f9a:	18a5      	adds	r5, r4, r2
 8002f9c:	79a9      	ldrb	r1, [r5, #6]
 8002f9e:	ebc8 03c8 	rsb	r3, r8, r8, lsl #3
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	33f8      	adds	r3, #248	@ 0xf8
 8002fa6:	444b      	add	r3, r9
 8002fa8:	4810      	ldr	r0, [pc, #64]	@ (8002fec <hanWanFontLoad+0x128>)
 8002faa:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8002fae:	5c9b      	ldrb	r3, [r3, r2]
 8002fb0:	430b      	orrs	r3, r1
 8002fb2:	71ab      	strb	r3, [r5, #6]
 8002fb4:	3201      	adds	r2, #1
 8002fb6:	b292      	uxth	r2, r2
 8002fb8:	e7ed      	b.n	8002f96 <hanWanFontLoad+0xd2>
 8002fba:	bf00      	nop
 8002fbc:	200059fc 	.word	0x200059fc
 8002fc0:	200059fa 	.word	0x200059fa
 8002fc4:	200059f8 	.word	0x200059f8
 8002fc8:	08013004 	.word	0x08013004
 8002fcc:	08012fe4 	.word	0x08012fe4
 8002fd0:	08012fc4 	.word	0x08012fc4
 8002fd4:	08012f34 	.word	0x08012f34
 8002fd8:	200059f6 	.word	0x200059f6
 8002fdc:	08012f4c 	.word	0x08012f4c
 8002fe0:	200059f4 	.word	0x200059f4
 8002fe4:	08012f1c 	.word	0x08012f1c
 8002fe8:	200059f2 	.word	0x200059f2
 8002fec:	0800efc0 	.word	0x0800efc0

08002ff0 <hanFontLoad>:
{
 8002ff0:	b570      	push	{r4, r5, r6, lr}
 8002ff2:	4605      	mov	r5, r0
 8002ff4:	460c      	mov	r4, r1
  memset(FontPtr->FontBuffer, 0x00, 32);
 8002ff6:	2220      	movs	r2, #32
 8002ff8:	2100      	movs	r1, #0
 8002ffa:	1da0      	adds	r0, r4, #6
 8002ffc:	f008 fa46 	bl	800b48c <memset>
  FontPtr->Code_Type = PHAN_NULL_CODE;
 8003000:	2300      	movs	r3, #0
 8003002:	80a3      	strh	r3, [r4, #4]
  if( !HanCode[0] || HanCode[0] == 0x0A )   // 문자열 마지막
 8003004:	782b      	ldrb	r3, [r5, #0]
 8003006:	b1cb      	cbz	r3, 800303c <hanFontLoad+0x4c>
 8003008:	2b0a      	cmp	r3, #10
 800300a:	d017      	beq.n	800303c <hanFontLoad+0x4c>
  else if( HanCode[0] & 0x80 )              // 한글 코드인경우
 800300c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003010:	d022      	beq.n	8003058 <hanFontLoad+0x68>
    utf8_code = ((uint8_t)HanCode[0]<<16) | ((uint8_t)HanCode[1]<<8) | ((uint8_t)HanCode[2]<<0);
 8003012:	786a      	ldrb	r2, [r5, #1]
 8003014:	0212      	lsls	r2, r2, #8
 8003016:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 800301a:	78aa      	ldrb	r2, [r5, #2]
 800301c:	4313      	orrs	r3, r2
    if (utf8_code >= 0xEAB080 && utf8_code <= 0xED9FB0)
 800301e:	4a13      	ldr	r2, [pc, #76]	@ (800306c <hanFontLoad+0x7c>)
 8003020:	441a      	add	r2, r3
 8003022:	4b13      	ldr	r3, [pc, #76]	@ (8003070 <hanFontLoad+0x80>)
 8003024:	429a      	cmp	r2, r3
 8003026:	d80e      	bhi.n	8003046 <hanFontLoad+0x56>
      FontPtr->Code_Type = PHAN_HANGUL_CODE;
 8003028:	2301      	movs	r3, #1
 800302a:	80a3      	strh	r3, [r4, #4]
      FontPtr->Size_Char = 3;
 800302c:	2303      	movs	r3, #3
 800302e:	8063      	strh	r3, [r4, #2]
      hanUniFontLoad(HanCode, FontPtr);
 8003030:	4621      	mov	r1, r4
 8003032:	4628      	mov	r0, r5
 8003034:	f7ff fe6c 	bl	8002d10 <hanUniFontLoad>
    return PHAN_HANGUL_CODE;
 8003038:	2001      	movs	r0, #1
}
 800303a:	bd70      	pop	{r4, r5, r6, pc}
    FontPtr->Code_Type = PHAN_END_CODE;
 800303c:	2004      	movs	r0, #4
 800303e:	80a0      	strh	r0, [r4, #4]
    FontPtr->Size_Char = 1;
 8003040:	2301      	movs	r3, #1
 8003042:	8063      	strh	r3, [r4, #2]
    return PHAN_END_CODE;
 8003044:	e7f9      	b.n	800303a <hanFontLoad+0x4a>
      FontPtr->Code_Type = PHAN_HANGUL_CODE;
 8003046:	2301      	movs	r3, #1
 8003048:	80a3      	strh	r3, [r4, #4]
      FontPtr->Size_Char = 2;
 800304a:	2302      	movs	r3, #2
 800304c:	8063      	strh	r3, [r4, #2]
      hanWanFontLoad(HanCode, FontPtr );
 800304e:	4621      	mov	r1, r4
 8003050:	4628      	mov	r0, r5
 8003052:	f7ff ff37 	bl	8002ec4 <hanWanFontLoad>
 8003056:	e7ef      	b.n	8003038 <hanFontLoad+0x48>
    FontPtr->Code_Type = PHAN_ENG_CODE;
 8003058:	2602      	movs	r6, #2
 800305a:	80a6      	strh	r6, [r4, #4]
    FontPtr->Size_Char = 1;
 800305c:	2301      	movs	r3, #1
 800305e:	8063      	strh	r3, [r4, #2]
    hanEngFontLoad(HanCode, FontPtr);
 8003060:	4621      	mov	r1, r4
 8003062:	4628      	mov	r0, r5
 8003064:	f7ff ff0a 	bl	8002e7c <hanEngFontLoad>
    return PHAN_ENG_CODE;
 8003068:	4630      	mov	r0, r6
 800306a:	e7e6      	b.n	800303a <hanFontLoad+0x4a>
 800306c:	ff154f80 	.word	0xff154f80
 8003070:	0002ef30 	.word	0x0002ef30

08003074 <ssd1306SetWindow>:
  return true;
}

void ssd1306SetWindow(int32_t x0, int32_t y0, int32_t x1, int32_t y1)
{
}
 8003074:	4770      	bx	lr

08003076 <ssd1306GetWidth>:

uint16_t ssd1306GetWidth(void)
{
  return LCD_WIDTH;
}
 8003076:	2080      	movs	r0, #128	@ 0x80
 8003078:	4770      	bx	lr

0800307a <ssd1306GetHeight>:

uint16_t ssd1306GetHeight(void)
{
  return LCD_HEIGHT;
}
 800307a:	2040      	movs	r0, #64	@ 0x40
 800307c:	4770      	bx	lr
	...

08003080 <ssd1306SetCallBack>:
  return true;
}

bool ssd1306SetCallBack(void (*p_func)(void))
{
  frameCallBack = p_func;
 8003080:	4b01      	ldr	r3, [pc, #4]	@ (8003088 <ssd1306SetCallBack+0x8>)
 8003082:	6018      	str	r0, [r3, #0]

  return true;
}
 8003084:	2001      	movs	r0, #1
 8003086:	4770      	bx	lr
 8003088:	20005e00 	.word	0x20005e00

0800308c <ssd1306Fill>:

void ssd1306Fill(uint16_t color)
{
  uint32_t i;

  for(i = 0; i < sizeof(ssd1306_buffer); i++)
 800308c:	2300      	movs	r3, #0
 800308e:	e003      	b.n	8003098 <ssd1306Fill+0xc>
  {
    ssd1306_buffer[i] = (color > 0) ? 0xFF : 0x00;
 8003090:	2100      	movs	r1, #0
 8003092:	4a05      	ldr	r2, [pc, #20]	@ (80030a8 <ssd1306Fill+0x1c>)
 8003094:	54d1      	strb	r1, [r2, r3]
  for(i = 0; i < sizeof(ssd1306_buffer); i++)
 8003096:	3301      	adds	r3, #1
 8003098:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800309c:	d203      	bcs.n	80030a6 <ssd1306Fill+0x1a>
    ssd1306_buffer[i] = (color > 0) ? 0xFF : 0x00;
 800309e:	2800      	cmp	r0, #0
 80030a0:	d0f6      	beq.n	8003090 <ssd1306Fill+0x4>
 80030a2:	21ff      	movs	r1, #255	@ 0xff
 80030a4:	e7f5      	b.n	8003092 <ssd1306Fill+0x6>
  }
}
 80030a6:	4770      	bx	lr
 80030a8:	20005a00 	.word	0x20005a00

080030ac <ssd1306DrawPixel>:
}
#endif

void ssd1306DrawPixel(uint8_t x, uint8_t y, uint16_t color)
{
  if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 80030ac:	f010 0f80 	tst.w	r0, #128	@ 0x80
 80030b0:	d11f      	bne.n	80030f2 <ssd1306DrawPixel+0x46>
 80030b2:	293f      	cmp	r1, #63	@ 0x3f
 80030b4:	d81d      	bhi.n	80030f2 <ssd1306DrawPixel+0x46>
{
 80030b6:	b410      	push	{r4}
  {
    return;
  }


  if (color > 0)
 80030b8:	b16a      	cbz	r2, 80030d6 <ssd1306DrawPixel+0x2a>
  {
    ssd1306_buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80030ba:	08cb      	lsrs	r3, r1, #3
 80030bc:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 80030c0:	4c0c      	ldr	r4, [pc, #48]	@ (80030f4 <ssd1306DrawPixel+0x48>)
 80030c2:	5c23      	ldrb	r3, [r4, r0]
 80030c4:	f001 0107 	and.w	r1, r1, #7
 80030c8:	2201      	movs	r2, #1
 80030ca:	408a      	lsls	r2, r1
 80030cc:	4313      	orrs	r3, r2
 80030ce:	5423      	strb	r3, [r4, r0]
  }
  else
  {
    ssd1306_buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
  }
}
 80030d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80030d4:	4770      	bx	lr
    ssd1306_buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80030d6:	08cb      	lsrs	r3, r1, #3
 80030d8:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 80030dc:	4c05      	ldr	r4, [pc, #20]	@ (80030f4 <ssd1306DrawPixel+0x48>)
 80030de:	5c22      	ldrb	r2, [r4, r0]
 80030e0:	f001 0107 	and.w	r1, r1, #7
 80030e4:	2301      	movs	r3, #1
 80030e6:	408b      	lsls	r3, r1
 80030e8:	43db      	mvns	r3, r3
 80030ea:	b25b      	sxtb	r3, r3
 80030ec:	4013      	ands	r3, r2
 80030ee:	5423      	strb	r3, [r4, r0]
 80030f0:	e7ee      	b.n	80030d0 <ssd1306DrawPixel+0x24>
 80030f2:	4770      	bx	lr
 80030f4:	20005a00 	.word	0x20005a00

080030f8 <ssd1306InitDriver>:
  p_driver->init        = ssd1306Init;
 80030f8:	4b07      	ldr	r3, [pc, #28]	@ (8003118 <ssd1306InitDriver+0x20>)
 80030fa:	6003      	str	r3, [r0, #0]
  p_driver->reset       = ssd1306Reset;
 80030fc:	4b07      	ldr	r3, [pc, #28]	@ (800311c <ssd1306InitDriver+0x24>)
 80030fe:	6043      	str	r3, [r0, #4]
  p_driver->setWindow   = ssd1306SetWindow;
 8003100:	4b07      	ldr	r3, [pc, #28]	@ (8003120 <ssd1306InitDriver+0x28>)
 8003102:	6083      	str	r3, [r0, #8]
  p_driver->getWidth    = ssd1306GetWidth;
 8003104:	4b07      	ldr	r3, [pc, #28]	@ (8003124 <ssd1306InitDriver+0x2c>)
 8003106:	6103      	str	r3, [r0, #16]
  p_driver->getHeight   = ssd1306GetHeight;
 8003108:	4b07      	ldr	r3, [pc, #28]	@ (8003128 <ssd1306InitDriver+0x30>)
 800310a:	6143      	str	r3, [r0, #20]
  p_driver->setCallBack = ssd1306SetCallBack;
 800310c:	4b07      	ldr	r3, [pc, #28]	@ (800312c <ssd1306InitDriver+0x34>)
 800310e:	6183      	str	r3, [r0, #24]
  p_driver->sendBuffer  = ssd1306SendBuffer;
 8003110:	4b07      	ldr	r3, [pc, #28]	@ (8003130 <ssd1306InitDriver+0x38>)
 8003112:	61c3      	str	r3, [r0, #28]
}
 8003114:	2001      	movs	r0, #1
 8003116:	4770      	bx	lr
 8003118:	080032bf 	.word	0x080032bf
 800311c:	080031dd 	.word	0x080031dd
 8003120:	08003075 	.word	0x08003075
 8003124:	08003077 	.word	0x08003077
 8003128:	0800307b 	.word	0x0800307b
 800312c:	08003081 	.word	0x08003081
 8003130:	080031a1 	.word	0x080031a1

08003134 <ssd1306WriteCmd>:
{
 8003134:	b500      	push	{lr}
 8003136:	b083      	sub	sp, #12
 8003138:	4603      	mov	r3, r0
  return i2cWriteByte(i2c_ch, i2c_dev, 0x00, cmd_data, 10);
 800313a:	220a      	movs	r2, #10
 800313c:	9200      	str	r2, [sp, #0]
 800313e:	2200      	movs	r2, #0
 8003140:	213c      	movs	r1, #60	@ 0x3c
 8003142:	4610      	mov	r0, r2
 8003144:	f7ff f856 	bl	80021f4 <i2cWriteByte>
}
 8003148:	b003      	add	sp, #12
 800314a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08003150 <ssd1306UpdateDraw>:
{
 8003150:	b510      	push	{r4, lr}
 8003152:	b082      	sub	sp, #8
  for (i = 0; i < SSD1306_HEIGHT/8; i++)
 8003154:	2400      	movs	r4, #0
 8003156:	2c07      	cmp	r4, #7
 8003158:	d81b      	bhi.n	8003192 <ssd1306UpdateDraw+0x42>
    ssd1306WriteCmd(0xB0 + i);
 800315a:	f1a4 0050 	sub.w	r0, r4, #80	@ 0x50
 800315e:	b2c0      	uxtb	r0, r0
 8003160:	f7ff ffe8 	bl	8003134 <ssd1306WriteCmd>
    ssd1306WriteCmd(0x00);
 8003164:	2000      	movs	r0, #0
 8003166:	f7ff ffe5 	bl	8003134 <ssd1306WriteCmd>
    ssd1306WriteCmd(0x10);  
 800316a:	2010      	movs	r0, #16
 800316c:	f7ff ffe2 	bl	8003134 <ssd1306WriteCmd>
    if (i2cWriteBytes(i2c_ch, i2c_dev, 0x40, &ssd1306_buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100) == false)    
 8003170:	2364      	movs	r3, #100	@ 0x64
 8003172:	9301      	str	r3, [sp, #4]
 8003174:	2380      	movs	r3, #128	@ 0x80
 8003176:	9300      	str	r3, [sp, #0]
 8003178:	4b08      	ldr	r3, [pc, #32]	@ (800319c <ssd1306UpdateDraw+0x4c>)
 800317a:	eb03 13c4 	add.w	r3, r3, r4, lsl #7
 800317e:	2240      	movs	r2, #64	@ 0x40
 8003180:	213c      	movs	r1, #60	@ 0x3c
 8003182:	2000      	movs	r0, #0
 8003184:	f7ff f818 	bl	80021b8 <i2cWriteBytes>
 8003188:	4603      	mov	r3, r0
 800318a:	b118      	cbz	r0, 8003194 <ssd1306UpdateDraw+0x44>
  for (i = 0; i < SSD1306_HEIGHT/8; i++)
 800318c:	3401      	adds	r4, #1
 800318e:	b2e4      	uxtb	r4, r4
 8003190:	e7e1      	b.n	8003156 <ssd1306UpdateDraw+0x6>
  return true;
 8003192:	2301      	movs	r3, #1
}
 8003194:	4618      	mov	r0, r3
 8003196:	b002      	add	sp, #8
 8003198:	bd10      	pop	{r4, pc}
 800319a:	bf00      	nop
 800319c:	20005a00 	.word	0x20005a00

080031a0 <ssd1306SendBuffer>:
{
 80031a0:	b570      	push	{r4, r5, r6, lr}
 80031a2:	4606      	mov	r6, r0
  for (int y=0; y<SSD1306_HEIGHT; y++)
 80031a4:	2500      	movs	r5, #0
 80031a6:	e00b      	b.n	80031c0 <ssd1306SendBuffer+0x20>
      ssd1306DrawPixel(x, y, p_buf[y*LCD_WIDTH + x]);
 80031a8:	eb04 13c5 	add.w	r3, r4, r5, lsl #7
 80031ac:	f836 2013 	ldrh.w	r2, [r6, r3, lsl #1]
 80031b0:	b2e9      	uxtb	r1, r5
 80031b2:	b2e0      	uxtb	r0, r4
 80031b4:	f7ff ff7a 	bl	80030ac <ssd1306DrawPixel>
    for (int x=0; x<SSD1306_WIDTH; x++)
 80031b8:	3401      	adds	r4, #1
 80031ba:	2c7f      	cmp	r4, #127	@ 0x7f
 80031bc:	ddf4      	ble.n	80031a8 <ssd1306SendBuffer+0x8>
  for (int y=0; y<SSD1306_HEIGHT; y++)
 80031be:	3501      	adds	r5, #1
 80031c0:	2d3f      	cmp	r5, #63	@ 0x3f
 80031c2:	dc01      	bgt.n	80031c8 <ssd1306SendBuffer+0x28>
    for (int x=0; x<SSD1306_WIDTH; x++)
 80031c4:	2400      	movs	r4, #0
 80031c6:	e7f8      	b.n	80031ba <ssd1306SendBuffer+0x1a>
  ssd1306UpdateDraw();
 80031c8:	f7ff ffc2 	bl	8003150 <ssd1306UpdateDraw>
  if (frameCallBack != NULL)
 80031cc:	4b02      	ldr	r3, [pc, #8]	@ (80031d8 <ssd1306SendBuffer+0x38>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	b103      	cbz	r3, 80031d4 <ssd1306SendBuffer+0x34>
    frameCallBack();
 80031d2:	4798      	blx	r3
}
 80031d4:	2001      	movs	r0, #1
 80031d6:	bd70      	pop	{r4, r5, r6, pc}
 80031d8:	20005e00 	.word	0x20005e00

080031dc <ssd1306Reset>:
{
 80031dc:	b510      	push	{r4, lr}
  ret = i2cBegin(i2c_ch, 800);
 80031de:	f44f 7148 	mov.w	r1, #800	@ 0x320
 80031e2:	2000      	movs	r0, #0
 80031e4:	f7fe ffd2 	bl	800218c <i2cBegin>
  if (ret != true)
 80031e8:	4604      	mov	r4, r0
 80031ea:	b908      	cbnz	r0, 80031f0 <ssd1306Reset+0x14>
}
 80031ec:	4620      	mov	r0, r4
 80031ee:	bd10      	pop	{r4, pc}
  if (i2cIsDeviceReady(i2c_ch, i2c_dev) != true)
 80031f0:	213c      	movs	r1, #60	@ 0x3c
 80031f2:	2000      	movs	r0, #0
 80031f4:	f7fe ffcc 	bl	8002190 <i2cIsDeviceReady>
 80031f8:	4604      	mov	r4, r0
 80031fa:	2800      	cmp	r0, #0
 80031fc:	d0f6      	beq.n	80031ec <ssd1306Reset+0x10>
  ssd1306WriteCmd(0xAE); //display off
 80031fe:	20ae      	movs	r0, #174	@ 0xae
 8003200:	f7ff ff98 	bl	8003134 <ssd1306WriteCmd>
  ssd1306WriteCmd(0x20); //Set Memory Addressing Mode
 8003204:	2020      	movs	r0, #32
 8003206:	f7ff ff95 	bl	8003134 <ssd1306WriteCmd>
  ssd1306WriteCmd(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800320a:	2010      	movs	r0, #16
 800320c:	f7ff ff92 	bl	8003134 <ssd1306WriteCmd>
  ssd1306WriteCmd(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003210:	20b0      	movs	r0, #176	@ 0xb0
 8003212:	f7ff ff8f 	bl	8003134 <ssd1306WriteCmd>
  ssd1306WriteCmd(0xC8); //Set COM Output Scan Direction
 8003216:	20c8      	movs	r0, #200	@ 0xc8
 8003218:	f7ff ff8c 	bl	8003134 <ssd1306WriteCmd>
  ssd1306WriteCmd(0x00); //---set low column address
 800321c:	2000      	movs	r0, #0
 800321e:	f7ff ff89 	bl	8003134 <ssd1306WriteCmd>
  ssd1306WriteCmd(0x10); //---set high column address
 8003222:	2010      	movs	r0, #16
 8003224:	f7ff ff86 	bl	8003134 <ssd1306WriteCmd>
  ssd1306WriteCmd(0x40); //--set start line address
 8003228:	2040      	movs	r0, #64	@ 0x40
 800322a:	f7ff ff83 	bl	8003134 <ssd1306WriteCmd>
  ssd1306WriteCmd(0x81); //--set contrast control register
 800322e:	2081      	movs	r0, #129	@ 0x81
 8003230:	f7ff ff80 	bl	8003134 <ssd1306WriteCmd>
  ssd1306WriteCmd(0xFF);
 8003234:	20ff      	movs	r0, #255	@ 0xff
 8003236:	f7ff ff7d 	bl	8003134 <ssd1306WriteCmd>
  ssd1306WriteCmd(0xA1); //--set segment re-map 0 to 127
 800323a:	20a1      	movs	r0, #161	@ 0xa1
 800323c:	f7ff ff7a 	bl	8003134 <ssd1306WriteCmd>
  ssd1306WriteCmd(0xA6); //--set normal display
 8003240:	20a6      	movs	r0, #166	@ 0xa6
 8003242:	f7ff ff77 	bl	8003134 <ssd1306WriteCmd>
  ssd1306WriteCmd(0xA8); //--set multiplex ratio(1 to 64)
 8003246:	20a8      	movs	r0, #168	@ 0xa8
 8003248:	f7ff ff74 	bl	8003134 <ssd1306WriteCmd>
  ssd1306WriteCmd(SSD1306_HEIGHT-1); // 0x3F
 800324c:	203f      	movs	r0, #63	@ 0x3f
 800324e:	f7ff ff71 	bl	8003134 <ssd1306WriteCmd>
  ssd1306WriteCmd(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8003252:	20a4      	movs	r0, #164	@ 0xa4
 8003254:	f7ff ff6e 	bl	8003134 <ssd1306WriteCmd>
  ssd1306WriteCmd(0xD3); //-set display offset
 8003258:	20d3      	movs	r0, #211	@ 0xd3
 800325a:	f7ff ff6b 	bl	8003134 <ssd1306WriteCmd>
  ssd1306WriteCmd(0x00); //-not offset
 800325e:	2000      	movs	r0, #0
 8003260:	f7ff ff68 	bl	8003134 <ssd1306WriteCmd>
  ssd1306WriteCmd(0xD5); //--set display clock divide ratio/oscillator frequency
 8003264:	20d5      	movs	r0, #213	@ 0xd5
 8003266:	f7ff ff65 	bl	8003134 <ssd1306WriteCmd>
  ssd1306WriteCmd(0x80); //--set divide ratio
 800326a:	2080      	movs	r0, #128	@ 0x80
 800326c:	f7ff ff62 	bl	8003134 <ssd1306WriteCmd>
  ssd1306WriteCmd(0xD9); //--set pre-charge period
 8003270:	20d9      	movs	r0, #217	@ 0xd9
 8003272:	f7ff ff5f 	bl	8003134 <ssd1306WriteCmd>
  ssd1306WriteCmd(0x22); //
 8003276:	2022      	movs	r0, #34	@ 0x22
 8003278:	f7ff ff5c 	bl	8003134 <ssd1306WriteCmd>
  ssd1306WriteCmd(0xDA); //--set com pins hardware configuration
 800327c:	20da      	movs	r0, #218	@ 0xda
 800327e:	f7ff ff59 	bl	8003134 <ssd1306WriteCmd>
  ssd1306WriteCmd(0x12);
 8003282:	2012      	movs	r0, #18
 8003284:	f7ff ff56 	bl	8003134 <ssd1306WriteCmd>
  ssd1306WriteCmd(0xDB); //--set vcomh
 8003288:	20db      	movs	r0, #219	@ 0xdb
 800328a:	f7ff ff53 	bl	8003134 <ssd1306WriteCmd>
  ssd1306WriteCmd(0x20); //0x20,0.77xVcc
 800328e:	2020      	movs	r0, #32
 8003290:	f7ff ff50 	bl	8003134 <ssd1306WriteCmd>
  ssd1306WriteCmd(0x8D); //--set DC-DC enable
 8003294:	208d      	movs	r0, #141	@ 0x8d
 8003296:	f7ff ff4d 	bl	8003134 <ssd1306WriteCmd>
  ssd1306WriteCmd(0x14); //
 800329a:	2014      	movs	r0, #20
 800329c:	f7ff ff4a 	bl	8003134 <ssd1306WriteCmd>
  ssd1306WriteCmd(SSD1306_SEGREMAP | 0x01); // 정방향
 80032a0:	20a1      	movs	r0, #161	@ 0xa1
 80032a2:	f7ff ff47 	bl	8003134 <ssd1306WriteCmd>
  ssd1306WriteCmd(SSD1306_COMSCANDEC);
 80032a6:	20c8      	movs	r0, #200	@ 0xc8
 80032a8:	f7ff ff44 	bl	8003134 <ssd1306WriteCmd>
  ssd1306WriteCmd(0xAF); //--turn on SSD1306 panel
 80032ac:	20af      	movs	r0, #175	@ 0xaf
 80032ae:	f7ff ff41 	bl	8003134 <ssd1306WriteCmd>
  ssd1306Fill(black);
 80032b2:	2000      	movs	r0, #0
 80032b4:	f7ff feea 	bl	800308c <ssd1306Fill>
  ssd1306UpdateDraw();
 80032b8:	f7ff ff4a 	bl	8003150 <ssd1306UpdateDraw>
  return true;
 80032bc:	e796      	b.n	80031ec <ssd1306Reset+0x10>

080032be <ssd1306Init>:
{
 80032be:	b508      	push	{r3, lr}
  ret = ssd1306Reset();
 80032c0:	f7ff ff8c 	bl	80031dc <ssd1306Reset>
}
 80032c4:	bd08      	pop	{r3, pc}
	...

080032c8 <hwInit>:


#include "hw.h"

void hwInit(void)
{
 80032c8:	b510      	push	{r4, lr}
  bspInit();
 80032ca:	f7fe fe3b 	bl	8001f44 <bspInit>

  cliInit();
 80032ce:	f000 fd3b 	bl	8003d48 <cliInit>
  logInit();
 80032d2:	f000 ffdd 	bl	8004290 <logInit>
  uartInit();
 80032d6:	f7ff faa5 	bl	8002824 <uartInit>
  i2cInit();
 80032da:	f7fe ff37 	bl	800214c <i2cInit>
  lcdInit();
 80032de:	f7ff f96f 	bl	80025c0 <lcdInit>
  dacInit();
 80032e2:	f7fe ff17 	bl	8002114 <dacInit>
  adcInit();
 80032e6:	f7fe fed1 	bl	800208c <adcInit>

  for (int i=0; i<HW_UART_MAX_CH; i++)
 80032ea:	2400      	movs	r4, #0
 80032ec:	e005      	b.n	80032fa <hwInit+0x32>
  {
    uartOpen(i, 115200);
 80032ee:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 80032f2:	b2e0      	uxtb	r0, r4
 80032f4:	f7ff fac2 	bl	800287c <uartOpen>
  for (int i=0; i<HW_UART_MAX_CH; i++)
 80032f8:	3401      	adds	r4, #1
 80032fa:	2c01      	cmp	r4, #1
 80032fc:	ddf7      	ble.n	80032ee <hwInit+0x26>
  }
  uartOpen(_DEF_CH2, 256000);
 80032fe:	f44f 317a 	mov.w	r1, #256000	@ 0x3e800
 8003302:	2001      	movs	r0, #1
 8003304:	f7ff faba 	bl	800287c <uartOpen>

  logOpen(HW_LOG_CH, 115200);
 8003308:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 800330c:	2000      	movs	r0, #0
 800330e:	f000 ffc5 	bl	800429c <logOpen>
  logDebug("\r\n[ Firmware Begin... ]\r\n");
 8003312:	480d      	ldr	r0, [pc, #52]	@ (8003348 <hwInit+0x80>)
 8003314:	f000 ffd4 	bl	80042c0 <logPrintf>
  logDebug("Booting..Name \t\t: %s\r\n", _DEF_BOARD_NAME);
 8003318:	490c      	ldr	r1, [pc, #48]	@ (800334c <hwInit+0x84>)
 800331a:	480d      	ldr	r0, [pc, #52]	@ (8003350 <hwInit+0x88>)
 800331c:	f000 ffd0 	bl	80042c0 <logPrintf>
  logDebug("Booting..Ver  \t\t: %s\r\n", _DEF_FIRMWATRE_VERSION);
 8003320:	490c      	ldr	r1, [pc, #48]	@ (8003354 <hwInit+0x8c>)
 8003322:	480d      	ldr	r0, [pc, #52]	@ (8003358 <hwInit+0x90>)
 8003324:	f000 ffcc 	bl	80042c0 <logPrintf>
  logDebug("Booting..Clock\t\t: %d Mhz\r\n", (int)HAL_RCC_GetSysClockFreq() / 1000000);
 8003328:	f004 fa0a 	bl	8007740 <HAL_RCC_GetSysClockFreq>
 800332c:	490b      	ldr	r1, [pc, #44]	@ (800335c <hwInit+0x94>)
 800332e:	fb81 3100 	smull	r3, r1, r1, r0
 8003332:	17c0      	asrs	r0, r0, #31
 8003334:	ebc0 41a1 	rsb	r1, r0, r1, asr #18
 8003338:	4809      	ldr	r0, [pc, #36]	@ (8003360 <hwInit+0x98>)
 800333a:	f000 ffc1 	bl	80042c0 <logPrintf>
  logDebug("\n");
 800333e:	4809      	ldr	r0, [pc, #36]	@ (8003364 <hwInit+0x9c>)
 8003340:	f000 ffbe 	bl	80042c0 <logPrintf>
}
 8003344:	bd10      	pop	{r4, pc}
 8003346:	bf00      	nop
 8003348:	08015e38 	.word	0x08015e38
 800334c:	08015e54 	.word	0x08015e54
 8003350:	08015e64 	.word	0x08015e64
 8003354:	08015e7c 	.word	0x08015e7c
 8003358:	08015e88 	.word	0x08015e88
 800335c:	431bde83 	.word	0x431bde83
 8003360:	08015ea0 	.word	0x08015ea0
 8003364:	08015e50 	.word	0x08015e50

08003368 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8003368:	b510      	push	{r4, lr}
 800336a:	b08c      	sub	sp, #48	@ 0x30

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800336c:	2400      	movs	r4, #0
 800336e:	9409      	str	r4, [sp, #36]	@ 0x24
 8003370:	940a      	str	r4, [sp, #40]	@ 0x28
 8003372:	940b      	str	r4, [sp, #44]	@ 0x2c
  ADC_ChannelConfTypeDef sConfig = {0};
 8003374:	2220      	movs	r2, #32
 8003376:	4621      	mov	r1, r4
 8003378:	a801      	add	r0, sp, #4
 800337a:	f008 f887 	bl	800b48c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800337e:	483f      	ldr	r0, [pc, #252]	@ (800347c <MX_ADC1_Init+0x114>)
 8003380:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003384:	6003      	str	r3, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003386:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 800338a:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800338c:	6084      	str	r4, [r0, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800338e:	60c4      	str	r4, [r0, #12]
  hadc1.Init.GainCompensation = 0;
 8003390:	6104      	str	r4, [r0, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003392:	2301      	movs	r3, #1
 8003394:	6143      	str	r3, [r0, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003396:	2204      	movs	r2, #4
 8003398:	6182      	str	r2, [r0, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800339a:	7704      	strb	r4, [r0, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800339c:	7744      	strb	r4, [r0, #29]
  hadc1.Init.NbrOfConversion = 5;
 800339e:	2205      	movs	r2, #5
 80033a0:	6202      	str	r2, [r0, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80033a2:	f880 4024 	strb.w	r4, [r0, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T8_TRGO;
 80033a6:	f44f 629c 	mov.w	r2, #1248	@ 0x4e0
 80033aa:	62c2      	str	r2, [r0, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80033ac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80033b0:	6302      	str	r2, [r0, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80033b2:	f880 4038 	strb.w	r4, [r0, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80033b6:	63c4      	str	r4, [r0, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = ENABLE;
 80033b8:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_8;
 80033bc:	2208      	movs	r2, #8
 80033be:	6442      	str	r2, [r0, #68]	@ 0x44
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_3;
 80033c0:	2260      	movs	r2, #96	@ 0x60
 80033c2:	6482      	str	r2, [r0, #72]	@ 0x48
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80033c4:	64c4      	str	r4, [r0, #76]	@ 0x4c
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 80033c6:	6503      	str	r3, [r0, #80]	@ 0x50
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80033c8:	f001 fcb0 	bl	8004d2c <HAL_ADC_Init>
 80033cc:	2800      	cmp	r0, #0
 80033ce:	d140      	bne.n	8003452 <MX_ADC1_Init+0xea>
    Error_Handler();
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80033d0:	2300      	movs	r3, #0
 80033d2:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80033d4:	a909      	add	r1, sp, #36	@ 0x24
 80033d6:	4829      	ldr	r0, [pc, #164]	@ (800347c <MX_ADC1_Init+0x114>)
 80033d8:	f002 fbc8 	bl	8005b6c <HAL_ADCEx_MultiModeConfigChannel>
 80033dc:	2800      	cmp	r0, #0
 80033de:	d13b      	bne.n	8003458 <MX_ADC1_Init+0xf0>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80033e0:	4b27      	ldr	r3, [pc, #156]	@ (8003480 <MX_ADC1_Init+0x118>)
 80033e2:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80033e4:	2306      	movs	r3, #6
 80033e6:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 80033e8:	2305      	movs	r3, #5
 80033ea:	9303      	str	r3, [sp, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80033ec:	237f      	movs	r3, #127	@ 0x7f
 80033ee:	9304      	str	r3, [sp, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80033f0:	2304      	movs	r3, #4
 80033f2:	9305      	str	r3, [sp, #20]
  sConfig.Offset = 0;
 80033f4:	2300      	movs	r3, #0
 80033f6:	9306      	str	r3, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80033f8:	a901      	add	r1, sp, #4
 80033fa:	4820      	ldr	r0, [pc, #128]	@ (800347c <MX_ADC1_Init+0x114>)
 80033fc:	f001 ff5e 	bl	80052bc <HAL_ADC_ConfigChannel>
 8003400:	2800      	cmp	r0, #0
 8003402:	d12c      	bne.n	800345e <MX_ADC1_Init+0xf6>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8003404:	4b1f      	ldr	r3, [pc, #124]	@ (8003484 <MX_ADC1_Init+0x11c>)
 8003406:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003408:	230c      	movs	r3, #12
 800340a:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800340c:	a901      	add	r1, sp, #4
 800340e:	481b      	ldr	r0, [pc, #108]	@ (800347c <MX_ADC1_Init+0x114>)
 8003410:	f001 ff54 	bl	80052bc <HAL_ADC_ConfigChannel>
 8003414:	bb30      	cbnz	r0, 8003464 <MX_ADC1_Init+0xfc>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003416:	4b1c      	ldr	r3, [pc, #112]	@ (8003488 <MX_ADC1_Init+0x120>)
 8003418:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800341a:	2312      	movs	r3, #18
 800341c:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800341e:	a901      	add	r1, sp, #4
 8003420:	4816      	ldr	r0, [pc, #88]	@ (800347c <MX_ADC1_Init+0x114>)
 8003422:	f001 ff4b 	bl	80052bc <HAL_ADC_ConfigChannel>
 8003426:	bb00      	cbnz	r0, 800346a <MX_ADC1_Init+0x102>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8003428:	4b18      	ldr	r3, [pc, #96]	@ (800348c <MX_ADC1_Init+0x124>)
 800342a:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800342c:	2318      	movs	r3, #24
 800342e:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003430:	a901      	add	r1, sp, #4
 8003432:	4812      	ldr	r0, [pc, #72]	@ (800347c <MX_ADC1_Init+0x114>)
 8003434:	f001 ff42 	bl	80052bc <HAL_ADC_ConfigChannel>
 8003438:	b9d0      	cbnz	r0, 8003470 <MX_ADC1_Init+0x108>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800343a:	4b15      	ldr	r3, [pc, #84]	@ (8003490 <MX_ADC1_Init+0x128>)
 800343c:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800343e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003442:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003444:	a901      	add	r1, sp, #4
 8003446:	480d      	ldr	r0, [pc, #52]	@ (800347c <MX_ADC1_Init+0x114>)
 8003448:	f001 ff38 	bl	80052bc <HAL_ADC_ConfigChannel>
 800344c:	b998      	cbnz	r0, 8003476 <MX_ADC1_Init+0x10e>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800344e:	b00c      	add	sp, #48	@ 0x30
 8003450:	bd10      	pop	{r4, pc}
    Error_Handler();
 8003452:	f000 ff61 	bl	8004318 <Error_Handler>
 8003456:	e7bb      	b.n	80033d0 <MX_ADC1_Init+0x68>
    Error_Handler();
 8003458:	f000 ff5e 	bl	8004318 <Error_Handler>
 800345c:	e7c0      	b.n	80033e0 <MX_ADC1_Init+0x78>
    Error_Handler();
 800345e:	f000 ff5b 	bl	8004318 <Error_Handler>
 8003462:	e7cf      	b.n	8003404 <MX_ADC1_Init+0x9c>
    Error_Handler();
 8003464:	f000 ff58 	bl	8004318 <Error_Handler>
 8003468:	e7d5      	b.n	8003416 <MX_ADC1_Init+0xae>
    Error_Handler();
 800346a:	f000 ff55 	bl	8004318 <Error_Handler>
 800346e:	e7db      	b.n	8003428 <MX_ADC1_Init+0xc0>
    Error_Handler();
 8003470:	f000 ff52 	bl	8004318 <Error_Handler>
 8003474:	e7e1      	b.n	800343a <MX_ADC1_Init+0xd2>
    Error_Handler();
 8003476:	f000 ff4f 	bl	8004318 <Error_Handler>
}
 800347a:	e7e8      	b.n	800344e <MX_ADC1_Init+0xe6>
 800347c:	20005e04 	.word	0x20005e04
 8003480:	04300002 	.word	0x04300002
 8003484:	08600004 	.word	0x08600004
 8003488:	0c900008 	.word	0x0c900008
 800348c:	10c00010 	.word	0x10c00010
 8003490:	2e300800 	.word	0x2e300800

08003494 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003494:	b530      	push	{r4, r5, lr}
 8003496:	b09f      	sub	sp, #124	@ 0x7c
 8003498:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800349a:	2100      	movs	r1, #0
 800349c:	9119      	str	r1, [sp, #100]	@ 0x64
 800349e:	911a      	str	r1, [sp, #104]	@ 0x68
 80034a0:	911b      	str	r1, [sp, #108]	@ 0x6c
 80034a2:	911c      	str	r1, [sp, #112]	@ 0x70
 80034a4:	911d      	str	r1, [sp, #116]	@ 0x74
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80034a6:	2254      	movs	r2, #84	@ 0x54
 80034a8:	a804      	add	r0, sp, #16
 80034aa:	f007 ffef 	bl	800b48c <memset>
  if(adcHandle->Instance==ADC1)
 80034ae:	6823      	ldr	r3, [r4, #0]
 80034b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80034b4:	d001      	beq.n	80034ba <HAL_ADC_MspInit+0x26>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80034b6:	b01f      	add	sp, #124	@ 0x7c
 80034b8:	bd30      	pop	{r4, r5, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80034ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80034be:	9304      	str	r3, [sp, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80034c0:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80034c4:	9315      	str	r3, [sp, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80034c6:	a804      	add	r0, sp, #16
 80034c8:	f004 faa4 	bl	8007a14 <HAL_RCCEx_PeriphCLKConfig>
 80034cc:	2800      	cmp	r0, #0
 80034ce:	d138      	bne.n	8003542 <HAL_ADC_MspInit+0xae>
    __HAL_RCC_ADC12_CLK_ENABLE();
 80034d0:	4b1d      	ldr	r3, [pc, #116]	@ (8003548 <HAL_ADC_MspInit+0xb4>)
 80034d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80034d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80034d8:	64da      	str	r2, [r3, #76]	@ 0x4c
 80034da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80034dc:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80034e0:	9201      	str	r2, [sp, #4]
 80034e2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034e4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80034e6:	f042 0201 	orr.w	r2, r2, #1
 80034ea:	64da      	str	r2, [r3, #76]	@ 0x4c
 80034ec:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80034ee:	f002 0201 	and.w	r2, r2, #1
 80034f2:	9202      	str	r2, [sp, #8]
 80034f4:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80034f8:	f042 0202 	orr.w	r2, r2, #2
 80034fc:	64da      	str	r2, [r3, #76]	@ 0x4c
 80034fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003500:	f003 0302 	and.w	r3, r3, #2
 8003504:	9303      	str	r3, [sp, #12]
 8003506:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = MCU_ADC0_Pin|MCU_ADC1_Pin|MCU_ADC2_Pin|MCU_ADC3_Pin;
 8003508:	230f      	movs	r3, #15
 800350a:	9319      	str	r3, [sp, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800350c:	2503      	movs	r5, #3
 800350e:	951a      	str	r5, [sp, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003510:	2400      	movs	r4, #0
 8003512:	941b      	str	r4, [sp, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003514:	a919      	add	r1, sp, #100	@ 0x64
 8003516:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800351a:	f003 f899 	bl	8006650 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MCU_ADC11_Pin;
 800351e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003522:	9319      	str	r3, [sp, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003524:	951a      	str	r5, [sp, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003526:	941b      	str	r4, [sp, #108]	@ 0x6c
    HAL_GPIO_Init(MCU_ADC11_GPIO_Port, &GPIO_InitStruct);
 8003528:	a919      	add	r1, sp, #100	@ 0x64
 800352a:	4808      	ldr	r0, [pc, #32]	@ (800354c <HAL_ADC_MspInit+0xb8>)
 800352c:	f003 f890 	bl	8006650 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8003530:	4622      	mov	r2, r4
 8003532:	4621      	mov	r1, r4
 8003534:	2012      	movs	r0, #18
 8003536:	f002 fc69 	bl	8005e0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800353a:	2012      	movs	r0, #18
 800353c:	f002 fc76 	bl	8005e2c <HAL_NVIC_EnableIRQ>
}
 8003540:	e7b9      	b.n	80034b6 <HAL_ADC_MspInit+0x22>
      Error_Handler();
 8003542:	f000 fee9 	bl	8004318 <Error_Handler>
 8003546:	e7c3      	b.n	80034d0 <HAL_ADC_MspInit+0x3c>
 8003548:	40021000 	.word	0x40021000
 800354c:	48000400 	.word	0x48000400

08003550 <cliLineClean>:
  return ret;
}

void cliLineClean(cli_t *p_cli)
{
  p_cli->line.count   = 0;
 8003550:	2300      	movs	r3, #0
 8003552:	f880 33f2 	strb.w	r3, [r0, #1010]	@ 0x3f2
  p_cli->line.cursor  = 0;
 8003556:	f880 33f1 	strb.w	r3, [r0, #1009]	@ 0x3f1
  p_cli->line.buf_len = CLI_LINE_BUF_MAX - 1;
 800355a:	223f      	movs	r2, #63	@ 0x3f
 800355c:	f880 23f0 	strb.w	r2, [r0, #1008]	@ 0x3f0
  p_cli->line.buf[0]  = 0;
 8003560:	f880 33b0 	strb.w	r3, [r0, #944]	@ 0x3b0
}
 8003564:	4770      	bx	lr

08003566 <cliLineAdd>:

void cliLineAdd(cli_t *p_cli)
{
 8003566:	b538      	push	{r3, r4, r5, lr}
 8003568:	4605      	mov	r5, r0

  p_cli->line_buf[p_cli->hist_line_last] = p_cli->line;
 800356a:	f890 4196 	ldrb.w	r4, [r0, #406]	@ 0x196
 800356e:	eb04 1044 	add.w	r0, r4, r4, lsl #5
 8003572:	eb04 0040 	add.w	r0, r4, r0, lsl #1
 8003576:	4428      	add	r0, r5
 8003578:	2243      	movs	r2, #67	@ 0x43
 800357a:	f505 716c 	add.w	r1, r5, #944	@ 0x3b0
 800357e:	f500 70cc 	add.w	r0, r0, #408	@ 0x198
 8003582:	f008 f848 	bl	800b616 <memcpy>

  if (p_cli->hist_line_count < CLI_LINE_HIS_MAX)
 8003586:	f895 3197 	ldrb.w	r3, [r5, #407]	@ 0x197
 800358a:	2b07      	cmp	r3, #7
 800358c:	d802      	bhi.n	8003594 <cliLineAdd+0x2e>
  {
    p_cli->hist_line_count++;
 800358e:	3301      	adds	r3, #1
 8003590:	f885 3197 	strb.w	r3, [r5, #407]	@ 0x197
  }

  p_cli->hist_line_i    = p_cli->hist_line_last;
 8003594:	f885 4195 	strb.w	r4, [r5, #405]	@ 0x195
  p_cli->hist_line_last = (p_cli->hist_line_last + 1) % CLI_LINE_HIS_MAX;
 8003598:	3401      	adds	r4, #1
 800359a:	4263      	negs	r3, r4
 800359c:	f004 0407 	and.w	r4, r4, #7
 80035a0:	f003 0307 	and.w	r3, r3, #7
 80035a4:	bf58      	it	pl
 80035a6:	425c      	negpl	r4, r3
 80035a8:	f885 4196 	strb.w	r4, [r5, #406]	@ 0x196
  p_cli->hist_line_new  = true;
 80035ac:	2301      	movs	r3, #1
 80035ae:	f885 3194 	strb.w	r3, [r5, #404]	@ 0x194
}
 80035b2:	bd38      	pop	{r3, r4, r5, pc}

080035b4 <cliToUpper>:
void cliToUpper(char *str)
{
  uint16_t i;
  uint8_t  str_ch;

  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 80035b4:	2300      	movs	r3, #0
 80035b6:	e003      	b.n	80035c0 <cliToUpper+0xc>

    if ((str_ch >= 'a') && (str_ch <= 'z'))
    {
      str_ch = str_ch - 'a' + 'A';
    }
    str[i] = str_ch;
 80035b8:	f88c 2000 	strb.w	r2, [ip]
  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 80035bc:	3301      	adds	r3, #1
 80035be:	b29b      	uxth	r3, r3
 80035c0:	2b0f      	cmp	r3, #15
 80035c2:	d80b      	bhi.n	80035dc <cliToUpper+0x28>
    str_ch = str[i];
 80035c4:	eb00 0c03 	add.w	ip, r0, r3
 80035c8:	5cc2      	ldrb	r2, [r0, r3]
    if (str_ch == 0)
 80035ca:	b13a      	cbz	r2, 80035dc <cliToUpper+0x28>
    if ((str_ch >= 'a') && (str_ch <= 'z'))
 80035cc:	f1a2 0161 	sub.w	r1, r2, #97	@ 0x61
 80035d0:	b2c9      	uxtb	r1, r1
 80035d2:	2919      	cmp	r1, #25
 80035d4:	d8f0      	bhi.n	80035b8 <cliToUpper+0x4>
      str_ch = str_ch - 'a' + 'A';
 80035d6:	3a20      	subs	r2, #32
 80035d8:	b2d2      	uxtb	r2, r2
 80035da:	e7ed      	b.n	80035b8 <cliToUpper+0x4>
  }

  if (i == CLI_CMD_NAME_MAX)
 80035dc:	2b10      	cmp	r3, #16
 80035de:	d000      	beq.n	80035e2 <cliToUpper+0x2e>
  {
    str[i-1] = 0;
  }
}
 80035e0:	4770      	bx	lr
    str[i-1] = 0;
 80035e2:	3b01      	subs	r3, #1
 80035e4:	2200      	movs	r2, #0
 80035e6:	54c2      	strb	r2, [r0, r3]
}
 80035e8:	e7fa      	b.n	80035e0 <cliToUpper+0x2c>
	...

080035ec <cliArgsGetStr>:
{
  char *ret = NULL;
  cli_t *p_cli = &cli_node;


  if (index >= p_cli->cmd_args.argc)
 80035ec:	4b06      	ldr	r3, [pc, #24]	@ (8003608 <cliArgsGetStr+0x1c>)
 80035ee:	f8b3 3678 	ldrh.w	r3, [r3, #1656]	@ 0x678
 80035f2:	4298      	cmp	r0, r3
 80035f4:	d205      	bcs.n	8003602 <cliArgsGetStr+0x16>
  {
    return 0;
  }

  ret = p_cli->cmd_args.argv[index];
 80035f6:	4b04      	ldr	r3, [pc, #16]	@ (8003608 <cliArgsGetStr+0x1c>)
 80035f8:	f8d3 367c 	ldr.w	r3, [r3, #1660]	@ 0x67c
 80035fc:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

  return ret;
 8003600:	4770      	bx	lr
    return 0;
 8003602:	2000      	movs	r0, #0
}
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	20005e70 	.word	0x20005e70

0800360c <cliArgsIsStr>:

bool cliArgsIsStr(uint8_t index, const char *p_str)
{
 800360c:	b508      	push	{r3, lr}
 800360e:	4603      	mov	r3, r0
  bool ret = false;
  cli_t *p_cli = &cli_node;


  if (index >= p_cli->cmd_args.argc)
 8003610:	4a09      	ldr	r2, [pc, #36]	@ (8003638 <cliArgsIsStr+0x2c>)
 8003612:	f8b2 2678 	ldrh.w	r2, [r2, #1656]	@ 0x678
 8003616:	4290      	cmp	r0, r2
 8003618:	d20a      	bcs.n	8003630 <cliArgsIsStr+0x24>
 800361a:	4608      	mov	r0, r1
  {
    return 0;
  }

  if(strcmp(p_str, p_cli->cmd_args.argv[index]) == 0)
 800361c:	4a06      	ldr	r2, [pc, #24]	@ (8003638 <cliArgsIsStr+0x2c>)
 800361e:	f8d2 267c 	ldr.w	r2, [r2, #1660]	@ 0x67c
 8003622:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003626:	f7fc fdfb 	bl	8000220 <strcmp>
 800362a:	b118      	cbz	r0, 8003634 <cliArgsIsStr+0x28>
  bool ret = false;
 800362c:	2000      	movs	r0, #0
 800362e:	e000      	b.n	8003632 <cliArgsIsStr+0x26>
    return 0;
 8003630:	2000      	movs	r0, #0
  {
    ret = true;
  }

  return ret;
}
 8003632:	bd08      	pop	{r3, pc}
    ret = true;
 8003634:	2001      	movs	r0, #1
 8003636:	e7fc      	b.n	8003632 <cliArgsIsStr+0x26>
 8003638:	20005e70 	.word	0x20005e70

0800363c <cliArgsGetFloat>:
{
 800363c:	b508      	push	{r3, lr}
  if (index >= p_cli->cmd_args.argc)
 800363e:	4b08      	ldr	r3, [pc, #32]	@ (8003660 <cliArgsGetFloat+0x24>)
 8003640:	f8b3 3678 	ldrh.w	r3, [r3, #1656]	@ 0x678
 8003644:	4298      	cmp	r0, r3
 8003646:	d302      	bcc.n	800364e <cliArgsGetFloat+0x12>
    return 0;
 8003648:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 8003664 <cliArgsGetFloat+0x28>
}
 800364c:	bd08      	pop	{r3, pc}
  ret = (float)strtof((const char * ) p_cli->cmd_args.argv[index], (char **)NULL);
 800364e:	4b04      	ldr	r3, [pc, #16]	@ (8003660 <cliArgsGetFloat+0x24>)
 8003650:	f8d3 367c 	ldr.w	r3, [r3, #1660]	@ 0x67c
 8003654:	2100      	movs	r1, #0
 8003656:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800365a:	f007 f8a5 	bl	800a7a8 <strtof>
  return ret;
 800365e:	e7f5      	b.n	800364c <cliArgsGetFloat+0x10>
 8003660:	20005e70 	.word	0x20005e70
 8003664:	00000000 	.word	0x00000000

08003668 <cliArgsGetData>:
{
 8003668:	b508      	push	{r3, lr}
  if (index >= p_cli->cmd_args.argc)
 800366a:	4b08      	ldr	r3, [pc, #32]	@ (800368c <cliArgsGetData+0x24>)
 800366c:	f8b3 3678 	ldrh.w	r3, [r3, #1656]	@ 0x678
 8003670:	4298      	cmp	r0, r3
 8003672:	d301      	bcc.n	8003678 <cliArgsGetData+0x10>
    return 0;
 8003674:	2000      	movs	r0, #0
}
 8003676:	bd08      	pop	{r3, pc}
  ret = (int32_t)strtoul((const char * ) p_cli->cmd_args.argv[index], (char **)NULL, (int) 0);
 8003678:	4b04      	ldr	r3, [pc, #16]	@ (800368c <cliArgsGetData+0x24>)
 800367a:	f8d3 367c 	ldr.w	r3, [r3, #1660]	@ 0x67c
 800367e:	2200      	movs	r2, #0
 8003680:	4611      	mov	r1, r2
 8003682:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8003686:	f007 f961 	bl	800a94c <strtoul>
  return ret;
 800368a:	e7f4      	b.n	8003676 <cliArgsGetData+0xe>
 800368c:	20005e70 	.word	0x20005e70

08003690 <cliShowPrompt>:
{
 8003690:	b510      	push	{r4, lr}
 8003692:	4604      	mov	r4, r0
  uartPrintf(p_cli->ch, "\n\r");
 8003694:	4904      	ldr	r1, [pc, #16]	@ (80036a8 <cliShowPrompt+0x18>)
 8003696:	7800      	ldrb	r0, [r0, #0]
 8003698:	f7ff fa8a 	bl	8002bb0 <uartPrintf>
  uartPrintf(p_cli->ch, CLI_PROMPT_STR);
 800369c:	4903      	ldr	r1, [pc, #12]	@ (80036ac <cliShowPrompt+0x1c>)
 800369e:	7820      	ldrb	r0, [r4, #0]
 80036a0:	f7ff fa86 	bl	8002bb0 <uartPrintf>
}
 80036a4:	bd10      	pop	{r4, pc}
 80036a6:	bf00      	nop
 80036a8:	08015ebc 	.word	0x08015ebc
 80036ac:	08015ec0 	.word	0x08015ec0

080036b0 <cliLineChange>:
{
 80036b0:	b538      	push	{r3, r4, r5, lr}
  if (p_cli->hist_line_count == 0)
 80036b2:	f890 3197 	ldrb.w	r3, [r0, #407]	@ 0x197
 80036b6:	b343      	cbz	r3, 800370a <cliLineChange+0x5a>
 80036b8:	4604      	mov	r4, r0
 80036ba:	460d      	mov	r5, r1
  if (p_cli->line.cursor > 0)
 80036bc:	f890 23f1 	ldrb.w	r2, [r0, #1009]	@ 0x3f1
 80036c0:	bb22      	cbnz	r2, 800370c <cliLineChange+0x5c>
  if (p_cli->line.count > 0)
 80036c2:	f894 23f2 	ldrb.w	r2, [r4, #1010]	@ 0x3f2
 80036c6:	bb32      	cbnz	r2, 8003716 <cliLineChange+0x66>
  if (key_up == true)
 80036c8:	2d01      	cmp	r5, #1
 80036ca:	d029      	beq.n	8003720 <cliLineChange+0x70>
    p_cli->hist_line_i = (p_cli->hist_line_i + 1) % p_cli->hist_line_count;
 80036cc:	f994 1195 	ldrsb.w	r1, [r4, #405]	@ 0x195
 80036d0:	3101      	adds	r1, #1
 80036d2:	f894 3197 	ldrb.w	r3, [r4, #407]	@ 0x197
 80036d6:	fb91 f2f3 	sdiv	r2, r1, r3
 80036da:	fb03 1112 	mls	r1, r3, r2, r1
 80036de:	f884 1195 	strb.w	r1, [r4, #405]	@ 0x195
    change_i = p_cli->hist_line_i;
 80036e2:	b2c9      	uxtb	r1, r1
  p_cli->line = p_cli->line_buf[change_i];
 80036e4:	eb01 1341 	add.w	r3, r1, r1, lsl #5
 80036e8:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 80036ec:	4421      	add	r1, r4
 80036ee:	2243      	movs	r2, #67	@ 0x43
 80036f0:	f501 71cc 	add.w	r1, r1, #408	@ 0x198
 80036f4:	f504 706c 	add.w	r0, r4, #944	@ 0x3b0
 80036f8:	f007 ff8d 	bl	800b616 <memcpy>
  p_cli->line.cursor = p_cli->line.count;
 80036fc:	f894 33f2 	ldrb.w	r3, [r4, #1010]	@ 0x3f2
 8003700:	f884 33f1 	strb.w	r3, [r4, #1009]	@ 0x3f1
  p_cli->hist_line_new = false;
 8003704:	2300      	movs	r3, #0
 8003706:	f884 3194 	strb.w	r3, [r4, #404]	@ 0x194
}
 800370a:	bd38      	pop	{r3, r4, r5, pc}
    uartPrintf(p_cli->ch, "\x1B[%dD", p_cli->line.cursor);
 800370c:	490f      	ldr	r1, [pc, #60]	@ (800374c <cliLineChange+0x9c>)
 800370e:	7800      	ldrb	r0, [r0, #0]
 8003710:	f7ff fa4e 	bl	8002bb0 <uartPrintf>
 8003714:	e7d5      	b.n	80036c2 <cliLineChange+0x12>
    uartPrintf(p_cli->ch, "\x1B[%dP", p_cli->line.count);
 8003716:	490e      	ldr	r1, [pc, #56]	@ (8003750 <cliLineChange+0xa0>)
 8003718:	7820      	ldrb	r0, [r4, #0]
 800371a:	f7ff fa49 	bl	8002bb0 <uartPrintf>
 800371e:	e7d3      	b.n	80036c8 <cliLineChange+0x18>
    if (p_cli->hist_line_new == true)
 8003720:	f894 3194 	ldrb.w	r3, [r4, #404]	@ 0x194
 8003724:	b11b      	cbz	r3, 800372e <cliLineChange+0x7e>
      p_cli->hist_line_i = p_cli->hist_line_last;
 8003726:	f994 3196 	ldrsb.w	r3, [r4, #406]	@ 0x196
 800372a:	f884 3195 	strb.w	r3, [r4, #405]	@ 0x195
    p_cli->hist_line_i = (p_cli->hist_line_i + p_cli->hist_line_count - 1) % p_cli->hist_line_count;
 800372e:	f994 1195 	ldrsb.w	r1, [r4, #405]	@ 0x195
 8003732:	f894 3197 	ldrb.w	r3, [r4, #407]	@ 0x197
 8003736:	4419      	add	r1, r3
 8003738:	3901      	subs	r1, #1
 800373a:	fb91 f2f3 	sdiv	r2, r1, r3
 800373e:	fb03 1112 	mls	r1, r3, r2, r1
 8003742:	f884 1195 	strb.w	r1, [r4, #405]	@ 0x195
    change_i = p_cli->hist_line_i;
 8003746:	b2c9      	uxtb	r1, r1
 8003748:	e7cc      	b.n	80036e4 <cliLineChange+0x34>
 800374a:	bf00      	nop
 800374c:	08015ec8 	.word	0x08015ec8
 8003750:	08015ed0 	.word	0x08015ed0

08003754 <cliParseArgs>:
{
 8003754:	b570      	push	{r4, r5, r6, lr}
 8003756:	b082      	sub	sp, #8
 8003758:	4606      	mov	r6, r0
  p_cli->argc = 0;
 800375a:	2400      	movs	r4, #0
 800375c:	f8a0 4112 	strh.w	r4, [r0, #274]	@ 0x112
  argv    = p_cli->argv;
 8003760:	f500 758a 	add.w	r5, r0, #276	@ 0x114
  argv[argc] = NULL;
 8003764:	f8c0 4114 	str.w	r4, [r0, #276]	@ 0x114
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 8003768:	aa01      	add	r2, sp, #4
 800376a:	490c      	ldr	r1, [pc, #48]	@ (800379c <cliParseArgs+0x48>)
 800376c:	f500 706c 	add.w	r0, r0, #944	@ 0x3b0
 8003770:	f007 fece 	bl	800b510 <strtok_r>
  uint16_t argc = 0;
 8003774:	4623      	mov	r3, r4
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 8003776:	e009      	b.n	800378c <cliParseArgs+0x38>
    argv[argc++] = tok;
 8003778:	1c5c      	adds	r4, r3, #1
 800377a:	b2a4      	uxth	r4, r4
 800377c:	f845 0023 	str.w	r0, [r5, r3, lsl #2]
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 8003780:	aa01      	add	r2, sp, #4
 8003782:	4906      	ldr	r1, [pc, #24]	@ (800379c <cliParseArgs+0x48>)
 8003784:	2000      	movs	r0, #0
 8003786:	f007 fec3 	bl	800b510 <strtok_r>
    argv[argc++] = tok;
 800378a:	4623      	mov	r3, r4
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 800378c:	2800      	cmp	r0, #0
 800378e:	d1f3      	bne.n	8003778 <cliParseArgs+0x24>
  p_cli->argc = argc;
 8003790:	f8a6 3112 	strh.w	r3, [r6, #274]	@ 0x112
  if (argc > 0)
 8003794:	b103      	cbz	r3, 8003798 <cliParseArgs+0x44>
    ret = true;
 8003796:	2001      	movs	r0, #1
}
 8003798:	b002      	add	sp, #8
 800379a:	bd70      	pop	{r4, r5, r6, pc}
 800379c:	08015ed8 	.word	0x08015ed8

080037a0 <cliOpen>:
  cli_node.ch = ch;
 80037a0:	4b0a      	ldr	r3, [pc, #40]	@ (80037cc <cliOpen+0x2c>)
 80037a2:	7018      	strb	r0, [r3, #0]
  if (cli_node.is_open == false || cli_node.baud != baud)
 80037a4:	7a1b      	ldrb	r3, [r3, #8]
 80037a6:	b11b      	cbz	r3, 80037b0 <cliOpen+0x10>
 80037a8:	4b08      	ldr	r3, [pc, #32]	@ (80037cc <cliOpen+0x2c>)
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	428b      	cmp	r3, r1
 80037ae:	d000      	beq.n	80037b2 <cliOpen+0x12>
    if (baud > 0)
 80037b0:	b911      	cbnz	r1, 80037b8 <cliOpen+0x18>
}
 80037b2:	4b06      	ldr	r3, [pc, #24]	@ (80037cc <cliOpen+0x2c>)
 80037b4:	7a18      	ldrb	r0, [r3, #8]
 80037b6:	4770      	bx	lr
{
 80037b8:	b510      	push	{r4, lr}
      cli_node.baud = baud;
 80037ba:	4c04      	ldr	r4, [pc, #16]	@ (80037cc <cliOpen+0x2c>)
 80037bc:	6061      	str	r1, [r4, #4]
      cli_node.is_open = uartOpen(ch, baud);
 80037be:	f7ff f85d 	bl	800287c <uartOpen>
 80037c2:	7220      	strb	r0, [r4, #8]
}
 80037c4:	4b01      	ldr	r3, [pc, #4]	@ (80037cc <cliOpen+0x2c>)
 80037c6:	7a18      	ldrb	r0, [r3, #8]
 80037c8:	bd10      	pop	{r4, pc}
 80037ca:	bf00      	nop
 80037cc:	20005e70 	.word	0x20005e70

080037d0 <cliGetPort>:
}
 80037d0:	4b01      	ldr	r3, [pc, #4]	@ (80037d8 <cliGetPort+0x8>)
 80037d2:	7818      	ldrb	r0, [r3, #0]
 80037d4:	4770      	bx	lr
 80037d6:	bf00      	nop
 80037d8:	20005e70 	.word	0x20005e70

080037dc <cliShowLog>:
{
 80037dc:	b538      	push	{r3, r4, r5, lr}
  if (cli_node.is_log == true)
 80037de:	4b23      	ldr	r3, [pc, #140]	@ (800386c <cliShowLog+0x90>)
 80037e0:	7a5b      	ldrb	r3, [r3, #9]
 80037e2:	b903      	cbnz	r3, 80037e6 <cliShowLog+0xa>
}
 80037e4:	bd38      	pop	{r3, r4, r5, pc}
 80037e6:	4605      	mov	r5, r0
    uartPrintf(p_cli->log_ch, "Cursor  : %d\n", p_cli->line.cursor);
 80037e8:	f890 23f1 	ldrb.w	r2, [r0, #1009]	@ 0x3f1
 80037ec:	4920      	ldr	r1, [pc, #128]	@ (8003870 <cliShowLog+0x94>)
 80037ee:	7a80      	ldrb	r0, [r0, #10]
 80037f0:	f7ff f9de 	bl	8002bb0 <uartPrintf>
    uartPrintf(p_cli->log_ch, "Count   : %d\n", p_cli->line.count);
 80037f4:	f895 23f2 	ldrb.w	r2, [r5, #1010]	@ 0x3f2
 80037f8:	491e      	ldr	r1, [pc, #120]	@ (8003874 <cliShowLog+0x98>)
 80037fa:	7aa8      	ldrb	r0, [r5, #10]
 80037fc:	f7ff f9d8 	bl	8002bb0 <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf_len : %d\n", p_cli->line.buf_len);
 8003800:	f895 23f0 	ldrb.w	r2, [r5, #1008]	@ 0x3f0
 8003804:	491c      	ldr	r1, [pc, #112]	@ (8003878 <cliShowLog+0x9c>)
 8003806:	7aa8      	ldrb	r0, [r5, #10]
 8003808:	f7ff f9d2 	bl	8002bb0 <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf     : %s\n", p_cli->line.buf);
 800380c:	f505 726c 	add.w	r2, r5, #944	@ 0x3b0
 8003810:	491a      	ldr	r1, [pc, #104]	@ (800387c <cliShowLog+0xa0>)
 8003812:	7aa8      	ldrb	r0, [r5, #10]
 8003814:	f7ff f9cc 	bl	8002bb0 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_i  : %d\n", p_cli->hist_line_i);
 8003818:	f995 2195 	ldrsb.w	r2, [r5, #405]	@ 0x195
 800381c:	4918      	ldr	r1, [pc, #96]	@ (8003880 <cliShowLog+0xa4>)
 800381e:	7aa8      	ldrb	r0, [r5, #10]
 8003820:	f7ff f9c6 	bl	8002bb0 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_lt : %d\n", p_cli->hist_line_last);
 8003824:	f895 2196 	ldrb.w	r2, [r5, #406]	@ 0x196
 8003828:	4916      	ldr	r1, [pc, #88]	@ (8003884 <cliShowLog+0xa8>)
 800382a:	7aa8      	ldrb	r0, [r5, #10]
 800382c:	f7ff f9c0 	bl	8002bb0 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_c  : %d\n", p_cli->hist_line_count);
 8003830:	f895 2197 	ldrb.w	r2, [r5, #407]	@ 0x197
 8003834:	4914      	ldr	r1, [pc, #80]	@ (8003888 <cliShowLog+0xac>)
 8003836:	7aa8      	ldrb	r0, [r5, #10]
 8003838:	f7ff f9ba 	bl	8002bb0 <uartPrintf>
    for (int i=0; i<p_cli->hist_line_count; i++)
 800383c:	2400      	movs	r4, #0
 800383e:	e00c      	b.n	800385a <cliShowLog+0x7e>
      uartPrintf(p_cli->log_ch, "buf %d   : %s\n", i, p_cli->line_buf[i].buf);
 8003840:	eb04 1344 	add.w	r3, r4, r4, lsl #5
 8003844:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8003848:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 800384c:	442b      	add	r3, r5
 800384e:	4622      	mov	r2, r4
 8003850:	490e      	ldr	r1, [pc, #56]	@ (800388c <cliShowLog+0xb0>)
 8003852:	7aa8      	ldrb	r0, [r5, #10]
 8003854:	f7ff f9ac 	bl	8002bb0 <uartPrintf>
    for (int i=0; i<p_cli->hist_line_count; i++)
 8003858:	3401      	adds	r4, #1
 800385a:	f895 3197 	ldrb.w	r3, [r5, #407]	@ 0x197
 800385e:	42a3      	cmp	r3, r4
 8003860:	dcee      	bgt.n	8003840 <cliShowLog+0x64>
    uartPrintf(p_cli->log_ch, "\n");
 8003862:	490b      	ldr	r1, [pc, #44]	@ (8003890 <cliShowLog+0xb4>)
 8003864:	7aa8      	ldrb	r0, [r5, #10]
 8003866:	f7ff f9a3 	bl	8002bb0 <uartPrintf>
}
 800386a:	e7bb      	b.n	80037e4 <cliShowLog+0x8>
 800386c:	20005e70 	.word	0x20005e70
 8003870:	08015ee0 	.word	0x08015ee0
 8003874:	08015ef0 	.word	0x08015ef0
 8003878:	08015f00 	.word	0x08015f00
 800387c:	08015f10 	.word	0x08015f10
 8003880:	08015f20 	.word	0x08015f20
 8003884:	08015f30 	.word	0x08015f30
 8003888:	08015f40 	.word	0x08015f40
 800388c:	08015f50 	.word	0x08015f50
 8003890:	08015e50 	.word	0x08015e50

08003894 <cliAvailable>:
{
 8003894:	b508      	push	{r3, lr}
  return uartAvailable(cli_node.ch);
 8003896:	4b02      	ldr	r3, [pc, #8]	@ (80038a0 <cliAvailable+0xc>)
 8003898:	7818      	ldrb	r0, [r3, #0]
 800389a:	f7ff f901 	bl	8002aa0 <uartAvailable>
}
 800389e:	bd08      	pop	{r3, pc}
 80038a0:	20005e70 	.word	0x20005e70

080038a4 <cliRead>:
{
 80038a4:	b508      	push	{r3, lr}
  return uartRead(cli_node.ch);
 80038a6:	4b02      	ldr	r3, [pc, #8]	@ (80038b0 <cliRead+0xc>)
 80038a8:	7818      	ldrb	r0, [r3, #0]
 80038aa:	f7ff f925 	bl	8002af8 <uartRead>
}
 80038ae:	bd08      	pop	{r3, pc}
 80038b0:	20005e70 	.word	0x20005e70

080038b4 <cliPrintf>:
{
 80038b4:	b40f      	push	{r0, r1, r2, r3}
 80038b6:	b510      	push	{r4, lr}
 80038b8:	b082      	sub	sp, #8
 80038ba:	ab04      	add	r3, sp, #16
 80038bc:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start (arg, fmt);
 80038c0:	9301      	str	r3, [sp, #4]
  len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 80038c2:	4c08      	ldr	r4, [pc, #32]	@ (80038e4 <cliPrintf+0x30>)
 80038c4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80038c8:	4620      	mov	r0, r4
 80038ca:	f007 fdd1 	bl	800b470 <vsniprintf>
 80038ce:	4602      	mov	r2, r0
  uartWrite(p_cli->ch, (uint8_t *)p_cli->print_buffer, len);
 80038d0:	4621      	mov	r1, r4
 80038d2:	f814 0c11 	ldrb.w	r0, [r4, #-17]
 80038d6:	f7ff f93f 	bl	8002b58 <uartWrite>
}
 80038da:	b002      	add	sp, #8
 80038dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038e0:	b004      	add	sp, #16
 80038e2:	4770      	bx	lr
 80038e4:	20005e81 	.word	0x20005e81

080038e8 <cliRunCmd>:
{
 80038e8:	b538      	push	{r3, r4, r5, lr}
 80038ea:	4605      	mov	r5, r0
  if (cliParseArgs(p_cli) == true)
 80038ec:	f7ff ff32 	bl	8003754 <cliParseArgs>
 80038f0:	b908      	cbnz	r0, 80038f6 <cliRunCmd+0xe>
}
 80038f2:	2000      	movs	r0, #0
 80038f4:	bd38      	pop	{r3, r4, r5, pc}
    cliPrintf("\r\n");
 80038f6:	4816      	ldr	r0, [pc, #88]	@ (8003950 <cliRunCmd+0x68>)
 80038f8:	f7ff ffdc 	bl	80038b4 <cliPrintf>
    cliToUpper(p_cli->argv[0]);
 80038fc:	f8d5 0114 	ldr.w	r0, [r5, #276]	@ 0x114
 8003900:	f7ff fe58 	bl	80035b4 <cliToUpper>
    for (int i=0; i<p_cli->cmd_count; i++)
 8003904:	2400      	movs	r4, #0
 8003906:	f8b5 33f4 	ldrh.w	r3, [r5, #1012]	@ 0x3f4
 800390a:	42a3      	cmp	r3, r4
 800390c:	ddf1      	ble.n	80038f2 <cliRunCmd+0xa>
      if (strcmp(p_cli->argv[0], p_cli->cmd_list[i].cmd_str) == 0)
 800390e:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8003912:	0089      	lsls	r1, r1, #2
 8003914:	f501 717e 	add.w	r1, r1, #1016	@ 0x3f8
 8003918:	4429      	add	r1, r5
 800391a:	f8d5 0114 	ldr.w	r0, [r5, #276]	@ 0x114
 800391e:	f7fc fc7f 	bl	8000220 <strcmp>
 8003922:	b108      	cbz	r0, 8003928 <cliRunCmd+0x40>
    for (int i=0; i<p_cli->cmd_count; i++)
 8003924:	3401      	adds	r4, #1
 8003926:	e7ee      	b.n	8003906 <cliRunCmd+0x1e>
        p_cli->cmd_args.argc =  p_cli->argc - 1;
 8003928:	f8b5 3112 	ldrh.w	r3, [r5, #274]	@ 0x112
 800392c:	3b01      	subs	r3, #1
 800392e:	f8a5 3678 	strh.w	r3, [r5, #1656]	@ 0x678
        p_cli->cmd_args.argv = &p_cli->argv[1];
 8003932:	f505 738c 	add.w	r3, r5, #280	@ 0x118
 8003936:	f8c5 367c 	str.w	r3, [r5, #1660]	@ 0x67c
        p_cli->cmd_list[i].cmd_func(&p_cli->cmd_args);
 800393a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800393e:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 8003942:	f8d4 3408 	ldr.w	r3, [r4, #1032]	@ 0x408
 8003946:	f505 60cf 	add.w	r0, r5, #1656	@ 0x678
 800394a:	4798      	blx	r3
        break;
 800394c:	e7d1      	b.n	80038f2 <cliRunCmd+0xa>
 800394e:	bf00      	nop
 8003950:	08015e9c 	.word	0x08015e9c

08003954 <cliUpdate>:
{
 8003954:	b530      	push	{r4, r5, lr}
 8003956:	b085      	sub	sp, #20
 8003958:	4604      	mov	r4, r0
 800395a:	f88d 1007 	strb.w	r1, [sp, #7]
  if (p_cli->state == CLI_RX_IDLE)
 800395e:	7c03      	ldrb	r3, [r0, #16]
 8003960:	b9ab      	cbnz	r3, 800398e <cliUpdate+0x3a>
    switch(rx_data)
 8003962:	b2cb      	uxtb	r3, r1
 8003964:	2b1b      	cmp	r3, #27
 8003966:	d030      	beq.n	80039ca <cliUpdate+0x76>
 8003968:	d81c      	bhi.n	80039a4 <cliUpdate+0x50>
 800396a:	2b08      	cmp	r3, #8
 800396c:	d04b      	beq.n	8003a06 <cliUpdate+0xb2>
 800396e:	2b0d      	cmp	r3, #13
 8003970:	f040 8084 	bne.w	8003a7c <cliUpdate+0x128>
        if (line->count > 0)
 8003974:	f890 33f2 	ldrb.w	r3, [r0, #1010]	@ 0x3f2
 8003978:	bb0b      	cbnz	r3, 80039be <cliUpdate+0x6a>
        line->count = 0;
 800397a:	2300      	movs	r3, #0
 800397c:	f884 33f2 	strb.w	r3, [r4, #1010]	@ 0x3f2
        line->cursor = 0;
 8003980:	f884 33f1 	strb.w	r3, [r4, #1009]	@ 0x3f1
        line->buf[0] = 0;
 8003984:	f884 33b0 	strb.w	r3, [r4, #944]	@ 0x3b0
        cliShowPrompt(p_cli);
 8003988:	4620      	mov	r0, r4
 800398a:	f7ff fe81 	bl	8003690 <cliShowPrompt>
  switch(p_cli->state)
 800398e:	7c23      	ldrb	r3, [r4, #16]
 8003990:	3b01      	subs	r3, #1
 8003992:	2b03      	cmp	r3, #3
 8003994:	f200 80c8 	bhi.w	8003b28 <cliUpdate+0x1d4>
 8003998:	e8df f013 	tbh	[pc, r3, lsl #1]
 800399c:	00cc00c4 	.word	0x00cc00c4
 80039a0:	015600cf 	.word	0x015600cf
    switch(rx_data)
 80039a4:	2b7f      	cmp	r3, #127	@ 0x7f
 80039a6:	d169      	bne.n	8003a7c <cliUpdate+0x128>
        if (line->cursor < line->count)
 80039a8:	f890 c3f1 	ldrb.w	ip, [r0, #1009]	@ 0x3f1
 80039ac:	f890 e3f2 	ldrb.w	lr, [r0, #1010]	@ 0x3f2
 80039b0:	45f4      	cmp	ip, lr
 80039b2:	d2ec      	bcs.n	800398e <cliUpdate+0x3a>
          mov_len = line->count - line->cursor;
 80039b4:	ebae 050c 	sub.w	r5, lr, ip
 80039b8:	b2ed      	uxtb	r5, r5
          for (int i=1; i<mov_len; i++)
 80039ba:	2201      	movs	r2, #1
 80039bc:	e012      	b.n	80039e4 <cliUpdate+0x90>
          cliLineAdd(p_cli);
 80039be:	f7ff fdd2 	bl	8003566 <cliLineAdd>
          cliRunCmd(p_cli);
 80039c2:	4620      	mov	r0, r4
 80039c4:	f7ff ff90 	bl	80038e8 <cliRunCmd>
 80039c8:	e7d7      	b.n	800397a <cliUpdate+0x26>
        p_cli->state = CLI_RX_SP1;
 80039ca:	2301      	movs	r3, #1
 80039cc:	7403      	strb	r3, [r0, #16]
        break;
 80039ce:	e7de      	b.n	800398e <cliUpdate+0x3a>
            line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 80039d0:	eb0c 0302 	add.w	r3, ip, r2
 80039d4:	1e59      	subs	r1, r3, #1
 80039d6:	4423      	add	r3, r4
 80039d8:	f893 03b0 	ldrb.w	r0, [r3, #944]	@ 0x3b0
 80039dc:	1863      	adds	r3, r4, r1
 80039de:	f883 03b0 	strb.w	r0, [r3, #944]	@ 0x3b0
          for (int i=1; i<mov_len; i++)
 80039e2:	3201      	adds	r2, #1
 80039e4:	4295      	cmp	r5, r2
 80039e6:	dcf3      	bgt.n	80039d0 <cliUpdate+0x7c>
          line->count--;
 80039e8:	f10e 3eff 	add.w	lr, lr, #4294967295
 80039ec:	fa5f fe8e 	uxtb.w	lr, lr
 80039f0:	f884 e3f2 	strb.w	lr, [r4, #1010]	@ 0x3f2
          line->buf[line->count] = 0;
 80039f4:	44a6      	add	lr, r4
 80039f6:	2300      	movs	r3, #0
 80039f8:	f88e 33b0 	strb.w	r3, [lr, #944]	@ 0x3b0
          uartPrintf(p_cli->ch, "\x1B[1P");
 80039fc:	4994      	ldr	r1, [pc, #592]	@ (8003c50 <cliUpdate+0x2fc>)
 80039fe:	7820      	ldrb	r0, [r4, #0]
 8003a00:	f7ff f8d6 	bl	8002bb0 <uartPrintf>
 8003a04:	e7c3      	b.n	800398e <cliUpdate+0x3a>
        if (line->count > 0 && line->cursor > 0)
 8003a06:	f890 33f2 	ldrb.w	r3, [r0, #1010]	@ 0x3f2
 8003a0a:	b35b      	cbz	r3, 8003a64 <cliUpdate+0x110>
 8003a0c:	f890 03f1 	ldrb.w	r0, [r0, #1009]	@ 0x3f1
 8003a10:	b340      	cbz	r0, 8003a64 <cliUpdate+0x110>
          if (line->cursor == line->count)
 8003a12:	4283      	cmp	r3, r0
 8003a14:	d009      	beq.n	8003a2a <cliUpdate+0xd6>
          if (line->cursor < line->count)
 8003a16:	f894 c3f2 	ldrb.w	ip, [r4, #1010]	@ 0x3f2
 8003a1a:	4560      	cmp	r0, ip
 8003a1c:	d222      	bcs.n	8003a64 <cliUpdate+0x110>
            mov_len = line->count - line->cursor;
 8003a1e:	ebac 0e00 	sub.w	lr, ip, r0
 8003a22:	fa5f fe8e 	uxtb.w	lr, lr
            for (int i=0; i<mov_len; i++)
 8003a26:	2200      	movs	r2, #0
 8003a28:	e011      	b.n	8003a4e <cliUpdate+0xfa>
            line->count--;
 8003a2a:	3b01      	subs	r3, #1
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	f884 33f2 	strb.w	r3, [r4, #1010]	@ 0x3f2
            line->buf[line->count] = 0;
 8003a32:	4423      	add	r3, r4
 8003a34:	2200      	movs	r2, #0
 8003a36:	f883 23b0 	strb.w	r2, [r3, #944]	@ 0x3b0
 8003a3a:	e7ec      	b.n	8003a16 <cliUpdate+0xc2>
              line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 8003a3c:	1883      	adds	r3, r0, r2
 8003a3e:	1e59      	subs	r1, r3, #1
 8003a40:	4423      	add	r3, r4
 8003a42:	f893 53b0 	ldrb.w	r5, [r3, #944]	@ 0x3b0
 8003a46:	1863      	adds	r3, r4, r1
 8003a48:	f883 53b0 	strb.w	r5, [r3, #944]	@ 0x3b0
            for (int i=0; i<mov_len; i++)
 8003a4c:	3201      	adds	r2, #1
 8003a4e:	4596      	cmp	lr, r2
 8003a50:	dcf4      	bgt.n	8003a3c <cliUpdate+0xe8>
            line->count--;
 8003a52:	f10c 33ff 	add.w	r3, ip, #4294967295
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	f884 33f2 	strb.w	r3, [r4, #1010]	@ 0x3f2
            line->buf[line->count] = 0;
 8003a5c:	4423      	add	r3, r4
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f883 23b0 	strb.w	r2, [r3, #944]	@ 0x3b0
        if (line->cursor > 0)
 8003a64:	f894 33f1 	ldrb.w	r3, [r4, #1009]	@ 0x3f1
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d090      	beq.n	800398e <cliUpdate+0x3a>
          line->cursor--;
 8003a6c:	3b01      	subs	r3, #1
 8003a6e:	f884 33f1 	strb.w	r3, [r4, #1009]	@ 0x3f1
          uartPrintf(p_cli->ch, "\b \b\x1B[1P");
 8003a72:	4978      	ldr	r1, [pc, #480]	@ (8003c54 <cliUpdate+0x300>)
 8003a74:	7820      	ldrb	r0, [r4, #0]
 8003a76:	f7ff f89b 	bl	8002bb0 <uartPrintf>
 8003a7a:	e788      	b.n	800398e <cliUpdate+0x3a>
        if ((line->count + 1) < line->buf_len)
 8003a7c:	f894 33f2 	ldrb.w	r3, [r4, #1010]	@ 0x3f2
 8003a80:	1c59      	adds	r1, r3, #1
 8003a82:	f894 23f0 	ldrb.w	r2, [r4, #1008]	@ 0x3f0
 8003a86:	4291      	cmp	r1, r2
 8003a88:	da81      	bge.n	800398e <cliUpdate+0x3a>
          if (line->cursor == line->count)
 8003a8a:	f894 23f1 	ldrb.w	r2, [r4, #1009]	@ 0x3f1
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d016      	beq.n	8003ac0 <cliUpdate+0x16c>
          if (line->cursor < line->count)
 8003a92:	f894 c3f1 	ldrb.w	ip, [r4, #1009]	@ 0x3f1
 8003a96:	f894 03f2 	ldrb.w	r0, [r4, #1010]	@ 0x3f2
 8003a9a:	4584      	cmp	ip, r0
 8003a9c:	f4bf af77 	bcs.w	800398e <cliUpdate+0x3a>
            mov_len = line->count - line->cursor;
 8003aa0:	eba0 050c 	sub.w	r5, r0, ip
 8003aa4:	b2ed      	uxtb	r5, r5
            for (int i=0; i<mov_len; i++)
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	4295      	cmp	r5, r2
 8003aaa:	dd24      	ble.n	8003af6 <cliUpdate+0x1a2>
              line->buf[line->count - i] = line->buf[line->count - i - 1];
 8003aac:	1a83      	subs	r3, r0, r2
 8003aae:	1e59      	subs	r1, r3, #1
 8003ab0:	4421      	add	r1, r4
 8003ab2:	f891 13b0 	ldrb.w	r1, [r1, #944]	@ 0x3b0
 8003ab6:	4423      	add	r3, r4
 8003ab8:	f883 13b0 	strb.w	r1, [r3, #944]	@ 0x3b0
            for (int i=0; i<mov_len; i++)
 8003abc:	3201      	adds	r2, #1
 8003abe:	e7f3      	b.n	8003aa8 <cliUpdate+0x154>
            uartWrite(p_cli->ch, &rx_data, 1);
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	f10d 0107 	add.w	r1, sp, #7
 8003ac6:	7820      	ldrb	r0, [r4, #0]
 8003ac8:	f7ff f846 	bl	8002b58 <uartWrite>
            line->buf[line->cursor] = rx_data;
 8003acc:	f894 23f1 	ldrb.w	r2, [r4, #1009]	@ 0x3f1
 8003ad0:	18a3      	adds	r3, r4, r2
 8003ad2:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8003ad6:	f883 13b0 	strb.w	r1, [r3, #944]	@ 0x3b0
            line->count++;
 8003ada:	f894 33f2 	ldrb.w	r3, [r4, #1010]	@ 0x3f2
 8003ade:	3301      	adds	r3, #1
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	f884 33f2 	strb.w	r3, [r4, #1010]	@ 0x3f2
            line->cursor++;
 8003ae6:	3201      	adds	r2, #1
 8003ae8:	f884 23f1 	strb.w	r2, [r4, #1009]	@ 0x3f1
            line->buf[line->count] = 0;
 8003aec:	4423      	add	r3, r4
 8003aee:	2200      	movs	r2, #0
 8003af0:	f883 23b0 	strb.w	r2, [r3, #944]	@ 0x3b0
 8003af4:	e7cd      	b.n	8003a92 <cliUpdate+0x13e>
            line->buf[line->cursor] = rx_data;
 8003af6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8003afa:	eb04 030c 	add.w	r3, r4, ip
 8003afe:	f883 23b0 	strb.w	r2, [r3, #944]	@ 0x3b0
            line->count++;
 8003b02:	3001      	adds	r0, #1
 8003b04:	b2c0      	uxtb	r0, r0
 8003b06:	f884 03f2 	strb.w	r0, [r4, #1010]	@ 0x3f2
            line->cursor++;
 8003b0a:	f10c 0c01 	add.w	ip, ip, #1
 8003b0e:	f884 c3f1 	strb.w	ip, [r4, #1009]	@ 0x3f1
            line->buf[line->count] = 0;
 8003b12:	4420      	add	r0, r4
 8003b14:	2300      	movs	r3, #0
 8003b16:	f880 33b0 	strb.w	r3, [r0, #944]	@ 0x3b0
            uartPrintf(p_cli->ch, "\x1B[4h%c\x1B[4l", rx_data);
 8003b1a:	494f      	ldr	r1, [pc, #316]	@ (8003c58 <cliUpdate+0x304>)
 8003b1c:	7820      	ldrb	r0, [r4, #0]
 8003b1e:	f7ff f847 	bl	8002bb0 <uartPrintf>
 8003b22:	e734      	b.n	800398e <cliUpdate+0x3a>
      p_cli->state = CLI_RX_SP2;
 8003b24:	2302      	movs	r3, #2
 8003b26:	7423      	strb	r3, [r4, #16]
  cliShowLog(p_cli);
 8003b28:	4620      	mov	r0, r4
 8003b2a:	f7ff fe57 	bl	80037dc <cliShowLog>
}
 8003b2e:	2000      	movs	r0, #0
 8003b30:	b005      	add	sp, #20
 8003b32:	bd30      	pop	{r4, r5, pc}
      p_cli->state = CLI_RX_SP3;
 8003b34:	2303      	movs	r3, #3
 8003b36:	7423      	strb	r3, [r4, #16]
      break;
 8003b38:	e7f6      	b.n	8003b28 <cliUpdate+0x1d4>
      p_cli->state = CLI_RX_IDLE;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	7423      	strb	r3, [r4, #16]
      if (rx_data == CLI_KEY_LEFT)
 8003b3e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003b42:	2b44      	cmp	r3, #68	@ 0x44
 8003b44:	d026      	beq.n	8003b94 <cliUpdate+0x240>
      if (rx_data == CLI_KEY_RIGHT)
 8003b46:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003b4a:	2b43      	cmp	r3, #67	@ 0x43
 8003b4c:	d037      	beq.n	8003bbe <cliUpdate+0x26a>
      if (rx_data == CLI_KEY_UP)
 8003b4e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003b52:	2b41      	cmp	r3, #65	@ 0x41
 8003b54:	d04a      	beq.n	8003bec <cliUpdate+0x298>
      if (rx_data == CLI_KEY_DOWN)
 8003b56:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003b5a:	2b42      	cmp	r3, #66	@ 0x42
 8003b5c:	d050      	beq.n	8003c00 <cliUpdate+0x2ac>
      if (rx_data == CLI_KEY_HOME)
 8003b5e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003b62:	2b31      	cmp	r3, #49	@ 0x31
 8003b64:	d056      	beq.n	8003c14 <cliUpdate+0x2c0>
      if (rx_data == CLI_KEY_END)
 8003b66:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003b6a:	2b34      	cmp	r3, #52	@ 0x34
 8003b6c:	d1dc      	bne.n	8003b28 <cliUpdate+0x1d4>
        if (line->cursor < line->count)
 8003b6e:	f894 33f1 	ldrb.w	r3, [r4, #1009]	@ 0x3f1
 8003b72:	f894 23f2 	ldrb.w	r2, [r4, #1010]	@ 0x3f2
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d358      	bcc.n	8003c2c <cliUpdate+0x2d8>
        if (line->cursor > line->count)
 8003b7a:	f894 23f1 	ldrb.w	r2, [r4, #1009]	@ 0x3f1
 8003b7e:	f894 33f2 	ldrb.w	r3, [r4, #1010]	@ 0x3f2
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d859      	bhi.n	8003c3a <cliUpdate+0x2e6>
        line->cursor = line->count;
 8003b86:	f894 33f2 	ldrb.w	r3, [r4, #1010]	@ 0x3f2
 8003b8a:	f884 33f1 	strb.w	r3, [r4, #1009]	@ 0x3f1
        p_cli->state = CLI_RX_SP4;
 8003b8e:	2304      	movs	r3, #4
 8003b90:	7423      	strb	r3, [r4, #16]
 8003b92:	e7c9      	b.n	8003b28 <cliUpdate+0x1d4>
        if (line->cursor > 0)
 8003b94:	f894 23f1 	ldrb.w	r2, [r4, #1009]	@ 0x3f1
 8003b98:	2a00      	cmp	r2, #0
 8003b9a:	d0d4      	beq.n	8003b46 <cliUpdate+0x1f2>
          line->cursor--;
 8003b9c:	3a01      	subs	r2, #1
 8003b9e:	f884 23f1 	strb.w	r2, [r4, #1009]	@ 0x3f1
          tx_buf[0] = 0x1B;
 8003ba2:	221b      	movs	r2, #27
 8003ba4:	f88d 2008 	strb.w	r2, [sp, #8]
          tx_buf[1] = 0x5B;
 8003ba8:	225b      	movs	r2, #91	@ 0x5b
 8003baa:	f88d 2009 	strb.w	r2, [sp, #9]
          tx_buf[2] = rx_data;
 8003bae:	f88d 300a 	strb.w	r3, [sp, #10]
          uartWrite(p_cli->ch, tx_buf, 3);
 8003bb2:	2203      	movs	r2, #3
 8003bb4:	a902      	add	r1, sp, #8
 8003bb6:	7820      	ldrb	r0, [r4, #0]
 8003bb8:	f7fe ffce 	bl	8002b58 <uartWrite>
 8003bbc:	e7c3      	b.n	8003b46 <cliUpdate+0x1f2>
        if (line->cursor < line->count)
 8003bbe:	f894 23f1 	ldrb.w	r2, [r4, #1009]	@ 0x3f1
 8003bc2:	f894 13f2 	ldrb.w	r1, [r4, #1010]	@ 0x3f2
 8003bc6:	428a      	cmp	r2, r1
 8003bc8:	d2c1      	bcs.n	8003b4e <cliUpdate+0x1fa>
          line->cursor++;
 8003bca:	3201      	adds	r2, #1
 8003bcc:	f884 23f1 	strb.w	r2, [r4, #1009]	@ 0x3f1
          tx_buf[0] = 0x1B;
 8003bd0:	221b      	movs	r2, #27
 8003bd2:	f88d 2008 	strb.w	r2, [sp, #8]
          tx_buf[1] = 0x5B;
 8003bd6:	225b      	movs	r2, #91	@ 0x5b
 8003bd8:	f88d 2009 	strb.w	r2, [sp, #9]
          tx_buf[2] = rx_data;
 8003bdc:	f88d 300a 	strb.w	r3, [sp, #10]
          uartWrite(p_cli->ch, tx_buf, 3);
 8003be0:	2203      	movs	r2, #3
 8003be2:	a902      	add	r1, sp, #8
 8003be4:	7820      	ldrb	r0, [r4, #0]
 8003be6:	f7fe ffb7 	bl	8002b58 <uartWrite>
 8003bea:	e7b0      	b.n	8003b4e <cliUpdate+0x1fa>
        cliLineChange(p_cli, true);
 8003bec:	2101      	movs	r1, #1
 8003bee:	4620      	mov	r0, r4
 8003bf0:	f7ff fd5e 	bl	80036b0 <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 8003bf4:	f504 716c 	add.w	r1, r4, #944	@ 0x3b0
 8003bf8:	7820      	ldrb	r0, [r4, #0]
 8003bfa:	f7fe ffd9 	bl	8002bb0 <uartPrintf>
 8003bfe:	e7aa      	b.n	8003b56 <cliUpdate+0x202>
        cliLineChange(p_cli, false);
 8003c00:	2100      	movs	r1, #0
 8003c02:	4620      	mov	r0, r4
 8003c04:	f7ff fd54 	bl	80036b0 <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 8003c08:	f504 716c 	add.w	r1, r4, #944	@ 0x3b0
 8003c0c:	7820      	ldrb	r0, [r4, #0]
 8003c0e:	f7fe ffcf 	bl	8002bb0 <uartPrintf>
 8003c12:	e7a4      	b.n	8003b5e <cliUpdate+0x20a>
        uartPrintf(p_cli->ch, "\x1B[%dD", line->cursor);
 8003c14:	f894 23f1 	ldrb.w	r2, [r4, #1009]	@ 0x3f1
 8003c18:	4910      	ldr	r1, [pc, #64]	@ (8003c5c <cliUpdate+0x308>)
 8003c1a:	7820      	ldrb	r0, [r4, #0]
 8003c1c:	f7fe ffc8 	bl	8002bb0 <uartPrintf>
        line->cursor = 0;
 8003c20:	2300      	movs	r3, #0
 8003c22:	f884 33f1 	strb.w	r3, [r4, #1009]	@ 0x3f1
        p_cli->state = CLI_RX_SP4;
 8003c26:	2304      	movs	r3, #4
 8003c28:	7423      	strb	r3, [r4, #16]
 8003c2a:	e79c      	b.n	8003b66 <cliUpdate+0x212>
          mov_len = line->count - line->cursor;
 8003c2c:	1ad2      	subs	r2, r2, r3
          uartPrintf(p_cli->ch, "\x1B[%dC", mov_len);
 8003c2e:	b292      	uxth	r2, r2
 8003c30:	490b      	ldr	r1, [pc, #44]	@ (8003c60 <cliUpdate+0x30c>)
 8003c32:	7820      	ldrb	r0, [r4, #0]
 8003c34:	f7fe ffbc 	bl	8002bb0 <uartPrintf>
 8003c38:	e79f      	b.n	8003b7a <cliUpdate+0x226>
          mov_len = line->cursor - line->count;
 8003c3a:	1ad2      	subs	r2, r2, r3
          uartPrintf(p_cli->ch, "\x1B[%dD", mov_len);
 8003c3c:	b292      	uxth	r2, r2
 8003c3e:	4907      	ldr	r1, [pc, #28]	@ (8003c5c <cliUpdate+0x308>)
 8003c40:	7820      	ldrb	r0, [r4, #0]
 8003c42:	f7fe ffb5 	bl	8002bb0 <uartPrintf>
 8003c46:	e79e      	b.n	8003b86 <cliUpdate+0x232>
      p_cli->state = CLI_RX_IDLE;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	7423      	strb	r3, [r4, #16]
      break;
 8003c4c:	e76c      	b.n	8003b28 <cliUpdate+0x1d4>
 8003c4e:	bf00      	nop
 8003c50:	08015f60 	.word	0x08015f60
 8003c54:	08015f68 	.word	0x08015f68
 8003c58:	08015f70 	.word	0x08015f70
 8003c5c:	08015ec8 	.word	0x08015ec8
 8003c60:	08015f7c 	.word	0x08015f7c

08003c64 <cliMain>:
{
 8003c64:	b538      	push	{r3, r4, r5, lr}
  if (cli_node.is_open != true)
 8003c66:	4b09      	ldr	r3, [pc, #36]	@ (8003c8c <cliMain+0x28>)
 8003c68:	7a1c      	ldrb	r4, [r3, #8]
 8003c6a:	b90c      	cbnz	r4, 8003c70 <cliMain+0xc>
}
 8003c6c:	4620      	mov	r0, r4
 8003c6e:	bd38      	pop	{r3, r4, r5, pc}
  if (uartAvailable(cli_node.ch) > 0)
 8003c70:	7818      	ldrb	r0, [r3, #0]
 8003c72:	f7fe ff15 	bl	8002aa0 <uartAvailable>
 8003c76:	2800      	cmp	r0, #0
 8003c78:	d0f8      	beq.n	8003c6c <cliMain+0x8>
    cliUpdate(&cli_node, uartRead(cli_node.ch));
 8003c7a:	4d04      	ldr	r5, [pc, #16]	@ (8003c8c <cliMain+0x28>)
 8003c7c:	7828      	ldrb	r0, [r5, #0]
 8003c7e:	f7fe ff3b 	bl	8002af8 <uartRead>
 8003c82:	4601      	mov	r1, r0
 8003c84:	4628      	mov	r0, r5
 8003c86:	f7ff fe65 	bl	8003954 <cliUpdate>
 8003c8a:	e7ef      	b.n	8003c6c <cliMain+0x8>
 8003c8c:	20005e70 	.word	0x20005e70

08003c90 <cliShowList>:

  return ret;
}

void cliShowList(cli_args_t *args)
{
 8003c90:	b510      	push	{r4, lr}
  cli_t *p_cli = &cli_node;


  cliPrintf("\r\n");
 8003c92:	480f      	ldr	r0, [pc, #60]	@ (8003cd0 <cliShowList+0x40>)
 8003c94:	f7ff fe0e 	bl	80038b4 <cliPrintf>
  cliPrintf("---------- cmd list ---------\r\n");
 8003c98:	480e      	ldr	r0, [pc, #56]	@ (8003cd4 <cliShowList+0x44>)
 8003c9a:	f7ff fe0b 	bl	80038b4 <cliPrintf>

  for (int i=0; i<p_cli->cmd_count; i++)
 8003c9e:	2400      	movs	r4, #0
 8003ca0:	e00c      	b.n	8003cbc <cliShowList+0x2c>
  {
    cliPrintf(p_cli->cmd_list[i].cmd_str);
 8003ca2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8003ca6:	0098      	lsls	r0, r3, #2
 8003ca8:	f500 707e 	add.w	r0, r0, #1016	@ 0x3f8
 8003cac:	4b0a      	ldr	r3, [pc, #40]	@ (8003cd8 <cliShowList+0x48>)
 8003cae:	4418      	add	r0, r3
 8003cb0:	f7ff fe00 	bl	80038b4 <cliPrintf>
    cliPrintf("\r\n");
 8003cb4:	4806      	ldr	r0, [pc, #24]	@ (8003cd0 <cliShowList+0x40>)
 8003cb6:	f7ff fdfd 	bl	80038b4 <cliPrintf>
  for (int i=0; i<p_cli->cmd_count; i++)
 8003cba:	3401      	adds	r4, #1
 8003cbc:	4b06      	ldr	r3, [pc, #24]	@ (8003cd8 <cliShowList+0x48>)
 8003cbe:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	@ 0x3f4
 8003cc2:	42a3      	cmp	r3, r4
 8003cc4:	dced      	bgt.n	8003ca2 <cliShowList+0x12>
  }

  cliPrintf("-----------------------------\r\n");
 8003cc6:	4805      	ldr	r0, [pc, #20]	@ (8003cdc <cliShowList+0x4c>)
 8003cc8:	f7ff fdf4 	bl	80038b4 <cliPrintf>
}
 8003ccc:	bd10      	pop	{r4, pc}
 8003cce:	bf00      	nop
 8003cd0:	08015e9c 	.word	0x08015e9c
 8003cd4:	08015f84 	.word	0x08015f84
 8003cd8:	20005e70 	.word	0x20005e70
 8003cdc:	08015fa4 	.word	0x08015fa4

08003ce0 <cliKeepLoop>:
{
 8003ce0:	b508      	push	{r3, lr}
  if (uartAvailable(p_cli->ch) == 0)
 8003ce2:	4b04      	ldr	r3, [pc, #16]	@ (8003cf4 <cliKeepLoop+0x14>)
 8003ce4:	7818      	ldrb	r0, [r3, #0]
 8003ce6:	f7fe fedb 	bl	8002aa0 <uartAvailable>
 8003cea:	b908      	cbnz	r0, 8003cf0 <cliKeepLoop+0x10>
    return true;
 8003cec:	2001      	movs	r0, #1
}
 8003cee:	bd08      	pop	{r3, pc}
    return false;
 8003cf0:	2000      	movs	r0, #0
 8003cf2:	e7fc      	b.n	8003cee <cliKeepLoop+0xe>
 8003cf4:	20005e70 	.word	0x20005e70

08003cf8 <cliAdd>:
{
 8003cf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (p_cli->cmd_count >= CLI_CMD_LIST_MAX)
 8003cfc:	4b11      	ldr	r3, [pc, #68]	@ (8003d44 <cliAdd+0x4c>)
 8003cfe:	f8b3 53f4 	ldrh.w	r5, [r3, #1012]	@ 0x3f4
 8003d02:	2d1f      	cmp	r5, #31
 8003d04:	d902      	bls.n	8003d0c <cliAdd+0x14>
    return false;
 8003d06:	2000      	movs	r0, #0
}
 8003d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d0c:	460e      	mov	r6, r1
  strcpy(p_cli->cmd_list[index].cmd_str, cmd_str);
 8003d0e:	00af      	lsls	r7, r5, #2
 8003d10:	eb05 0485 	add.w	r4, r5, r5, lsl #2
 8003d14:	00a4      	lsls	r4, r4, #2
 8003d16:	f504 747e 	add.w	r4, r4, #1016	@ 0x3f8
 8003d1a:	4698      	mov	r8, r3
 8003d1c:	441c      	add	r4, r3
 8003d1e:	4601      	mov	r1, r0
 8003d20:	4620      	mov	r0, r4
 8003d22:	f007 fc70 	bl	800b606 <strcpy>
  p_cli->cmd_list[index].cmd_func = p_func;
 8003d26:	442f      	add	r7, r5
 8003d28:	eb08 0787 	add.w	r7, r8, r7, lsl #2
 8003d2c:	f8c7 6408 	str.w	r6, [r7, #1032]	@ 0x408
  cliToUpper(p_cli->cmd_list[index].cmd_str);
 8003d30:	4620      	mov	r0, r4
 8003d32:	f7ff fc3f 	bl	80035b4 <cliToUpper>
  p_cli->cmd_count++;
 8003d36:	f8b8 33f4 	ldrh.w	r3, [r8, #1012]	@ 0x3f4
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	f8a8 33f4 	strh.w	r3, [r8, #1012]	@ 0x3f4
  return ret;
 8003d40:	2001      	movs	r0, #1
 8003d42:	e7e1      	b.n	8003d08 <cliAdd+0x10>
 8003d44:	20005e70 	.word	0x20005e70

08003d48 <cliInit>:
{
 8003d48:	b508      	push	{r3, lr}
  cli_node.is_open = false;
 8003d4a:	4810      	ldr	r0, [pc, #64]	@ (8003d8c <cliInit+0x44>)
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	7203      	strb	r3, [r0, #8]
  cli_node.is_log  = false;
 8003d50:	7243      	strb	r3, [r0, #9]
  cli_node.state   = CLI_RX_IDLE;
 8003d52:	7403      	strb	r3, [r0, #16]
  cli_node.hist_line_i     = 0;
 8003d54:	f880 3195 	strb.w	r3, [r0, #405]	@ 0x195
  cli_node.hist_line_last  = 0;
 8003d58:	f880 3196 	strb.w	r3, [r0, #406]	@ 0x196
  cli_node.hist_line_count = 0;
 8003d5c:	f880 3197 	strb.w	r3, [r0, #407]	@ 0x197
  cli_node.hist_line_new   = false;
 8003d60:	f880 3194 	strb.w	r3, [r0, #404]	@ 0x194
  cli_node.cmd_args.getData  = cliArgsGetData;
 8003d64:	4b0a      	ldr	r3, [pc, #40]	@ (8003d90 <cliInit+0x48>)
 8003d66:	f8c0 3680 	str.w	r3, [r0, #1664]	@ 0x680
  cli_node.cmd_args.getFloat = cliArgsGetFloat;
 8003d6a:	4b0a      	ldr	r3, [pc, #40]	@ (8003d94 <cliInit+0x4c>)
 8003d6c:	f8c0 3684 	str.w	r3, [r0, #1668]	@ 0x684
  cli_node.cmd_args.getStr   = cliArgsGetStr;
 8003d70:	4b09      	ldr	r3, [pc, #36]	@ (8003d98 <cliInit+0x50>)
 8003d72:	f8c0 3688 	str.w	r3, [r0, #1672]	@ 0x688
  cli_node.cmd_args.isStr    = cliArgsIsStr;
 8003d76:	4b09      	ldr	r3, [pc, #36]	@ (8003d9c <cliInit+0x54>)
 8003d78:	f8c0 368c 	str.w	r3, [r0, #1676]	@ 0x68c
  cliLineClean(&cli_node);
 8003d7c:	f7ff fbe8 	bl	8003550 <cliLineClean>
  cliAdd("help", cliShowList);  
 8003d80:	4907      	ldr	r1, [pc, #28]	@ (8003da0 <cliInit+0x58>)
 8003d82:	4808      	ldr	r0, [pc, #32]	@ (8003da4 <cliInit+0x5c>)
 8003d84:	f7ff ffb8 	bl	8003cf8 <cliAdd>
}
 8003d88:	2001      	movs	r0, #1
 8003d8a:	bd08      	pop	{r3, pc}
 8003d8c:	20005e70 	.word	0x20005e70
 8003d90:	08003669 	.word	0x08003669
 8003d94:	0800363d 	.word	0x0800363d
 8003d98:	080035ed 	.word	0x080035ed
 8003d9c:	0800360d 	.word	0x0800360d
 8003da0:	08003c91 	.word	0x08003c91
 8003da4:	08015fc4 	.word	0x08015fc4

08003da8 <cliShowCursor>:
 
void cliShowCursor(bool visibility)
{
 8003da8:	b508      	push	{r3, lr}
  if (visibility == false)
 8003daa:	b918      	cbnz	r0, 8003db4 <cliShowCursor+0xc>
  {
    cliPrintf("\033[?25l");
 8003dac:	4803      	ldr	r0, [pc, #12]	@ (8003dbc <cliShowCursor+0x14>)
 8003dae:	f7ff fd81 	bl	80038b4 <cliPrintf>
  }
  else
  {
    cliPrintf("\033[?25h");
  }
}
 8003db2:	bd08      	pop	{r3, pc}
    cliPrintf("\033[?25h");
 8003db4:	4802      	ldr	r0, [pc, #8]	@ (8003dc0 <cliShowCursor+0x18>)
 8003db6:	f7ff fd7d 	bl	80038b4 <cliPrintf>
}
 8003dba:	e7fa      	b.n	8003db2 <cliShowCursor+0xa>
 8003dbc:	08015fcc 	.word	0x08015fcc
 8003dc0:	08015fd4 	.word	0x08015fd4

08003dc4 <cliMoveUp>:

void cliMoveUp(uint8_t y)
{
 8003dc4:	b508      	push	{r3, lr}
 8003dc6:	4601      	mov	r1, r0
  cliPrintf("\x1B[%dA", y);
 8003dc8:	4801      	ldr	r0, [pc, #4]	@ (8003dd0 <cliMoveUp+0xc>)
 8003dca:	f7ff fd73 	bl	80038b4 <cliPrintf>
}
 8003dce:	bd08      	pop	{r3, pc}
 8003dd0:	08015fdc 	.word	0x08015fdc

08003dd4 <cliMoveDown>:

void cliMoveDown(uint8_t y)
{
 8003dd4:	b508      	push	{r3, lr}
 8003dd6:	4601      	mov	r1, r0
  cliPrintf("\x1B[%dB", y);
 8003dd8:	4801      	ldr	r0, [pc, #4]	@ (8003de0 <cliMoveDown+0xc>)
 8003dda:	f7ff fd6b 	bl	80038b4 <cliPrintf>
}
 8003dde:	bd08      	pop	{r3, pc}
 8003de0:	08015fe4 	.word	0x08015fe4

08003de4 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac2;
DMA_HandleTypeDef hdma_dac1_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8003de4:	b500      	push	{lr}
 8003de6:	b08d      	sub	sp, #52	@ 0x34

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8003de8:	2230      	movs	r2, #48	@ 0x30
 8003dea:	2100      	movs	r1, #0
 8003dec:	4668      	mov	r0, sp
 8003dee:	f007 fb4d 	bl	800b48c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8003df2:	4811      	ldr	r0, [pc, #68]	@ (8003e38 <MX_DAC1_Init+0x54>)
 8003df4:	4b11      	ldr	r3, [pc, #68]	@ (8003e3c <MX_DAC1_Init+0x58>)
 8003df6:	6003      	str	r3, [r0, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8003df8:	f002 f834 	bl	8005e64 <HAL_DAC_Init>
 8003dfc:	b9a8      	cbnz	r0, 8003e2a <MX_DAC1_Init+0x46>
    Error_Handler();
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8003dfe:	2302      	movs	r3, #2
 8003e00:	9300      	str	r3, [sp, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8003e02:	2200      	movs	r2, #0
 8003e04:	f88d 2004 	strb.w	r2, [sp, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8003e08:	f88d 2005 	strb.w	r2, [sp, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8003e0c:	9202      	str	r2, [sp, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8003e0e:	9203      	str	r2, [sp, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8003e10:	9204      	str	r2, [sp, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8003e12:	9205      	str	r2, [sp, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8003e14:	2301      	movs	r3, #1
 8003e16:	9306      	str	r3, [sp, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8003e18:	9207      	str	r2, [sp, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003e1a:	4669      	mov	r1, sp
 8003e1c:	4806      	ldr	r0, [pc, #24]	@ (8003e38 <MX_DAC1_Init+0x54>)
 8003e1e:	f002 f8d1 	bl	8005fc4 <HAL_DAC_ConfigChannel>
 8003e22:	b928      	cbnz	r0, 8003e30 <MX_DAC1_Init+0x4c>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8003e24:	b00d      	add	sp, #52	@ 0x34
 8003e26:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8003e2a:	f000 fa75 	bl	8004318 <Error_Handler>
 8003e2e:	e7e6      	b.n	8003dfe <MX_DAC1_Init+0x1a>
    Error_Handler();
 8003e30:	f000 fa72 	bl	8004318 <Error_Handler>
}
 8003e34:	e7f6      	b.n	8003e24 <MX_DAC1_Init+0x40>
 8003e36:	bf00      	nop
 8003e38:	20006574 	.word	0x20006574
 8003e3c:	50000800 	.word	0x50000800

08003e40 <MX_DAC2_Init>:
/* DAC2 init function */
void MX_DAC2_Init(void)
{
 8003e40:	b500      	push	{lr}
 8003e42:	b08d      	sub	sp, #52	@ 0x34

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8003e44:	2230      	movs	r2, #48	@ 0x30
 8003e46:	2100      	movs	r1, #0
 8003e48:	4668      	mov	r0, sp
 8003e4a:	f007 fb1f 	bl	800b48c <memset>

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 8003e4e:	4811      	ldr	r0, [pc, #68]	@ (8003e94 <MX_DAC2_Init+0x54>)
 8003e50:	4b11      	ldr	r3, [pc, #68]	@ (8003e98 <MX_DAC2_Init+0x58>)
 8003e52:	6003      	str	r3, [r0, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8003e54:	f002 f806 	bl	8005e64 <HAL_DAC_Init>
 8003e58:	b9a8      	cbnz	r0, 8003e86 <MX_DAC2_Init+0x46>
    Error_Handler();
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8003e5a:	2302      	movs	r3, #2
 8003e5c:	9300      	str	r3, [sp, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f88d 2004 	strb.w	r2, [sp, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8003e64:	f88d 2005 	strb.w	r2, [sp, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8003e68:	9202      	str	r2, [sp, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8003e6a:	9203      	str	r2, [sp, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8003e6c:	9204      	str	r2, [sp, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8003e6e:	9205      	str	r2, [sp, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8003e70:	2301      	movs	r3, #1
 8003e72:	9306      	str	r3, [sp, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8003e74:	9207      	str	r2, [sp, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003e76:	4669      	mov	r1, sp
 8003e78:	4806      	ldr	r0, [pc, #24]	@ (8003e94 <MX_DAC2_Init+0x54>)
 8003e7a:	f002 f8a3 	bl	8005fc4 <HAL_DAC_ConfigChannel>
 8003e7e:	b928      	cbnz	r0, 8003e8c <MX_DAC2_Init+0x4c>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 8003e80:	b00d      	add	sp, #52	@ 0x34
 8003e82:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8003e86:	f000 fa47 	bl	8004318 <Error_Handler>
 8003e8a:	e7e6      	b.n	8003e5a <MX_DAC2_Init+0x1a>
    Error_Handler();
 8003e8c:	f000 fa44 	bl	8004318 <Error_Handler>
}
 8003e90:	e7f6      	b.n	8003e80 <MX_DAC2_Init+0x40>
 8003e92:	bf00      	nop
 8003e94:	20006560 	.word	0x20006560
 8003e98:	50000c00 	.word	0x50000c00

08003e9c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8003e9c:	b530      	push	{r4, r5, lr}
 8003e9e:	b08b      	sub	sp, #44	@ 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	9305      	str	r3, [sp, #20]
 8003ea4:	9306      	str	r3, [sp, #24]
 8003ea6:	9307      	str	r3, [sp, #28]
 8003ea8:	9308      	str	r3, [sp, #32]
 8003eaa:	9309      	str	r3, [sp, #36]	@ 0x24
  if(dacHandle->Instance==DAC1)
 8003eac:	6803      	ldr	r3, [r0, #0]
 8003eae:	4a33      	ldr	r2, [pc, #204]	@ (8003f7c <HAL_DAC_MspInit+0xe0>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d004      	beq.n	8003ebe <HAL_DAC_MspInit+0x22>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
  else if(dacHandle->Instance==DAC2)
 8003eb4:	4a32      	ldr	r2, [pc, #200]	@ (8003f80 <HAL_DAC_MspInit+0xe4>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d03b      	beq.n	8003f32 <HAL_DAC_MspInit+0x96>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 8003eba:	b00b      	add	sp, #44	@ 0x2c
 8003ebc:	bd30      	pop	{r4, r5, pc}
 8003ebe:	4604      	mov	r4, r0
    __HAL_RCC_DAC1_CLK_ENABLE();
 8003ec0:	4b30      	ldr	r3, [pc, #192]	@ (8003f84 <HAL_DAC_MspInit+0xe8>)
 8003ec2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003ec4:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003ec8:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003eca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003ecc:	f402 3280 	and.w	r2, r2, #65536	@ 0x10000
 8003ed0:	9201      	str	r2, [sp, #4]
 8003ed2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ed4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003ed6:	f042 0201 	orr.w	r2, r2, #1
 8003eda:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003edc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ede:	f003 0301 	and.w	r3, r3, #1
 8003ee2:	9302      	str	r3, [sp, #8]
 8003ee4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = MCU_DAC1_Pin;
 8003ee6:	2510      	movs	r5, #16
 8003ee8:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003eea:	2303      	movs	r3, #3
 8003eec:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(MCU_DAC1_GPIO_Port, &GPIO_InitStruct);
 8003eee:	a905      	add	r1, sp, #20
 8003ef0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003ef4:	f002 fbac 	bl	8006650 <HAL_GPIO_Init>
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 8003ef8:	4823      	ldr	r0, [pc, #140]	@ (8003f88 <HAL_DAC_MspInit+0xec>)
 8003efa:	4b24      	ldr	r3, [pc, #144]	@ (8003f8c <HAL_DAC_MspInit+0xf0>)
 8003efc:	6003      	str	r3, [r0, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 8003efe:	2306      	movs	r3, #6
 8003f00:	6043      	str	r3, [r0, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003f02:	6085      	str	r5, [r0, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f04:	2300      	movs	r3, #0
 8003f06:	60c3      	str	r3, [r0, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003f08:	2280      	movs	r2, #128	@ 0x80
 8003f0a:	6102      	str	r2, [r0, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003f0c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f10:	6142      	str	r2, [r0, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003f12:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003f16:	6182      	str	r2, [r0, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8003f18:	2220      	movs	r2, #32
 8003f1a:	61c2      	str	r2, [r0, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8003f1c:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8003f1e:	f002 f9ad 	bl	800627c <HAL_DMA_Init>
 8003f22:	b918      	cbnz	r0, 8003f2c <HAL_DAC_MspInit+0x90>
    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8003f24:	4b18      	ldr	r3, [pc, #96]	@ (8003f88 <HAL_DAC_MspInit+0xec>)
 8003f26:	60a3      	str	r3, [r4, #8]
 8003f28:	629c      	str	r4, [r3, #40]	@ 0x28
 8003f2a:	e7c6      	b.n	8003eba <HAL_DAC_MspInit+0x1e>
      Error_Handler();
 8003f2c:	f000 f9f4 	bl	8004318 <Error_Handler>
 8003f30:	e7f8      	b.n	8003f24 <HAL_DAC_MspInit+0x88>
    __HAL_RCC_DAC2_CLK_ENABLE();
 8003f32:	4b14      	ldr	r3, [pc, #80]	@ (8003f84 <HAL_DAC_MspInit+0xe8>)
 8003f34:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003f36:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8003f3a:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003f3c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003f3e:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8003f42:	9203      	str	r2, [sp, #12]
 8003f44:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f46:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003f48:	f042 0201 	orr.w	r2, r2, #1
 8003f4c:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003f4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f50:	f003 0301 	and.w	r3, r3, #1
 8003f54:	9304      	str	r3, [sp, #16]
 8003f56:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = MCU_DAC2_Pin;
 8003f58:	2340      	movs	r3, #64	@ 0x40
 8003f5a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(MCU_DAC2_GPIO_Port, &GPIO_InitStruct);
 8003f60:	a905      	add	r1, sp, #20
 8003f62:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003f66:	f002 fb73 	bl	8006650 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 0, 0);
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	4611      	mov	r1, r2
 8003f6e:	2037      	movs	r0, #55	@ 0x37
 8003f70:	f001 ff4c 	bl	8005e0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 8003f74:	2037      	movs	r0, #55	@ 0x37
 8003f76:	f001 ff59 	bl	8005e2c <HAL_NVIC_EnableIRQ>
}
 8003f7a:	e79e      	b.n	8003eba <HAL_DAC_MspInit+0x1e>
 8003f7c:	50000800 	.word	0x50000800
 8003f80:	50000c00 	.word	0x50000c00
 8003f84:	40021000 	.word	0x40021000
 8003f88:	20006500 	.word	0x20006500
 8003f8c:	40020008 	.word	0x40020008

08003f90 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003f90:	b500      	push	{lr}
 8003f92:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8003f94:	4b1e      	ldr	r3, [pc, #120]	@ (8004010 <MX_DMA_Init+0x80>)
 8003f96:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003f98:	f042 0204 	orr.w	r2, r2, #4
 8003f9c:	649a      	str	r2, [r3, #72]	@ 0x48
 8003f9e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003fa0:	f002 0204 	and.w	r2, r2, #4
 8003fa4:	9200      	str	r2, [sp, #0]
 8003fa6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003fa8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003faa:	f042 0201 	orr.w	r2, r2, #1
 8003fae:	649a      	str	r2, [r3, #72]	@ 0x48
 8003fb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fb2:	f003 0301 	and.w	r3, r3, #1
 8003fb6:	9301      	str	r3, [sp, #4]
 8003fb8:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003fba:	2200      	movs	r2, #0
 8003fbc:	4611      	mov	r1, r2
 8003fbe:	200b      	movs	r0, #11
 8003fc0:	f001 ff24 	bl	8005e0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003fc4:	200b      	movs	r0, #11
 8003fc6:	f001 ff31 	bl	8005e2c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8003fca:	2200      	movs	r2, #0
 8003fcc:	4611      	mov	r1, r2
 8003fce:	200c      	movs	r0, #12
 8003fd0:	f001 ff1c 	bl	8005e0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8003fd4:	200c      	movs	r0, #12
 8003fd6:	f001 ff29 	bl	8005e2c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8003fda:	2200      	movs	r2, #0
 8003fdc:	4611      	mov	r1, r2
 8003fde:	200d      	movs	r0, #13
 8003fe0:	f001 ff14 	bl	8005e0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8003fe4:	200d      	movs	r0, #13
 8003fe6:	f001 ff21 	bl	8005e2c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8003fea:	2200      	movs	r2, #0
 8003fec:	4611      	mov	r1, r2
 8003fee:	200e      	movs	r0, #14
 8003ff0:	f001 ff0c 	bl	8005e0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8003ff4:	200e      	movs	r0, #14
 8003ff6:	f001 ff19 	bl	8005e2c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	4611      	mov	r1, r2
 8003ffe:	200f      	movs	r0, #15
 8004000:	f001 ff04 	bl	8005e0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8004004:	200f      	movs	r0, #15
 8004006:	f001 ff11 	bl	8005e2c <HAL_NVIC_EnableIRQ>

}
 800400a:	b003      	add	sp, #12
 800400c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004010:	40021000 	.word	0x40021000

08004014 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004014:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004016:	b08b      	sub	sp, #44	@ 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004018:	2400      	movs	r4, #0
 800401a:	9405      	str	r4, [sp, #20]
 800401c:	9406      	str	r4, [sp, #24]
 800401e:	9407      	str	r4, [sp, #28]
 8004020:	9408      	str	r4, [sp, #32]
 8004022:	9409      	str	r4, [sp, #36]	@ 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004024:	4b3e      	ldr	r3, [pc, #248]	@ (8004120 <MX_GPIO_Init+0x10c>)
 8004026:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004028:	f042 0204 	orr.w	r2, r2, #4
 800402c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800402e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004030:	f002 0204 	and.w	r2, r2, #4
 8004034:	9201      	str	r2, [sp, #4]
 8004036:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004038:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800403a:	f042 0220 	orr.w	r2, r2, #32
 800403e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004040:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004042:	f002 0220 	and.w	r2, r2, #32
 8004046:	9202      	str	r2, [sp, #8]
 8004048:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800404a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800404c:	f042 0201 	orr.w	r2, r2, #1
 8004050:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004052:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004054:	f002 0201 	and.w	r2, r2, #1
 8004058:	9203      	str	r2, [sp, #12]
 800405a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800405c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800405e:	f042 0202 	orr.w	r2, r2, #2
 8004062:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004064:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004066:	f003 0302 	and.w	r3, r3, #2
 800406a:	9304      	str	r3, [sp, #16]
 800406c:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ON_BOARD_LED_GPIO_Port, ON_BOARD_LED_Pin, GPIO_PIN_SET);
 800406e:	4f2d      	ldr	r7, [pc, #180]	@ (8004124 <MX_GPIO_Init+0x110>)
 8004070:	2201      	movs	r2, #1
 8004072:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004076:	4638      	mov	r0, r7
 8004078:	f002 fc62 	bl	8006940 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_PIN_GPIO_Port, TEST_PIN_Pin, GPIO_PIN_RESET);
 800407c:	4e2a      	ldr	r6, [pc, #168]	@ (8004128 <MX_GPIO_Init+0x114>)
 800407e:	4622      	mov	r2, r4
 8004080:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004084:	4630      	mov	r0, r6
 8004086:	f002 fc5b 	bl	8006940 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 800408a:	2201      	movs	r2, #1
 800408c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004090:	4630      	mov	r0, r6
 8004092:	f002 fc55 	bl	8006940 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MT_PH_GPIO_Port, MT_PH_Pin, GPIO_PIN_RESET);
 8004096:	4622      	mov	r2, r4
 8004098:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800409c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80040a0:	f002 fc4e 	bl	8006940 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin, GPIO_PIN_SET);
 80040a4:	2201      	movs	r2, #1
 80040a6:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80040aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80040ae:	f002 fc47 	bl	8006940 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ON_BOARD_LED_Pin;
 80040b2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80040b6:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040b8:	2501      	movs	r5, #1
 80040ba:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040bc:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040be:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(ON_BOARD_LED_GPIO_Port, &GPIO_InitStruct);
 80040c0:	a905      	add	r1, sp, #20
 80040c2:	4638      	mov	r0, r7
 80040c4:	f002 fac4 	bl	8006650 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = TEST_PIN_Pin|LED3_Pin;
 80040c8:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 80040cc:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040ce:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040d0:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040d2:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040d4:	a905      	add	r1, sp, #20
 80040d6:	4630      	mov	r0, r6
 80040d8:	f002 faba 	bl	8006650 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MT_PH_Pin;
 80040dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80040e0:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040e2:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040e4:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040e6:	2303      	movs	r3, #3
 80040e8:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(MT_PH_GPIO_Port, &GPIO_InitStruct);
 80040ea:	a905      	add	r1, sp, #20
 80040ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80040f0:	f002 faae 	bl	8006650 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 80040f4:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80040f8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040fa:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040fc:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040fe:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004100:	a905      	add	r1, sp, #20
 8004102:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004106:	f002 faa3 	bl	8006650 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = BTN3_Pin|BTN1_Pin|BTN2_Pin;
 800410a:	2338      	movs	r3, #56	@ 0x38
 800410c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800410e:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004110:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004112:	a905      	add	r1, sp, #20
 8004114:	4630      	mov	r0, r6
 8004116:	f002 fa9b 	bl	8006650 <HAL_GPIO_Init>

}
 800411a:	b00b      	add	sp, #44	@ 0x2c
 800411c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800411e:	bf00      	nop
 8004120:	40021000 	.word	0x40021000
 8004124:	48000800 	.word	0x48000800
 8004128:	48000400 	.word	0x48000400

0800412c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800412c:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800412e:	4812      	ldr	r0, [pc, #72]	@ (8004178 <MX_I2C1_Init+0x4c>)
 8004130:	4b12      	ldr	r3, [pc, #72]	@ (800417c <MX_I2C1_Init+0x50>)
 8004132:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x10802D9B;
 8004134:	4b12      	ldr	r3, [pc, #72]	@ (8004180 <MX_I2C1_Init+0x54>)
 8004136:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8004138:	2300      	movs	r3, #0
 800413a:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800413c:	2201      	movs	r2, #1
 800413e:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004140:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8004142:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004144:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004146:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004148:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800414a:	f002 fd9c 	bl	8006c86 <HAL_I2C_Init>
 800414e:	b950      	cbnz	r0, 8004166 <MX_I2C1_Init+0x3a>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004150:	2100      	movs	r1, #0
 8004152:	4809      	ldr	r0, [pc, #36]	@ (8004178 <MX_I2C1_Init+0x4c>)
 8004154:	f002 ff6e 	bl	8007034 <HAL_I2CEx_ConfigAnalogFilter>
 8004158:	b940      	cbnz	r0, 800416c <MX_I2C1_Init+0x40>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800415a:	2100      	movs	r1, #0
 800415c:	4806      	ldr	r0, [pc, #24]	@ (8004178 <MX_I2C1_Init+0x4c>)
 800415e:	f002 ff97 	bl	8007090 <HAL_I2CEx_ConfigDigitalFilter>
 8004162:	b930      	cbnz	r0, 8004172 <MX_I2C1_Init+0x46>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004164:	bd08      	pop	{r3, pc}
    Error_Handler();
 8004166:	f000 f8d7 	bl	8004318 <Error_Handler>
 800416a:	e7f1      	b.n	8004150 <MX_I2C1_Init+0x24>
    Error_Handler();
 800416c:	f000 f8d4 	bl	8004318 <Error_Handler>
 8004170:	e7f3      	b.n	800415a <MX_I2C1_Init+0x2e>
    Error_Handler();
 8004172:	f000 f8d1 	bl	8004318 <Error_Handler>
}
 8004176:	e7f5      	b.n	8004164 <MX_I2C1_Init+0x38>
 8004178:	200065e8 	.word	0x200065e8
 800417c:	40005400 	.word	0x40005400
 8004180:	10802d9b 	.word	0x10802d9b

08004184 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004188:	b09e      	sub	sp, #120	@ 0x78
 800418a:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800418c:	2100      	movs	r1, #0
 800418e:	9119      	str	r1, [sp, #100]	@ 0x64
 8004190:	911a      	str	r1, [sp, #104]	@ 0x68
 8004192:	911b      	str	r1, [sp, #108]	@ 0x6c
 8004194:	911c      	str	r1, [sp, #112]	@ 0x70
 8004196:	911d      	str	r1, [sp, #116]	@ 0x74
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004198:	2254      	movs	r2, #84	@ 0x54
 800419a:	a804      	add	r0, sp, #16
 800419c:	f007 f976 	bl	800b48c <memset>
  if(i2cHandle->Instance==I2C1)
 80041a0:	6822      	ldr	r2, [r4, #0]
 80041a2:	4b35      	ldr	r3, [pc, #212]	@ (8004278 <HAL_I2C_MspInit+0xf4>)
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d002      	beq.n	80041ae <HAL_I2C_MspInit+0x2a>

  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80041a8:	b01e      	add	sp, #120	@ 0x78
 80041aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80041ae:	2340      	movs	r3, #64	@ 0x40
 80041b0:	9304      	str	r3, [sp, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80041b2:	a804      	add	r0, sp, #16
 80041b4:	f003 fc2e 	bl	8007a14 <HAL_RCCEx_PeriphCLKConfig>
 80041b8:	2800      	cmp	r0, #0
 80041ba:	d157      	bne.n	800426c <HAL_I2C_MspInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041bc:	4d2f      	ldr	r5, [pc, #188]	@ (800427c <HAL_I2C_MspInit+0xf8>)
 80041be:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 80041c0:	f043 0301 	orr.w	r3, r3, #1
 80041c4:	64eb      	str	r3, [r5, #76]	@ 0x4c
 80041c6:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 80041c8:	f003 0301 	and.w	r3, r3, #1
 80041cc:	9301      	str	r3, [sp, #4]
 80041ce:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041d0:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 80041d2:	f043 0302 	orr.w	r3, r3, #2
 80041d6:	64eb      	str	r3, [r5, #76]	@ 0x4c
 80041d8:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 80041da:	f003 0302 	and.w	r3, r3, #2
 80041de:	9302      	str	r3, [sp, #8]
 80041e0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80041e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80041e6:	9319      	str	r3, [sp, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80041e8:	f04f 0a12 	mov.w	sl, #18
 80041ec:	f8cd a068 	str.w	sl, [sp, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041f0:	2600      	movs	r6, #0
 80041f2:	961b      	str	r6, [sp, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041f4:	f04f 0903 	mov.w	r9, #3
 80041f8:	f8cd 9070 	str.w	r9, [sp, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80041fc:	f04f 0804 	mov.w	r8, #4
 8004200:	f8cd 8074 	str.w	r8, [sp, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004204:	a919      	add	r1, sp, #100	@ 0x64
 8004206:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800420a:	f002 fa21 	bl	8006650 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800420e:	2780      	movs	r7, #128	@ 0x80
 8004210:	9719      	str	r7, [sp, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004212:	f8cd a068 	str.w	sl, [sp, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004216:	961b      	str	r6, [sp, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004218:	f8cd 9070 	str.w	r9, [sp, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800421c:	f8cd 8074 	str.w	r8, [sp, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004220:	a919      	add	r1, sp, #100	@ 0x64
 8004222:	4817      	ldr	r0, [pc, #92]	@ (8004280 <HAL_I2C_MspInit+0xfc>)
 8004224:	f002 fa14 	bl	8006650 <HAL_GPIO_Init>
    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB7);
 8004228:	4a16      	ldr	r2, [pc, #88]	@ (8004284 <HAL_I2C_MspInit+0x100>)
 800422a:	6853      	ldr	r3, [r2, #4]
 800422c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004230:	6053      	str	r3, [r2, #4]
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004232:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8004234:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004238:	65ab      	str	r3, [r5, #88]	@ 0x58
 800423a:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 800423c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004240:	9303      	str	r3, [sp, #12]
 8004242:	9b03      	ldr	r3, [sp, #12]
    hdma_i2c1_tx.Instance = DMA1_Channel5;
 8004244:	4810      	ldr	r0, [pc, #64]	@ (8004288 <HAL_I2C_MspInit+0x104>)
 8004246:	4b11      	ldr	r3, [pc, #68]	@ (800428c <HAL_I2C_MspInit+0x108>)
 8004248:	6003      	str	r3, [r0, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 800424a:	2311      	movs	r3, #17
 800424c:	6043      	str	r3, [r0, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800424e:	2310      	movs	r3, #16
 8004250:	6083      	str	r3, [r0, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004252:	60c6      	str	r6, [r0, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004254:	6107      	str	r7, [r0, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004256:	6146      	str	r6, [r0, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004258:	6186      	str	r6, [r0, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800425a:	61c6      	str	r6, [r0, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800425c:	6206      	str	r6, [r0, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800425e:	f002 f80d 	bl	800627c <HAL_DMA_Init>
 8004262:	b930      	cbnz	r0, 8004272 <HAL_I2C_MspInit+0xee>
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8004264:	4b08      	ldr	r3, [pc, #32]	@ (8004288 <HAL_I2C_MspInit+0x104>)
 8004266:	63a3      	str	r3, [r4, #56]	@ 0x38
 8004268:	629c      	str	r4, [r3, #40]	@ 0x28
}
 800426a:	e79d      	b.n	80041a8 <HAL_I2C_MspInit+0x24>
      Error_Handler();
 800426c:	f000 f854 	bl	8004318 <Error_Handler>
 8004270:	e7a4      	b.n	80041bc <HAL_I2C_MspInit+0x38>
      Error_Handler();
 8004272:	f000 f851 	bl	8004318 <Error_Handler>
 8004276:	e7f5      	b.n	8004264 <HAL_I2C_MspInit+0xe0>
 8004278:	40005400 	.word	0x40005400
 800427c:	40021000 	.word	0x40021000
 8004280:	48000400 	.word	0x48000400
 8004284:	40010000 	.word	0x40010000
 8004288:	20006588 	.word	0x20006588
 800428c:	40020058 	.word	0x40020058

08004290 <logInit>:
  log_buf_list.buf_length_max = LOG_LIST_BUF_MAX;
  log_buf_list.buf_index      = 0;
  log_buf_list.buf            = buf_list;
#endif

  is_init = true;
 8004290:	2001      	movs	r0, #1
 8004292:	4b01      	ldr	r3, [pc, #4]	@ (8004298 <logInit+0x8>)
 8004294:	7018      	strb	r0, [r3, #0]
  cliAdd("log", cliCmd);
#endif
#endif

  return true;
}
 8004296:	4770      	bx	lr
 8004298:	20006742 	.word	0x20006742

0800429c <logOpen>:
  is_boot_log = enable;
#endif
}

bool logOpen(uint8_t ch, uint32_t baud)
{
 800429c:	b510      	push	{r4, lr}
  log_ch   = ch;
 800429e:	4b05      	ldr	r3, [pc, #20]	@ (80042b4 <logOpen+0x18>)
 80042a0:	7018      	strb	r0, [r3, #0]
  log_baud = baud;
 80042a2:	4b05      	ldr	r3, [pc, #20]	@ (80042b8 <logOpen+0x1c>)
 80042a4:	6019      	str	r1, [r3, #0]
  is_open  = true;
 80042a6:	4c05      	ldr	r4, [pc, #20]	@ (80042bc <logOpen+0x20>)
 80042a8:	2301      	movs	r3, #1
 80042aa:	7023      	strb	r3, [r4, #0]

  is_open = uartOpen(ch, baud);
 80042ac:	f7fe fae6 	bl	800287c <uartOpen>
 80042b0:	7020      	strb	r0, [r4, #0]

  return is_open;
}
 80042b2:	bd10      	pop	{r4, pc}
 80042b4:	20006740 	.word	0x20006740
 80042b8:	2000673c 	.word	0x2000673c
 80042bc:	20006741 	.word	0x20006741

080042c0 <logPrintf>:
  return true;
}
#endif

void logPrintf(const char *fmt, ...)
{
 80042c0:	b40f      	push	{r0, r1, r2, r3}
 80042c2:	b500      	push	{lr}
 80042c4:	b083      	sub	sp, #12
#endif

  va_list args;
  int len;

  if (is_init != true) return;
 80042c6:	4b0f      	ldr	r3, [pc, #60]	@ (8004304 <logPrintf+0x44>)
 80042c8:	781b      	ldrb	r3, [r3, #0]
 80042ca:	b923      	cbnz	r3, 80042d6 <logPrintf+0x16>
  va_end(args);

#ifdef _USE_HW_RTOS
  unLock();
#endif
}
 80042cc:	b003      	add	sp, #12
 80042ce:	f85d eb04 	ldr.w	lr, [sp], #4
 80042d2:	b004      	add	sp, #16
 80042d4:	4770      	bx	lr
  va_start(args, fmt);
 80042d6:	ab05      	add	r3, sp, #20
 80042d8:	9301      	str	r3, [sp, #4]
  len = vsnprintf(print_buf, 256, fmt, args);
 80042da:	9a04      	ldr	r2, [sp, #16]
 80042dc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80042e0:	4809      	ldr	r0, [pc, #36]	@ (8004308 <logPrintf+0x48>)
 80042e2:	f007 f8c5 	bl	800b470 <vsniprintf>
  if (is_open == true && is_enable == true)
 80042e6:	4b09      	ldr	r3, [pc, #36]	@ (800430c <logPrintf+0x4c>)
 80042e8:	781b      	ldrb	r3, [r3, #0]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d0ee      	beq.n	80042cc <logPrintf+0xc>
 80042ee:	4b08      	ldr	r3, [pc, #32]	@ (8004310 <logPrintf+0x50>)
 80042f0:	781b      	ldrb	r3, [r3, #0]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d0ea      	beq.n	80042cc <logPrintf+0xc>
    uartWrite(log_ch, (uint8_t *)print_buf, len);
 80042f6:	4602      	mov	r2, r0
 80042f8:	4903      	ldr	r1, [pc, #12]	@ (8004308 <logPrintf+0x48>)
 80042fa:	4b06      	ldr	r3, [pc, #24]	@ (8004314 <logPrintf+0x54>)
 80042fc:	7818      	ldrb	r0, [r3, #0]
 80042fe:	f7fe fc2b 	bl	8002b58 <uartWrite>
  va_end(args);
 8004302:	e7e3      	b.n	80042cc <logPrintf+0xc>
 8004304:	20006742 	.word	0x20006742
 8004308:	2000663c 	.word	0x2000663c
 800430c:	20006741 	.word	0x20006741
 8004310:	2000004c 	.word	0x2000004c
 8004314:	20006740 	.word	0x20006740

08004318 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004318:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800431a:	e7fe      	b.n	800431a <Error_Handler+0x2>

0800431c <SystemClock_Config>:
{
 800431c:	b500      	push	{lr}
 800431e:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004320:	2238      	movs	r2, #56	@ 0x38
 8004322:	2100      	movs	r1, #0
 8004324:	a806      	add	r0, sp, #24
 8004326:	f007 f8b1 	bl	800b48c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800432a:	2000      	movs	r0, #0
 800432c:	9001      	str	r0, [sp, #4]
 800432e:	9002      	str	r0, [sp, #8]
 8004330:	9003      	str	r0, [sp, #12]
 8004332:	9004      	str	r0, [sp, #16]
 8004334:	9005      	str	r0, [sp, #20]
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8004336:	f002 fed7 	bl	80070e8 <HAL_PWREx_ControlVoltageScaling>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800433a:	2301      	movs	r3, #1
 800433c:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800433e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004342:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004344:	2302      	movs	r3, #2
 8004346:	930d      	str	r3, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004348:	2203      	movs	r2, #3
 800434a:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV3;
 800434c:	920f      	str	r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800434e:	2255      	movs	r2, #85	@ 0x55
 8004350:	9210      	str	r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004352:	9311      	str	r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004354:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004356:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004358:	a806      	add	r0, sp, #24
 800435a:	f002 ff7f 	bl	800725c <HAL_RCC_OscConfig>
 800435e:	b980      	cbnz	r0, 8004382 <SystemClock_Config+0x66>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004360:	230f      	movs	r3, #15
 8004362:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004364:	2303      	movs	r3, #3
 8004366:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004368:	2300      	movs	r3, #0
 800436a:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800436c:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800436e:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004370:	2104      	movs	r1, #4
 8004372:	eb0d 0001 	add.w	r0, sp, r1
 8004376:	f003 fa27 	bl	80077c8 <HAL_RCC_ClockConfig>
 800437a:	b920      	cbnz	r0, 8004386 <SystemClock_Config+0x6a>
}
 800437c:	b015      	add	sp, #84	@ 0x54
 800437e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8004382:	f7ff ffc9 	bl	8004318 <Error_Handler>
    Error_Handler();
 8004386:	f7ff ffc7 	bl	8004318 <Error_Handler>

0800438a <main>:
{
 800438a:	b508      	push	{r3, lr}
  HAL_Init();
 800438c:	f000 fc6a 	bl	8004c64 <HAL_Init>
  SystemClock_Config();
 8004390:	f7ff ffc4 	bl	800431c <SystemClock_Config>
  MX_GPIO_Init();
 8004394:	f7ff fe3e 	bl	8004014 <MX_GPIO_Init>
  MX_DMA_Init();
 8004398:	f7ff fdfa 	bl	8003f90 <MX_DMA_Init>
  MX_DAC1_Init();
 800439c:	f7ff fd22 	bl	8003de4 <MX_DAC1_Init>
  MX_USART1_UART_Init();
 80043a0:	f000 fa82 	bl	80048a8 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 80043a4:	f000 f8f0 	bl	8004588 <MX_TIM6_Init>
  MX_I2C1_Init();
 80043a8:	f7ff fec0 	bl	800412c <MX_I2C1_Init>
  MX_ADC1_Init();
 80043ac:	f7fe ffdc 	bl	8003368 <MX_ADC1_Init>
  MX_TIM8_Init();
 80043b0:	f000 f93c 	bl	800462c <MX_TIM8_Init>
  MX_USART3_UART_Init();
 80043b4:	f000 faac 	bl	8004910 <MX_USART3_UART_Init>
  MX_TIM7_Init();
 80043b8:	f000 f910 	bl	80045dc <MX_TIM7_Init>
  MX_DAC2_Init();
 80043bc:	f7ff fd40 	bl	8003e40 <MX_DAC2_Init>
  MX_TIM1_Init();
 80043c0:	f000 f9f0 	bl	80047a4 <MX_TIM1_Init>
  hwInit();
 80043c4:	f7fe ff80 	bl	80032c8 <hwInit>
  apInit();
 80043c8:	f7fc fe44 	bl	8001054 <apInit>
  apMain();
 80043cc:	f7fc fe50 	bl	8001070 <apMain>
  while (1)
 80043d0:	e7fe      	b.n	80043d0 <main+0x46>
	...

080043d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80043d4:	b500      	push	{lr}
 80043d6:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043d8:	4b0b      	ldr	r3, [pc, #44]	@ (8004408 <HAL_MspInit+0x34>)
 80043da:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80043dc:	f042 0201 	orr.w	r2, r2, #1
 80043e0:	661a      	str	r2, [r3, #96]	@ 0x60
 80043e2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80043e4:	f002 0201 	and.w	r2, r2, #1
 80043e8:	9200      	str	r2, [sp, #0]
 80043ea:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80043ec:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80043ee:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80043f2:	659a      	str	r2, [r3, #88]	@ 0x58
 80043f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043fa:	9301      	str	r3, [sp, #4]
 80043fc:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80043fe:	f002 fef9 	bl	80071f4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004402:	b003      	add	sp, #12
 8004404:	f85d fb04 	ldr.w	pc, [sp], #4
 8004408:	40021000 	.word	0x40021000

0800440c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800440c:	e7fe      	b.n	800440c <NMI_Handler>

0800440e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800440e:	e7fe      	b.n	800440e <HardFault_Handler>

08004410 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004410:	e7fe      	b.n	8004410 <MemManage_Handler>

08004412 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004412:	e7fe      	b.n	8004412 <BusFault_Handler>

08004414 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004414:	e7fe      	b.n	8004414 <UsageFault_Handler>

08004416 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004416:	4770      	bx	lr

08004418 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004418:	4770      	bx	lr

0800441a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800441a:	4770      	bx	lr

0800441c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800441c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800441e:	f000 fc31 	bl	8004c84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004422:	bd08      	pop	{r3, pc}

08004424 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004424:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8004426:	4802      	ldr	r0, [pc, #8]	@ (8004430 <DMA1_Channel1_IRQHandler+0xc>)
 8004428:	f002 f8af 	bl	800658a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800442c:	bd08      	pop	{r3, pc}
 800442e:	bf00      	nop
 8004430:	20006500 	.word	0x20006500

08004434 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8004434:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8004436:	4802      	ldr	r0, [pc, #8]	@ (8004440 <DMA1_Channel2_IRQHandler+0xc>)
 8004438:	f002 f8a7 	bl	800658a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800443c:	bd08      	pop	{r3, pc}
 800443e:	bf00      	nop
 8004440:	20006938 	.word	0x20006938

08004444 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8004444:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8004446:	4802      	ldr	r0, [pc, #8]	@ (8004450 <DMA1_Channel3_IRQHandler+0xc>)
 8004448:	f002 f89f 	bl	800658a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800444c:	bd08      	pop	{r3, pc}
 800444e:	bf00      	nop
 8004450:	200068d8 	.word	0x200068d8

08004454 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8004454:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8004456:	4802      	ldr	r0, [pc, #8]	@ (8004460 <DMA1_Channel4_IRQHandler+0xc>)
 8004458:	f002 f897 	bl	800658a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800445c:	bd08      	pop	{r3, pc}
 800445e:	bf00      	nop
 8004460:	20006878 	.word	0x20006878

08004464 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8004464:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8004466:	4802      	ldr	r0, [pc, #8]	@ (8004470 <DMA1_Channel5_IRQHandler+0xc>)
 8004468:	f002 f88f 	bl	800658a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800446c:	bd08      	pop	{r3, pc}
 800446e:	bf00      	nop
 8004470:	20006588 	.word	0x20006588

08004474 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8004474:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004476:	4802      	ldr	r0, [pc, #8]	@ (8004480 <ADC1_2_IRQHandler+0xc>)
 8004478:	f000 fdac 	bl	8004fd4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800447c:	bd08      	pop	{r3, pc}
 800447e:	bf00      	nop
 8004480:	20005e04 	.word	0x20005e04

08004484 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8004484:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004486:	4802      	ldr	r0, [pc, #8]	@ (8004490 <TIM1_UP_TIM16_IRQHandler+0xc>)
 8004488:	f003 feab 	bl	80081e2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800448c:	bd08      	pop	{r3, pc}
 800448e:	bf00      	nop
 8004490:	2000682c 	.word	0x2000682c

08004494 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8004494:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004496:	4802      	ldr	r0, [pc, #8]	@ (80044a0 <USART3_IRQHandler+0xc>)
 8004498:	f004 fcb8 	bl	8008e0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800449c:	bd08      	pop	{r3, pc}
 800449e:	bf00      	nop
 80044a0:	20006998 	.word	0x20006998

080044a4 <TIM7_DAC_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt, DAC2 and DAC4 channel underrun error interrupts.
  */
void TIM7_DAC_IRQHandler(void)
{
 80044a4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM7_DAC_IRQn 0 */

  /* USER CODE END TIM7_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80044a6:	4803      	ldr	r0, [pc, #12]	@ (80044b4 <TIM7_DAC_IRQHandler+0x10>)
 80044a8:	f003 fe9b 	bl	80081e2 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac2);
 80044ac:	4802      	ldr	r0, [pc, #8]	@ (80044b8 <TIM7_DAC_IRQHandler+0x14>)
 80044ae:	f001 fd53 	bl	8005f58 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM7_DAC_IRQn 1 */

  /* USER CODE END TIM7_DAC_IRQn 1 */
}
 80044b2:	bd08      	pop	{r3, pc}
 80044b4:	20006794 	.word	0x20006794
 80044b8:	20006560 	.word	0x20006560

080044bc <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 80044bc:	2001      	movs	r0, #1
 80044be:	4770      	bx	lr

080044c0 <_kill>:

int _kill(int pid, int sig)
{
 80044c0:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80044c2:	f007 f873 	bl	800b5ac <__errno>
 80044c6:	2316      	movs	r3, #22
 80044c8:	6003      	str	r3, [r0, #0]
  return -1;
}
 80044ca:	f04f 30ff 	mov.w	r0, #4294967295
 80044ce:	bd08      	pop	{r3, pc}

080044d0 <_exit>:

void _exit (int status)
{
 80044d0:	b508      	push	{r3, lr}
  _kill(status, -1);
 80044d2:	f04f 31ff 	mov.w	r1, #4294967295
 80044d6:	f7ff fff3 	bl	80044c0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80044da:	e7fe      	b.n	80044da <_exit+0xa>

080044dc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80044dc:	b570      	push	{r4, r5, r6, lr}
 80044de:	460c      	mov	r4, r1
 80044e0:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80044e2:	2500      	movs	r5, #0
 80044e4:	e006      	b.n	80044f4 <_read+0x18>
  {
    *ptr++ = __io_getchar();
 80044e6:	f3af 8000 	nop.w
 80044ea:	4621      	mov	r1, r4
 80044ec:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80044f0:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 80044f2:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80044f4:	42b5      	cmp	r5, r6
 80044f6:	dbf6      	blt.n	80044e6 <_read+0xa>
  }

  return len;
}
 80044f8:	4630      	mov	r0, r6
 80044fa:	bd70      	pop	{r4, r5, r6, pc}

080044fc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80044fc:	b510      	push	{r4, lr}
 80044fe:	4614      	mov	r4, r2
  (void)file;

  HAL_UART_Transmit(&huart1, (const uint8_t *)ptr, len, 100);
 8004500:	2364      	movs	r3, #100	@ 0x64
 8004502:	b292      	uxth	r2, r2
 8004504:	4802      	ldr	r0, [pc, #8]	@ (8004510 <_write+0x14>)
 8004506:	f005 f8f5 	bl	80096f4 <HAL_UART_Transmit>

  return len;
}
 800450a:	4620      	mov	r0, r4
 800450c:	bd10      	pop	{r4, pc}
 800450e:	bf00      	nop
 8004510:	20006a2c 	.word	0x20006a2c

08004514 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8004514:	f04f 30ff 	mov.w	r0, #4294967295
 8004518:	4770      	bx	lr

0800451a <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 800451a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800451e:	604b      	str	r3, [r1, #4]
  return 0;
}
 8004520:	2000      	movs	r0, #0
 8004522:	4770      	bx	lr

08004524 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8004524:	2001      	movs	r0, #1
 8004526:	4770      	bx	lr

08004528 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8004528:	2000      	movs	r0, #0
 800452a:	4770      	bx	lr

0800452c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800452c:	b510      	push	{r4, lr}
 800452e:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004530:	4a0c      	ldr	r2, [pc, #48]	@ (8004564 <_sbrk+0x38>)
 8004532:	490d      	ldr	r1, [pc, #52]	@ (8004568 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004534:	480d      	ldr	r0, [pc, #52]	@ (800456c <_sbrk+0x40>)
 8004536:	6800      	ldr	r0, [r0, #0]
 8004538:	b140      	cbz	r0, 800454c <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800453a:	480c      	ldr	r0, [pc, #48]	@ (800456c <_sbrk+0x40>)
 800453c:	6800      	ldr	r0, [r0, #0]
 800453e:	4403      	add	r3, r0
 8004540:	1a52      	subs	r2, r2, r1
 8004542:	4293      	cmp	r3, r2
 8004544:	d806      	bhi.n	8004554 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8004546:	4a09      	ldr	r2, [pc, #36]	@ (800456c <_sbrk+0x40>)
 8004548:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 800454a:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800454c:	4807      	ldr	r0, [pc, #28]	@ (800456c <_sbrk+0x40>)
 800454e:	4c08      	ldr	r4, [pc, #32]	@ (8004570 <_sbrk+0x44>)
 8004550:	6004      	str	r4, [r0, #0]
 8004552:	e7f2      	b.n	800453a <_sbrk+0xe>
    errno = ENOMEM;
 8004554:	f007 f82a 	bl	800b5ac <__errno>
 8004558:	230c      	movs	r3, #12
 800455a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800455c:	f04f 30ff 	mov.w	r0, #4294967295
 8004560:	e7f3      	b.n	800454a <_sbrk+0x1e>
 8004562:	bf00      	nop
 8004564:	20020000 	.word	0x20020000
 8004568:	00000400 	.word	0x00000400
 800456c:	20006744 	.word	0x20006744
 8004570:	20006c10 	.word	0x20006c10

08004574 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004574:	4a03      	ldr	r2, [pc, #12]	@ (8004584 <SystemInit+0x10>)
 8004576:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800457a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800457e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004582:	4770      	bx	lr
 8004584:	e000ed00 	.word	0xe000ed00

08004588 <MX_TIM6_Init>:
  HAL_TIM_MspPostInit(&htim1);

}
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8004588:	b500      	push	{lr}
 800458a:	b085      	sub	sp, #20

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800458c:	2300      	movs	r3, #0
 800458e:	9301      	str	r3, [sp, #4]
 8004590:	9302      	str	r3, [sp, #8]
 8004592:	9303      	str	r3, [sp, #12]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004594:	480f      	ldr	r0, [pc, #60]	@ (80045d4 <MX_TIM6_Init+0x4c>)
 8004596:	4a10      	ldr	r2, [pc, #64]	@ (80045d8 <MX_TIM6_Init+0x50>)
 8004598:	6002      	str	r2, [r0, #0]
  htim6.Init.Prescaler = 17-1;
 800459a:	2210      	movs	r2, #16
 800459c:	6042      	str	r2, [r0, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800459e:	6083      	str	r3, [r0, #8]
  htim6.Init.Period = 624;
 80045a0:	f44f 721c 	mov.w	r2, #624	@ 0x270
 80045a4:	60c2      	str	r2, [r0, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80045a6:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80045a8:	f003 ff88 	bl	80084bc <HAL_TIM_Base_Init>
 80045ac:	b958      	cbnz	r0, 80045c6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80045ae:	2320      	movs	r3, #32
 80045b0:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80045b2:	2300      	movs	r3, #0
 80045b4:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80045b6:	a901      	add	r1, sp, #4
 80045b8:	4806      	ldr	r0, [pc, #24]	@ (80045d4 <MX_TIM6_Init+0x4c>)
 80045ba:	f004 fa47 	bl	8008a4c <HAL_TIMEx_MasterConfigSynchronization>
 80045be:	b928      	cbnz	r0, 80045cc <MX_TIM6_Init+0x44>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80045c0:	b005      	add	sp, #20
 80045c2:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80045c6:	f7ff fea7 	bl	8004318 <Error_Handler>
 80045ca:	e7f0      	b.n	80045ae <MX_TIM6_Init+0x26>
    Error_Handler();
 80045cc:	f7ff fea4 	bl	8004318 <Error_Handler>
}
 80045d0:	e7f6      	b.n	80045c0 <MX_TIM6_Init+0x38>
 80045d2:	bf00      	nop
 80045d4:	200067e0 	.word	0x200067e0
 80045d8:	40001000 	.word	0x40001000

080045dc <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80045dc:	b500      	push	{lr}
 80045de:	b085      	sub	sp, #20

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80045e0:	2300      	movs	r3, #0
 80045e2:	9301      	str	r3, [sp, #4]
 80045e4:	9302      	str	r3, [sp, #8]
 80045e6:	9303      	str	r3, [sp, #12]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80045e8:	480e      	ldr	r0, [pc, #56]	@ (8004624 <MX_TIM7_Init+0x48>)
 80045ea:	4a0f      	ldr	r2, [pc, #60]	@ (8004628 <MX_TIM7_Init+0x4c>)
 80045ec:	6002      	str	r2, [r0, #0]
  htim7.Init.Prescaler = 170-1;
 80045ee:	22a9      	movs	r2, #169	@ 0xa9
 80045f0:	6042      	str	r2, [r0, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045f2:	6083      	str	r3, [r0, #8]
  htim7.Init.Period = 99;
 80045f4:	2263      	movs	r2, #99	@ 0x63
 80045f6:	60c2      	str	r2, [r0, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80045f8:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80045fa:	f003 ff5f 	bl	80084bc <HAL_TIM_Base_Init>
 80045fe:	b950      	cbnz	r0, 8004616 <MX_TIM7_Init+0x3a>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004600:	2300      	movs	r3, #0
 8004602:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004604:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004606:	a901      	add	r1, sp, #4
 8004608:	4806      	ldr	r0, [pc, #24]	@ (8004624 <MX_TIM7_Init+0x48>)
 800460a:	f004 fa1f 	bl	8008a4c <HAL_TIMEx_MasterConfigSynchronization>
 800460e:	b928      	cbnz	r0, 800461c <MX_TIM7_Init+0x40>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8004610:	b005      	add	sp, #20
 8004612:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8004616:	f7ff fe7f 	bl	8004318 <Error_Handler>
 800461a:	e7f1      	b.n	8004600 <MX_TIM7_Init+0x24>
    Error_Handler();
 800461c:	f7ff fe7c 	bl	8004318 <Error_Handler>
}
 8004620:	e7f6      	b.n	8004610 <MX_TIM7_Init+0x34>
 8004622:	bf00      	nop
 8004624:	20006794 	.word	0x20006794
 8004628:	40001400 	.word	0x40001400

0800462c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800462c:	b500      	push	{lr}
 800462e:	b089      	sub	sp, #36	@ 0x24

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004630:	2300      	movs	r3, #0
 8004632:	9304      	str	r3, [sp, #16]
 8004634:	9305      	str	r3, [sp, #20]
 8004636:	9306      	str	r3, [sp, #24]
 8004638:	9307      	str	r3, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800463a:	9301      	str	r3, [sp, #4]
 800463c:	9302      	str	r3, [sp, #8]
 800463e:	9303      	str	r3, [sp, #12]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8004640:	4815      	ldr	r0, [pc, #84]	@ (8004698 <MX_TIM8_Init+0x6c>)
 8004642:	4a16      	ldr	r2, [pc, #88]	@ (800469c <MX_TIM8_Init+0x70>)
 8004644:	6002      	str	r2, [r0, #0]
  htim8.Init.Prescaler = 170-1;
 8004646:	22a9      	movs	r2, #169	@ 0xa9
 8004648:	6042      	str	r2, [r0, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800464a:	6083      	str	r3, [r0, #8]
  htim8.Init.Period = 99;
 800464c:	2263      	movs	r2, #99	@ 0x63
 800464e:	60c2      	str	r2, [r0, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004650:	6103      	str	r3, [r0, #16]
  htim8.Init.RepetitionCounter = 0;
 8004652:	6143      	str	r3, [r0, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004654:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8004656:	f003 ff31 	bl	80084bc <HAL_TIM_Base_Init>
 800465a:	b9a0      	cbnz	r0, 8004686 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800465c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004660:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8004662:	a904      	add	r1, sp, #16
 8004664:	480c      	ldr	r0, [pc, #48]	@ (8004698 <MX_TIM8_Init+0x6c>)
 8004666:	f004 f881 	bl	800876c <HAL_TIM_ConfigClockSource>
 800466a:	b978      	cbnz	r0, 800468c <MX_TIM8_Init+0x60>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800466c:	2320      	movs	r3, #32
 800466e:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004670:	2300      	movs	r3, #0
 8004672:	9302      	str	r3, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004674:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8004676:	a901      	add	r1, sp, #4
 8004678:	4807      	ldr	r0, [pc, #28]	@ (8004698 <MX_TIM8_Init+0x6c>)
 800467a:	f004 f9e7 	bl	8008a4c <HAL_TIMEx_MasterConfigSynchronization>
 800467e:	b940      	cbnz	r0, 8004692 <MX_TIM8_Init+0x66>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8004680:	b009      	add	sp, #36	@ 0x24
 8004682:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8004686:	f7ff fe47 	bl	8004318 <Error_Handler>
 800468a:	e7e7      	b.n	800465c <MX_TIM8_Init+0x30>
    Error_Handler();
 800468c:	f7ff fe44 	bl	8004318 <Error_Handler>
 8004690:	e7ec      	b.n	800466c <MX_TIM8_Init+0x40>
    Error_Handler();
 8004692:	f7ff fe41 	bl	8004318 <Error_Handler>
}
 8004696:	e7f3      	b.n	8004680 <MX_TIM8_Init+0x54>
 8004698:	20006748 	.word	0x20006748
 800469c:	40013400 	.word	0x40013400

080046a0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80046a0:	b500      	push	{lr}
 80046a2:	b085      	sub	sp, #20

  if(tim_baseHandle->Instance==TIM1)
 80046a4:	6803      	ldr	r3, [r0, #0]
 80046a6:	4a25      	ldr	r2, [pc, #148]	@ (800473c <HAL_TIM_Base_MspInit+0x9c>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d00b      	beq.n	80046c4 <HAL_TIM_Base_MspInit+0x24>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM6)
 80046ac:	4a24      	ldr	r2, [pc, #144]	@ (8004740 <HAL_TIM_Base_MspInit+0xa0>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d01b      	beq.n	80046ea <HAL_TIM_Base_MspInit+0x4a>
    __HAL_RCC_TIM6_CLK_ENABLE();
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM7)
 80046b2:	4a24      	ldr	r2, [pc, #144]	@ (8004744 <HAL_TIM_Base_MspInit+0xa4>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d023      	beq.n	8004700 <HAL_TIM_Base_MspInit+0x60>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM8)
 80046b8:	4a23      	ldr	r2, [pc, #140]	@ (8004748 <HAL_TIM_Base_MspInit+0xa8>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d033      	beq.n	8004726 <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80046be:	b005      	add	sp, #20
 80046c0:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 80046c4:	4b21      	ldr	r3, [pc, #132]	@ (800474c <HAL_TIM_Base_MspInit+0xac>)
 80046c6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80046c8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80046cc:	661a      	str	r2, [r3, #96]	@ 0x60
 80046ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80046d4:	9300      	str	r3, [sp, #0]
 80046d6:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80046d8:	2200      	movs	r2, #0
 80046da:	4611      	mov	r1, r2
 80046dc:	2019      	movs	r0, #25
 80046de:	f001 fb95 	bl	8005e0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80046e2:	2019      	movs	r0, #25
 80046e4:	f001 fba2 	bl	8005e2c <HAL_NVIC_EnableIRQ>
 80046e8:	e7e9      	b.n	80046be <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80046ea:	4b18      	ldr	r3, [pc, #96]	@ (800474c <HAL_TIM_Base_MspInit+0xac>)
 80046ec:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80046ee:	f042 0210 	orr.w	r2, r2, #16
 80046f2:	659a      	str	r2, [r3, #88]	@ 0x58
 80046f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046f6:	f003 0310 	and.w	r3, r3, #16
 80046fa:	9301      	str	r3, [sp, #4]
 80046fc:	9b01      	ldr	r3, [sp, #4]
 80046fe:	e7de      	b.n	80046be <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004700:	4b12      	ldr	r3, [pc, #72]	@ (800474c <HAL_TIM_Base_MspInit+0xac>)
 8004702:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004704:	f042 0220 	orr.w	r2, r2, #32
 8004708:	659a      	str	r2, [r3, #88]	@ 0x58
 800470a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800470c:	f003 0320 	and.w	r3, r3, #32
 8004710:	9302      	str	r3, [sp, #8]
 8004712:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 0, 0);
 8004714:	2200      	movs	r2, #0
 8004716:	4611      	mov	r1, r2
 8004718:	2037      	movs	r0, #55	@ 0x37
 800471a:	f001 fb77 	bl	8005e0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 800471e:	2037      	movs	r0, #55	@ 0x37
 8004720:	f001 fb84 	bl	8005e2c <HAL_NVIC_EnableIRQ>
 8004724:	e7cb      	b.n	80046be <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004726:	4b09      	ldr	r3, [pc, #36]	@ (800474c <HAL_TIM_Base_MspInit+0xac>)
 8004728:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800472a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800472e:	661a      	str	r2, [r3, #96]	@ 0x60
 8004730:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004732:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004736:	9303      	str	r3, [sp, #12]
 8004738:	9b03      	ldr	r3, [sp, #12]
}
 800473a:	e7c0      	b.n	80046be <HAL_TIM_Base_MspInit+0x1e>
 800473c:	40012c00 	.word	0x40012c00
 8004740:	40001000 	.word	0x40001000
 8004744:	40001400 	.word	0x40001400
 8004748:	40013400 	.word	0x40013400
 800474c:	40021000 	.word	0x40021000

08004750 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004750:	b500      	push	{lr}
 8004752:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004754:	2300      	movs	r3, #0
 8004756:	9301      	str	r3, [sp, #4]
 8004758:	9302      	str	r3, [sp, #8]
 800475a:	9303      	str	r3, [sp, #12]
 800475c:	9304      	str	r3, [sp, #16]
 800475e:	9305      	str	r3, [sp, #20]
  if(timHandle->Instance==TIM1)
 8004760:	6802      	ldr	r2, [r0, #0]
 8004762:	4b0f      	ldr	r3, [pc, #60]	@ (80047a0 <HAL_TIM_MspPostInit+0x50>)
 8004764:	429a      	cmp	r2, r3
 8004766:	d002      	beq.n	800476e <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004768:	b007      	add	sp, #28
 800476a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800476e:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 8004772:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004774:	f042 0201 	orr.w	r2, r2, #1
 8004778:	64da      	str	r2, [r3, #76]	@ 0x4c
 800477a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800477c:	f003 0301 	and.w	r3, r3, #1
 8004780:	9300      	str	r3, [sp, #0]
 8004782:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = MT_EN_Pin;
 8004784:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004788:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800478a:	2302      	movs	r3, #2
 800478c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800478e:	2306      	movs	r3, #6
 8004790:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(MT_EN_GPIO_Port, &GPIO_InitStruct);
 8004792:	a901      	add	r1, sp, #4
 8004794:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004798:	f001 ff5a 	bl	8006650 <HAL_GPIO_Init>
}
 800479c:	e7e4      	b.n	8004768 <HAL_TIM_MspPostInit+0x18>
 800479e:	bf00      	nop
 80047a0:	40012c00 	.word	0x40012c00

080047a4 <MX_TIM1_Init>:
{
 80047a4:	b510      	push	{r4, lr}
 80047a6:	b09c      	sub	sp, #112	@ 0x70
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80047a8:	2400      	movs	r4, #0
 80047aa:	9418      	str	r4, [sp, #96]	@ 0x60
 80047ac:	9419      	str	r4, [sp, #100]	@ 0x64
 80047ae:	941a      	str	r4, [sp, #104]	@ 0x68
 80047b0:	941b      	str	r4, [sp, #108]	@ 0x6c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80047b2:	9415      	str	r4, [sp, #84]	@ 0x54
 80047b4:	9416      	str	r4, [sp, #88]	@ 0x58
 80047b6:	9417      	str	r4, [sp, #92]	@ 0x5c
  TIM_OC_InitTypeDef sConfigOC = {0};
 80047b8:	940e      	str	r4, [sp, #56]	@ 0x38
 80047ba:	940f      	str	r4, [sp, #60]	@ 0x3c
 80047bc:	9410      	str	r4, [sp, #64]	@ 0x40
 80047be:	9411      	str	r4, [sp, #68]	@ 0x44
 80047c0:	9412      	str	r4, [sp, #72]	@ 0x48
 80047c2:	9413      	str	r4, [sp, #76]	@ 0x4c
 80047c4:	9414      	str	r4, [sp, #80]	@ 0x50
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80047c6:	2234      	movs	r2, #52	@ 0x34
 80047c8:	4621      	mov	r1, r4
 80047ca:	a801      	add	r0, sp, #4
 80047cc:	f006 fe5e 	bl	800b48c <memset>
  htim1.Instance = TIM1;
 80047d0:	4833      	ldr	r0, [pc, #204]	@ (80048a0 <MX_TIM1_Init+0xfc>)
 80047d2:	4b34      	ldr	r3, [pc, #208]	@ (80048a4 <MX_TIM1_Init+0x100>)
 80047d4:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 1-1;
 80047d6:	6044      	str	r4, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80047d8:	2320      	movs	r3, #32
 80047da:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 8499;
 80047dc:	f242 1333 	movw	r3, #8499	@ 0x2133
 80047e0:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80047e2:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 80047e4:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80047e6:	2380      	movs	r3, #128	@ 0x80
 80047e8:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80047ea:	f003 fe67 	bl	80084bc <HAL_TIM_Base_Init>
 80047ee:	2800      	cmp	r0, #0
 80047f0:	d144      	bne.n	800487c <MX_TIM1_Init+0xd8>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80047f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80047f6:	9318      	str	r3, [sp, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80047f8:	a918      	add	r1, sp, #96	@ 0x60
 80047fa:	4829      	ldr	r0, [pc, #164]	@ (80048a0 <MX_TIM1_Init+0xfc>)
 80047fc:	f003 ffb6 	bl	800876c <HAL_TIM_ConfigClockSource>
 8004800:	2800      	cmp	r0, #0
 8004802:	d13e      	bne.n	8004882 <MX_TIM1_Init+0xde>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004804:	4826      	ldr	r0, [pc, #152]	@ (80048a0 <MX_TIM1_Init+0xfc>)
 8004806:	f003 fe89 	bl	800851c <HAL_TIM_PWM_Init>
 800480a:	2800      	cmp	r0, #0
 800480c:	d13c      	bne.n	8004888 <MX_TIM1_Init+0xe4>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800480e:	2320      	movs	r3, #32
 8004810:	9315      	str	r3, [sp, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 8004812:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004816:	9316      	str	r3, [sp, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004818:	2300      	movs	r3, #0
 800481a:	9317      	str	r3, [sp, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800481c:	a915      	add	r1, sp, #84	@ 0x54
 800481e:	4820      	ldr	r0, [pc, #128]	@ (80048a0 <MX_TIM1_Init+0xfc>)
 8004820:	f004 f914 	bl	8008a4c <HAL_TIMEx_MasterConfigSynchronization>
 8004824:	2800      	cmp	r0, #0
 8004826:	d132      	bne.n	800488e <MX_TIM1_Init+0xea>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004828:	2360      	movs	r3, #96	@ 0x60
 800482a:	930e      	str	r3, [sp, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800482c:	2200      	movs	r2, #0
 800482e:	920f      	str	r2, [sp, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004830:	9210      	str	r2, [sp, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004832:	9211      	str	r2, [sp, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004834:	9212      	str	r2, [sp, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004836:	9213      	str	r2, [sp, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004838:	9214      	str	r2, [sp, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800483a:	a90e      	add	r1, sp, #56	@ 0x38
 800483c:	4818      	ldr	r0, [pc, #96]	@ (80048a0 <MX_TIM1_Init+0xfc>)
 800483e:	f003 feeb 	bl	8008618 <HAL_TIM_PWM_ConfigChannel>
 8004842:	bb38      	cbnz	r0, 8004894 <MX_TIM1_Init+0xf0>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004844:	2300      	movs	r3, #0
 8004846:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004848:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800484a:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800484c:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800484e:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004850:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004854:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004856:	9307      	str	r3, [sp, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8004858:	9308      	str	r3, [sp, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800485a:	9309      	str	r3, [sp, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800485c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004860:	920a      	str	r2, [sp, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8004862:	930b      	str	r3, [sp, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8004864:	930c      	str	r3, [sp, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004866:	930d      	str	r3, [sp, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004868:	a901      	add	r1, sp, #4
 800486a:	480d      	ldr	r0, [pc, #52]	@ (80048a0 <MX_TIM1_Init+0xfc>)
 800486c:	f004 f944 	bl	8008af8 <HAL_TIMEx_ConfigBreakDeadTime>
 8004870:	b998      	cbnz	r0, 800489a <MX_TIM1_Init+0xf6>
  HAL_TIM_MspPostInit(&htim1);
 8004872:	480b      	ldr	r0, [pc, #44]	@ (80048a0 <MX_TIM1_Init+0xfc>)
 8004874:	f7ff ff6c 	bl	8004750 <HAL_TIM_MspPostInit>
}
 8004878:	b01c      	add	sp, #112	@ 0x70
 800487a:	bd10      	pop	{r4, pc}
    Error_Handler();
 800487c:	f7ff fd4c 	bl	8004318 <Error_Handler>
 8004880:	e7b7      	b.n	80047f2 <MX_TIM1_Init+0x4e>
    Error_Handler();
 8004882:	f7ff fd49 	bl	8004318 <Error_Handler>
 8004886:	e7bd      	b.n	8004804 <MX_TIM1_Init+0x60>
    Error_Handler();
 8004888:	f7ff fd46 	bl	8004318 <Error_Handler>
 800488c:	e7bf      	b.n	800480e <MX_TIM1_Init+0x6a>
    Error_Handler();
 800488e:	f7ff fd43 	bl	8004318 <Error_Handler>
 8004892:	e7c9      	b.n	8004828 <MX_TIM1_Init+0x84>
    Error_Handler();
 8004894:	f7ff fd40 	bl	8004318 <Error_Handler>
 8004898:	e7d4      	b.n	8004844 <MX_TIM1_Init+0xa0>
    Error_Handler();
 800489a:	f7ff fd3d 	bl	8004318 <Error_Handler>
 800489e:	e7e8      	b.n	8004872 <MX_TIM1_Init+0xce>
 80048a0:	2000682c 	.word	0x2000682c
 80048a4:	40012c00 	.word	0x40012c00

080048a8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80048a8:	b508      	push	{r3, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80048aa:	4817      	ldr	r0, [pc, #92]	@ (8004908 <MX_USART1_UART_Init+0x60>)
 80048ac:	4b17      	ldr	r3, [pc, #92]	@ (800490c <MX_USART1_UART_Init+0x64>)
 80048ae:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 80048b0:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80048b4:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80048b6:	2300      	movs	r3, #0
 80048b8:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80048ba:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80048bc:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80048be:	220c      	movs	r2, #12
 80048c0:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80048c2:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80048c4:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80048c6:	6203      	str	r3, [r0, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80048c8:	6243      	str	r3, [r0, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80048ca:	6283      	str	r3, [r0, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80048cc:	f004 ffe0 	bl	8009890 <HAL_UART_Init>
 80048d0:	b970      	cbnz	r0, 80048f0 <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80048d2:	2100      	movs	r1, #0
 80048d4:	480c      	ldr	r0, [pc, #48]	@ (8004908 <MX_USART1_UART_Init+0x60>)
 80048d6:	f005 f918 	bl	8009b0a <HAL_UARTEx_SetTxFifoThreshold>
 80048da:	b960      	cbnz	r0, 80048f6 <MX_USART1_UART_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80048dc:	2100      	movs	r1, #0
 80048de:	480a      	ldr	r0, [pc, #40]	@ (8004908 <MX_USART1_UART_Init+0x60>)
 80048e0:	f005 f938 	bl	8009b54 <HAL_UARTEx_SetRxFifoThreshold>
 80048e4:	b950      	cbnz	r0, 80048fc <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80048e6:	4808      	ldr	r0, [pc, #32]	@ (8004908 <MX_USART1_UART_Init+0x60>)
 80048e8:	f005 f8f0 	bl	8009acc <HAL_UARTEx_DisableFifoMode>
 80048ec:	b948      	cbnz	r0, 8004902 <MX_USART1_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80048ee:	bd08      	pop	{r3, pc}
    Error_Handler();
 80048f0:	f7ff fd12 	bl	8004318 <Error_Handler>
 80048f4:	e7ed      	b.n	80048d2 <MX_USART1_UART_Init+0x2a>
    Error_Handler();
 80048f6:	f7ff fd0f 	bl	8004318 <Error_Handler>
 80048fa:	e7ef      	b.n	80048dc <MX_USART1_UART_Init+0x34>
    Error_Handler();
 80048fc:	f7ff fd0c 	bl	8004318 <Error_Handler>
 8004900:	e7f1      	b.n	80048e6 <MX_USART1_UART_Init+0x3e>
    Error_Handler();
 8004902:	f7ff fd09 	bl	8004318 <Error_Handler>
}
 8004906:	e7f2      	b.n	80048ee <MX_USART1_UART_Init+0x46>
 8004908:	20006a2c 	.word	0x20006a2c
 800490c:	40013800 	.word	0x40013800

08004910 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8004910:	b508      	push	{r3, lr}
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004912:	4817      	ldr	r0, [pc, #92]	@ (8004970 <MX_USART3_UART_Init+0x60>)
 8004914:	4b17      	ldr	r3, [pc, #92]	@ (8004974 <MX_USART3_UART_Init+0x64>)
 8004916:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 8004918:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800491c:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800491e:	2300      	movs	r3, #0
 8004920:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004922:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004924:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004926:	220c      	movs	r2, #12
 8004928:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800492a:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800492c:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800492e:	6203      	str	r3, [r0, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004930:	6243      	str	r3, [r0, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004932:	6283      	str	r3, [r0, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004934:	f004 ffac 	bl	8009890 <HAL_UART_Init>
 8004938:	b970      	cbnz	r0, 8004958 <MX_USART3_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800493a:	2100      	movs	r1, #0
 800493c:	480c      	ldr	r0, [pc, #48]	@ (8004970 <MX_USART3_UART_Init+0x60>)
 800493e:	f005 f8e4 	bl	8009b0a <HAL_UARTEx_SetTxFifoThreshold>
 8004942:	b960      	cbnz	r0, 800495e <MX_USART3_UART_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004944:	2100      	movs	r1, #0
 8004946:	480a      	ldr	r0, [pc, #40]	@ (8004970 <MX_USART3_UART_Init+0x60>)
 8004948:	f005 f904 	bl	8009b54 <HAL_UARTEx_SetRxFifoThreshold>
 800494c:	b950      	cbnz	r0, 8004964 <MX_USART3_UART_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800494e:	4808      	ldr	r0, [pc, #32]	@ (8004970 <MX_USART3_UART_Init+0x60>)
 8004950:	f005 f8bc 	bl	8009acc <HAL_UARTEx_DisableFifoMode>
 8004954:	b948      	cbnz	r0, 800496a <MX_USART3_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004956:	bd08      	pop	{r3, pc}
    Error_Handler();
 8004958:	f7ff fcde 	bl	8004318 <Error_Handler>
 800495c:	e7ed      	b.n	800493a <MX_USART3_UART_Init+0x2a>
    Error_Handler();
 800495e:	f7ff fcdb 	bl	8004318 <Error_Handler>
 8004962:	e7ef      	b.n	8004944 <MX_USART3_UART_Init+0x34>
    Error_Handler();
 8004964:	f7ff fcd8 	bl	8004318 <Error_Handler>
 8004968:	e7f1      	b.n	800494e <MX_USART3_UART_Init+0x3e>
    Error_Handler();
 800496a:	f7ff fcd5 	bl	8004318 <Error_Handler>
}
 800496e:	e7f2      	b.n	8004956 <MX_USART3_UART_Init+0x46>
 8004970:	20006998 	.word	0x20006998
 8004974:	40004800 	.word	0x40004800

08004978 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004978:	b5f0      	push	{r4, r5, r6, r7, lr}
 800497a:	b0a1      	sub	sp, #132	@ 0x84
 800497c:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800497e:	2100      	movs	r1, #0
 8004980:	911b      	str	r1, [sp, #108]	@ 0x6c
 8004982:	911c      	str	r1, [sp, #112]	@ 0x70
 8004984:	911d      	str	r1, [sp, #116]	@ 0x74
 8004986:	911e      	str	r1, [sp, #120]	@ 0x78
 8004988:	911f      	str	r1, [sp, #124]	@ 0x7c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800498a:	2254      	movs	r2, #84	@ 0x54
 800498c:	a806      	add	r0, sp, #24
 800498e:	f006 fd7d 	bl	800b48c <memset>
  if(uartHandle->Instance==USART1)
 8004992:	6823      	ldr	r3, [r4, #0]
 8004994:	4a62      	ldr	r2, [pc, #392]	@ (8004b20 <HAL_UART_MspInit+0x1a8>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d004      	beq.n	80049a4 <HAL_UART_MspInit+0x2c>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(uartHandle->Instance==USART3)
 800499a:	4a62      	ldr	r2, [pc, #392]	@ (8004b24 <HAL_UART_MspInit+0x1ac>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d059      	beq.n	8004a54 <HAL_UART_MspInit+0xdc>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80049a0:	b021      	add	sp, #132	@ 0x84
 80049a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80049a4:	2301      	movs	r3, #1
 80049a6:	9306      	str	r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80049a8:	a806      	add	r0, sp, #24
 80049aa:	f003 f833 	bl	8007a14 <HAL_RCCEx_PeriphCLKConfig>
 80049ae:	2800      	cmp	r0, #0
 80049b0:	d14a      	bne.n	8004a48 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART1_CLK_ENABLE();
 80049b2:	4b5d      	ldr	r3, [pc, #372]	@ (8004b28 <HAL_UART_MspInit+0x1b0>)
 80049b4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80049b6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80049ba:	661a      	str	r2, [r3, #96]	@ 0x60
 80049bc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80049be:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80049c2:	9201      	str	r2, [sp, #4]
 80049c4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049c6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80049c8:	f042 0201 	orr.w	r2, r2, #1
 80049cc:	64da      	str	r2, [r3, #76]	@ 0x4c
 80049ce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80049d0:	f002 0201 	and.w	r2, r2, #1
 80049d4:	9202      	str	r2, [sp, #8]
 80049d6:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80049d8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80049da:	f042 0202 	orr.w	r2, r2, #2
 80049de:	64da      	str	r2, [r3, #76]	@ 0x4c
 80049e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049e2:	f003 0302 	and.w	r3, r3, #2
 80049e6:	9303      	str	r3, [sp, #12]
 80049e8:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80049ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80049ee:	931b      	str	r3, [sp, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049f0:	2702      	movs	r7, #2
 80049f2:	971c      	str	r7, [sp, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049f4:	2500      	movs	r5, #0
 80049f6:	951d      	str	r5, [sp, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049f8:	951e      	str	r5, [sp, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80049fa:	2607      	movs	r6, #7
 80049fc:	961f      	str	r6, [sp, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049fe:	a91b      	add	r1, sp, #108	@ 0x6c
 8004a00:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004a04:	f001 fe24 	bl	8006650 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004a08:	2340      	movs	r3, #64	@ 0x40
 8004a0a:	931b      	str	r3, [sp, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a0c:	971c      	str	r7, [sp, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a0e:	951d      	str	r5, [sp, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a10:	951e      	str	r5, [sp, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004a12:	961f      	str	r6, [sp, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a14:	a91b      	add	r1, sp, #108	@ 0x6c
 8004a16:	4845      	ldr	r0, [pc, #276]	@ (8004b2c <HAL_UART_MspInit+0x1b4>)
 8004a18:	f001 fe1a 	bl	8006650 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel2;
 8004a1c:	4844      	ldr	r0, [pc, #272]	@ (8004b30 <HAL_UART_MspInit+0x1b8>)
 8004a1e:	4b45      	ldr	r3, [pc, #276]	@ (8004b34 <HAL_UART_MspInit+0x1bc>)
 8004a20:	6003      	str	r3, [r0, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8004a22:	2318      	movs	r3, #24
 8004a24:	6043      	str	r3, [r0, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004a26:	6085      	str	r5, [r0, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a28:	60c5      	str	r5, [r0, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004a2a:	2380      	movs	r3, #128	@ 0x80
 8004a2c:	6103      	str	r3, [r0, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004a2e:	6145      	str	r5, [r0, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004a30:	6185      	str	r5, [r0, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8004a32:	2320      	movs	r3, #32
 8004a34:	61c3      	str	r3, [r0, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004a36:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004a38:	f001 fc20 	bl	800627c <HAL_DMA_Init>
 8004a3c:	b938      	cbnz	r0, 8004a4e <HAL_UART_MspInit+0xd6>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8004a3e:	4b3c      	ldr	r3, [pc, #240]	@ (8004b30 <HAL_UART_MspInit+0x1b8>)
 8004a40:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
 8004a44:	629c      	str	r4, [r3, #40]	@ 0x28
 8004a46:	e7ab      	b.n	80049a0 <HAL_UART_MspInit+0x28>
      Error_Handler();
 8004a48:	f7ff fc66 	bl	8004318 <Error_Handler>
 8004a4c:	e7b1      	b.n	80049b2 <HAL_UART_MspInit+0x3a>
      Error_Handler();
 8004a4e:	f7ff fc63 	bl	8004318 <Error_Handler>
 8004a52:	e7f4      	b.n	8004a3e <HAL_UART_MspInit+0xc6>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8004a54:	2304      	movs	r3, #4
 8004a56:	9306      	str	r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004a58:	a806      	add	r0, sp, #24
 8004a5a:	f002 ffdb 	bl	8007a14 <HAL_RCCEx_PeriphCLKConfig>
 8004a5e:	2800      	cmp	r0, #0
 8004a60:	d155      	bne.n	8004b0e <HAL_UART_MspInit+0x196>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004a62:	4b31      	ldr	r3, [pc, #196]	@ (8004b28 <HAL_UART_MspInit+0x1b0>)
 8004a64:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004a66:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8004a6a:	659a      	str	r2, [r3, #88]	@ 0x58
 8004a6c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004a6e:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 8004a72:	9204      	str	r2, [sp, #16]
 8004a74:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a76:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004a78:	f042 0202 	orr.w	r2, r2, #2
 8004a7c:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004a7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a80:	f003 0302 	and.w	r3, r3, #2
 8004a84:	9305      	str	r3, [sp, #20]
 8004a86:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_8;
 8004a88:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8004a8c:	931b      	str	r3, [sp, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a8e:	2302      	movs	r3, #2
 8004a90:	931c      	str	r3, [sp, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a92:	2500      	movs	r5, #0
 8004a94:	951d      	str	r5, [sp, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a96:	2303      	movs	r3, #3
 8004a98:	931e      	str	r3, [sp, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004a9a:	2307      	movs	r3, #7
 8004a9c:	931f      	str	r3, [sp, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a9e:	a91b      	add	r1, sp, #108	@ 0x6c
 8004aa0:	4822      	ldr	r0, [pc, #136]	@ (8004b2c <HAL_UART_MspInit+0x1b4>)
 8004aa2:	f001 fdd5 	bl	8006650 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Channel3;
 8004aa6:	4824      	ldr	r0, [pc, #144]	@ (8004b38 <HAL_UART_MspInit+0x1c0>)
 8004aa8:	4b24      	ldr	r3, [pc, #144]	@ (8004b3c <HAL_UART_MspInit+0x1c4>)
 8004aaa:	6003      	str	r3, [r0, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8004aac:	231d      	movs	r3, #29
 8004aae:	6043      	str	r3, [r0, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004ab0:	2310      	movs	r3, #16
 8004ab2:	6083      	str	r3, [r0, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004ab4:	60c5      	str	r5, [r0, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004ab6:	2380      	movs	r3, #128	@ 0x80
 8004ab8:	6103      	str	r3, [r0, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004aba:	6145      	str	r5, [r0, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004abc:	6185      	str	r5, [r0, #24]
    hdma_usart3_tx.Init.Mode = DMA_CIRCULAR;
 8004abe:	2320      	movs	r3, #32
 8004ac0:	61c3      	str	r3, [r0, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004ac2:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8004ac4:	f001 fbda 	bl	800627c <HAL_DMA_Init>
 8004ac8:	bb20      	cbnz	r0, 8004b14 <HAL_UART_MspInit+0x19c>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8004aca:	4b1b      	ldr	r3, [pc, #108]	@ (8004b38 <HAL_UART_MspInit+0x1c0>)
 8004acc:	67e3      	str	r3, [r4, #124]	@ 0x7c
 8004ace:	629c      	str	r4, [r3, #40]	@ 0x28
    hdma_usart3_rx.Instance = DMA1_Channel4;
 8004ad0:	481b      	ldr	r0, [pc, #108]	@ (8004b40 <HAL_UART_MspInit+0x1c8>)
 8004ad2:	4b1c      	ldr	r3, [pc, #112]	@ (8004b44 <HAL_UART_MspInit+0x1cc>)
 8004ad4:	6003      	str	r3, [r0, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8004ad6:	231c      	movs	r3, #28
 8004ad8:	6043      	str	r3, [r0, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004ada:	2300      	movs	r3, #0
 8004adc:	6083      	str	r3, [r0, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004ade:	60c3      	str	r3, [r0, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004ae0:	2280      	movs	r2, #128	@ 0x80
 8004ae2:	6102      	str	r2, [r0, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004ae4:	6143      	str	r3, [r0, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004ae6:	6183      	str	r3, [r0, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8004ae8:	2220      	movs	r2, #32
 8004aea:	61c2      	str	r2, [r0, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004aec:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8004aee:	f001 fbc5 	bl	800627c <HAL_DMA_Init>
 8004af2:	b990      	cbnz	r0, 8004b1a <HAL_UART_MspInit+0x1a2>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8004af4:	4b12      	ldr	r3, [pc, #72]	@ (8004b40 <HAL_UART_MspInit+0x1c8>)
 8004af6:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
 8004afa:	629c      	str	r4, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8004afc:	2200      	movs	r2, #0
 8004afe:	4611      	mov	r1, r2
 8004b00:	2027      	movs	r0, #39	@ 0x27
 8004b02:	f001 f983 	bl	8005e0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004b06:	2027      	movs	r0, #39	@ 0x27
 8004b08:	f001 f990 	bl	8005e2c <HAL_NVIC_EnableIRQ>
}
 8004b0c:	e748      	b.n	80049a0 <HAL_UART_MspInit+0x28>
      Error_Handler();
 8004b0e:	f7ff fc03 	bl	8004318 <Error_Handler>
 8004b12:	e7a6      	b.n	8004a62 <HAL_UART_MspInit+0xea>
      Error_Handler();
 8004b14:	f7ff fc00 	bl	8004318 <Error_Handler>
 8004b18:	e7d7      	b.n	8004aca <HAL_UART_MspInit+0x152>
      Error_Handler();
 8004b1a:	f7ff fbfd 	bl	8004318 <Error_Handler>
 8004b1e:	e7e9      	b.n	8004af4 <HAL_UART_MspInit+0x17c>
 8004b20:	40013800 	.word	0x40013800
 8004b24:	40004800 	.word	0x40004800
 8004b28:	40021000 	.word	0x40021000
 8004b2c:	48000400 	.word	0x48000400
 8004b30:	20006938 	.word	0x20006938
 8004b34:	4002001c 	.word	0x4002001c
 8004b38:	200068d8 	.word	0x200068d8
 8004b3c:	40020030 	.word	0x40020030
 8004b40:	20006878 	.word	0x20006878
 8004b44:	40020044 	.word	0x40020044

08004b48 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8004b48:	b510      	push	{r4, lr}
 8004b4a:	4604      	mov	r4, r0

  if(uartHandle->Instance==USART1)
 8004b4c:	6803      	ldr	r3, [r0, #0]
 8004b4e:	4a19      	ldr	r2, [pc, #100]	@ (8004bb4 <HAL_UART_MspDeInit+0x6c>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d003      	beq.n	8004b5c <HAL_UART_MspDeInit+0x14>
    HAL_DMA_DeInit(uartHandle->hdmarx);
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
  else if(uartHandle->Instance==USART3)
 8004b54:	4a18      	ldr	r2, [pc, #96]	@ (8004bb8 <HAL_UART_MspDeInit+0x70>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d015      	beq.n	8004b86 <HAL_UART_MspDeInit+0x3e>
    HAL_NVIC_DisableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }
}
 8004b5a:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_DISABLE();
 8004b5c:	f502 4258 	add.w	r2, r2, #55296	@ 0xd800
 8004b60:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 8004b62:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004b66:	6613      	str	r3, [r2, #96]	@ 0x60
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_10);
 8004b68:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004b6c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004b70:	f001 fe58 	bl	8006824 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8004b74:	2140      	movs	r1, #64	@ 0x40
 8004b76:	4811      	ldr	r0, [pc, #68]	@ (8004bbc <HAL_UART_MspDeInit+0x74>)
 8004b78:	f001 fe54 	bl	8006824 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8004b7c:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8004b80:	f001 fbe8 	bl	8006354 <HAL_DMA_DeInit>
 8004b84:	e7e9      	b.n	8004b5a <HAL_UART_MspDeInit+0x12>
    __HAL_RCC_USART3_CLK_DISABLE();
 8004b86:	f502 32e4 	add.w	r2, r2, #116736	@ 0x1c800
 8004b8a:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8004b8c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b90:	6593      	str	r3, [r2, #88]	@ 0x58
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10|GPIO_PIN_8);
 8004b92:	f44f 61a0 	mov.w	r1, #1280	@ 0x500
 8004b96:	4809      	ldr	r0, [pc, #36]	@ (8004bbc <HAL_UART_MspDeInit+0x74>)
 8004b98:	f001 fe44 	bl	8006824 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8004b9c:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 8004b9e:	f001 fbd9 	bl	8006354 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8004ba2:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8004ba6:	f001 fbd5 	bl	8006354 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART3_IRQn);
 8004baa:	2027      	movs	r0, #39	@ 0x27
 8004bac:	f001 f942 	bl	8005e34 <HAL_NVIC_DisableIRQ>
}
 8004bb0:	e7d3      	b.n	8004b5a <HAL_UART_MspDeInit+0x12>
 8004bb2:	bf00      	nop
 8004bb4:	40013800 	.word	0x40013800
 8004bb8:	40004800 	.word	0x40004800
 8004bbc:	48000400 	.word	0x48000400

08004bc0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004bc0:	480d      	ldr	r0, [pc, #52]	@ (8004bf8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004bc2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8004bc4:	f7ff fcd6 	bl	8004574 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004bc8:	480c      	ldr	r0, [pc, #48]	@ (8004bfc <LoopForever+0x6>)
  ldr r1, =_edata
 8004bca:	490d      	ldr	r1, [pc, #52]	@ (8004c00 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004bcc:	4a0d      	ldr	r2, [pc, #52]	@ (8004c04 <LoopForever+0xe>)
  movs r3, #0
 8004bce:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8004bd0:	e002      	b.n	8004bd8 <LoopCopyDataInit>

08004bd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004bd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004bd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004bd6:	3304      	adds	r3, #4

08004bd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004bd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004bda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004bdc:	d3f9      	bcc.n	8004bd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004bde:	4a0a      	ldr	r2, [pc, #40]	@ (8004c08 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004be0:	4c0a      	ldr	r4, [pc, #40]	@ (8004c0c <LoopForever+0x16>)
  movs r3, #0
 8004be2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004be4:	e001      	b.n	8004bea <LoopFillZerobss>

08004be6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004be6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004be8:	3204      	adds	r2, #4

08004bea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004bea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004bec:	d3fb      	bcc.n	8004be6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004bee:	f006 fce3 	bl	800b5b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004bf2:	f7ff fbca 	bl	800438a <main>

08004bf6 <LoopForever>:

LoopForever:
    b LoopForever
 8004bf6:	e7fe      	b.n	8004bf6 <LoopForever>
  ldr   r0, =_estack
 8004bf8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004bfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004c00:	20000224 	.word	0x20000224
  ldr r2, =_sidata
 8004c04:	08016840 	.word	0x08016840
  ldr r2, =_sbss
 8004c08:	20000240 	.word	0x20000240
  ldr r4, =_ebss
 8004c0c:	20006c10 	.word	0x20006c10

08004c10 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004c10:	e7fe      	b.n	8004c10 <ADC3_IRQHandler>
	...

08004c14 <HAL_InitTick>:
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8004c14:	4b10      	ldr	r3, [pc, #64]	@ (8004c58 <HAL_InitTick+0x44>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	b90b      	cbnz	r3, 8004c1e <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8004c1a:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8004c1c:	4770      	bx	lr
{
 8004c1e:	b510      	push	{r4, lr}
 8004c20:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004c22:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004c26:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c2a:	4a0c      	ldr	r2, [pc, #48]	@ (8004c5c <HAL_InitTick+0x48>)
 8004c2c:	6810      	ldr	r0, [r2, #0]
 8004c2e:	fbb0 f0f3 	udiv	r0, r0, r3
 8004c32:	f001 f903 	bl	8005e3c <HAL_SYSTICK_Config>
 8004c36:	b968      	cbnz	r0, 8004c54 <HAL_InitTick+0x40>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004c38:	2c0f      	cmp	r4, #15
 8004c3a:	d901      	bls.n	8004c40 <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 8004c3c:	2001      	movs	r0, #1
 8004c3e:	e00a      	b.n	8004c56 <HAL_InitTick+0x42>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004c40:	2200      	movs	r2, #0
 8004c42:	4621      	mov	r1, r4
 8004c44:	f04f 30ff 	mov.w	r0, #4294967295
 8004c48:	f001 f8e0 	bl	8005e0c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004c4c:	4b04      	ldr	r3, [pc, #16]	@ (8004c60 <HAL_InitTick+0x4c>)
 8004c4e:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 8004c50:	2000      	movs	r0, #0
 8004c52:	e000      	b.n	8004c56 <HAL_InitTick+0x42>
      status = HAL_ERROR;
 8004c54:	2001      	movs	r0, #1
}
 8004c56:	bd10      	pop	{r4, pc}
 8004c58:	20000054 	.word	0x20000054
 8004c5c:	20000050 	.word	0x20000050
 8004c60:	20000058 	.word	0x20000058

08004c64 <HAL_Init>:
{
 8004c64:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004c66:	2003      	movs	r0, #3
 8004c68:	f001 f8be 	bl	8005de8 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004c6c:	200f      	movs	r0, #15
 8004c6e:	f7ff ffd1 	bl	8004c14 <HAL_InitTick>
 8004c72:	b110      	cbz	r0, 8004c7a <HAL_Init+0x16>
    status = HAL_ERROR;
 8004c74:	2401      	movs	r4, #1
}
 8004c76:	4620      	mov	r0, r4
 8004c78:	bd10      	pop	{r4, pc}
 8004c7a:	4604      	mov	r4, r0
    HAL_MspInit();
 8004c7c:	f7ff fbaa 	bl	80043d4 <HAL_MspInit>
 8004c80:	e7f9      	b.n	8004c76 <HAL_Init+0x12>
	...

08004c84 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8004c84:	4a03      	ldr	r2, [pc, #12]	@ (8004c94 <HAL_IncTick+0x10>)
 8004c86:	6813      	ldr	r3, [r2, #0]
 8004c88:	4903      	ldr	r1, [pc, #12]	@ (8004c98 <HAL_IncTick+0x14>)
 8004c8a:	6809      	ldr	r1, [r1, #0]
 8004c8c:	440b      	add	r3, r1
 8004c8e:	6013      	str	r3, [r2, #0]
}
 8004c90:	4770      	bx	lr
 8004c92:	bf00      	nop
 8004c94:	20006ac0 	.word	0x20006ac0
 8004c98:	20000054 	.word	0x20000054

08004c9c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004c9c:	4b01      	ldr	r3, [pc, #4]	@ (8004ca4 <HAL_GetTick+0x8>)
 8004c9e:	6818      	ldr	r0, [r3, #0]
}
 8004ca0:	4770      	bx	lr
 8004ca2:	bf00      	nop
 8004ca4:	20006ac0 	.word	0x20006ac0

08004ca8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004ca8:	b538      	push	{r3, r4, r5, lr}
 8004caa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004cac:	f7ff fff6 	bl	8004c9c <HAL_GetTick>
 8004cb0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004cb2:	f1b4 3fff 	cmp.w	r4, #4294967295
 8004cb6:	d002      	beq.n	8004cbe <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8004cb8:	4b04      	ldr	r3, [pc, #16]	@ (8004ccc <HAL_Delay+0x24>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004cbe:	f7ff ffed 	bl	8004c9c <HAL_GetTick>
 8004cc2:	1b40      	subs	r0, r0, r5
 8004cc4:	42a0      	cmp	r0, r4
 8004cc6:	d3fa      	bcc.n	8004cbe <HAL_Delay+0x16>
  {
  }
}
 8004cc8:	bd38      	pop	{r3, r4, r5, pc}
 8004cca:	bf00      	nop
 8004ccc:	20000054 	.word	0x20000054

08004cd0 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004cd0:	b410      	push	{r4}
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8004cd2:	3030      	adds	r0, #48	@ 0x30
 8004cd4:	0a0b      	lsrs	r3, r1, #8
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	f003 030c 	and.w	r3, r3, #12
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004cdc:	58c4      	ldr	r4, [r0, r3]
 8004cde:	f001 011f 	and.w	r1, r1, #31
 8004ce2:	f04f 0c1f 	mov.w	ip, #31
 8004ce6:	fa0c fc01 	lsl.w	ip, ip, r1
 8004cea:	ea24 0c0c 	bic.w	ip, r4, ip
 8004cee:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8004cf2:	408a      	lsls	r2, r1
 8004cf4:	ea4c 0202 	orr.w	r2, ip, r2
 8004cf8:	50c2      	str	r2, [r0, r3]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004cfa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004cfe:	4770      	bx	lr

08004d00 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004d00:	b410      	push	{r4}
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004d02:	3014      	adds	r0, #20
 8004d04:	0e4b      	lsrs	r3, r1, #25
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	f003 0304 	and.w	r3, r3, #4
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004d0c:	58c4      	ldr	r4, [r0, r3]
 8004d0e:	f3c1 5104 	ubfx	r1, r1, #20, #5
 8004d12:	f04f 0c07 	mov.w	ip, #7
 8004d16:	fa0c fc01 	lsl.w	ip, ip, r1
 8004d1a:	ea24 0c0c 	bic.w	ip, r4, ip
 8004d1e:	408a      	lsls	r2, r1
 8004d20:	ea4c 0202 	orr.w	r2, ip, r2
 8004d24:	50c2      	str	r2, [r0, r3]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004d26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d2a:	4770      	bx	lr

08004d2c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004d2c:	b530      	push	{r4, r5, lr}
 8004d2e:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004d30:	2300      	movs	r3, #0
 8004d32:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8004d34:	2800      	cmp	r0, #0
 8004d36:	f000 8132 	beq.w	8004f9e <HAL_ADC_Init+0x272>
 8004d3a:	4604      	mov	r4, r0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004d3c:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8004d3e:	b313      	cbz	r3, 8004d86 <HAL_ADC_Init+0x5a>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004d40:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004d42:	689a      	ldr	r2, [r3, #8]
 8004d44:	f012 5f00 	tst.w	r2, #536870912	@ 0x20000000
 8004d48:	d005      	beq.n	8004d56 <HAL_ADC_Init+0x2a>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004d4a:	689a      	ldr	r2, [r3, #8]
 8004d4c:	f022 4220 	bic.w	r2, r2, #2684354560	@ 0xa0000000
 8004d50:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8004d54:	609a      	str	r2, [r3, #8]
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004d56:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004d58:	6893      	ldr	r3, [r2, #8]
 8004d5a:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8004d5e:	d11f      	bne.n	8004da0 <HAL_ADC_Init+0x74>
  MODIFY_REG(ADCx->CR,
 8004d60:	6893      	ldr	r3, [r2, #8]
 8004d62:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8004d66:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004d6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d6e:	6093      	str	r3, [r2, #8]
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004d70:	4b8c      	ldr	r3, [pc, #560]	@ (8004fa4 <HAL_ADC_Init+0x278>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	099b      	lsrs	r3, r3, #6
 8004d76:	4a8c      	ldr	r2, [pc, #560]	@ (8004fa8 <HAL_ADC_Init+0x27c>)
 8004d78:	fba2 2303 	umull	r2, r3, r2, r3
 8004d7c:	099b      	lsrs	r3, r3, #6
 8004d7e:	3301      	adds	r3, #1
 8004d80:	005b      	lsls	r3, r3, #1
 8004d82:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8004d84:	e009      	b.n	8004d9a <HAL_ADC_Init+0x6e>
    HAL_ADC_MspInit(hadc);
 8004d86:	f7fe fb85 	bl	8003494 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	6623      	str	r3, [r4, #96]	@ 0x60
    hadc->Lock = HAL_UNLOCKED;
 8004d8e:	f884 3058 	strb.w	r3, [r4, #88]	@ 0x58
 8004d92:	e7d5      	b.n	8004d40 <HAL_ADC_Init+0x14>
    {
      wait_loop_index--;
 8004d94:	9b01      	ldr	r3, [sp, #4]
 8004d96:	3b01      	subs	r3, #1
 8004d98:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8004d9a:	9b01      	ldr	r3, [sp, #4]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d1f9      	bne.n	8004d94 <HAL_ADC_Init+0x68>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004da0:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004da2:	6893      	ldr	r3, [r2, #8]
 8004da4:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8004da8:	d13d      	bne.n	8004e26 <HAL_ADC_Init+0xfa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004daa:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8004dac:	f043 0310 	orr.w	r3, r3, #16
 8004db0:	65e3      	str	r3, [r4, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004db2:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8004db4:	f043 0301 	orr.w	r3, r3, #1
 8004db8:	6623      	str	r3, [r4, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004dba:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004dbc:	6893      	ldr	r3, [r2, #8]
 8004dbe:	f013 0304 	ands.w	r3, r3, #4
 8004dc2:	d000      	beq.n	8004dc6 <HAL_ADC_Init+0x9a>
 8004dc4:	2301      	movs	r3, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004dc6:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8004dc8:	f011 0f10 	tst.w	r1, #16
 8004dcc:	f040 80e0 	bne.w	8004f90 <HAL_ADC_Init+0x264>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	f040 80dd 	bne.w	8004f90 <HAL_ADC_Init+0x264>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004dd6:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8004dd8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004ddc:	f043 0302 	orr.w	r3, r3, #2
 8004de0:	65e3      	str	r3, [r4, #92]	@ 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004de2:	6893      	ldr	r3, [r2, #8]
 8004de4:	f013 0f01 	tst.w	r3, #1
 8004de8:	d13e      	bne.n	8004e68 <HAL_ADC_Init+0x13c>
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004dea:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 8004dee:	d01c      	beq.n	8004e2a <HAL_ADC_Init+0xfe>
 8004df0:	4b6e      	ldr	r3, [pc, #440]	@ (8004fac <HAL_ADC_Init+0x280>)
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d019      	beq.n	8004e2a <HAL_ADC_Init+0xfe>
 8004df6:	4b6e      	ldr	r3, [pc, #440]	@ (8004fb0 <HAL_ADC_Init+0x284>)
 8004df8:	6899      	ldr	r1, [r3, #8]
 8004dfa:	f011 0101 	ands.w	r1, r1, #1
 8004dfe:	d000      	beq.n	8004e02 <HAL_ADC_Init+0xd6>
 8004e00:	2101      	movs	r1, #1
 8004e02:	4b6c      	ldr	r3, [pc, #432]	@ (8004fb4 <HAL_ADC_Init+0x288>)
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	f013 0301 	ands.w	r3, r3, #1
 8004e0a:	d000      	beq.n	8004e0e <HAL_ADC_Init+0xe2>
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	430b      	orrs	r3, r1
 8004e10:	4969      	ldr	r1, [pc, #420]	@ (8004fb8 <HAL_ADC_Init+0x28c>)
 8004e12:	6889      	ldr	r1, [r1, #8]
 8004e14:	f011 0101 	ands.w	r1, r1, #1
 8004e18:	d000      	beq.n	8004e1c <HAL_ADC_Init+0xf0>
 8004e1a:	2101      	movs	r1, #1
 8004e1c:	430b      	orrs	r3, r1
 8004e1e:	bf0c      	ite	eq
 8004e20:	2301      	moveq	r3, #1
 8004e22:	2300      	movne	r3, #0
 8004e24:	e012      	b.n	8004e4c <HAL_ADC_Init+0x120>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004e26:	2000      	movs	r0, #0
 8004e28:	e7c8      	b.n	8004dbc <HAL_ADC_Init+0x90>
 8004e2a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004e2e:	6899      	ldr	r1, [r3, #8]
 8004e30:	f011 0101 	ands.w	r1, r1, #1
 8004e34:	d000      	beq.n	8004e38 <HAL_ADC_Init+0x10c>
 8004e36:	2101      	movs	r1, #1
 8004e38:	4b5c      	ldr	r3, [pc, #368]	@ (8004fac <HAL_ADC_Init+0x280>)
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	f013 0301 	ands.w	r3, r3, #1
 8004e40:	d000      	beq.n	8004e44 <HAL_ADC_Init+0x118>
 8004e42:	2301      	movs	r3, #1
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004e44:	430b      	orrs	r3, r1
 8004e46:	bf0c      	ite	eq
 8004e48:	2301      	moveq	r3, #1
 8004e4a:	2300      	movne	r3, #0
 8004e4c:	b163      	cbz	r3, 8004e68 <HAL_ADC_Init+0x13c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004e4e:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 8004e52:	d06c      	beq.n	8004f2e <HAL_ADC_Init+0x202>
 8004e54:	4b55      	ldr	r3, [pc, #340]	@ (8004fac <HAL_ADC_Init+0x280>)
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d067      	beq.n	8004f2a <HAL_ADC_Init+0x1fe>
 8004e5a:	4958      	ldr	r1, [pc, #352]	@ (8004fbc <HAL_ADC_Init+0x290>)
 8004e5c:	6863      	ldr	r3, [r4, #4]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004e5e:	688a      	ldr	r2, [r1, #8]
 8004e60:	f422 127c 	bic.w	r2, r2, #4128768	@ 0x3f0000
 8004e64:	4313      	orrs	r3, r2
 8004e66:	608b      	str	r3, [r1, #8]
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004e68:	7f62      	ldrb	r2, [r4, #29]
                 hadc->Init.Overrun                                                     |
 8004e6a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004e6c:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                 hadc->Init.DataAlign                                                   |
 8004e70:	68e2      	ldr	r2, [r4, #12]
                 hadc->Init.Overrun                                                     |
 8004e72:	4313      	orrs	r3, r2
                 hadc->Init.Resolution                                                  |
 8004e74:	68a2      	ldr	r2, [r4, #8]
                 hadc->Init.DataAlign                                                   |
 8004e76:	4313      	orrs	r3, r2
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004e78:	f894 2024 	ldrb.w	r2, [r4, #36]	@ 0x24
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004e7c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004e80:	2a01      	cmp	r2, #1
 8004e82:	d056      	beq.n	8004f32 <HAL_ADC_Init+0x206>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004e84:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8004e86:	b122      	cbz	r2, 8004e92 <HAL_ADC_Init+0x166>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004e88:	f402 7278 	and.w	r2, r2, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8004e8c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004e8e:	430a      	orrs	r2, r1
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004e90:	4313      	orrs	r3, r2
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004e92:	6821      	ldr	r1, [r4, #0]
 8004e94:	68cd      	ldr	r5, [r1, #12]
 8004e96:	4a4a      	ldr	r2, [pc, #296]	@ (8004fc0 <HAL_ADC_Init+0x294>)
 8004e98:	402a      	ands	r2, r5
 8004e9a:	431a      	orrs	r2, r3
 8004e9c:	60ca      	str	r2, [r1, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004e9e:	6822      	ldr	r2, [r4, #0]
 8004ea0:	6913      	ldr	r3, [r2, #16]
 8004ea2:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8004ea6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004ea8:	430b      	orrs	r3, r1
 8004eaa:	6113      	str	r3, [r2, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004eac:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004eae:	6893      	ldr	r3, [r2, #8]
 8004eb0:	f013 0308 	ands.w	r3, r3, #8
 8004eb4:	d000      	beq.n	8004eb8 <HAL_ADC_Init+0x18c>
 8004eb6:	2301      	movs	r3, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004eb8:	bb43      	cbnz	r3, 8004f0c <HAL_ADC_Init+0x1e0>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004eba:	7f23      	ldrb	r3, [r4, #28]
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004ebc:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 8004ec0:	0049      	lsls	r1, r1, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004ec2:	ea41 3183 	orr.w	r1, r1, r3, lsl #14

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004ec6:	68d3      	ldr	r3, [r2, #12]
 8004ec8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004ecc:	f023 0302 	bic.w	r3, r3, #2
 8004ed0:	430b      	orrs	r3, r1
 8004ed2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8004ed4:	6923      	ldr	r3, [r4, #16]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d030      	beq.n	8004f3c <HAL_ADC_Init+0x210>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004eda:	6822      	ldr	r2, [r4, #0]
 8004edc:	6913      	ldr	r3, [r2, #16]
 8004ede:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ee2:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004ee4:	6822      	ldr	r2, [r4, #0]
 8004ee6:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 8004eea:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004eee:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004ef2:	6921      	ldr	r1, [r4, #16]
 8004ef4:	430b      	orrs	r3, r1
 8004ef6:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8004efa:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d02b      	beq.n	8004f5a <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004f02:	6822      	ldr	r2, [r4, #0]
 8004f04:	6913      	ldr	r3, [r2, #16]
 8004f06:	f023 0301 	bic.w	r3, r3, #1
 8004f0a:	6113      	str	r3, [r2, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004f0c:	6963      	ldr	r3, [r4, #20]
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d035      	beq.n	8004f7e <HAL_ADC_Init+0x252>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004f12:	6822      	ldr	r2, [r4, #0]
 8004f14:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8004f16:	f023 030f 	bic.w	r3, r3, #15
 8004f1a:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004f1c:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8004f1e:	f023 0303 	bic.w	r3, r3, #3
 8004f22:	f043 0301 	orr.w	r3, r3, #1
 8004f26:	65e3      	str	r3, [r4, #92]	@ 0x5c
 8004f28:	e037      	b.n	8004f9a <HAL_ADC_Init+0x26e>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004f2a:	4926      	ldr	r1, [pc, #152]	@ (8004fc4 <HAL_ADC_Init+0x298>)
 8004f2c:	e796      	b.n	8004e5c <HAL_ADC_Init+0x130>
 8004f2e:	4925      	ldr	r1, [pc, #148]	@ (8004fc4 <HAL_ADC_Init+0x298>)
 8004f30:	e794      	b.n	8004e5c <HAL_ADC_Init+0x130>
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004f32:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8004f34:	3a01      	subs	r2, #1
 8004f36:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8004f3a:	e7a3      	b.n	8004e84 <HAL_ADC_Init+0x158>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004f3c:	6822      	ldr	r2, [r4, #0]
 8004f3e:	6913      	ldr	r3, [r2, #16]
 8004f40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f44:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004f46:	6822      	ldr	r2, [r4, #0]
 8004f48:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 8004f4c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004f50:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004f54:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8004f58:	e7cf      	b.n	8004efa <HAL_ADC_Init+0x1ce>
        MODIFY_REG(hadc->Instance->CFGR2,
 8004f5a:	6821      	ldr	r1, [r4, #0]
 8004f5c:	690b      	ldr	r3, [r1, #16]
 8004f5e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004f62:	f023 0304 	bic.w	r3, r3, #4
 8004f66:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8004f68:	6ca5      	ldr	r5, [r4, #72]	@ 0x48
 8004f6a:	432a      	orrs	r2, r5
 8004f6c:	6ce5      	ldr	r5, [r4, #76]	@ 0x4c
 8004f6e:	432a      	orrs	r2, r5
 8004f70:	6d25      	ldr	r5, [r4, #80]	@ 0x50
 8004f72:	432a      	orrs	r2, r5
 8004f74:	4313      	orrs	r3, r2
 8004f76:	f043 0301 	orr.w	r3, r3, #1
 8004f7a:	610b      	str	r3, [r1, #16]
 8004f7c:	e7c6      	b.n	8004f0c <HAL_ADC_Init+0x1e0>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004f7e:	6821      	ldr	r1, [r4, #0]
 8004f80:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 8004f82:	f023 030f 	bic.w	r3, r3, #15
 8004f86:	6a22      	ldr	r2, [r4, #32]
 8004f88:	3a01      	subs	r2, #1
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	630b      	str	r3, [r1, #48]	@ 0x30
 8004f8e:	e7c5      	b.n	8004f1c <HAL_ADC_Init+0x1f0>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f90:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8004f92:	f043 0310 	orr.w	r3, r3, #16
 8004f96:	65e3      	str	r3, [r4, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004f98:	2001      	movs	r0, #1
  }

  /* Return function status */
  return tmp_hal_status;
}
 8004f9a:	b003      	add	sp, #12
 8004f9c:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8004f9e:	2001      	movs	r0, #1
 8004fa0:	e7fb      	b.n	8004f9a <HAL_ADC_Init+0x26e>
 8004fa2:	bf00      	nop
 8004fa4:	20000050 	.word	0x20000050
 8004fa8:	053e2d63 	.word	0x053e2d63
 8004fac:	50000100 	.word	0x50000100
 8004fb0:	50000400 	.word	0x50000400
 8004fb4:	50000500 	.word	0x50000500
 8004fb8:	50000600 	.word	0x50000600
 8004fbc:	50000700 	.word	0x50000700
 8004fc0:	fff04007 	.word	0xfff04007
 8004fc4:	50000300 	.word	0x50000300

08004fc8 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004fc8:	6803      	ldr	r3, [r0, #0]
 8004fca:	6c18      	ldr	r0, [r3, #64]	@ 0x40
}
 8004fcc:	4770      	bx	lr

08004fce <HAL_ADC_LevelOutOfWindowCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004fce:	4770      	bx	lr

08004fd0 <HAL_ADC_ErrorCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004fd0:	4770      	bx	lr
	...

08004fd4 <HAL_ADC_IRQHandler>:
{
 8004fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fd6:	4604      	mov	r4, r0
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004fd8:	6803      	ldr	r3, [r0, #0]
 8004fda:	681e      	ldr	r6, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004fdc:	685f      	ldr	r7, [r3, #4]
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004fde:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004fe2:	d049      	beq.n	8005078 <HAL_ADC_IRQHandler+0xa4>
 8004fe4:	4a98      	ldr	r2, [pc, #608]	@ (8005248 <HAL_ADC_IRQHandler+0x274>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d044      	beq.n	8005074 <HAL_ADC_IRQHandler+0xa0>
 8004fea:	4b98      	ldr	r3, [pc, #608]	@ (800524c <HAL_ADC_IRQHandler+0x278>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004fec:	689d      	ldr	r5, [r3, #8]
 8004fee:	f005 051f 	and.w	r5, r5, #31
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8004ff2:	f016 0f02 	tst.w	r6, #2
 8004ff6:	d010      	beq.n	800501a <HAL_ADC_IRQHandler+0x46>
 8004ff8:	f017 0f02 	tst.w	r7, #2
 8004ffc:	d00d      	beq.n	800501a <HAL_ADC_IRQHandler+0x46>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004ffe:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8005000:	f013 0f10 	tst.w	r3, #16
 8005004:	d103      	bne.n	800500e <HAL_ADC_IRQHandler+0x3a>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8005006:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8005008:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800500c:	65e3      	str	r3, [r4, #92]	@ 0x5c
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800500e:	4620      	mov	r0, r4
 8005010:	f000 fdaa 	bl	8005b68 <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8005014:	6823      	ldr	r3, [r4, #0]
 8005016:	2202      	movs	r2, #2
 8005018:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800501a:	f016 0f04 	tst.w	r6, #4
 800501e:	d002      	beq.n	8005026 <HAL_ADC_IRQHandler+0x52>
 8005020:	f017 0f04 	tst.w	r7, #4
 8005024:	d105      	bne.n	8005032 <HAL_ADC_IRQHandler+0x5e>
 8005026:	f016 0f08 	tst.w	r6, #8
 800502a:	d058      	beq.n	80050de <HAL_ADC_IRQHandler+0x10a>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800502c:	f017 0f08 	tst.w	r7, #8
 8005030:	d055      	beq.n	80050de <HAL_ADC_IRQHandler+0x10a>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005032:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8005034:	f013 0f10 	tst.w	r3, #16
 8005038:	d103      	bne.n	8005042 <HAL_ADC_IRQHandler+0x6e>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800503a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800503c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005040:	65e3      	str	r3, [r4, #92]	@ 0x5c
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005042:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005044:	68da      	ldr	r2, [r3, #12]
 8005046:	f412 6f40 	tst.w	r2, #3072	@ 0xc00
 800504a:	d142      	bne.n	80050d2 <HAL_ADC_IRQHandler+0xfe>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800504c:	4a7e      	ldr	r2, [pc, #504]	@ (8005248 <HAL_ADC_IRQHandler+0x274>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d017      	beq.n	8005082 <HAL_ADC_IRQHandler+0xae>
 8005052:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005056:	4293      	cmp	r3, r2
 8005058:	d010      	beq.n	800507c <HAL_ADC_IRQHandler+0xa8>
 800505a:	461a      	mov	r2, r3
 800505c:	4293      	cmp	r3, r2
 800505e:	d013      	beq.n	8005088 <HAL_ADC_IRQHandler+0xb4>
 8005060:	2d09      	cmp	r5, #9
 8005062:	d805      	bhi.n	8005070 <HAL_ADC_IRQHandler+0x9c>
 8005064:	f240 2121 	movw	r1, #545	@ 0x221
 8005068:	40e9      	lsrs	r1, r5
 800506a:	f011 0f01 	tst.w	r1, #1
 800506e:	d10b      	bne.n	8005088 <HAL_ADC_IRQHandler+0xb4>
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005070:	68d2      	ldr	r2, [r2, #12]
 8005072:	e00a      	b.n	800508a <HAL_ADC_IRQHandler+0xb6>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005074:	4b76      	ldr	r3, [pc, #472]	@ (8005250 <HAL_ADC_IRQHandler+0x27c>)
 8005076:	e7b9      	b.n	8004fec <HAL_ADC_IRQHandler+0x18>
 8005078:	4b75      	ldr	r3, [pc, #468]	@ (8005250 <HAL_ADC_IRQHandler+0x27c>)
 800507a:	e7b7      	b.n	8004fec <HAL_ADC_IRQHandler+0x18>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800507c:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 8005080:	e7ec      	b.n	800505c <HAL_ADC_IRQHandler+0x88>
 8005082:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8005086:	e7e9      	b.n	800505c <HAL_ADC_IRQHandler+0x88>
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005088:	68da      	ldr	r2, [r3, #12]
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800508a:	f412 5f00 	tst.w	r2, #8192	@ 0x2000
 800508e:	d120      	bne.n	80050d2 <HAL_ADC_IRQHandler+0xfe>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	f012 0f08 	tst.w	r2, #8
 8005096:	d01c      	beq.n	80050d2 <HAL_ADC_IRQHandler+0xfe>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005098:	689a      	ldr	r2, [r3, #8]
 800509a:	f012 0f04 	tst.w	r2, #4
 800509e:	d110      	bne.n	80050c2 <HAL_ADC_IRQHandler+0xee>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80050a0:	685a      	ldr	r2, [r3, #4]
 80050a2:	f022 020c 	bic.w	r2, r2, #12
 80050a6:	605a      	str	r2, [r3, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80050a8:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80050aa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80050ae:	65e3      	str	r3, [r4, #92]	@ 0x5c
            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80050b0:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80050b2:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 80050b6:	d10c      	bne.n	80050d2 <HAL_ADC_IRQHandler+0xfe>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80050b8:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80050ba:	f043 0301 	orr.w	r3, r3, #1
 80050be:	65e3      	str	r3, [r4, #92]	@ 0x5c
 80050c0:	e007      	b.n	80050d2 <HAL_ADC_IRQHandler+0xfe>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80050c2:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80050c4:	f043 0310 	orr.w	r3, r3, #16
 80050c8:	65e3      	str	r3, [r4, #92]	@ 0x5c
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80050ca:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80050cc:	f043 0301 	orr.w	r3, r3, #1
 80050d0:	6623      	str	r3, [r4, #96]	@ 0x60
    HAL_ADC_ConvCpltCallback(hadc);
 80050d2:	4620      	mov	r0, r4
 80050d4:	f7fc fdc4 	bl	8001c60 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80050d8:	6823      	ldr	r3, [r4, #0]
 80050da:	220c      	movs	r2, #12
 80050dc:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80050de:	f016 0f20 	tst.w	r6, #32
 80050e2:	d002      	beq.n	80050ea <HAL_ADC_IRQHandler+0x116>
 80050e4:	f017 0f20 	tst.w	r7, #32
 80050e8:	d105      	bne.n	80050f6 <HAL_ADC_IRQHandler+0x122>
 80050ea:	f016 0f40 	tst.w	r6, #64	@ 0x40
 80050ee:	d063      	beq.n	80051b8 <HAL_ADC_IRQHandler+0x1e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80050f0:	f017 0f40 	tst.w	r7, #64	@ 0x40
 80050f4:	d060      	beq.n	80051b8 <HAL_ADC_IRQHandler+0x1e4>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80050f6:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80050f8:	f013 0f10 	tst.w	r3, #16
 80050fc:	d103      	bne.n	8005106 <HAL_ADC_IRQHandler+0x132>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80050fe:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8005100:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005104:	65e3      	str	r3, [r4, #92]	@ 0x5c
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8005106:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8005108:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800510a:	f412 7fc0 	tst.w	r2, #384	@ 0x180
 800510e:	d116      	bne.n	800513e <HAL_ADC_IRQHandler+0x16a>
 8005110:	2101      	movs	r1, #1
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005112:	68da      	ldr	r2, [r3, #12]
 8005114:	f412 6f40 	tst.w	r2, #3072	@ 0xc00
 8005118:	d113      	bne.n	8005142 <HAL_ADC_IRQHandler+0x16e>
 800511a:	2001      	movs	r0, #1
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800511c:	4a4a      	ldr	r2, [pc, #296]	@ (8005248 <HAL_ADC_IRQHandler+0x274>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d014      	beq.n	800514c <HAL_ADC_IRQHandler+0x178>
 8005122:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005126:	4293      	cmp	r3, r2
 8005128:	d00d      	beq.n	8005146 <HAL_ADC_IRQHandler+0x172>
 800512a:	461a      	mov	r2, r3
 800512c:	4293      	cmp	r3, r2
 800512e:	d010      	beq.n	8005152 <HAL_ADC_IRQHandler+0x17e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005130:	b17d      	cbz	r5, 8005152 <HAL_ADC_IRQHandler+0x17e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8005132:	2d06      	cmp	r5, #6
 8005134:	d00d      	beq.n	8005152 <HAL_ADC_IRQHandler+0x17e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8005136:	2d07      	cmp	r5, #7
 8005138:	d00b      	beq.n	8005152 <HAL_ADC_IRQHandler+0x17e>
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800513a:	68d2      	ldr	r2, [r2, #12]
 800513c:	e00a      	b.n	8005154 <HAL_ADC_IRQHandler+0x180>
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800513e:	2100      	movs	r1, #0
 8005140:	e7e7      	b.n	8005112 <HAL_ADC_IRQHandler+0x13e>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005142:	2000      	movs	r0, #0
 8005144:	e7ea      	b.n	800511c <HAL_ADC_IRQHandler+0x148>
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005146:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 800514a:	e7ef      	b.n	800512c <HAL_ADC_IRQHandler+0x158>
 800514c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8005150:	e7ec      	b.n	800512c <HAL_ADC_IRQHandler+0x158>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005152:	68da      	ldr	r2, [r3, #12]
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8005154:	b351      	cbz	r1, 80051ac <HAL_ADC_IRQHandler+0x1d8>
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8005156:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 800515a:	d003      	beq.n	8005164 <HAL_ADC_IRQHandler+0x190>
 800515c:	b330      	cbz	r0, 80051ac <HAL_ADC_IRQHandler+0x1d8>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800515e:	f412 5f00 	tst.w	r2, #8192	@ 0x2000
 8005162:	d123      	bne.n	80051ac <HAL_ADC_IRQHandler+0x1d8>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8005164:	6819      	ldr	r1, [r3, #0]
 8005166:	f011 0f40 	tst.w	r1, #64	@ 0x40
 800516a:	d01f      	beq.n	80051ac <HAL_ADC_IRQHandler+0x1d8>
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800516c:	f412 1f00 	tst.w	r2, #2097152	@ 0x200000
 8005170:	d11c      	bne.n	80051ac <HAL_ADC_IRQHandler+0x1d8>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005172:	689a      	ldr	r2, [r3, #8]
 8005174:	f012 0f08 	tst.w	r2, #8
 8005178:	d110      	bne.n	800519c <HAL_ADC_IRQHandler+0x1c8>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800517a:	685a      	ldr	r2, [r3, #4]
 800517c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005180:	605a      	str	r2, [r3, #4]
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8005182:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8005184:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005188:	65e3      	str	r3, [r4, #92]	@ 0x5c
              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800518a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800518c:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8005190:	d10c      	bne.n	80051ac <HAL_ADC_IRQHandler+0x1d8>
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005192:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8005194:	f043 0301 	orr.w	r3, r3, #1
 8005198:	65e3      	str	r3, [r4, #92]	@ 0x5c
 800519a:	e007      	b.n	80051ac <HAL_ADC_IRQHandler+0x1d8>
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800519c:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800519e:	f043 0310 	orr.w	r3, r3, #16
 80051a2:	65e3      	str	r3, [r4, #92]	@ 0x5c
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80051a4:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80051a6:	f043 0301 	orr.w	r3, r3, #1
 80051aa:	6623      	str	r3, [r4, #96]	@ 0x60
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80051ac:	4620      	mov	r0, r4
 80051ae:	f000 fcd7 	bl	8005b60 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80051b2:	6823      	ldr	r3, [r4, #0]
 80051b4:	2260      	movs	r2, #96	@ 0x60
 80051b6:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80051b8:	f016 0f80 	tst.w	r6, #128	@ 0x80
 80051bc:	d002      	beq.n	80051c4 <HAL_ADC_IRQHandler+0x1f0>
 80051be:	f017 0f80 	tst.w	r7, #128	@ 0x80
 80051c2:	d136      	bne.n	8005232 <HAL_ADC_IRQHandler+0x25e>
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80051c4:	f416 7f80 	tst.w	r6, #256	@ 0x100
 80051c8:	d002      	beq.n	80051d0 <HAL_ADC_IRQHandler+0x1fc>
 80051ca:	f417 7f80 	tst.w	r7, #256	@ 0x100
 80051ce:	d141      	bne.n	8005254 <HAL_ADC_IRQHandler+0x280>
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80051d0:	f416 7f00 	tst.w	r6, #512	@ 0x200
 80051d4:	d002      	beq.n	80051dc <HAL_ADC_IRQHandler+0x208>
 80051d6:	f417 7f00 	tst.w	r7, #512	@ 0x200
 80051da:	d147      	bne.n	800526c <HAL_ADC_IRQHandler+0x298>
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80051dc:	f016 0f10 	tst.w	r6, #16
 80051e0:	d020      	beq.n	8005224 <HAL_ADC_IRQHandler+0x250>
 80051e2:	f017 0f10 	tst.w	r7, #16
 80051e6:	d01d      	beq.n	8005224 <HAL_ADC_IRQHandler+0x250>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80051e8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80051ea:	b16b      	cbz	r3, 8005208 <HAL_ADC_IRQHandler+0x234>
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80051ec:	2d00      	cmp	r5, #0
 80051ee:	d04d      	beq.n	800528c <HAL_ADC_IRQHandler+0x2b8>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80051f0:	6823      	ldr	r3, [r4, #0]
 80051f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80051f6:	d047      	beq.n	8005288 <HAL_ADC_IRQHandler+0x2b4>
 80051f8:	4a13      	ldr	r2, [pc, #76]	@ (8005248 <HAL_ADC_IRQHandler+0x274>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d042      	beq.n	8005284 <HAL_ADC_IRQHandler+0x2b0>
 80051fe:	4b13      	ldr	r3, [pc, #76]	@ (800524c <HAL_ADC_IRQHandler+0x278>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	f413 4f60 	tst.w	r3, #57344	@ 0xe000
 8005206:	d00a      	beq.n	800521e <HAL_ADC_IRQHandler+0x24a>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8005208:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800520a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800520e:	65e3      	str	r3, [r4, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005210:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8005212:	f043 0302 	orr.w	r3, r3, #2
 8005216:	6623      	str	r3, [r4, #96]	@ 0x60
      HAL_ADC_ErrorCallback(hadc);
 8005218:	4620      	mov	r0, r4
 800521a:	f7ff fed9 	bl	8004fd0 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800521e:	6823      	ldr	r3, [r4, #0]
 8005220:	2210      	movs	r2, #16
 8005222:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8005224:	f416 6f80 	tst.w	r6, #1024	@ 0x400
 8005228:	d002      	beq.n	8005230 <HAL_ADC_IRQHandler+0x25c>
 800522a:	f417 6f80 	tst.w	r7, #1024	@ 0x400
 800522e:	d133      	bne.n	8005298 <HAL_ADC_IRQHandler+0x2c4>
}
 8005230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005232:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8005234:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005238:	65e3      	str	r3, [r4, #92]	@ 0x5c
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800523a:	4620      	mov	r0, r4
 800523c:	f7ff fec7 	bl	8004fce <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8005240:	6823      	ldr	r3, [r4, #0]
 8005242:	2280      	movs	r2, #128	@ 0x80
 8005244:	601a      	str	r2, [r3, #0]
 8005246:	e7bd      	b.n	80051c4 <HAL_ADC_IRQHandler+0x1f0>
 8005248:	50000100 	.word	0x50000100
 800524c:	50000700 	.word	0x50000700
 8005250:	50000300 	.word	0x50000300
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8005254:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8005256:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800525a:	65e3      	str	r3, [r4, #92]	@ 0x5c
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800525c:	4620      	mov	r0, r4
 800525e:	f000 fc81 	bl	8005b64 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8005262:	6823      	ldr	r3, [r4, #0]
 8005264:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005268:	601a      	str	r2, [r3, #0]
 800526a:	e7b1      	b.n	80051d0 <HAL_ADC_IRQHandler+0x1fc>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800526c:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800526e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005272:	65e3      	str	r3, [r4, #92]	@ 0x5c
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8005274:	4620      	mov	r0, r4
 8005276:	f000 fc76 	bl	8005b66 <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800527a:	6823      	ldr	r3, [r4, #0]
 800527c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005280:	601a      	str	r2, [r3, #0]
 8005282:	e7ab      	b.n	80051dc <HAL_ADC_IRQHandler+0x208>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8005284:	4b0c      	ldr	r3, [pc, #48]	@ (80052b8 <HAL_ADC_IRQHandler+0x2e4>)
 8005286:	e7bb      	b.n	8005200 <HAL_ADC_IRQHandler+0x22c>
 8005288:	4b0b      	ldr	r3, [pc, #44]	@ (80052b8 <HAL_ADC_IRQHandler+0x2e4>)
 800528a:	e7b9      	b.n	8005200 <HAL_ADC_IRQHandler+0x22c>
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800528c:	6823      	ldr	r3, [r4, #0]
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	f013 0f01 	tst.w	r3, #1
 8005294:	d0c3      	beq.n	800521e <HAL_ADC_IRQHandler+0x24a>
 8005296:	e7b7      	b.n	8005208 <HAL_ADC_IRQHandler+0x234>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8005298:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800529a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800529e:	65e3      	str	r3, [r4, #92]	@ 0x5c
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80052a0:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80052a2:	f043 0308 	orr.w	r3, r3, #8
 80052a6:	6623      	str	r3, [r4, #96]	@ 0x60
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80052a8:	6823      	ldr	r3, [r4, #0]
 80052aa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80052ae:	601a      	str	r2, [r3, #0]
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80052b0:	4620      	mov	r0, r4
 80052b2:	f000 fc56 	bl	8005b62 <HAL_ADCEx_InjectedQueueOverflowCallback>
}
 80052b6:	e7bb      	b.n	8005230 <HAL_ADC_IRQHandler+0x25c>
 80052b8:	50000300 	.word	0x50000300

080052bc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80052bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052be:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80052c0:	2300      	movs	r3, #0
 80052c2:	9301      	str	r3, [sp, #4]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80052c4:	f890 3058 	ldrb.w	r3, [r0, #88]	@ 0x58
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	f000 8242 	beq.w	8005752 <HAL_ADC_ConfigChannel+0x496>
 80052ce:	4604      	mov	r4, r0
 80052d0:	460d      	mov	r5, r1
 80052d2:	2301      	movs	r3, #1
 80052d4:	f880 3058 	strb.w	r3, [r0, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80052d8:	6800      	ldr	r0, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80052da:	6883      	ldr	r3, [r0, #8]
 80052dc:	f013 0f04 	tst.w	r3, #4
 80052e0:	d009      	beq.n	80052f6 <HAL_ADC_ConfigChannel+0x3a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80052e2:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80052e4:	f043 0320 	orr.w	r3, r3, #32
 80052e8:	65e3      	str	r3, [r4, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80052ea:	2001      	movs	r0, #1
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80052ec:	2300      	movs	r3, #0
 80052ee:	f884 3058 	strb.w	r3, [r4, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
}
 80052f2:	b003      	add	sp, #12
 80052f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80052f6:	680a      	ldr	r2, [r1, #0]
 80052f8:	6849      	ldr	r1, [r1, #4]
 80052fa:	f7ff fce9 	bl	8004cd0 <LL_ADC_REG_SetSequencerRanks>
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80052fe:	6820      	ldr	r0, [r4, #0]
 8005300:	6883      	ldr	r3, [r0, #8]
 8005302:	f013 0304 	ands.w	r3, r3, #4
 8005306:	d000      	beq.n	800530a <HAL_ADC_ConfigChannel+0x4e>
 8005308:	2301      	movs	r3, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800530a:	6886      	ldr	r6, [r0, #8]
 800530c:	f016 0608 	ands.w	r6, r6, #8
 8005310:	d000      	beq.n	8005314 <HAL_ADC_ConfigChannel+0x58>
 8005312:	2601      	movs	r6, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005314:	2b00      	cmp	r3, #0
 8005316:	d13e      	bne.n	8005396 <HAL_ADC_ConfigChannel+0xda>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005318:	2e00      	cmp	r6, #0
 800531a:	d13c      	bne.n	8005396 <HAL_ADC_ConfigChannel+0xda>
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800531c:	68aa      	ldr	r2, [r5, #8]
 800531e:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8005322:	d078      	beq.n	8005416 <HAL_ADC_ConfigChannel+0x15a>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8005324:	6829      	ldr	r1, [r5, #0]
 8005326:	f7ff fceb 	bl	8004d00 <LL_ADC_SetChannelSamplingTime>
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800532a:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800532c:	6953      	ldr	r3, [r2, #20]
 800532e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005332:	6153      	str	r3, [r2, #20]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8005334:	6969      	ldr	r1, [r5, #20]
 8005336:	6822      	ldr	r2, [r4, #0]
 8005338:	68d3      	ldr	r3, [r2, #12]
 800533a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800533e:	005b      	lsls	r3, r3, #1
 8005340:	4099      	lsls	r1, r3
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005342:	6928      	ldr	r0, [r5, #16]
 8005344:	2804      	cmp	r0, #4
 8005346:	d073      	beq.n	8005430 <HAL_ADC_ConfigChannel+0x174>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005348:	3260      	adds	r2, #96	@ 0x60
  MODIFY_REG(*preg,
 800534a:	f852 7020 	ldr.w	r7, [r2, r0, lsl #2]
 800534e:	4bab      	ldr	r3, [pc, #684]	@ (80055fc <HAL_ADC_ConfigChannel+0x340>)
 8005350:	403b      	ands	r3, r7
 8005352:	682f      	ldr	r7, [r5, #0]
 8005354:	f007 4cf8 	and.w	ip, r7, #2080374784	@ 0x7c000000
 8005358:	ea41 010c 	orr.w	r1, r1, ip
 800535c:	430b      	orrs	r3, r1
 800535e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005362:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8005366:	6823      	ldr	r3, [r4, #0]
 8005368:	6928      	ldr	r0, [r5, #16]
 800536a:	69aa      	ldr	r2, [r5, #24]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800536c:	3360      	adds	r3, #96	@ 0x60
  MODIFY_REG(*preg,
 800536e:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
 8005372:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 8005376:	430a      	orrs	r2, r1
 8005378:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800537c:	6823      	ldr	r3, [r4, #0]
 800537e:	6929      	ldr	r1, [r5, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8005380:	7f2a      	ldrb	r2, [r5, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8005382:	2a01      	cmp	r2, #1
 8005384:	d051      	beq.n	800542a <HAL_ADC_ConfigChannel+0x16e>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005386:	3360      	adds	r3, #96	@ 0x60
  MODIFY_REG(*preg,
 8005388:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 800538c:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 8005390:	4332      	orrs	r2, r6
 8005392:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005396:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005398:	6893      	ldr	r3, [r2, #8]
 800539a:	f013 0f01 	tst.w	r3, #1
 800539e:	d116      	bne.n	80053ce <HAL_ADC_ConfigChannel+0x112>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80053a0:	682b      	ldr	r3, [r5, #0]
 80053a2:	68e8      	ldr	r0, [r5, #12]
  MODIFY_REG(ADCx->DIFSEL,
 80053a4:	f8d2 10b0 	ldr.w	r1, [r2, #176]	@ 0xb0
 80053a8:	f3c3 0612 	ubfx	r6, r3, #0, #19
 80053ac:	ea21 0106 	bic.w	r1, r1, r6
 80053b0:	f000 0618 	and.w	r6, r0, #24
 80053b4:	4892      	ldr	r0, [pc, #584]	@ (8005600 <HAL_ADC_ConfigChannel+0x344>)
 80053b6:	40f0      	lsrs	r0, r6
 80053b8:	4003      	ands	r3, r0
 80053ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053be:	430b      	orrs	r3, r1
 80053c0:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80053c4:	68ea      	ldr	r2, [r5, #12]
 80053c6:	4b8f      	ldr	r3, [pc, #572]	@ (8005604 <HAL_ADC_ConfigChannel+0x348>)
 80053c8:	429a      	cmp	r2, r3
 80053ca:	f000 8099 	beq.w	8005500 <HAL_ADC_ConfigChannel+0x244>
    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80053ce:	682b      	ldr	r3, [r5, #0]
 80053d0:	4a8d      	ldr	r2, [pc, #564]	@ (8005608 <HAL_ADC_ConfigChannel+0x34c>)
 80053d2:	4213      	tst	r3, r2
 80053d4:	f000 81b7 	beq.w	8005746 <HAL_ADC_ConfigChannel+0x48a>
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80053d8:	6822      	ldr	r2, [r4, #0]
 80053da:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 80053de:	f000 8150 	beq.w	8005682 <HAL_ADC_ConfigChannel+0x3c6>
 80053e2:	498a      	ldr	r1, [pc, #552]	@ (800560c <HAL_ADC_ConfigChannel+0x350>)
 80053e4:	428a      	cmp	r2, r1
 80053e6:	f000 8149 	beq.w	800567c <HAL_ADC_ConfigChannel+0x3c0>
 80053ea:	4989      	ldr	r1, [pc, #548]	@ (8005610 <HAL_ADC_ConfigChannel+0x354>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80053ec:	6889      	ldr	r1, [r1, #8]
 80053ee:	f001 70e0 	and.w	r0, r1, #29360128	@ 0x1c00000
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80053f2:	4d88      	ldr	r5, [pc, #544]	@ (8005614 <HAL_ADC_ConfigChannel+0x358>)
 80053f4:	42ab      	cmp	r3, r5
 80053f6:	f000 8146 	beq.w	8005686 <HAL_ADC_ConfigChannel+0x3ca>
 80053fa:	4d87      	ldr	r5, [pc, #540]	@ (8005618 <HAL_ADC_ConfigChannel+0x35c>)
 80053fc:	42ab      	cmp	r3, r5
 80053fe:	f000 8142 	beq.w	8005686 <HAL_ADC_ConfigChannel+0x3ca>
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8005402:	4d86      	ldr	r5, [pc, #536]	@ (800561c <HAL_ADC_ConfigChannel+0x360>)
 8005404:	42ab      	cmp	r3, r5
 8005406:	f000 8171 	beq.w	80056ec <HAL_ADC_ConfigChannel+0x430>
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800540a:	4d85      	ldr	r5, [pc, #532]	@ (8005620 <HAL_ADC_ConfigChannel+0x364>)
 800540c:	42ab      	cmp	r3, r5
 800540e:	f000 8185 	beq.w	800571c <HAL_ADC_ConfigChannel+0x460>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005412:	2000      	movs	r0, #0
 8005414:	e76a      	b.n	80052ec <HAL_ADC_ConfigChannel+0x30>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005416:	2200      	movs	r2, #0
 8005418:	6829      	ldr	r1, [r5, #0]
 800541a:	f7ff fc71 	bl	8004d00 <LL_ADC_SetChannelSamplingTime>
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800541e:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005420:	6953      	ldr	r3, [r2, #20]
 8005422:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005426:	6153      	str	r3, [r2, #20]
}
 8005428:	e784      	b.n	8005334 <HAL_ADC_ConfigChannel+0x78>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800542a:	f04f 7600 	mov.w	r6, #33554432	@ 0x2000000
 800542e:	e7aa      	b.n	8005386 <HAL_ADC_ConfigChannel+0xca>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005430:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 8005432:	6e11      	ldr	r1, [r2, #96]	@ 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005434:	f3c1 6184 	ubfx	r1, r1, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005438:	682b      	ldr	r3, [r5, #0]
 800543a:	f3c3 0012 	ubfx	r0, r3, #0, #19
 800543e:	bb80      	cbnz	r0, 80054a2 <HAL_ADC_ConfigChannel+0x1e6>
 8005440:	f3c3 6384 	ubfx	r3, r3, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005444:	4299      	cmp	r1, r3
 8005446:	d034      	beq.n	80054b2 <HAL_ADC_ConfigChannel+0x1f6>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005448:	6821      	ldr	r1, [r4, #0]
 800544a:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 800544c:	6e4a      	ldr	r2, [r1, #100]	@ 0x64
 800544e:	f3c2 6284 	ubfx	r2, r2, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005452:	682b      	ldr	r3, [r5, #0]
 8005454:	f3c3 0012 	ubfx	r0, r3, #0, #19
 8005458:	bb80      	cbnz	r0, 80054bc <HAL_ADC_ConfigChannel+0x200>
 800545a:	f3c3 6384 	ubfx	r3, r3, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800545e:	429a      	cmp	r2, r3
 8005460:	d034      	beq.n	80054cc <HAL_ADC_ConfigChannel+0x210>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005462:	6821      	ldr	r1, [r4, #0]
 8005464:	6e8b      	ldr	r3, [r1, #104]	@ 0x68
 8005466:	6e8a      	ldr	r2, [r1, #104]	@ 0x68
 8005468:	f3c2 6284 	ubfx	r2, r2, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800546c:	682b      	ldr	r3, [r5, #0]
 800546e:	f3c3 0012 	ubfx	r0, r3, #0, #19
 8005472:	bb80      	cbnz	r0, 80054d6 <HAL_ADC_ConfigChannel+0x21a>
 8005474:	f3c3 6384 	ubfx	r3, r3, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005478:	429a      	cmp	r2, r3
 800547a:	d034      	beq.n	80054e6 <HAL_ADC_ConfigChannel+0x22a>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800547c:	6821      	ldr	r1, [r4, #0]
 800547e:	6ecb      	ldr	r3, [r1, #108]	@ 0x6c
 8005480:	6eca      	ldr	r2, [r1, #108]	@ 0x6c
 8005482:	f3c2 6284 	ubfx	r2, r2, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005486:	682b      	ldr	r3, [r5, #0]
 8005488:	f3c3 0012 	ubfx	r0, r3, #0, #19
 800548c:	bb80      	cbnz	r0, 80054f0 <HAL_ADC_ConfigChannel+0x234>
 800548e:	f3c3 6384 	ubfx	r3, r3, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005492:	429a      	cmp	r2, r3
 8005494:	f47f af7f 	bne.w	8005396 <HAL_ADC_ConfigChannel+0xda>
  MODIFY_REG(*preg,
 8005498:	6ecb      	ldr	r3, [r1, #108]	@ 0x6c
 800549a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800549e:	66cb      	str	r3, [r1, #108]	@ 0x6c
}
 80054a0:	e779      	b.n	8005396 <HAL_ADC_ConfigChannel+0xda>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054a2:	fa93 f3a3 	rbit	r3, r3
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80054a6:	b113      	cbz	r3, 80054ae <HAL_ADC_ConfigChannel+0x1f2>
  {
    return 32U;
  }
  return __builtin_clz(value);
 80054a8:	fab3 f383 	clz	r3, r3
 80054ac:	e7ca      	b.n	8005444 <HAL_ADC_ConfigChannel+0x188>
    return 32U;
 80054ae:	2320      	movs	r3, #32
 80054b0:	e7c8      	b.n	8005444 <HAL_ADC_ConfigChannel+0x188>
  MODIFY_REG(*preg,
 80054b2:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 80054b4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80054b8:	6613      	str	r3, [r2, #96]	@ 0x60
}
 80054ba:	e7c5      	b.n	8005448 <HAL_ADC_ConfigChannel+0x18c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054bc:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 80054c0:	b113      	cbz	r3, 80054c8 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 80054c2:	fab3 f383 	clz	r3, r3
 80054c6:	e7ca      	b.n	800545e <HAL_ADC_ConfigChannel+0x1a2>
    return 32U;
 80054c8:	2320      	movs	r3, #32
 80054ca:	e7c8      	b.n	800545e <HAL_ADC_ConfigChannel+0x1a2>
  MODIFY_REG(*preg,
 80054cc:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 80054ce:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80054d2:	664b      	str	r3, [r1, #100]	@ 0x64
}
 80054d4:	e7c5      	b.n	8005462 <HAL_ADC_ConfigChannel+0x1a6>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054d6:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 80054da:	b113      	cbz	r3, 80054e2 <HAL_ADC_ConfigChannel+0x226>
  return __builtin_clz(value);
 80054dc:	fab3 f383 	clz	r3, r3
 80054e0:	e7ca      	b.n	8005478 <HAL_ADC_ConfigChannel+0x1bc>
    return 32U;
 80054e2:	2320      	movs	r3, #32
 80054e4:	e7c8      	b.n	8005478 <HAL_ADC_ConfigChannel+0x1bc>
  MODIFY_REG(*preg,
 80054e6:	6e8b      	ldr	r3, [r1, #104]	@ 0x68
 80054e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80054ec:	668b      	str	r3, [r1, #104]	@ 0x68
}
 80054ee:	e7c5      	b.n	800547c <HAL_ADC_ConfigChannel+0x1c0>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054f0:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 80054f4:	b113      	cbz	r3, 80054fc <HAL_ADC_ConfigChannel+0x240>
  return __builtin_clz(value);
 80054f6:	fab3 f383 	clz	r3, r3
 80054fa:	e7ca      	b.n	8005492 <HAL_ADC_ConfigChannel+0x1d6>
    return 32U;
 80054fc:	2320      	movs	r3, #32
 80054fe:	e7c8      	b.n	8005492 <HAL_ADC_ConfigChannel+0x1d6>
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005500:	6820      	ldr	r0, [r4, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005502:	682b      	ldr	r3, [r5, #0]
 8005504:	f3c3 0612 	ubfx	r6, r3, #0, #19
 8005508:	bb26      	cbnz	r6, 8005554 <HAL_ADC_ConfigChannel+0x298>
 800550a:	0e9a      	lsrs	r2, r3, #26
 800550c:	3201      	adds	r2, #1
 800550e:	f002 021f 	and.w	r2, r2, #31
 8005512:	2a09      	cmp	r2, #9
 8005514:	bf8c      	ite	hi
 8005516:	2200      	movhi	r2, #0
 8005518:	2201      	movls	r2, #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800551a:	2a00      	cmp	r2, #0
 800551c:	d052      	beq.n	80055c4 <HAL_ADC_ConfigChannel+0x308>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800551e:	bb46      	cbnz	r6, 8005572 <HAL_ADC_ConfigChannel+0x2b6>
 8005520:	0e99      	lsrs	r1, r3, #26
 8005522:	3101      	adds	r1, #1
 8005524:	0689      	lsls	r1, r1, #26
 8005526:	f001 41f8 	and.w	r1, r1, #2080374784	@ 0x7c000000
 800552a:	bb76      	cbnz	r6, 800558a <HAL_ADC_ConfigChannel+0x2ce>
 800552c:	0e9f      	lsrs	r7, r3, #26
 800552e:	3701      	adds	r7, #1
 8005530:	f007 071f 	and.w	r7, r7, #31
 8005534:	2201      	movs	r2, #1
 8005536:	40ba      	lsls	r2, r7
 8005538:	4311      	orrs	r1, r2
 800553a:	bbae      	cbnz	r6, 80055a8 <HAL_ADC_ConfigChannel+0x2ec>
 800553c:	0e9b      	lsrs	r3, r3, #26
 800553e:	3301      	adds	r3, #1
 8005540:	f003 031f 	and.w	r3, r3, #31
 8005544:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005548:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800554a:	4319      	orrs	r1, r3
 800554c:	68aa      	ldr	r2, [r5, #8]
 800554e:	f7ff fbd7 	bl	8004d00 <LL_ADC_SetChannelSamplingTime>
 8005552:	e73c      	b.n	80053ce <HAL_ADC_ConfigChannel+0x112>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005554:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 8005558:	b14a      	cbz	r2, 800556e <HAL_ADC_ConfigChannel+0x2b2>
  return __builtin_clz(value);
 800555a:	fab2 f282 	clz	r2, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800555e:	3201      	adds	r2, #1
 8005560:	f002 021f 	and.w	r2, r2, #31
 8005564:	2a09      	cmp	r2, #9
 8005566:	bf8c      	ite	hi
 8005568:	2200      	movhi	r2, #0
 800556a:	2201      	movls	r2, #1
 800556c:	e7d5      	b.n	800551a <HAL_ADC_ConfigChannel+0x25e>
    return 32U;
 800556e:	2220      	movs	r2, #32
 8005570:	e7f5      	b.n	800555e <HAL_ADC_ConfigChannel+0x2a2>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005572:	fa93 f1a3 	rbit	r1, r3
  if (value == 0U)
 8005576:	b131      	cbz	r1, 8005586 <HAL_ADC_ConfigChannel+0x2ca>
  return __builtin_clz(value);
 8005578:	fab1 f181 	clz	r1, r1
 800557c:	3101      	adds	r1, #1
 800557e:	0689      	lsls	r1, r1, #26
 8005580:	f001 41f8 	and.w	r1, r1, #2080374784	@ 0x7c000000
 8005584:	e7d1      	b.n	800552a <HAL_ADC_ConfigChannel+0x26e>
    return 32U;
 8005586:	2120      	movs	r1, #32
 8005588:	e7f8      	b.n	800557c <HAL_ADC_ConfigChannel+0x2c0>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800558a:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 800558e:	b14a      	cbz	r2, 80055a4 <HAL_ADC_ConfigChannel+0x2e8>
  return __builtin_clz(value);
 8005590:	fab2 f282 	clz	r2, r2
 8005594:	3201      	adds	r2, #1
 8005596:	f002 021f 	and.w	r2, r2, #31
 800559a:	f04f 0c01 	mov.w	ip, #1
 800559e:	fa0c f202 	lsl.w	r2, ip, r2
 80055a2:	e7c9      	b.n	8005538 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 80055a4:	2220      	movs	r2, #32
 80055a6:	e7f5      	b.n	8005594 <HAL_ADC_ConfigChannel+0x2d8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055a8:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 80055ac:	b143      	cbz	r3, 80055c0 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 80055ae:	fab3 f383 	clz	r3, r3
 80055b2:	3301      	adds	r3, #1
 80055b4:	f003 031f 	and.w	r3, r3, #31
 80055b8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80055bc:	051b      	lsls	r3, r3, #20
 80055be:	e7c4      	b.n	800554a <HAL_ADC_ConfigChannel+0x28e>
    return 32U;
 80055c0:	2320      	movs	r3, #32
 80055c2:	e7f6      	b.n	80055b2 <HAL_ADC_ConfigChannel+0x2f6>
 80055c4:	bb76      	cbnz	r6, 8005624 <HAL_ADC_ConfigChannel+0x368>
 80055c6:	0e99      	lsrs	r1, r3, #26
 80055c8:	3101      	adds	r1, #1
 80055ca:	0689      	lsls	r1, r1, #26
 80055cc:	f001 41f8 	and.w	r1, r1, #2080374784	@ 0x7c000000
 80055d0:	bba6      	cbnz	r6, 800563c <HAL_ADC_ConfigChannel+0x380>
 80055d2:	0e9f      	lsrs	r7, r3, #26
 80055d4:	3701      	adds	r7, #1
 80055d6:	f007 071f 	and.w	r7, r7, #31
 80055da:	2201      	movs	r2, #1
 80055dc:	40ba      	lsls	r2, r7
 80055de:	4311      	orrs	r1, r2
 80055e0:	bbde      	cbnz	r6, 800565a <HAL_ADC_ConfigChannel+0x39e>
 80055e2:	0e9b      	lsrs	r3, r3, #26
 80055e4:	3301      	adds	r3, #1
 80055e6:	f003 031f 	and.w	r3, r3, #31
 80055ea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80055ee:	3b1e      	subs	r3, #30
 80055f0:	051b      	lsls	r3, r3, #20
 80055f2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80055f6:	4319      	orrs	r1, r3
 80055f8:	e7a8      	b.n	800554c <HAL_ADC_ConfigChannel+0x290>
 80055fa:	bf00      	nop
 80055fc:	03fff000 	.word	0x03fff000
 8005600:	0007ffff 	.word	0x0007ffff
 8005604:	407f0000 	.word	0x407f0000
 8005608:	80080000 	.word	0x80080000
 800560c:	50000100 	.word	0x50000100
 8005610:	50000700 	.word	0x50000700
 8005614:	c3210000 	.word	0xc3210000
 8005618:	90c00010 	.word	0x90c00010
 800561c:	c7520000 	.word	0xc7520000
 8005620:	cb840000 	.word	0xcb840000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005624:	fa93 f1a3 	rbit	r1, r3
  if (value == 0U)
 8005628:	b131      	cbz	r1, 8005638 <HAL_ADC_ConfigChannel+0x37c>
  return __builtin_clz(value);
 800562a:	fab1 f181 	clz	r1, r1
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800562e:	3101      	adds	r1, #1
 8005630:	0689      	lsls	r1, r1, #26
 8005632:	f001 41f8 	and.w	r1, r1, #2080374784	@ 0x7c000000
 8005636:	e7cb      	b.n	80055d0 <HAL_ADC_ConfigChannel+0x314>
    return 32U;
 8005638:	2120      	movs	r1, #32
 800563a:	e7f8      	b.n	800562e <HAL_ADC_ConfigChannel+0x372>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800563c:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 8005640:	b14a      	cbz	r2, 8005656 <HAL_ADC_ConfigChannel+0x39a>
  return __builtin_clz(value);
 8005642:	fab2 f282 	clz	r2, r2
 8005646:	3201      	adds	r2, #1
 8005648:	f002 021f 	and.w	r2, r2, #31
 800564c:	f04f 0c01 	mov.w	ip, #1
 8005650:	fa0c f202 	lsl.w	r2, ip, r2
 8005654:	e7c3      	b.n	80055de <HAL_ADC_ConfigChannel+0x322>
    return 32U;
 8005656:	2220      	movs	r2, #32
 8005658:	e7f5      	b.n	8005646 <HAL_ADC_ConfigChannel+0x38a>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800565a:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 800565e:	b15b      	cbz	r3, 8005678 <HAL_ADC_ConfigChannel+0x3bc>
  return __builtin_clz(value);
 8005660:	fab3 f383 	clz	r3, r3
 8005664:	3301      	adds	r3, #1
 8005666:	f003 031f 	and.w	r3, r3, #31
 800566a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800566e:	3b1e      	subs	r3, #30
 8005670:	051b      	lsls	r3, r3, #20
 8005672:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005676:	e7be      	b.n	80055f6 <HAL_ADC_ConfigChannel+0x33a>
    return 32U;
 8005678:	2320      	movs	r3, #32
 800567a:	e7f3      	b.n	8005664 <HAL_ADC_ConfigChannel+0x3a8>
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800567c:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 8005680:	e6b4      	b.n	80053ec <HAL_ADC_ConfigChannel+0x130>
 8005682:	4935      	ldr	r1, [pc, #212]	@ (8005758 <HAL_ADC_ConfigChannel+0x49c>)
 8005684:	e6b2      	b.n	80053ec <HAL_ADC_ConfigChannel+0x130>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005686:	f411 0f00 	tst.w	r1, #8388608	@ 0x800000
 800568a:	f47f aeba 	bne.w	8005402 <HAL_ADC_ConfigChannel+0x146>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800568e:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 8005692:	d004      	beq.n	800569e <HAL_ADC_ConfigChannel+0x3e2>
 8005694:	4b31      	ldr	r3, [pc, #196]	@ (800575c <HAL_ADC_ConfigChannel+0x4a0>)
 8005696:	429a      	cmp	r2, r3
 8005698:	d001      	beq.n	800569e <HAL_ADC_ConfigChannel+0x3e2>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800569a:	2000      	movs	r0, #0
 800569c:	e626      	b.n	80052ec <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800569e:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 80056a2:	d019      	beq.n	80056d8 <HAL_ADC_ConfigChannel+0x41c>
 80056a4:	4b2e      	ldr	r3, [pc, #184]	@ (8005760 <HAL_ADC_ConfigChannel+0x4a4>)
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d014      	beq.n	80056d4 <HAL_ADC_ConfigChannel+0x418>
 80056aa:	4a2e      	ldr	r2, [pc, #184]	@ (8005764 <HAL_ADC_ConfigChannel+0x4a8>)
 80056ac:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80056b0:	6893      	ldr	r3, [r2, #8]
 80056b2:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 80056b6:	4318      	orrs	r0, r3
 80056b8:	6090      	str	r0, [r2, #8]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80056ba:	4b2b      	ldr	r3, [pc, #172]	@ (8005768 <HAL_ADC_ConfigChannel+0x4ac>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	099b      	lsrs	r3, r3, #6
 80056c0:	4a2a      	ldr	r2, [pc, #168]	@ (800576c <HAL_ADC_ConfigChannel+0x4b0>)
 80056c2:	fba2 2303 	umull	r2, r3, r2, r3
 80056c6:	099b      	lsrs	r3, r3, #6
 80056c8:	3301      	adds	r3, #1
 80056ca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 80056d2:	e006      	b.n	80056e2 <HAL_ADC_ConfigChannel+0x426>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80056d4:	4a20      	ldr	r2, [pc, #128]	@ (8005758 <HAL_ADC_ConfigChannel+0x49c>)
 80056d6:	e7e9      	b.n	80056ac <HAL_ADC_ConfigChannel+0x3f0>
 80056d8:	4a1f      	ldr	r2, [pc, #124]	@ (8005758 <HAL_ADC_ConfigChannel+0x49c>)
 80056da:	e7e7      	b.n	80056ac <HAL_ADC_ConfigChannel+0x3f0>
            wait_loop_index--;
 80056dc:	9b01      	ldr	r3, [sp, #4]
 80056de:	3b01      	subs	r3, #1
 80056e0:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 80056e2:	9b01      	ldr	r3, [sp, #4]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d1f9      	bne.n	80056dc <HAL_ADC_ConfigChannel+0x420>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80056e8:	2000      	movs	r0, #0
 80056ea:	e5ff      	b.n	80052ec <HAL_ADC_ConfigChannel+0x30>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80056ec:	f011 7f80 	tst.w	r1, #16777216	@ 0x1000000
 80056f0:	f47f ae8b 	bne.w	800540a <HAL_ADC_ConfigChannel+0x14e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80056f4:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 80056f8:	d00e      	beq.n	8005718 <HAL_ADC_ConfigChannel+0x45c>
 80056fa:	4b19      	ldr	r3, [pc, #100]	@ (8005760 <HAL_ADC_ConfigChannel+0x4a4>)
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d009      	beq.n	8005714 <HAL_ADC_ConfigChannel+0x458>
 8005700:	4a18      	ldr	r2, [pc, #96]	@ (8005764 <HAL_ADC_ConfigChannel+0x4a8>)
 8005702:	f040 7080 	orr.w	r0, r0, #16777216	@ 0x1000000
 8005706:	6893      	ldr	r3, [r2, #8]
 8005708:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 800570c:	4318      	orrs	r0, r3
 800570e:	6090      	str	r0, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005710:	2000      	movs	r0, #0
}
 8005712:	e5eb      	b.n	80052ec <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005714:	4a10      	ldr	r2, [pc, #64]	@ (8005758 <HAL_ADC_ConfigChannel+0x49c>)
 8005716:	e7f4      	b.n	8005702 <HAL_ADC_ConfigChannel+0x446>
 8005718:	4a0f      	ldr	r2, [pc, #60]	@ (8005758 <HAL_ADC_ConfigChannel+0x49c>)
 800571a:	e7f2      	b.n	8005702 <HAL_ADC_ConfigChannel+0x446>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800571c:	f411 0f80 	tst.w	r1, #4194304	@ 0x400000
 8005720:	d113      	bne.n	800574a <HAL_ADC_ConfigChannel+0x48e>
        if (ADC_VREFINT_INSTANCE(hadc))
 8005722:	4b0f      	ldr	r3, [pc, #60]	@ (8005760 <HAL_ADC_ConfigChannel+0x4a4>)
 8005724:	429a      	cmp	r2, r3
 8005726:	d012      	beq.n	800574e <HAL_ADC_ConfigChannel+0x492>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005728:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 800572c:	d009      	beq.n	8005742 <HAL_ADC_ConfigChannel+0x486>
 800572e:	490d      	ldr	r1, [pc, #52]	@ (8005764 <HAL_ADC_ConfigChannel+0x4a8>)
 8005730:	f440 0380 	orr.w	r3, r0, #4194304	@ 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005734:	688a      	ldr	r2, [r1, #8]
 8005736:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 800573a:	4313      	orrs	r3, r2
 800573c:	608b      	str	r3, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800573e:	2000      	movs	r0, #0
}
 8005740:	e5d4      	b.n	80052ec <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005742:	4905      	ldr	r1, [pc, #20]	@ (8005758 <HAL_ADC_ConfigChannel+0x49c>)
 8005744:	e7f4      	b.n	8005730 <HAL_ADC_ConfigChannel+0x474>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005746:	2000      	movs	r0, #0
 8005748:	e5d0      	b.n	80052ec <HAL_ADC_ConfigChannel+0x30>
 800574a:	2000      	movs	r0, #0
 800574c:	e5ce      	b.n	80052ec <HAL_ADC_ConfigChannel+0x30>
 800574e:	2000      	movs	r0, #0
 8005750:	e5cc      	b.n	80052ec <HAL_ADC_ConfigChannel+0x30>
  __HAL_LOCK(hadc);
 8005752:	2002      	movs	r0, #2
 8005754:	e5cd      	b.n	80052f2 <HAL_ADC_ConfigChannel+0x36>
 8005756:	bf00      	nop
 8005758:	50000300 	.word	0x50000300
 800575c:	50000600 	.word	0x50000600
 8005760:	50000100 	.word	0x50000100
 8005764:	50000700 	.word	0x50000700
 8005768:	20000050 	.word	0x20000050
 800576c:	053e2d63 	.word	0x053e2d63

08005770 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005770:	b530      	push	{r4, r5, lr}
 8005772:	b083      	sub	sp, #12
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005774:	2300      	movs	r3, #0
 8005776:	9301      	str	r3, [sp, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005778:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800577a:	689a      	ldr	r2, [r3, #8]
 800577c:	f012 0f01 	tst.w	r2, #1
 8005780:	d163      	bne.n	800584a <ADC_Enable+0xda>
 8005782:	4604      	mov	r4, r0
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005784:	6899      	ldr	r1, [r3, #8]
 8005786:	4a32      	ldr	r2, [pc, #200]	@ (8005850 <ADC_Enable+0xe0>)
 8005788:	4211      	tst	r1, r2
 800578a:	d120      	bne.n	80057ce <ADC_Enable+0x5e>
  MODIFY_REG(ADCx->CR,
 800578c:	689a      	ldr	r2, [r3, #8]
 800578e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8005792:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8005796:	f042 0201 	orr.w	r2, r2, #1
 800579a:	609a      	str	r2, [r3, #8]
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800579c:	6803      	ldr	r3, [r0, #0]
 800579e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80057a2:	d020      	beq.n	80057e6 <ADC_Enable+0x76>
 80057a4:	4a2b      	ldr	r2, [pc, #172]	@ (8005854 <ADC_Enable+0xe4>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d01b      	beq.n	80057e2 <ADC_Enable+0x72>
 80057aa:	4b2b      	ldr	r3, [pc, #172]	@ (8005858 <ADC_Enable+0xe8>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 80057b2:	d020      	beq.n	80057f6 <ADC_Enable+0x86>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80057b4:	4b29      	ldr	r3, [pc, #164]	@ (800585c <ADC_Enable+0xec>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	099b      	lsrs	r3, r3, #6
 80057ba:	4a29      	ldr	r2, [pc, #164]	@ (8005860 <ADC_Enable+0xf0>)
 80057bc:	fba2 2303 	umull	r2, r3, r2, r3
 80057c0:	099b      	lsrs	r3, r3, #6
 80057c2:	3301      	adds	r3, #1
 80057c4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 80057cc:	e010      	b.n	80057f0 <ADC_Enable+0x80>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80057ce:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 80057d0:	f043 0310 	orr.w	r3, r3, #16
 80057d4:	65c3      	str	r3, [r0, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80057d6:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 80057d8:	f043 0301 	orr.w	r3, r3, #1
 80057dc:	6603      	str	r3, [r0, #96]	@ 0x60
      return HAL_ERROR;
 80057de:	2001      	movs	r0, #1
 80057e0:	e034      	b.n	800584c <ADC_Enable+0xdc>
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80057e2:	4b20      	ldr	r3, [pc, #128]	@ (8005864 <ADC_Enable+0xf4>)
 80057e4:	e7e2      	b.n	80057ac <ADC_Enable+0x3c>
 80057e6:	4b1f      	ldr	r3, [pc, #124]	@ (8005864 <ADC_Enable+0xf4>)
 80057e8:	e7e0      	b.n	80057ac <ADC_Enable+0x3c>
      {
        wait_loop_index--;
 80057ea:	9b01      	ldr	r3, [sp, #4]
 80057ec:	3b01      	subs	r3, #1
 80057ee:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 80057f0:	9b01      	ldr	r3, [sp, #4]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d1f9      	bne.n	80057ea <ADC_Enable+0x7a>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80057f6:	f7ff fa51 	bl	8004c9c <HAL_GetTick>
 80057fa:	4605      	mov	r5, r0

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80057fc:	6823      	ldr	r3, [r4, #0]
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	f012 0f01 	tst.w	r2, #1
 8005804:	d11f      	bne.n	8005846 <ADC_Enable+0xd6>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005806:	689a      	ldr	r2, [r3, #8]
 8005808:	f012 0f01 	tst.w	r2, #1
 800580c:	d107      	bne.n	800581e <ADC_Enable+0xae>
  MODIFY_REG(ADCx->CR,
 800580e:	689a      	ldr	r2, [r3, #8]
 8005810:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8005814:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8005818:	f042 0201 	orr.w	r2, r2, #1
 800581c:	609a      	str	r2, [r3, #8]
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
      {
        LL_ADC_Enable(hadc->Instance);
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800581e:	f7ff fa3d 	bl	8004c9c <HAL_GetTick>
 8005822:	1b43      	subs	r3, r0, r5
 8005824:	2b02      	cmp	r3, #2
 8005826:	d9e9      	bls.n	80057fc <ADC_Enable+0x8c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005828:	6823      	ldr	r3, [r4, #0]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f013 0f01 	tst.w	r3, #1
 8005830:	d1e4      	bne.n	80057fc <ADC_Enable+0x8c>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005832:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8005834:	f043 0310 	orr.w	r3, r3, #16
 8005838:	65e3      	str	r3, [r4, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800583a:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 800583c:	f043 0301 	orr.w	r3, r3, #1
 8005840:	6623      	str	r3, [r4, #96]	@ 0x60

          return HAL_ERROR;
 8005842:	2001      	movs	r0, #1
 8005844:	e002      	b.n	800584c <ADC_Enable+0xdc>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005846:	2000      	movs	r0, #0
 8005848:	e000      	b.n	800584c <ADC_Enable+0xdc>
 800584a:	2000      	movs	r0, #0
}
 800584c:	b003      	add	sp, #12
 800584e:	bd30      	pop	{r4, r5, pc}
 8005850:	8000003f 	.word	0x8000003f
 8005854:	50000100 	.word	0x50000100
 8005858:	50000700 	.word	0x50000700
 800585c:	20000050 	.word	0x20000050
 8005860:	053e2d63 	.word	0x053e2d63
 8005864:	50000300 	.word	0x50000300

08005868 <HAL_ADC_Start_IT>:
{
 8005868:	b538      	push	{r3, r4, r5, lr}
 800586a:	4604      	mov	r4, r0
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800586c:	6803      	ldr	r3, [r0, #0]
 800586e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005872:	f000 8084 	beq.w	800597e <HAL_ADC_Start_IT+0x116>
 8005876:	4a6b      	ldr	r2, [pc, #428]	@ (8005a24 <HAL_ADC_Start_IT+0x1bc>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d07d      	beq.n	8005978 <HAL_ADC_Start_IT+0x110>
 800587c:	4a6a      	ldr	r2, [pc, #424]	@ (8005a28 <HAL_ADC_Start_IT+0x1c0>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800587e:	6895      	ldr	r5, [r2, #8]
 8005880:	f005 051f 	and.w	r5, r5, #31
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	f013 0f04 	tst.w	r3, #4
 800588a:	f040 80c7 	bne.w	8005a1c <HAL_ADC_Start_IT+0x1b4>
    __HAL_LOCK(hadc);
 800588e:	f894 3058 	ldrb.w	r3, [r4, #88]	@ 0x58
 8005892:	2b01      	cmp	r3, #1
 8005894:	f000 80c4 	beq.w	8005a20 <HAL_ADC_Start_IT+0x1b8>
 8005898:	2301      	movs	r3, #1
 800589a:	f884 3058 	strb.w	r3, [r4, #88]	@ 0x58
    tmp_hal_status = ADC_Enable(hadc);
 800589e:	4620      	mov	r0, r4
 80058a0:	f7ff ff66 	bl	8005770 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80058a4:	2800      	cmp	r0, #0
 80058a6:	f040 80b5 	bne.w	8005a14 <HAL_ADC_Start_IT+0x1ac>
      ADC_STATE_CLR_SET(hadc->State,
 80058aa:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80058ac:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80058b0:	f023 0301 	bic.w	r3, r3, #1
 80058b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058b8:	65e3      	str	r3, [r4, #92]	@ 0x5c
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80058ba:	6823      	ldr	r3, [r4, #0]
 80058bc:	4a59      	ldr	r2, [pc, #356]	@ (8005a24 <HAL_ADC_Start_IT+0x1bc>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d062      	beq.n	8005988 <HAL_ADC_Start_IT+0x120>
 80058c2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d05b      	beq.n	8005982 <HAL_ADC_Start_IT+0x11a>
 80058ca:	461a      	mov	r2, r3
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d000      	beq.n	80058d2 <HAL_ADC_Start_IT+0x6a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80058d0:	b91d      	cbnz	r5, 80058da <HAL_ADC_Start_IT+0x72>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80058d2:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80058d4:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 80058d8:	65e2      	str	r2, [r4, #92]	@ 0x5c
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80058da:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80058dc:	f412 5f80 	tst.w	r2, #4096	@ 0x1000
 80058e0:	d055      	beq.n	800598e <HAL_ADC_Start_IT+0x126>
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80058e2:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 80058e4:	f022 0206 	bic.w	r2, r2, #6
 80058e8:	6622      	str	r2, [r4, #96]	@ 0x60
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80058ea:	221c      	movs	r2, #28
 80058ec:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hadc);
 80058ee:	2300      	movs	r3, #0
 80058f0:	f884 3058 	strb.w	r3, [r4, #88]	@ 0x58
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80058f4:	6822      	ldr	r2, [r4, #0]
 80058f6:	6853      	ldr	r3, [r2, #4]
 80058f8:	f023 031c 	bic.w	r3, r3, #28
 80058fc:	6053      	str	r3, [r2, #4]
      switch (hadc->Init.EOCSelection)
 80058fe:	69a3      	ldr	r3, [r4, #24]
 8005900:	2b08      	cmp	r3, #8
 8005902:	d047      	beq.n	8005994 <HAL_ADC_Start_IT+0x12c>
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8005904:	6822      	ldr	r2, [r4, #0]
 8005906:	6853      	ldr	r3, [r2, #4]
 8005908:	f043 0304 	orr.w	r3, r3, #4
 800590c:	6053      	str	r3, [r2, #4]
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800590e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005910:	b923      	cbnz	r3, 800591c <HAL_ADC_Start_IT+0xb4>
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005912:	6822      	ldr	r2, [r4, #0]
 8005914:	6853      	ldr	r3, [r2, #4]
 8005916:	f043 0310 	orr.w	r3, r3, #16
 800591a:	6053      	str	r3, [r2, #4]
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800591c:	6823      	ldr	r3, [r4, #0]
 800591e:	4a41      	ldr	r2, [pc, #260]	@ (8005a24 <HAL_ADC_Start_IT+0x1bc>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d040      	beq.n	80059a6 <HAL_ADC_Start_IT+0x13e>
 8005924:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005928:	4293      	cmp	r3, r2
 800592a:	d039      	beq.n	80059a0 <HAL_ADC_Start_IT+0x138>
 800592c:	461a      	mov	r2, r3
 800592e:	4293      	cmp	r3, r2
 8005930:	d03c      	beq.n	80059ac <HAL_ADC_Start_IT+0x144>
 8005932:	2d09      	cmp	r5, #9
 8005934:	d805      	bhi.n	8005942 <HAL_ADC_Start_IT+0xda>
 8005936:	f240 2121 	movw	r1, #545	@ 0x221
 800593a:	40e9      	lsrs	r1, r5
 800593c:	f011 0f01 	tst.w	r1, #1
 8005940:	d134      	bne.n	80059ac <HAL_ADC_Start_IT+0x144>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005942:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8005944:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8005948:	65e1      	str	r1, [r4, #92]	@ 0x5c
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800594a:	68d2      	ldr	r2, [r2, #12]
 800594c:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8005950:	d065      	beq.n	8005a1e <HAL_ADC_Start_IT+0x1b6>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005952:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8005954:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8005958:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800595c:	65e2      	str	r2, [r4, #92]	@ 0x5c
          switch (hadc->Init.EOCSelection)
 800595e:	69a2      	ldr	r2, [r4, #24]
 8005960:	2a08      	cmp	r2, #8
 8005962:	d04d      	beq.n	8005a00 <HAL_ADC_Start_IT+0x198>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8005964:	685a      	ldr	r2, [r3, #4]
 8005966:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800596a:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 800596c:	6822      	ldr	r2, [r4, #0]
 800596e:	6853      	ldr	r3, [r2, #4]
 8005970:	f043 0320 	orr.w	r3, r3, #32
 8005974:	6053      	str	r3, [r2, #4]
              break;
 8005976:	e052      	b.n	8005a1e <HAL_ADC_Start_IT+0x1b6>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005978:	f502 7200 	add.w	r2, r2, #512	@ 0x200
 800597c:	e77f      	b.n	800587e <HAL_ADC_Start_IT+0x16>
 800597e:	4a2b      	ldr	r2, [pc, #172]	@ (8005a2c <HAL_ADC_Start_IT+0x1c4>)
 8005980:	e77d      	b.n	800587e <HAL_ADC_Start_IT+0x16>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005982:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 8005986:	e7a1      	b.n	80058cc <HAL_ADC_Start_IT+0x64>
 8005988:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800598c:	e79e      	b.n	80058cc <HAL_ADC_Start_IT+0x64>
        ADC_CLEAR_ERRORCODE(hadc);
 800598e:	2200      	movs	r2, #0
 8005990:	6622      	str	r2, [r4, #96]	@ 0x60
 8005992:	e7aa      	b.n	80058ea <HAL_ADC_Start_IT+0x82>
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8005994:	6822      	ldr	r2, [r4, #0]
 8005996:	6853      	ldr	r3, [r2, #4]
 8005998:	f043 0308 	orr.w	r3, r3, #8
 800599c:	6053      	str	r3, [r2, #4]
          break;
 800599e:	e7b6      	b.n	800590e <HAL_ADC_Start_IT+0xa6>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80059a0:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 80059a4:	e7c3      	b.n	800592e <HAL_ADC_Start_IT+0xc6>
 80059a6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80059aa:	e7c0      	b.n	800592e <HAL_ADC_Start_IT+0xc6>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80059ac:	68da      	ldr	r2, [r3, #12]
 80059ae:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 80059b2:	d011      	beq.n	80059d8 <HAL_ADC_Start_IT+0x170>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80059b4:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80059b6:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 80059ba:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80059be:	65e2      	str	r2, [r4, #92]	@ 0x5c
          switch (hadc->Init.EOCSelection)
 80059c0:	69a2      	ldr	r2, [r4, #24]
 80059c2:	2a08      	cmp	r2, #8
 80059c4:	d012      	beq.n	80059ec <HAL_ADC_Start_IT+0x184>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80059c6:	685a      	ldr	r2, [r3, #4]
 80059c8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80059cc:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80059ce:	6822      	ldr	r2, [r4, #0]
 80059d0:	6853      	ldr	r3, [r2, #4]
 80059d2:	f043 0320 	orr.w	r3, r3, #32
 80059d6:	6053      	str	r3, [r2, #4]
        LL_ADC_REG_StartConversion(hadc->Instance);
 80059d8:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80059da:	6893      	ldr	r3, [r2, #8]
 80059dc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80059e0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80059e4:	f043 0304 	orr.w	r3, r3, #4
 80059e8:	6093      	str	r3, [r2, #8]
}
 80059ea:	e018      	b.n	8005a1e <HAL_ADC_Start_IT+0x1b6>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80059ec:	685a      	ldr	r2, [r3, #4]
 80059ee:	f022 0220 	bic.w	r2, r2, #32
 80059f2:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80059f4:	6822      	ldr	r2, [r4, #0]
 80059f6:	6853      	ldr	r3, [r2, #4]
 80059f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80059fc:	6053      	str	r3, [r2, #4]
              break;
 80059fe:	e7eb      	b.n	80059d8 <HAL_ADC_Start_IT+0x170>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8005a00:	685a      	ldr	r2, [r3, #4]
 8005a02:	f022 0220 	bic.w	r2, r2, #32
 8005a06:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8005a08:	6822      	ldr	r2, [r4, #0]
 8005a0a:	6853      	ldr	r3, [r2, #4]
 8005a0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a10:	6053      	str	r3, [r2, #4]
              break;
 8005a12:	e004      	b.n	8005a1e <HAL_ADC_Start_IT+0x1b6>
      __HAL_UNLOCK(hadc);
 8005a14:	2300      	movs	r3, #0
 8005a16:	f884 3058 	strb.w	r3, [r4, #88]	@ 0x58
 8005a1a:	e000      	b.n	8005a1e <HAL_ADC_Start_IT+0x1b6>
    tmp_hal_status = HAL_BUSY;
 8005a1c:	2002      	movs	r0, #2
}
 8005a1e:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_LOCK(hadc);
 8005a20:	2002      	movs	r0, #2
 8005a22:	e7fc      	b.n	8005a1e <HAL_ADC_Start_IT+0x1b6>
 8005a24:	50000100 	.word	0x50000100
 8005a28:	50000700 	.word	0x50000700
 8005a2c:	50000300 	.word	0x50000300

08005a30 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005a30:	b538      	push	{r3, r4, r5, lr}
 8005a32:	4604      	mov	r4, r0
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005a34:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8005a36:	6893      	ldr	r3, [r2, #8]
 8005a38:	f013 0302 	ands.w	r3, r3, #2
 8005a3c:	d000      	beq.n	8005a40 <ADC_Disable+0x10>
 8005a3e:	2301      	movs	r3, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005a40:	6891      	ldr	r1, [r2, #8]
 8005a42:	f011 0f01 	tst.w	r1, #1
 8005a46:	d039      	beq.n	8005abc <ADC_Disable+0x8c>

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
      && (tmp_adc_is_disable_on_going == 0UL)
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d139      	bne.n	8005ac0 <ADC_Disable+0x90>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005a4c:	6893      	ldr	r3, [r2, #8]
 8005a4e:	f003 030d 	and.w	r3, r3, #13
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	d009      	beq.n	8005a6a <ADC_Disable+0x3a>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a56:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8005a58:	f043 0310 	orr.w	r3, r3, #16
 8005a5c:	65e3      	str	r3, [r4, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a5e:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8005a60:	f043 0301 	orr.w	r3, r3, #1
 8005a64:	6623      	str	r3, [r4, #96]	@ 0x60

      return HAL_ERROR;
 8005a66:	2001      	movs	r0, #1
 8005a68:	e029      	b.n	8005abe <ADC_Disable+0x8e>
  MODIFY_REG(ADCx->CR,
 8005a6a:	6893      	ldr	r3, [r2, #8]
 8005a6c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005a70:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005a74:	f043 0302 	orr.w	r3, r3, #2
 8005a78:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005a7a:	6823      	ldr	r3, [r4, #0]
 8005a7c:	2203      	movs	r2, #3
 8005a7e:	601a      	str	r2, [r3, #0]
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005a80:	f7ff f90c 	bl	8004c9c <HAL_GetTick>
 8005a84:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005a86:	6823      	ldr	r3, [r4, #0]
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	f013 0f01 	tst.w	r3, #1
 8005a8e:	d013      	beq.n	8005ab8 <ADC_Disable+0x88>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005a90:	f7ff f904 	bl	8004c9c <HAL_GetTick>
 8005a94:	1b40      	subs	r0, r0, r5
 8005a96:	2802      	cmp	r0, #2
 8005a98:	d9f5      	bls.n	8005a86 <ADC_Disable+0x56>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005a9a:	6823      	ldr	r3, [r4, #0]
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	f013 0f01 	tst.w	r3, #1
 8005aa2:	d0f0      	beq.n	8005a86 <ADC_Disable+0x56>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005aa4:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8005aa6:	f043 0310 	orr.w	r3, r3, #16
 8005aaa:	65e3      	str	r3, [r4, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005aac:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8005aae:	f043 0301 	orr.w	r3, r3, #1
 8005ab2:	6623      	str	r3, [r4, #96]	@ 0x60

          return HAL_ERROR;
 8005ab4:	2001      	movs	r0, #1
 8005ab6:	e002      	b.n	8005abe <ADC_Disable+0x8e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005ab8:	2000      	movs	r0, #0
 8005aba:	e000      	b.n	8005abe <ADC_Disable+0x8e>
 8005abc:	2000      	movs	r0, #0
}
 8005abe:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8005ac0:	2000      	movs	r0, #0
 8005ac2:	e7fc      	b.n	8005abe <ADC_Disable+0x8e>

08005ac4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8005ac4:	b530      	push	{r4, r5, lr}
 8005ac6:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005acc:	f890 3058 	ldrb.w	r3, [r0, #88]	@ 0x58
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d041      	beq.n	8005b58 <HAL_ADCEx_Calibration_Start+0x94>
 8005ad4:	4604      	mov	r4, r0
 8005ad6:	460d      	mov	r5, r1
 8005ad8:	2301      	movs	r3, #1
 8005ada:	f880 3058 	strb.w	r3, [r0, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005ade:	f7ff ffa7 	bl	8005a30 <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005ae2:	bb80      	cbnz	r0, 8005b46 <HAL_ADCEx_Calibration_Start+0x82>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005ae4:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8005ae6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005aea:	f023 0302 	bic.w	r3, r3, #2
 8005aee:	f043 0302 	orr.w	r3, r3, #2
 8005af2:	65e3      	str	r3, [r4, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8005af4:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8005af6:	6893      	ldr	r3, [r2, #8]
 8005af8:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8005afc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005b00:	f005 4580 	and.w	r5, r5, #1073741824	@ 0x40000000
 8005b04:	432b      	orrs	r3, r5
 8005b06:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005b0a:	6093      	str	r3, [r2, #8]

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005b0c:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	db06      	blt.n	8005b22 <HAL_ADCEx_Calibration_Start+0x5e>
        return HAL_ERROR;
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005b14:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8005b16:	f023 0303 	bic.w	r3, r3, #3
 8005b1a:	f043 0301 	orr.w	r3, r3, #1
 8005b1e:	65e3      	str	r3, [r4, #92]	@ 0x5c
 8005b20:	e015      	b.n	8005b4e <HAL_ADCEx_Calibration_Start+0x8a>
      wait_loop_index++;
 8005b22:	9b01      	ldr	r3, [sp, #4]
 8005b24:	3301      	adds	r3, #1
 8005b26:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005b28:	9a01      	ldr	r2, [sp, #4]
 8005b2a:	4b0c      	ldr	r3, [pc, #48]	@ (8005b5c <HAL_ADCEx_Calibration_Start+0x98>)
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d9ed      	bls.n	8005b0c <HAL_ADCEx_Calibration_Start+0x48>
        ADC_STATE_CLR_SET(hadc->State,
 8005b30:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8005b32:	f023 0312 	bic.w	r3, r3, #18
 8005b36:	f043 0310 	orr.w	r3, r3, #16
 8005b3a:	65e3      	str	r3, [r4, #92]	@ 0x5c
        __HAL_UNLOCK(hadc);
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	f884 3058 	strb.w	r3, [r4, #88]	@ 0x58
        return HAL_ERROR;
 8005b42:	2001      	movs	r0, #1
 8005b44:	e006      	b.n	8005b54 <HAL_ADCEx_Calibration_Start+0x90>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b46:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8005b48:	f043 0310 	orr.w	r3, r3, #16
 8005b4c:	65e3      	str	r3, [r4, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005b4e:	2300      	movs	r3, #0
 8005b50:	f884 3058 	strb.w	r3, [r4, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
}
 8005b54:	b003      	add	sp, #12
 8005b56:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hadc);
 8005b58:	2002      	movs	r0, #2
 8005b5a:	e7fb      	b.n	8005b54 <HAL_ADCEx_Calibration_Start+0x90>
 8005b5c:	0004de01 	.word	0x0004de01

08005b60 <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8005b60:	4770      	bx	lr

08005b62 <HAL_ADCEx_InjectedQueueOverflowCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8005b62:	4770      	bx	lr

08005b64 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8005b64:	4770      	bx	lr

08005b66 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8005b66:	4770      	bx	lr

08005b68 <HAL_ADCEx_EndOfSamplingCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8005b68:	4770      	bx	lr
	...

08005b6c <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005b6c:	f890 2058 	ldrb.w	r2, [r0, #88]	@ 0x58
 8005b70:	2a01      	cmp	r2, #1
 8005b72:	f000 80d6 	beq.w	8005d22 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
{
 8005b76:	b410      	push	{r4}
 8005b78:	b09d      	sub	sp, #116	@ 0x74
 8005b7a:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	f880 2058 	strb.w	r2, [r0, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8005b82:	2200      	movs	r2, #0
 8005b84:	9218      	str	r2, [sp, #96]	@ 0x60
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8005b86:	9219      	str	r2, [sp, #100]	@ 0x64

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8005b88:	6800      	ldr	r0, [r0, #0]
 8005b8a:	f1b0 4fa0 	cmp.w	r0, #1342177280	@ 0x50000000
 8005b8e:	d047      	beq.n	8005c20 <HAL_ADCEx_MultiModeConfigChannel+0xb4>
 8005b90:	4a65      	ldr	r2, [pc, #404]	@ (8005d28 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8005b92:	4290      	cmp	r0, r2
 8005b94:	d047      	beq.n	8005c26 <HAL_ADCEx_MultiModeConfigChannel+0xba>
 8005b96:	2200      	movs	r2, #0
 8005b98:	9201      	str	r2, [sp, #4]

  if (tmp_hadc_slave.Instance == NULL)
 8005b9a:	9a01      	ldr	r2, [sp, #4]
 8005b9c:	2a00      	cmp	r2, #0
 8005b9e:	d046      	beq.n	8005c2e <HAL_ADCEx_MultiModeConfigChannel+0xc2>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005ba0:	6892      	ldr	r2, [r2, #8]
 8005ba2:	f012 0204 	ands.w	r2, r2, #4
 8005ba6:	d000      	beq.n	8005baa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005ba8:	2201      	movs	r2, #1
 8005baa:	6884      	ldr	r4, [r0, #8]
 8005bac:	f014 0f04 	tst.w	r4, #4
 8005bb0:	f040 80a7 	bne.w	8005d02 <HAL_ADCEx_MultiModeConfigChannel+0x196>
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8005bb4:	2a00      	cmp	r2, #0
 8005bb6:	f040 80a4 	bne.w	8005d02 <HAL_ADCEx_MultiModeConfigChannel+0x196>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005bba:	f1b0 4fa0 	cmp.w	r0, #1342177280	@ 0x50000000
 8005bbe:	d042      	beq.n	8005c46 <HAL_ADCEx_MultiModeConfigChannel+0xda>
 8005bc0:	4a5a      	ldr	r2, [pc, #360]	@ (8005d2c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005bc2:	4290      	cmp	r0, r2
 8005bc4:	d03c      	beq.n	8005c40 <HAL_ADCEx_MultiModeConfigChannel+0xd4>
 8005bc6:	4a5a      	ldr	r2, [pc, #360]	@ (8005d30 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>)

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005bc8:	6808      	ldr	r0, [r1, #0]
 8005bca:	2800      	cmp	r0, #0
 8005bcc:	d05c      	beq.n	8005c88 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005bce:	6890      	ldr	r0, [r2, #8]
 8005bd0:	f420 4060 	bic.w	r0, r0, #57344	@ 0xe000
 8005bd4:	684c      	ldr	r4, [r1, #4]
 8005bd6:	f893 c038 	ldrb.w	ip, [r3, #56]	@ 0x38
 8005bda:	ea44 344c 	orr.w	r4, r4, ip, lsl #13
 8005bde:	4320      	orrs	r0, r4
 8005be0:	6090      	str	r0, [r2, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005be2:	6818      	ldr	r0, [r3, #0]
 8005be4:	f1b0 4fa0 	cmp.w	r0, #1342177280	@ 0x50000000
 8005be8:	d02f      	beq.n	8005c4a <HAL_ADCEx_MultiModeConfigChannel+0xde>
 8005bea:	4c50      	ldr	r4, [pc, #320]	@ (8005d2c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005bec:	42a0      	cmp	r0, r4
 8005bee:	d02c      	beq.n	8005c4a <HAL_ADCEx_MultiModeConfigChannel+0xde>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005bf0:	484d      	ldr	r0, [pc, #308]	@ (8005d28 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8005bf2:	6884      	ldr	r4, [r0, #8]
 8005bf4:	f014 0401 	ands.w	r4, r4, #1
 8005bf8:	d000      	beq.n	8005bfc <HAL_ADCEx_MultiModeConfigChannel+0x90>
 8005bfa:	2401      	movs	r4, #1
 8005bfc:	484d      	ldr	r0, [pc, #308]	@ (8005d34 <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 8005bfe:	6880      	ldr	r0, [r0, #8]
 8005c00:	f010 0001 	ands.w	r0, r0, #1
 8005c04:	d000      	beq.n	8005c08 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8005c06:	2001      	movs	r0, #1
 8005c08:	4320      	orrs	r0, r4
 8005c0a:	4c4b      	ldr	r4, [pc, #300]	@ (8005d38 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8005c0c:	68a4      	ldr	r4, [r4, #8]
 8005c0e:	f014 0401 	ands.w	r4, r4, #1
 8005c12:	d000      	beq.n	8005c16 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8005c14:	2401      	movs	r4, #1
 8005c16:	4320      	orrs	r0, r4
 8005c18:	bf0c      	ite	eq
 8005c1a:	2001      	moveq	r0, #1
 8005c1c:	2000      	movne	r0, #0
 8005c1e:	e025      	b.n	8005c6c <HAL_ADCEx_MultiModeConfigChannel+0x100>
  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8005c20:	4a42      	ldr	r2, [pc, #264]	@ (8005d2c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005c22:	9201      	str	r2, [sp, #4]
 8005c24:	e7b9      	b.n	8005b9a <HAL_ADCEx_MultiModeConfigChannel+0x2e>
 8005c26:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8005c2a:	9201      	str	r2, [sp, #4]
 8005c2c:	e7b5      	b.n	8005b9a <HAL_ADCEx_MultiModeConfigChannel+0x2e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005c2e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005c30:	f042 0220 	orr.w	r2, r2, #32
 8005c34:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_UNLOCK(hadc);
 8005c36:	2200      	movs	r2, #0
 8005c38:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    return HAL_ERROR;
 8005c3c:	2001      	movs	r0, #1
 8005c3e:	e068      	b.n	8005d12 <HAL_ADCEx_MultiModeConfigChannel+0x1a6>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005c40:	f502 7200 	add.w	r2, r2, #512	@ 0x200
 8005c44:	e7c0      	b.n	8005bc8 <HAL_ADCEx_MultiModeConfigChannel+0x5c>
 8005c46:	4a3d      	ldr	r2, [pc, #244]	@ (8005d3c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8005c48:	e7be      	b.n	8005bc8 <HAL_ADCEx_MultiModeConfigChannel+0x5c>
 8005c4a:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005c4e:	6884      	ldr	r4, [r0, #8]
 8005c50:	f014 0401 	ands.w	r4, r4, #1
 8005c54:	d000      	beq.n	8005c58 <HAL_ADCEx_MultiModeConfigChannel+0xec>
 8005c56:	2401      	movs	r4, #1
 8005c58:	4834      	ldr	r0, [pc, #208]	@ (8005d2c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005c5a:	6880      	ldr	r0, [r0, #8]
 8005c5c:	f010 0001 	ands.w	r0, r0, #1
 8005c60:	d000      	beq.n	8005c64 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 8005c62:	2001      	movs	r0, #1
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005c64:	4320      	orrs	r0, r4
 8005c66:	bf0c      	ite	eq
 8005c68:	2001      	moveq	r0, #1
 8005c6a:	2000      	movne	r0, #0
 8005c6c:	2800      	cmp	r0, #0
 8005c6e:	d054      	beq.n	8005d1a <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005c70:	6890      	ldr	r0, [r2, #8]
 8005c72:	f420 6071 	bic.w	r0, r0, #3856	@ 0xf10
 8005c76:	f020 000f 	bic.w	r0, r0, #15
 8005c7a:	680c      	ldr	r4, [r1, #0]
 8005c7c:	6889      	ldr	r1, [r1, #8]
 8005c7e:	4321      	orrs	r1, r4
 8005c80:	4308      	orrs	r0, r1
 8005c82:	6090      	str	r0, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005c84:	2000      	movs	r0, #0
 8005c86:	e041      	b.n	8005d0c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005c88:	6891      	ldr	r1, [r2, #8]
 8005c8a:	f421 4160 	bic.w	r1, r1, #57344	@ 0xe000
 8005c8e:	6091      	str	r1, [r2, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005c90:	6819      	ldr	r1, [r3, #0]
 8005c92:	f1b1 4fa0 	cmp.w	r1, #1342177280	@ 0x50000000
 8005c96:	d01a      	beq.n	8005cce <HAL_ADCEx_MultiModeConfigChannel+0x162>
 8005c98:	4824      	ldr	r0, [pc, #144]	@ (8005d2c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005c9a:	4281      	cmp	r1, r0
 8005c9c:	d017      	beq.n	8005cce <HAL_ADCEx_MultiModeConfigChannel+0x162>
 8005c9e:	4922      	ldr	r1, [pc, #136]	@ (8005d28 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8005ca0:	6888      	ldr	r0, [r1, #8]
 8005ca2:	f010 0001 	ands.w	r0, r0, #1
 8005ca6:	d000      	beq.n	8005caa <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8005ca8:	2001      	movs	r0, #1
 8005caa:	4922      	ldr	r1, [pc, #136]	@ (8005d34 <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 8005cac:	6889      	ldr	r1, [r1, #8]
 8005cae:	f011 0101 	ands.w	r1, r1, #1
 8005cb2:	d000      	beq.n	8005cb6 <HAL_ADCEx_MultiModeConfigChannel+0x14a>
 8005cb4:	2101      	movs	r1, #1
 8005cb6:	4301      	orrs	r1, r0
 8005cb8:	481f      	ldr	r0, [pc, #124]	@ (8005d38 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8005cba:	6880      	ldr	r0, [r0, #8]
 8005cbc:	f010 0001 	ands.w	r0, r0, #1
 8005cc0:	d000      	beq.n	8005cc4 <HAL_ADCEx_MultiModeConfigChannel+0x158>
 8005cc2:	2001      	movs	r0, #1
 8005cc4:	4301      	orrs	r1, r0
 8005cc6:	bf0c      	ite	eq
 8005cc8:	2101      	moveq	r1, #1
 8005cca:	2100      	movne	r1, #0
 8005ccc:	e010      	b.n	8005cf0 <HAL_ADCEx_MultiModeConfigChannel+0x184>
 8005cce:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
 8005cd2:	6888      	ldr	r0, [r1, #8]
 8005cd4:	f010 0001 	ands.w	r0, r0, #1
 8005cd8:	d000      	beq.n	8005cdc <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8005cda:	2001      	movs	r0, #1
 8005cdc:	4913      	ldr	r1, [pc, #76]	@ (8005d2c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005cde:	6889      	ldr	r1, [r1, #8]
 8005ce0:	f011 0101 	ands.w	r1, r1, #1
 8005ce4:	d000      	beq.n	8005ce8 <HAL_ADCEx_MultiModeConfigChannel+0x17c>
 8005ce6:	2101      	movs	r1, #1
 8005ce8:	4301      	orrs	r1, r0
 8005cea:	bf0c      	ite	eq
 8005cec:	2101      	moveq	r1, #1
 8005cee:	2100      	movne	r1, #0
 8005cf0:	b1a9      	cbz	r1, 8005d1e <HAL_ADCEx_MultiModeConfigChannel+0x1b2>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005cf2:	6891      	ldr	r1, [r2, #8]
 8005cf4:	f421 6171 	bic.w	r1, r1, #3856	@ 0xf10
 8005cf8:	f021 010f 	bic.w	r1, r1, #15
 8005cfc:	6091      	str	r1, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005cfe:	2000      	movs	r0, #0
 8005d00:	e004      	b.n	8005d0c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005d02:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005d04:	f042 0220 	orr.w	r2, r2, #32
 8005d08:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005d0a:	2001      	movs	r0, #1
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
}
 8005d12:	b01d      	add	sp, #116	@ 0x74
 8005d14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d18:	4770      	bx	lr
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005d1a:	2000      	movs	r0, #0
 8005d1c:	e7f6      	b.n	8005d0c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
 8005d1e:	2000      	movs	r0, #0
 8005d20:	e7f4      	b.n	8005d0c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  __HAL_LOCK(hadc);
 8005d22:	2002      	movs	r0, #2
}
 8005d24:	4770      	bx	lr
 8005d26:	bf00      	nop
 8005d28:	50000400 	.word	0x50000400
 8005d2c:	50000100 	.word	0x50000100
 8005d30:	50000700 	.word	0x50000700
 8005d34:	50000500 	.word	0x50000500
 8005d38:	50000600 	.word	0x50000600
 8005d3c:	50000300 	.word	0x50000300

08005d40 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8005d40:	2800      	cmp	r0, #0
 8005d42:	db07      	blt.n	8005d54 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005d44:	f000 021f 	and.w	r2, r0, #31
 8005d48:	0940      	lsrs	r0, r0, #5
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	4093      	lsls	r3, r2
 8005d4e:	4a02      	ldr	r2, [pc, #8]	@ (8005d58 <__NVIC_EnableIRQ+0x18>)
 8005d50:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005d54:	4770      	bx	lr
 8005d56:	bf00      	nop
 8005d58:	e000e100 	.word	0xe000e100

08005d5c <__NVIC_DisableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8005d5c:	2800      	cmp	r0, #0
 8005d5e:	db0c      	blt.n	8005d7a <__NVIC_DisableIRQ+0x1e>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005d60:	f000 021f 	and.w	r2, r0, #31
 8005d64:	0940      	lsrs	r0, r0, #5
 8005d66:	2301      	movs	r3, #1
 8005d68:	4093      	lsls	r3, r2
 8005d6a:	3020      	adds	r0, #32
 8005d6c:	4a03      	ldr	r2, [pc, #12]	@ (8005d7c <__NVIC_DisableIRQ+0x20>)
 8005d6e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8005d72:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005d76:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8005d7a:	4770      	bx	lr
 8005d7c:	e000e100 	.word	0xe000e100

08005d80 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8005d80:	2800      	cmp	r0, #0
 8005d82:	db08      	blt.n	8005d96 <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d84:	0109      	lsls	r1, r1, #4
 8005d86:	b2c9      	uxtb	r1, r1
 8005d88:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8005d8c:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8005d90:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8005d94:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d96:	f000 000f 	and.w	r0, r0, #15
 8005d9a:	0109      	lsls	r1, r1, #4
 8005d9c:	b2c9      	uxtb	r1, r1
 8005d9e:	4b01      	ldr	r3, [pc, #4]	@ (8005da4 <__NVIC_SetPriority+0x24>)
 8005da0:	5419      	strb	r1, [r3, r0]
  }
}
 8005da2:	4770      	bx	lr
 8005da4:	e000ed14 	.word	0xe000ed14

08005da8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005da8:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005daa:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005dae:	f1c0 0c07 	rsb	ip, r0, #7
 8005db2:	f1bc 0f04 	cmp.w	ip, #4
 8005db6:	bf28      	it	cs
 8005db8:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005dbc:	1d03      	adds	r3, r0, #4
 8005dbe:	2b06      	cmp	r3, #6
 8005dc0:	d90f      	bls.n	8005de2 <NVIC_EncodePriority+0x3a>
 8005dc2:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005dc4:	f04f 3eff 	mov.w	lr, #4294967295
 8005dc8:	fa0e f00c 	lsl.w	r0, lr, ip
 8005dcc:	ea21 0100 	bic.w	r1, r1, r0
 8005dd0:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005dd2:	fa0e fe03 	lsl.w	lr, lr, r3
 8005dd6:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8005dda:	ea41 0002 	orr.w	r0, r1, r2
 8005dde:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005de2:	2300      	movs	r3, #0
 8005de4:	e7ee      	b.n	8005dc4 <NVIC_EncodePriority+0x1c>
	...

08005de8 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005de8:	4a07      	ldr	r2, [pc, #28]	@ (8005e08 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8005dea:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005dec:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005df0:	041b      	lsls	r3, r3, #16
 8005df2:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005df4:	0200      	lsls	r0, r0, #8
 8005df6:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005dfa:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8005dfc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005e00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8005e04:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8005e06:	4770      	bx	lr
 8005e08:	e000ed00 	.word	0xe000ed00

08005e0c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005e0c:	b510      	push	{r4, lr}
 8005e0e:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005e10:	4b05      	ldr	r3, [pc, #20]	@ (8005e28 <HAL_NVIC_SetPriority+0x1c>)
 8005e12:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005e14:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8005e18:	f7ff ffc6 	bl	8005da8 <NVIC_EncodePriority>
 8005e1c:	4601      	mov	r1, r0
 8005e1e:	4620      	mov	r0, r4
 8005e20:	f7ff ffae 	bl	8005d80 <__NVIC_SetPriority>
}
 8005e24:	bd10      	pop	{r4, pc}
 8005e26:	bf00      	nop
 8005e28:	e000ed00 	.word	0xe000ed00

08005e2c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005e2c:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005e2e:	f7ff ff87 	bl	8005d40 <__NVIC_EnableIRQ>
}
 8005e32:	bd08      	pop	{r3, pc}

08005e34 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005e34:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005e36:	f7ff ff91 	bl	8005d5c <__NVIC_DisableIRQ>
}
 8005e3a:	bd08      	pop	{r3, pc}

08005e3c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005e3c:	3801      	subs	r0, #1
 8005e3e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8005e42:	d20b      	bcs.n	8005e5c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005e44:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005e48:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e4a:	4a05      	ldr	r2, [pc, #20]	@ (8005e60 <HAL_SYSTICK_Config+0x24>)
 8005e4c:	21f0      	movs	r1, #240	@ 0xf0
 8005e4e:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005e52:	2000      	movs	r0, #0
 8005e54:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005e56:	2207      	movs	r2, #7
 8005e58:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005e5a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8005e5c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8005e5e:	4770      	bx	lr
 8005e60:	e000ed00 	.word	0xe000ed00

08005e64 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005e64:	b170      	cbz	r0, 8005e84 <HAL_DAC_Init+0x20>
{
 8005e66:	b510      	push	{r4, lr}
 8005e68:	4604      	mov	r4, r0
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005e6a:	7903      	ldrb	r3, [r0, #4]
 8005e6c:	b133      	cbz	r3, 8005e7c <HAL_DAC_Init+0x18>
    HAL_DAC_MspInit(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005e6e:	2302      	movs	r3, #2
 8005e70:	7123      	strb	r3, [r4, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005e72:	2000      	movs	r0, #0
 8005e74:	6120      	str	r0, [r4, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005e76:	2301      	movs	r3, #1
 8005e78:	7123      	strb	r3, [r4, #4]

  /* Return function status */
  return HAL_OK;
}
 8005e7a:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8005e7c:	7143      	strb	r3, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8005e7e:	f7fe f80d 	bl	8003e9c <HAL_DAC_MspInit>
 8005e82:	e7f4      	b.n	8005e6e <HAL_DAC_Init+0xa>
    return HAL_ERROR;
 8005e84:	2001      	movs	r0, #1
}
 8005e86:	4770      	bx	lr

08005e88 <HAL_DAC_Start>:
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005e88:	2800      	cmp	r0, #0
 8005e8a:	d040      	beq.n	8005f0e <HAL_DAC_Start+0x86>
 8005e8c:	4602      	mov	r2, r0

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005e8e:	7943      	ldrb	r3, [r0, #5]
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d03e      	beq.n	8005f12 <HAL_DAC_Start+0x8a>
{
 8005e94:	b430      	push	{r4, r5}
 8005e96:	b082      	sub	sp, #8
  __HAL_LOCK(hdac);
 8005e98:	2301      	movs	r3, #1
 8005e9a:	7143      	strb	r3, [r0, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005e9c:	2002      	movs	r0, #2
 8005e9e:	7110      	strb	r0, [r2, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8005ea0:	6815      	ldr	r5, [r2, #0]
 8005ea2:	682c      	ldr	r4, [r5, #0]
 8005ea4:	f001 0010 	and.w	r0, r1, #16
 8005ea8:	4083      	lsls	r3, r0
 8005eaa:	4323      	orrs	r3, r4
 8005eac:	602b      	str	r3, [r5, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  /* Wait loop initialization and execution */
  /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed 32 */
  /*       bits register capacity and handle low frequency. */
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005eae:	4b1a      	ldr	r3, [pc, #104]	@ (8005f18 <HAL_DAC_Start+0x90>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	099b      	lsrs	r3, r3, #6
 8005eb4:	4c19      	ldr	r4, [pc, #100]	@ (8005f1c <HAL_DAC_Start+0x94>)
 8005eb6:	fba4 4303 	umull	r4, r3, r4, r3
 8005eba:	099b      	lsrs	r3, r3, #6
 8005ebc:	3301      	adds	r3, #1
 8005ebe:	9301      	str	r3, [sp, #4]
  while (wait_loop_index != 0UL)
 8005ec0:	e002      	b.n	8005ec8 <HAL_DAC_Start+0x40>
  {
    wait_loop_index--;
 8005ec2:	9b01      	ldr	r3, [sp, #4]
 8005ec4:	3b01      	subs	r3, #1
 8005ec6:	9301      	str	r3, [sp, #4]
  while (wait_loop_index != 0UL)
 8005ec8:	9b01      	ldr	r3, [sp, #4]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d1f9      	bne.n	8005ec2 <HAL_DAC_Start+0x3a>
  }

  if (Channel == DAC_CHANNEL_1)
 8005ece:	b989      	cbnz	r1, 8005ef4 <HAL_DAC_Start+0x6c>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8005ed0:	6811      	ldr	r1, [r2, #0]
 8005ed2:	680b      	ldr	r3, [r1, #0]
 8005ed4:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8005ed8:	2b02      	cmp	r3, #2
 8005eda:	d006      	beq.n	8005eea <HAL_DAC_Start+0x62>
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005edc:	2301      	movs	r3, #1
 8005ede:	7113      	strb	r3, [r2, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005ee0:	2000      	movs	r0, #0
 8005ee2:	7150      	strb	r0, [r2, #5]

  /* Return function status */
  return HAL_OK;
}
 8005ee4:	b002      	add	sp, #8
 8005ee6:	bc30      	pop	{r4, r5}
 8005ee8:	4770      	bx	lr
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8005eea:	684b      	ldr	r3, [r1, #4]
 8005eec:	f043 0301 	orr.w	r3, r3, #1
 8005ef0:	604b      	str	r3, [r1, #4]
 8005ef2:	e7f3      	b.n	8005edc <HAL_DAC_Start+0x54>
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8005ef4:	6814      	ldr	r4, [r2, #0]
 8005ef6:	6821      	ldr	r1, [r4, #0]
 8005ef8:	f401 1178 	and.w	r1, r1, #4063232	@ 0x3e0000
 8005efc:	2302      	movs	r3, #2
 8005efe:	4083      	lsls	r3, r0
 8005f00:	4299      	cmp	r1, r3
 8005f02:	d1eb      	bne.n	8005edc <HAL_DAC_Start+0x54>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8005f04:	6863      	ldr	r3, [r4, #4]
 8005f06:	f043 0302 	orr.w	r3, r3, #2
 8005f0a:	6063      	str	r3, [r4, #4]
 8005f0c:	e7e6      	b.n	8005edc <HAL_DAC_Start+0x54>
    return HAL_ERROR;
 8005f0e:	2001      	movs	r0, #1
 8005f10:	4770      	bx	lr
  __HAL_LOCK(hdac);
 8005f12:	2002      	movs	r0, #2
}
 8005f14:	4770      	bx	lr
 8005f16:	bf00      	nop
 8005f18:	20000050 	.word	0x20000050
 8005f1c:	053e2d63 	.word	0x053e2d63

08005f20 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8005f20:	b410      	push	{r4}
 8005f22:	b083      	sub	sp, #12
  __IO uint32_t tmp = 0UL;
 8005f24:	2400      	movs	r4, #0
 8005f26:	9401      	str	r4, [sp, #4]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005f28:	b198      	cbz	r0, 8005f52 <HAL_DAC_SetValue+0x32>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8005f2a:	6800      	ldr	r0, [r0, #0]
 8005f2c:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8005f2e:	9001      	str	r0, [sp, #4]
  if (Channel == DAC_CHANNEL_1)
 8005f30:	b951      	cbnz	r1, 8005f48 <HAL_DAC_SetValue+0x28>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8005f32:	9901      	ldr	r1, [sp, #4]
 8005f34:	440a      	add	r2, r1
 8005f36:	3208      	adds	r2, #8
 8005f38:	9201      	str	r2, [sp, #4]
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8005f3a:	9a01      	ldr	r2, [sp, #4]
 8005f3c:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8005f3e:	2000      	movs	r0, #0
}
 8005f40:	b003      	add	sp, #12
 8005f42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f46:	4770      	bx	lr
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8005f48:	9901      	ldr	r1, [sp, #4]
 8005f4a:	440a      	add	r2, r1
 8005f4c:	3214      	adds	r2, #20
 8005f4e:	9201      	str	r2, [sp, #4]
 8005f50:	e7f3      	b.n	8005f3a <HAL_DAC_SetValue+0x1a>
    return HAL_ERROR;
 8005f52:	2001      	movs	r0, #1
 8005f54:	e7f4      	b.n	8005f40 <HAL_DAC_SetValue+0x20>

08005f56 <HAL_DAC_DMAUnderrunCallbackCh1>:
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8005f56:	4770      	bx	lr

08005f58 <HAL_DAC_IRQHandler>:
{
 8005f58:	b570      	push	{r4, r5, r6, lr}
 8005f5a:	4604      	mov	r4, r0
  uint32_t itsource = hdac->Instance->CR;
 8005f5c:	6803      	ldr	r3, [r0, #0]
 8005f5e:	681d      	ldr	r5, [r3, #0]
  uint32_t itflag   = hdac->Instance->SR;
 8005f60:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8005f62:	f415 5f00 	tst.w	r5, #8192	@ 0x2000
 8005f66:	d002      	beq.n	8005f6e <HAL_DAC_IRQHandler+0x16>
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8005f68:	f416 5f00 	tst.w	r6, #8192	@ 0x2000
 8005f6c:	d106      	bne.n	8005f7c <HAL_DAC_IRQHandler+0x24>
  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8005f6e:	f015 5f00 	tst.w	r5, #536870912	@ 0x20000000
 8005f72:	d002      	beq.n	8005f7a <HAL_DAC_IRQHandler+0x22>
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8005f74:	f016 5f00 	tst.w	r6, #536870912	@ 0x20000000
 8005f78:	d111      	bne.n	8005f9e <HAL_DAC_IRQHandler+0x46>
}
 8005f7a:	bd70      	pop	{r4, r5, r6, pc}
      hdac->State = HAL_DAC_STATE_ERROR;
 8005f7c:	2204      	movs	r2, #4
 8005f7e:	7102      	strb	r2, [r0, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8005f80:	6902      	ldr	r2, [r0, #16]
 8005f82:	f042 0201 	orr.w	r2, r2, #1
 8005f86:	6102      	str	r2, [r0, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8005f88:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005f8c:	635a      	str	r2, [r3, #52]	@ 0x34
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8005f8e:	6802      	ldr	r2, [r0, #0]
 8005f90:	6813      	ldr	r3, [r2, #0]
 8005f92:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005f96:	6013      	str	r3, [r2, #0]
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8005f98:	f7ff ffdd 	bl	8005f56 <HAL_DAC_DMAUnderrunCallbackCh1>
 8005f9c:	e7e7      	b.n	8005f6e <HAL_DAC_IRQHandler+0x16>
      hdac->State = HAL_DAC_STATE_ERROR;
 8005f9e:	2304      	movs	r3, #4
 8005fa0:	7123      	strb	r3, [r4, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8005fa2:	6923      	ldr	r3, [r4, #16]
 8005fa4:	f043 0302 	orr.w	r3, r3, #2
 8005fa8:	6123      	str	r3, [r4, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8005faa:	6823      	ldr	r3, [r4, #0]
 8005fac:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8005fb0:	635a      	str	r2, [r3, #52]	@ 0x34
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8005fb2:	6822      	ldr	r2, [r4, #0]
 8005fb4:	6813      	ldr	r3, [r2, #0]
 8005fb6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005fba:	6013      	str	r3, [r2, #0]
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8005fbc:	4620      	mov	r0, r4
 8005fbe:	f000 f903 	bl	80061c8 <HAL_DACEx_DMAUnderrunCallbackCh2>
}
 8005fc2:	e7da      	b.n	8005f7a <HAL_DAC_IRQHandler+0x22>

08005fc4 <HAL_DAC_ConfigChannel>:
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8005fc4:	2800      	cmp	r0, #0
 8005fc6:	f000 80f4 	beq.w	80061b2 <HAL_DAC_ConfigChannel+0x1ee>
{
 8005fca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fce:	460c      	mov	r4, r1
 8005fd0:	4615      	mov	r5, r2
 8005fd2:	4606      	mov	r6, r0
  if ((hdac == NULL) || (sConfig == NULL))
 8005fd4:	2900      	cmp	r1, #0
 8005fd6:	f000 80ee 	beq.w	80061b6 <HAL_DAC_ConfigChannel+0x1f2>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005fda:	7943      	ldrb	r3, [r0, #5]
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	f000 80ec 	beq.w	80061ba <HAL_DAC_ConfigChannel+0x1f6>
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	7143      	strb	r3, [r0, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005fe6:	2302      	movs	r3, #2
 8005fe8:	7103      	strb	r3, [r0, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005fea:	688b      	ldr	r3, [r1, #8]
 8005fec:	2b04      	cmp	r3, #4
 8005fee:	d016      	beq.n	800601e <HAL_DAC_ConfigChannel+0x5a>
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005ff0:	69e3      	ldr	r3, [r4, #28]
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d05e      	beq.n	80060b4 <HAL_DAC_ConfigChannel+0xf0>
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8005ff6:	6833      	ldr	r3, [r6, #0]
 8005ff8:	6bdf      	ldr	r7, [r3, #60]	@ 0x3c
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005ffa:	f005 0510 	and.w	r5, r5, #16
 8005ffe:	2307      	movs	r3, #7
 8006000:	40ab      	lsls	r3, r5
 8006002:	ea27 0703 	bic.w	r7, r7, r3
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8006006:	69a3      	ldr	r3, [r4, #24]
 8006008:	2b01      	cmp	r3, #1
 800600a:	d060      	beq.n	80060ce <HAL_DAC_ConfigChannel+0x10a>
  {
    connectOnChip = 0x00000000UL;
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800600c:	2b02      	cmp	r3, #2
 800600e:	f000 80b8 	beq.w	8006182 <HAL_DAC_ConfigChannel+0x1be>
  {
    connectOnChip = DAC_MCR_MODE1_0;
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8006012:	6963      	ldr	r3, [r4, #20]
 8006014:	2b00      	cmp	r3, #0
 8006016:	f040 80b6 	bne.w	8006186 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800601a:	2101      	movs	r1, #1
 800601c:	e058      	b.n	80060d0 <HAL_DAC_ConfigChannel+0x10c>
    tickstart = HAL_GetTick();
 800601e:	f7fe fe3d 	bl	8004c9c <HAL_GetTick>
 8006022:	4607      	mov	r7, r0
    if (Channel == DAC_CHANNEL_1)
 8006024:	b19d      	cbz	r5, 800604e <HAL_DAC_ConfigChannel+0x8a>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8006026:	6833      	ldr	r3, [r6, #0]
 8006028:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800602a:	2a00      	cmp	r2, #0
 800602c:	da3f      	bge.n	80060ae <HAL_DAC_ConfigChannel+0xea>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800602e:	f7fe fe35 	bl	8004c9c <HAL_GetTick>
 8006032:	1bc0      	subs	r0, r0, r7
 8006034:	2801      	cmp	r0, #1
 8006036:	d9f6      	bls.n	8006026 <HAL_DAC_ConfigChannel+0x62>
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8006038:	6833      	ldr	r3, [r6, #0]
 800603a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800603c:	2b00      	cmp	r3, #0
 800603e:	daf2      	bge.n	8006026 <HAL_DAC_ConfigChannel+0x62>
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006040:	6933      	ldr	r3, [r6, #16]
 8006042:	f043 0308 	orr.w	r3, r3, #8
 8006046:	6133      	str	r3, [r6, #16]
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006048:	2003      	movs	r0, #3
 800604a:	7130      	strb	r0, [r6, #4]
            return HAL_TIMEOUT;
 800604c:	e097      	b.n	800617e <HAL_DAC_ConfigChannel+0x1ba>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800604e:	6833      	ldr	r3, [r6, #0]
 8006050:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006052:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 8006056:	d010      	beq.n	800607a <HAL_DAC_ConfigChannel+0xb6>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006058:	f7fe fe20 	bl	8004c9c <HAL_GetTick>
 800605c:	1bc0      	subs	r0, r0, r7
 800605e:	2801      	cmp	r0, #1
 8006060:	d9f5      	bls.n	800604e <HAL_DAC_ConfigChannel+0x8a>
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006062:	6833      	ldr	r3, [r6, #0]
 8006064:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006066:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 800606a:	d0f0      	beq.n	800604e <HAL_DAC_ConfigChannel+0x8a>
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800606c:	6933      	ldr	r3, [r6, #16]
 800606e:	f043 0308 	orr.w	r3, r3, #8
 8006072:	6133      	str	r3, [r6, #16]
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006074:	2003      	movs	r0, #3
 8006076:	7130      	strb	r0, [r6, #4]
            return HAL_TIMEOUT;
 8006078:	e081      	b.n	800617e <HAL_DAC_ConfigChannel+0x1ba>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800607a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800607c:	641a      	str	r2, [r3, #64]	@ 0x40
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800607e:	6830      	ldr	r0, [r6, #0]
 8006080:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8006082:	f005 0210 	and.w	r2, r5, #16
 8006086:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800608a:	4091      	lsls	r1, r2
 800608c:	ea23 0301 	bic.w	r3, r3, r1
 8006090:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8006092:	4091      	lsls	r1, r2
 8006094:	430b      	orrs	r3, r1
 8006096:	6483      	str	r3, [r0, #72]	@ 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8006098:	6830      	ldr	r0, [r6, #0]
 800609a:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 800609c:	21ff      	movs	r1, #255	@ 0xff
 800609e:	4091      	lsls	r1, r2
 80060a0:	ea23 0301 	bic.w	r3, r3, r1
 80060a4:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80060a6:	4091      	lsls	r1, r2
 80060a8:	430b      	orrs	r3, r1
 80060aa:	64c3      	str	r3, [r0, #76]	@ 0x4c
 80060ac:	e7a0      	b.n	8005ff0 <HAL_DAC_ConfigChannel+0x2c>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80060ae:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80060b0:	645a      	str	r2, [r3, #68]	@ 0x44
 80060b2:	e7e4      	b.n	800607e <HAL_DAC_ConfigChannel+0xba>
    tmpreg1 = hdac->Instance->CCR;
 80060b4:	6831      	ldr	r1, [r6, #0]
 80060b6:	6b8a      	ldr	r2, [r1, #56]	@ 0x38
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80060b8:	f005 0010 	and.w	r0, r5, #16
 80060bc:	231f      	movs	r3, #31
 80060be:	4083      	lsls	r3, r0
 80060c0:	ea22 0203 	bic.w	r2, r2, r3
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80060c4:	6a23      	ldr	r3, [r4, #32]
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80060c6:	4083      	lsls	r3, r0
 80060c8:	4313      	orrs	r3, r2
    hdac->Instance->CCR = tmpreg1;
 80060ca:	638b      	str	r3, [r1, #56]	@ 0x38
 80060cc:	e793      	b.n	8005ff6 <HAL_DAC_ConfigChannel+0x32>
    connectOnChip = 0x00000000UL;
 80060ce:	2100      	movs	r1, #0
    else
    {
      connectOnChip = 0x00000000UL;
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80060d0:	68a3      	ldr	r3, [r4, #8]
 80060d2:	6962      	ldr	r2, [r4, #20]
 80060d4:	4313      	orrs	r3, r2
 80060d6:	430b      	orrs	r3, r1
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80060d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80060dc:	40aa      	lsls	r2, r5
 80060de:	ea27 0702 	bic.w	r7, r7, r2
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80060e2:	7922      	ldrb	r2, [r4, #4]
 80060e4:	2a01      	cmp	r2, #1
 80060e6:	d050      	beq.n	800618a <HAL_DAC_ConfigChannel+0x1c6>
 80060e8:	2200      	movs	r2, #0
 80060ea:	4313      	orrs	r3, r2
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80060ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80060f0:	40aa      	lsls	r2, r5
 80060f2:	ea27 0702 	bic.w	r7, r7, r2
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80060f6:	7962      	ldrb	r2, [r4, #5]
 80060f8:	2a01      	cmp	r2, #1
 80060fa:	d049      	beq.n	8006190 <HAL_DAC_ConfigChannel+0x1cc>
 80060fc:	f04f 0800 	mov.w	r8, #0
 8006100:	ea48 0803 	orr.w	r8, r8, r3
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8006104:	f427 4740 	bic.w	r7, r7, #49152	@ 0xc000
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8006108:	6823      	ldr	r3, [r4, #0]
 800610a:	2b02      	cmp	r3, #2
 800610c:	d043      	beq.n	8006196 <HAL_DAC_ConfigChannel+0x1d2>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800610e:	431f      	orrs	r7, r3
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006110:	fa08 f805 	lsl.w	r8, r8, r5
 8006114:	ea48 0707 	orr.w	r7, r8, r7
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8006118:	6832      	ldr	r2, [r6, #0]
 800611a:	63d7      	str	r7, [r2, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800611c:	6831      	ldr	r1, [r6, #0]
 800611e:	680b      	ldr	r3, [r1, #0]
 8006120:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8006124:	40aa      	lsls	r2, r5
 8006126:	ea23 0302 	bic.w	r3, r3, r2
 800612a:	600b      	str	r3, [r1, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800612c:	6831      	ldr	r1, [r6, #0]
 800612e:	680a      	ldr	r2, [r1, #0]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8006130:	f640 73fe 	movw	r3, #4094	@ 0xffe
 8006134:	40ab      	lsls	r3, r5
 8006136:	ea22 0203 	bic.w	r2, r2, r3
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800613a:	68e3      	ldr	r3, [r4, #12]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800613c:	40ab      	lsls	r3, r5
 800613e:	4313      	orrs	r3, r2
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8006140:	600b      	str	r3, [r1, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8006142:	6831      	ldr	r1, [r6, #0]
 8006144:	680b      	ldr	r3, [r1, #0]
 8006146:	22c0      	movs	r2, #192	@ 0xc0
 8006148:	40aa      	lsls	r2, r5
 800614a:	ea23 0302 	bic.w	r3, r3, r2
 800614e:	600b      	str	r3, [r1, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8006150:	68e3      	ldr	r3, [r4, #12]
 8006152:	f3c3 0283 	ubfx	r2, r3, #2, #4
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8006156:	6923      	ldr	r3, [r4, #16]
 8006158:	089b      	lsrs	r3, r3, #2
 800615a:	021b      	lsls	r3, r3, #8
 800615c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006160:	4313      	orrs	r3, r2
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8006162:	6830      	ldr	r0, [r6, #0]
 8006164:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 8006166:	f640 710f 	movw	r1, #3855	@ 0xf0f
 800616a:	40a9      	lsls	r1, r5
 800616c:	ea22 0201 	bic.w	r2, r2, r1
 8006170:	40ab      	lsls	r3, r5
 8006172:	4313      	orrs	r3, r2
 8006174:	6603      	str	r3, [r0, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006176:	2301      	movs	r3, #1
 8006178:	7133      	strb	r3, [r6, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800617a:	2000      	movs	r0, #0
 800617c:	7170      	strb	r0, [r6, #5]

  /* Return function status */
  return status;
}
 800617e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    connectOnChip = DAC_MCR_MODE1_0;
 8006182:	2101      	movs	r1, #1
 8006184:	e7a4      	b.n	80060d0 <HAL_DAC_ConfigChannel+0x10c>
      connectOnChip = 0x00000000UL;
 8006186:	2100      	movs	r1, #0
 8006188:	e7a2      	b.n	80060d0 <HAL_DAC_ConfigChannel+0x10c>
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800618a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800618e:	e7ac      	b.n	80060ea <HAL_DAC_ConfigChannel+0x126>
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8006190:	f44f 7800 	mov.w	r8, #512	@ 0x200
 8006194:	e7b4      	b.n	8006100 <HAL_DAC_ConfigChannel+0x13c>
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8006196:	f001 fc13 	bl	80079c0 <HAL_RCC_GetHCLKFreq>
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800619a:	4b09      	ldr	r3, [pc, #36]	@ (80061c0 <HAL_DAC_ConfigChannel+0x1fc>)
 800619c:	4298      	cmp	r0, r3
 800619e:	d902      	bls.n	80061a6 <HAL_DAC_ConfigChannel+0x1e2>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80061a0:	f447 4700 	orr.w	r7, r7, #32768	@ 0x8000
 80061a4:	e7b4      	b.n	8006110 <HAL_DAC_ConfigChannel+0x14c>
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80061a6:	4b07      	ldr	r3, [pc, #28]	@ (80061c4 <HAL_DAC_ConfigChannel+0x200>)
 80061a8:	4298      	cmp	r0, r3
 80061aa:	d9b1      	bls.n	8006110 <HAL_DAC_ConfigChannel+0x14c>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80061ac:	f447 4780 	orr.w	r7, r7, #16384	@ 0x4000
 80061b0:	e7ae      	b.n	8006110 <HAL_DAC_ConfigChannel+0x14c>
    return HAL_ERROR;
 80061b2:	2001      	movs	r0, #1
}
 80061b4:	4770      	bx	lr
    return HAL_ERROR;
 80061b6:	2001      	movs	r0, #1
 80061b8:	e7e1      	b.n	800617e <HAL_DAC_ConfigChannel+0x1ba>
  __HAL_LOCK(hdac);
 80061ba:	2002      	movs	r0, #2
 80061bc:	e7df      	b.n	800617e <HAL_DAC_ConfigChannel+0x1ba>
 80061be:	bf00      	nop
 80061c0:	09896800 	.word	0x09896800
 80061c4:	04c4b400 	.word	0x04c4b400

080061c8 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80061c8:	4770      	bx	lr

080061ca <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80061ca:	b430      	push	{r4, r5}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80061cc:	6cc4      	ldr	r4, [r0, #76]	@ 0x4c
 80061ce:	6d05      	ldr	r5, [r0, #80]	@ 0x50
 80061d0:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80061d2:	6d44      	ldr	r4, [r0, #84]	@ 0x54
 80061d4:	b114      	cbz	r4, 80061dc <DMA_SetConfig+0x12>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80061d6:	6d84      	ldr	r4, [r0, #88]	@ 0x58
 80061d8:	6dc5      	ldr	r5, [r0, #92]	@ 0x5c
 80061da:	6065      	str	r5, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80061dc:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 80061de:	f004 0c1f 	and.w	ip, r4, #31
 80061e2:	2401      	movs	r4, #1
 80061e4:	fa04 f40c 	lsl.w	r4, r4, ip
 80061e8:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 80061ea:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80061ec:	6804      	ldr	r4, [r0, #0]
 80061ee:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80061f0:	6883      	ldr	r3, [r0, #8]
 80061f2:	2b10      	cmp	r3, #16
 80061f4:	d005      	beq.n	8006202 <DMA_SetConfig+0x38>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80061f6:	6803      	ldr	r3, [r0, #0]
 80061f8:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80061fa:	6803      	ldr	r3, [r0, #0]
 80061fc:	60da      	str	r2, [r3, #12]
  }
}
 80061fe:	bc30      	pop	{r4, r5}
 8006200:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8006202:	6803      	ldr	r3, [r0, #0]
 8006204:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8006206:	6803      	ldr	r3, [r0, #0]
 8006208:	60d9      	str	r1, [r3, #12]
 800620a:	e7f8      	b.n	80061fe <DMA_SetConfig+0x34>

0800620c <DMA_CalcDMAMUXChannelBaseAndMask>:
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800620c:	6803      	ldr	r3, [r0, #0]
 800620e:	4a0c      	ldr	r2, [pc, #48]	@ (8006240 <DMA_CalcDMAMUXChannelBaseAndMask+0x34>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d813      	bhi.n	800623c <DMA_CalcDMAMUXChannelBaseAndMask+0x30>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8006214:	490b      	ldr	r1, [pc, #44]	@ (8006244 <DMA_CalcDMAMUXChannelBaseAndMask+0x38>)
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006216:	b2db      	uxtb	r3, r3
 8006218:	3b08      	subs	r3, #8
 800621a:	4a0b      	ldr	r2, [pc, #44]	@ (8006248 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>)
 800621c:	fba2 2303 	umull	r2, r3, r2, r3
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006220:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8006222:	f022 0203 	bic.w	r2, r2, #3
 8006226:	440a      	add	r2, r1
 8006228:	6482      	str	r2, [r0, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800622a:	4a08      	ldr	r2, [pc, #32]	@ (800624c <DMA_CalcDMAMUXChannelBaseAndMask+0x40>)
 800622c:	64c2      	str	r2, [r0, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800622e:	f3c3 1304 	ubfx	r3, r3, #4, #5
 8006232:	2201      	movs	r2, #1
 8006234:	fa02 f303 	lsl.w	r3, r2, r3
 8006238:	6503      	str	r3, [r0, #80]	@ 0x50
}
 800623a:	4770      	bx	lr
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800623c:	4904      	ldr	r1, [pc, #16]	@ (8006250 <DMA_CalcDMAMUXChannelBaseAndMask+0x44>)
 800623e:	e7ea      	b.n	8006216 <DMA_CalcDMAMUXChannelBaseAndMask+0xa>
 8006240:	40020407 	.word	0x40020407
 8006244:	40020800 	.word	0x40020800
 8006248:	cccccccd 	.word	0xcccccccd
 800624c:	40020880 	.word	0x40020880
 8006250:	40020820 	.word	0x40020820

08006254 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006254:	7903      	ldrb	r3, [r0, #4]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006256:	4a07      	ldr	r2, [pc, #28]	@ (8006274 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x20>)
 8006258:	441a      	add	r2, r3
 800625a:	0092      	lsls	r2, r2, #2
 800625c:	6542      	str	r2, [r0, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800625e:	4a06      	ldr	r2, [pc, #24]	@ (8006278 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 8006260:	6582      	str	r2, [r0, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006262:	3b01      	subs	r3, #1
 8006264:	f003 031f 	and.w	r3, r3, #31
 8006268:	2201      	movs	r2, #1
 800626a:	fa02 f303 	lsl.w	r3, r2, r3
 800626e:	65c3      	str	r3, [r0, #92]	@ 0x5c
}
 8006270:	4770      	bx	lr
 8006272:	bf00      	nop
 8006274:	1000823f 	.word	0x1000823f
 8006278:	40020940 	.word	0x40020940

0800627c <HAL_DMA_Init>:
  if (hdma == NULL)
 800627c:	2800      	cmp	r0, #0
 800627e:	d05b      	beq.n	8006338 <HAL_DMA_Init+0xbc>
{
 8006280:	b510      	push	{r4, lr}
 8006282:	4604      	mov	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006284:	6801      	ldr	r1, [r0, #0]
 8006286:	4b2d      	ldr	r3, [pc, #180]	@ (800633c <HAL_DMA_Init+0xc0>)
 8006288:	4299      	cmp	r1, r3
 800628a:	d83d      	bhi.n	8006308 <HAL_DMA_Init+0x8c>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800628c:	4b2c      	ldr	r3, [pc, #176]	@ (8006340 <HAL_DMA_Init+0xc4>)
 800628e:	440b      	add	r3, r1
 8006290:	4a2c      	ldr	r2, [pc, #176]	@ (8006344 <HAL_DMA_Init+0xc8>)
 8006292:	fba2 2303 	umull	r2, r3, r2, r3
 8006296:	091b      	lsrs	r3, r3, #4
 8006298:	009b      	lsls	r3, r3, #2
 800629a:	6443      	str	r3, [r0, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800629c:	4b2a      	ldr	r3, [pc, #168]	@ (8006348 <HAL_DMA_Init+0xcc>)
 800629e:	6403      	str	r3, [r0, #64]	@ 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 80062a0:	2302      	movs	r3, #2
 80062a2:	f884 3025 	strb.w	r3, [r4, #37]	@ 0x25
  tmp = hdma->Instance->CCR;
 80062a6:	680a      	ldr	r2, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80062a8:	f422 42ff 	bic.w	r2, r2, #32640	@ 0x7f80
 80062ac:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmp |=  hdma->Init.Direction        |
 80062b0:	68a3      	ldr	r3, [r4, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80062b2:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Direction        |
 80062b4:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80062b6:	6920      	ldr	r0, [r4, #16]
 80062b8:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80062ba:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80062bc:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80062be:	69a0      	ldr	r0, [r4, #24]
 80062c0:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 80062c2:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80062c4:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 80062c6:	6a20      	ldr	r0, [r4, #32]
 80062c8:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 80062ca:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;
 80062cc:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80062ce:	4620      	mov	r0, r4
 80062d0:	f7ff ff9c 	bl	800620c <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80062d4:	68a3      	ldr	r3, [r4, #8]
 80062d6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80062da:	d020      	beq.n	800631e <HAL_DMA_Init+0xa2>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80062dc:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80062de:	7922      	ldrb	r2, [r4, #4]
 80062e0:	601a      	str	r2, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80062e2:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80062e4:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 80062e6:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80062e8:	6863      	ldr	r3, [r4, #4]
 80062ea:	3b01      	subs	r3, #1
 80062ec:	2b03      	cmp	r3, #3
 80062ee:	d919      	bls.n	8006324 <HAL_DMA_Init+0xa8>
    hdma->DMAmuxRequestGen = 0U;
 80062f0:	2300      	movs	r3, #0
 80062f2:	6563      	str	r3, [r4, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80062f4:	65a3      	str	r3, [r4, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80062f6:	65e3      	str	r3, [r4, #92]	@ 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80062f8:	2000      	movs	r0, #0
 80062fa:	63e0      	str	r0, [r4, #60]	@ 0x3c
  hdma->State  = HAL_DMA_STATE_READY;
 80062fc:	2301      	movs	r3, #1
 80062fe:	f884 3025 	strb.w	r3, [r4, #37]	@ 0x25
  hdma->Lock = HAL_UNLOCKED;
 8006302:	f884 0024 	strb.w	r0, [r4, #36]	@ 0x24
}
 8006306:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8006308:	4b10      	ldr	r3, [pc, #64]	@ (800634c <HAL_DMA_Init+0xd0>)
 800630a:	440b      	add	r3, r1
 800630c:	4a0d      	ldr	r2, [pc, #52]	@ (8006344 <HAL_DMA_Init+0xc8>)
 800630e:	fba2 2303 	umull	r2, r3, r2, r3
 8006312:	091b      	lsrs	r3, r3, #4
 8006314:	009b      	lsls	r3, r3, #2
 8006316:	6443      	str	r3, [r0, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8006318:	4b0d      	ldr	r3, [pc, #52]	@ (8006350 <HAL_DMA_Init+0xd4>)
 800631a:	6403      	str	r3, [r0, #64]	@ 0x40
 800631c:	e7c0      	b.n	80062a0 <HAL_DMA_Init+0x24>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800631e:	2300      	movs	r3, #0
 8006320:	6063      	str	r3, [r4, #4]
 8006322:	e7db      	b.n	80062dc <HAL_DMA_Init+0x60>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006324:	4620      	mov	r0, r4
 8006326:	f7ff ff95 	bl	8006254 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800632a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800632c:	2200      	movs	r2, #0
 800632e:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006330:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006332:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8006334:	605a      	str	r2, [r3, #4]
 8006336:	e7df      	b.n	80062f8 <HAL_DMA_Init+0x7c>
    return HAL_ERROR;
 8006338:	2001      	movs	r0, #1
}
 800633a:	4770      	bx	lr
 800633c:	40020407 	.word	0x40020407
 8006340:	bffdfff8 	.word	0xbffdfff8
 8006344:	cccccccd 	.word	0xcccccccd
 8006348:	40020000 	.word	0x40020000
 800634c:	bffdfbf8 	.word	0xbffdfbf8
 8006350:	40020400 	.word	0x40020400

08006354 <HAL_DMA_DeInit>:
  if (NULL == hdma)
 8006354:	2800      	cmp	r0, #0
 8006356:	d04b      	beq.n	80063f0 <HAL_DMA_DeInit+0x9c>
{
 8006358:	b538      	push	{r3, r4, r5, lr}
 800635a:	4604      	mov	r4, r0
  __HAL_DMA_DISABLE(hdma);
 800635c:	6802      	ldr	r2, [r0, #0]
 800635e:	6813      	ldr	r3, [r2, #0]
 8006360:	f023 0301 	bic.w	r3, r3, #1
 8006364:	6013      	str	r3, [r2, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006366:	6802      	ldr	r2, [r0, #0]
 8006368:	4b22      	ldr	r3, [pc, #136]	@ (80063f4 <HAL_DMA_DeInit+0xa0>)
 800636a:	429a      	cmp	r2, r3
 800636c:	d82c      	bhi.n	80063c8 <HAL_DMA_DeInit+0x74>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800636e:	4b22      	ldr	r3, [pc, #136]	@ (80063f8 <HAL_DMA_DeInit+0xa4>)
 8006370:	4413      	add	r3, r2
 8006372:	4922      	ldr	r1, [pc, #136]	@ (80063fc <HAL_DMA_DeInit+0xa8>)
 8006374:	fba1 1303 	umull	r1, r3, r1, r3
 8006378:	091b      	lsrs	r3, r3, #4
 800637a:	009b      	lsls	r3, r3, #2
 800637c:	6443      	str	r3, [r0, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800637e:	4b20      	ldr	r3, [pc, #128]	@ (8006400 <HAL_DMA_DeInit+0xac>)
 8006380:	6403      	str	r3, [r0, #64]	@ 0x40
  hdma->Instance->CCR  = 0;
 8006382:	2500      	movs	r5, #0
 8006384:	6015      	str	r5, [r2, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006386:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8006388:	f003 021f 	and.w	r2, r3, #31
 800638c:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 800638e:	2301      	movs	r3, #1
 8006390:	4093      	lsls	r3, r2
 8006392:	604b      	str	r3, [r1, #4]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006394:	4620      	mov	r0, r4
 8006396:	f7ff ff39 	bl	800620c <DMA_CalcDMAMUXChannelBaseAndMask>
  hdma->DMAmuxChannel->CCR = 0;
 800639a:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800639c:	601d      	str	r5, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800639e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80063a0:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 80063a2:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80063a4:	6863      	ldr	r3, [r4, #4]
 80063a6:	3b01      	subs	r3, #1
 80063a8:	2b03      	cmp	r3, #3
 80063aa:	d918      	bls.n	80063de <HAL_DMA_DeInit+0x8a>
  hdma->DMAmuxRequestGen = 0U;
 80063ac:	2000      	movs	r0, #0
 80063ae:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 80063b0:	65a0      	str	r0, [r4, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 80063b2:	65e0      	str	r0, [r4, #92]	@ 0x5c
  hdma->XferCpltCallback = NULL;
 80063b4:	62e0      	str	r0, [r4, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80063b6:	6320      	str	r0, [r4, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 80063b8:	6360      	str	r0, [r4, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 80063ba:	63a0      	str	r0, [r4, #56]	@ 0x38
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80063bc:	63e0      	str	r0, [r4, #60]	@ 0x3c
  hdma->State = HAL_DMA_STATE_RESET;
 80063be:	f884 0025 	strb.w	r0, [r4, #37]	@ 0x25
  __HAL_UNLOCK(hdma);
 80063c2:	f884 0024 	strb.w	r0, [r4, #36]	@ 0x24
}
 80063c6:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80063c8:	4b0e      	ldr	r3, [pc, #56]	@ (8006404 <HAL_DMA_DeInit+0xb0>)
 80063ca:	4413      	add	r3, r2
 80063cc:	490b      	ldr	r1, [pc, #44]	@ (80063fc <HAL_DMA_DeInit+0xa8>)
 80063ce:	fba1 1303 	umull	r1, r3, r1, r3
 80063d2:	091b      	lsrs	r3, r3, #4
 80063d4:	009b      	lsls	r3, r3, #2
 80063d6:	6443      	str	r3, [r0, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80063d8:	4b0b      	ldr	r3, [pc, #44]	@ (8006408 <HAL_DMA_DeInit+0xb4>)
 80063da:	6403      	str	r3, [r0, #64]	@ 0x40
 80063dc:	e7d1      	b.n	8006382 <HAL_DMA_DeInit+0x2e>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80063de:	4620      	mov	r0, r4
 80063e0:	f7ff ff38 	bl	8006254 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80063e4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80063e6:	601d      	str	r5, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80063e8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80063ea:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80063ec:	605a      	str	r2, [r3, #4]
 80063ee:	e7dd      	b.n	80063ac <HAL_DMA_DeInit+0x58>
    return HAL_ERROR;
 80063f0:	2001      	movs	r0, #1
}
 80063f2:	4770      	bx	lr
 80063f4:	40020407 	.word	0x40020407
 80063f8:	bffdfff8 	.word	0xbffdfff8
 80063fc:	cccccccd 	.word	0xcccccccd
 8006400:	40020000 	.word	0x40020000
 8006404:	bffdfbf8 	.word	0xbffdfbf8
 8006408:	40020400 	.word	0x40020400

0800640c <HAL_DMA_Start_IT>:
{
 800640c:	b538      	push	{r3, r4, r5, lr}
 800640e:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8006410:	f890 0024 	ldrb.w	r0, [r0, #36]	@ 0x24
 8006414:	2801      	cmp	r0, #1
 8006416:	d041      	beq.n	800649c <HAL_DMA_Start_IT+0x90>
 8006418:	2001      	movs	r0, #1
 800641a:	f884 0024 	strb.w	r0, [r4, #36]	@ 0x24
  if (HAL_DMA_STATE_READY == hdma->State)
 800641e:	f894 0025 	ldrb.w	r0, [r4, #37]	@ 0x25
 8006422:	b2c0      	uxtb	r0, r0
 8006424:	2801      	cmp	r0, #1
 8006426:	d004      	beq.n	8006432 <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);
 8006428:	2300      	movs	r3, #0
 800642a:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
    status = HAL_BUSY;
 800642e:	2002      	movs	r0, #2
}
 8006430:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8006432:	2002      	movs	r0, #2
 8006434:	f884 0025 	strb.w	r0, [r4, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006438:	2000      	movs	r0, #0
 800643a:	63e0      	str	r0, [r4, #60]	@ 0x3c
    __HAL_DMA_DISABLE(hdma);
 800643c:	6825      	ldr	r5, [r4, #0]
 800643e:	6828      	ldr	r0, [r5, #0]
 8006440:	f020 0001 	bic.w	r0, r0, #1
 8006444:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006446:	4620      	mov	r0, r4
 8006448:	f7ff febf 	bl	80061ca <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 800644c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800644e:	b1d3      	cbz	r3, 8006486 <HAL_DMA_Start_IT+0x7a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006450:	6822      	ldr	r2, [r4, #0]
 8006452:	6813      	ldr	r3, [r2, #0]
 8006454:	f043 030e 	orr.w	r3, r3, #14
 8006458:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800645a:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
 8006462:	d003      	beq.n	800646c <HAL_DMA_Start_IT+0x60>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006464:	681a      	ldr	r2, [r3, #0]
 8006466:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800646a:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 800646c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800646e:	b11b      	cbz	r3, 8006478 <HAL_DMA_Start_IT+0x6c>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006476:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8006478:	6822      	ldr	r2, [r4, #0]
 800647a:	6813      	ldr	r3, [r2, #0]
 800647c:	f043 0301 	orr.w	r3, r3, #1
 8006480:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006482:	2000      	movs	r0, #0
 8006484:	e7d4      	b.n	8006430 <HAL_DMA_Start_IT+0x24>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006486:	6822      	ldr	r2, [r4, #0]
 8006488:	6813      	ldr	r3, [r2, #0]
 800648a:	f023 0304 	bic.w	r3, r3, #4
 800648e:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006490:	6822      	ldr	r2, [r4, #0]
 8006492:	6813      	ldr	r3, [r2, #0]
 8006494:	f043 030a 	orr.w	r3, r3, #10
 8006498:	6013      	str	r3, [r2, #0]
 800649a:	e7de      	b.n	800645a <HAL_DMA_Start_IT+0x4e>
  __HAL_LOCK(hdma);
 800649c:	2002      	movs	r0, #2
 800649e:	e7c7      	b.n	8006430 <HAL_DMA_Start_IT+0x24>

080064a0 <HAL_DMA_Abort>:
{
 80064a0:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80064a2:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 80064a6:	b2d2      	uxtb	r2, r2
 80064a8:	2a02      	cmp	r2, #2
 80064aa:	d009      	beq.n	80064c0 <HAL_DMA_Abort+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80064ac:	2204      	movs	r2, #4
 80064ae:	63c2      	str	r2, [r0, #60]	@ 0x3c
    status = HAL_ERROR;
 80064b0:	2001      	movs	r0, #1
  hdma->State = HAL_DMA_STATE_READY;
 80064b2:	2201      	movs	r2, #1
 80064b4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  __HAL_UNLOCK(hdma);
 80064b8:	2200      	movs	r2, #0
 80064ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 80064be:	4770      	bx	lr
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80064c0:	6801      	ldr	r1, [r0, #0]
 80064c2:	680a      	ldr	r2, [r1, #0]
 80064c4:	f022 020e 	bic.w	r2, r2, #14
 80064c8:	600a      	str	r2, [r1, #0]
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80064ca:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 80064cc:	680a      	ldr	r2, [r1, #0]
 80064ce:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80064d2:	600a      	str	r2, [r1, #0]
     __HAL_DMA_DISABLE(hdma);
 80064d4:	6801      	ldr	r1, [r0, #0]
 80064d6:	680a      	ldr	r2, [r1, #0]
 80064d8:	f022 0201 	bic.w	r2, r2, #1
 80064dc:	600a      	str	r2, [r1, #0]
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80064de:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 80064e0:	f002 011f 	and.w	r1, r2, #31
 80064e4:	6c00      	ldr	r0, [r0, #64]	@ 0x40
 80064e6:	2201      	movs	r2, #1
 80064e8:	408a      	lsls	r2, r1
 80064ea:	6042      	str	r2, [r0, #4]
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80064ec:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80064ee:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80064f0:	6051      	str	r1, [r2, #4]
     if (hdma->DMAmuxRequestGen != 0U)
 80064f2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80064f4:	b142      	cbz	r2, 8006508 <HAL_DMA_Abort+0x68>
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80064f6:	6811      	ldr	r1, [r2, #0]
 80064f8:	f421 7180 	bic.w	r1, r1, #256	@ 0x100
 80064fc:	6011      	str	r1, [r2, #0]
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80064fe:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006500:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8006502:	6051      	str	r1, [r2, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006504:	2000      	movs	r0, #0
 8006506:	e7d4      	b.n	80064b2 <HAL_DMA_Abort+0x12>
 8006508:	2000      	movs	r0, #0
 800650a:	e7d2      	b.n	80064b2 <HAL_DMA_Abort+0x12>

0800650c <HAL_DMA_Abort_IT>:
{
 800650c:	b508      	push	{r3, lr}
  if (HAL_DMA_STATE_BUSY != hdma->State)
 800650e:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 8006512:	b2db      	uxtb	r3, r3
 8006514:	2b02      	cmp	r3, #2
 8006516:	d009      	beq.n	800652c <HAL_DMA_Abort_IT+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006518:	2304      	movs	r3, #4
 800651a:	63c3      	str	r3, [r0, #60]	@ 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 800651c:	2301      	movs	r3, #1
 800651e:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 8006522:	2200      	movs	r2, #0
 8006524:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
    status = HAL_ERROR;
 8006528:	4618      	mov	r0, r3
}
 800652a:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800652c:	6802      	ldr	r2, [r0, #0]
 800652e:	6813      	ldr	r3, [r2, #0]
 8006530:	f023 030e 	bic.w	r3, r3, #14
 8006534:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8006536:	6802      	ldr	r2, [r0, #0]
 8006538:	6813      	ldr	r3, [r2, #0]
 800653a:	f023 0301 	bic.w	r3, r3, #1
 800653e:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006540:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 8006542:	6813      	ldr	r3, [r2, #0]
 8006544:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006548:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800654a:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800654c:	f003 021f 	and.w	r2, r3, #31
 8006550:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8006552:	2301      	movs	r3, #1
 8006554:	4093      	lsls	r3, r2
 8006556:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006558:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 800655a:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800655c:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 800655e:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8006560:	b133      	cbz	r3, 8006570 <HAL_DMA_Abort_IT+0x64>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006562:	681a      	ldr	r2, [r3, #0]
 8006564:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006568:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800656a:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 800656c:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 800656e:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8006570:	2301      	movs	r3, #1
 8006572:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 8006576:	2300      	movs	r3, #0
 8006578:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    if (hdma->XferAbortCallback != NULL)
 800657c:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800657e:	b113      	cbz	r3, 8006586 <HAL_DMA_Abort_IT+0x7a>
      hdma->XferAbortCallback(hdma);
 8006580:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8006582:	2000      	movs	r0, #0
 8006584:	e7d1      	b.n	800652a <HAL_DMA_Abort_IT+0x1e>
 8006586:	2000      	movs	r0, #0
 8006588:	e7cf      	b.n	800652a <HAL_DMA_Abort_IT+0x1e>

0800658a <HAL_DMA_IRQHandler>:
{
 800658a:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800658c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800658e:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8006590:	6804      	ldr	r4, [r0, #0]
 8006592:	6825      	ldr	r5, [r4, #0]
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8006594:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8006596:	f003 031f 	and.w	r3, r3, #31
 800659a:	2204      	movs	r2, #4
 800659c:	409a      	lsls	r2, r3
 800659e:	420a      	tst	r2, r1
 80065a0:	d015      	beq.n	80065ce <HAL_DMA_IRQHandler+0x44>
 80065a2:	f015 0f04 	tst.w	r5, #4
 80065a6:	d012      	beq.n	80065ce <HAL_DMA_IRQHandler+0x44>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80065a8:	6823      	ldr	r3, [r4, #0]
 80065aa:	f013 0f20 	tst.w	r3, #32
 80065ae:	d103      	bne.n	80065b8 <HAL_DMA_IRQHandler+0x2e>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80065b0:	6823      	ldr	r3, [r4, #0]
 80065b2:	f023 0304 	bic.w	r3, r3, #4
 80065b6:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80065b8:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80065ba:	f003 021f 	and.w	r2, r3, #31
 80065be:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 80065c0:	2304      	movs	r3, #4
 80065c2:	4093      	lsls	r3, r2
 80065c4:	604b      	str	r3, [r1, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 80065c6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80065c8:	b103      	cbz	r3, 80065cc <HAL_DMA_IRQHandler+0x42>
      hdma->XferHalfCpltCallback(hdma);
 80065ca:	4798      	blx	r3
}
 80065cc:	bd38      	pop	{r3, r4, r5, pc}
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80065ce:	2202      	movs	r2, #2
 80065d0:	409a      	lsls	r2, r3
 80065d2:	420a      	tst	r2, r1
 80065d4:	d01c      	beq.n	8006610 <HAL_DMA_IRQHandler+0x86>
           && (0U != (source_it & DMA_IT_TC)))
 80065d6:	f015 0f02 	tst.w	r5, #2
 80065da:	d019      	beq.n	8006610 <HAL_DMA_IRQHandler+0x86>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80065dc:	6823      	ldr	r3, [r4, #0]
 80065de:	f013 0f20 	tst.w	r3, #32
 80065e2:	d106      	bne.n	80065f2 <HAL_DMA_IRQHandler+0x68>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80065e4:	6823      	ldr	r3, [r4, #0]
 80065e6:	f023 030a 	bic.w	r3, r3, #10
 80065ea:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80065ec:	2301      	movs	r3, #1
 80065ee:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80065f2:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80065f4:	f003 021f 	and.w	r2, r3, #31
 80065f8:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 80065fa:	2302      	movs	r3, #2
 80065fc:	4093      	lsls	r3, r2
 80065fe:	604b      	str	r3, [r1, #4]
    __HAL_UNLOCK(hdma);
 8006600:	2300      	movs	r3, #0
 8006602:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    if (hdma->XferCpltCallback != NULL)
 8006606:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8006608:	2b00      	cmp	r3, #0
 800660a:	d0df      	beq.n	80065cc <HAL_DMA_IRQHandler+0x42>
      hdma->XferCpltCallback(hdma);
 800660c:	4798      	blx	r3
 800660e:	e7dd      	b.n	80065cc <HAL_DMA_IRQHandler+0x42>
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8006610:	2208      	movs	r2, #8
 8006612:	fa02 f303 	lsl.w	r3, r2, r3
 8006616:	420b      	tst	r3, r1
 8006618:	d0d8      	beq.n	80065cc <HAL_DMA_IRQHandler+0x42>
           && (0U != (source_it & DMA_IT_TE)))
 800661a:	f015 0f08 	tst.w	r5, #8
 800661e:	d0d5      	beq.n	80065cc <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006620:	6823      	ldr	r3, [r4, #0]
 8006622:	f023 030e 	bic.w	r3, r3, #14
 8006626:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006628:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800662a:	f003 031f 	and.w	r3, r3, #31
 800662e:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8006630:	2201      	movs	r2, #1
 8006632:	fa02 f303 	lsl.w	r3, r2, r3
 8006636:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006638:	63c2      	str	r2, [r0, #60]	@ 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 800663a:	f880 2025 	strb.w	r2, [r0, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 800663e:	2300      	movs	r3, #0
 8006640:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    if (hdma->XferErrorCallback != NULL)
 8006644:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8006646:	2b00      	cmp	r3, #0
 8006648:	d0c0      	beq.n	80065cc <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 800664a:	4798      	blx	r3
  return;
 800664c:	e7be      	b.n	80065cc <HAL_DMA_IRQHandler+0x42>
	...

08006650 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006650:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006652:	b083      	sub	sp, #12
  uint32_t position = 0x00U;
 8006654:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006656:	e062      	b.n	800671e <HAL_GPIO_Init+0xce>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006658:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800665a:	005e      	lsls	r6, r3, #1
 800665c:	2403      	movs	r4, #3
 800665e:	40b4      	lsls	r4, r6
 8006660:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006664:	68cc      	ldr	r4, [r1, #12]
 8006666:	40b4      	lsls	r4, r6
 8006668:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 800666a:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800666c:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800666e:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006672:	684c      	ldr	r4, [r1, #4]
 8006674:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8006678:	409c      	lsls	r4, r3
 800667a:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 800667c:	6044      	str	r4, [r0, #4]
 800667e:	e05f      	b.n	8006740 <HAL_GPIO_Init+0xf0>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006680:	08dd      	lsrs	r5, r3, #3
 8006682:	3508      	adds	r5, #8
 8006684:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006688:	f003 0c07 	and.w	ip, r3, #7
 800668c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8006690:	f04f 0e0f 	mov.w	lr, #15
 8006694:	fa0e fe0c 	lsl.w	lr, lr, ip
 8006698:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800669c:	690c      	ldr	r4, [r1, #16]
 800669e:	fa04 f40c 	lsl.w	r4, r4, ip
 80066a2:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 80066a6:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 80066aa:	e060      	b.n	800676e <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80066ac:	2405      	movs	r4, #5
 80066ae:	e000      	b.n	80066b2 <HAL_GPIO_Init+0x62>
 80066b0:	2400      	movs	r4, #0
 80066b2:	fa04 f40e 	lsl.w	r4, r4, lr
 80066b6:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 80066b8:	f10c 0c02 	add.w	ip, ip, #2
 80066bc:	4d55      	ldr	r5, [pc, #340]	@ (8006814 <HAL_GPIO_Init+0x1c4>)
 80066be:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80066c2:	4c55      	ldr	r4, [pc, #340]	@ (8006818 <HAL_GPIO_Init+0x1c8>)
 80066c4:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 80066c6:	43d4      	mvns	r4, r2
 80066c8:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80066cc:	684f      	ldr	r7, [r1, #4]
 80066ce:	f417 1f80 	tst.w	r7, #1048576	@ 0x100000
 80066d2:	d001      	beq.n	80066d8 <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 80066d4:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 80066d8:	4d4f      	ldr	r5, [pc, #316]	@ (8006818 <HAL_GPIO_Init+0x1c8>)
 80066da:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR1;
 80066dc:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 80066de:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80066e2:	684f      	ldr	r7, [r1, #4]
 80066e4:	f417 1f00 	tst.w	r7, #2097152	@ 0x200000
 80066e8:	d001      	beq.n	80066ee <HAL_GPIO_Init+0x9e>
        {
          temp |= iocurrent;
 80066ea:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 80066ee:	4d4a      	ldr	r5, [pc, #296]	@ (8006818 <HAL_GPIO_Init+0x1c8>)
 80066f0:	60ee      	str	r6, [r5, #12]

        temp = EXTI->EMR1;
 80066f2:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 80066f4:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80066f8:	684f      	ldr	r7, [r1, #4]
 80066fa:	f417 3f00 	tst.w	r7, #131072	@ 0x20000
 80066fe:	d001      	beq.n	8006704 <HAL_GPIO_Init+0xb4>
        {
          temp |= iocurrent;
 8006700:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 8006704:	4d44      	ldr	r5, [pc, #272]	@ (8006818 <HAL_GPIO_Init+0x1c8>)
 8006706:	606e      	str	r6, [r5, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006708:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 800670a:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800670c:	684e      	ldr	r6, [r1, #4]
 800670e:	f416 3f80 	tst.w	r6, #65536	@ 0x10000
 8006712:	d001      	beq.n	8006718 <HAL_GPIO_Init+0xc8>
        {
          temp |= iocurrent;
 8006714:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->IMR1 = temp;
 8006718:	4a3f      	ldr	r2, [pc, #252]	@ (8006818 <HAL_GPIO_Init+0x1c8>)
 800671a:	6014      	str	r4, [r2, #0]
      }
    }

    position++;
 800671c:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 800671e:	680a      	ldr	r2, [r1, #0]
 8006720:	fa32 f403 	lsrs.w	r4, r2, r3
 8006724:	d074      	beq.n	8006810 <HAL_GPIO_Init+0x1c0>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006726:	f04f 0c01 	mov.w	ip, #1
 800672a:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 800672e:	ea1c 0202 	ands.w	r2, ip, r2
 8006732:	d0f3      	beq.n	800671c <HAL_GPIO_Init+0xcc>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006734:	684c      	ldr	r4, [r1, #4]
 8006736:	f004 0403 	and.w	r4, r4, #3
 800673a:	3c01      	subs	r4, #1
 800673c:	2c01      	cmp	r4, #1
 800673e:	d98b      	bls.n	8006658 <HAL_GPIO_Init+0x8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006740:	684c      	ldr	r4, [r1, #4]
 8006742:	f004 0403 	and.w	r4, r4, #3
 8006746:	2c03      	cmp	r4, #3
 8006748:	d00c      	beq.n	8006764 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 800674a:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800674c:	005d      	lsls	r5, r3, #1
 800674e:	f04f 0c03 	mov.w	ip, #3
 8006752:	fa0c fc05 	lsl.w	ip, ip, r5
 8006756:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800675a:	688c      	ldr	r4, [r1, #8]
 800675c:	40ac      	lsls	r4, r5
 800675e:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 8006762:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006764:	684c      	ldr	r4, [r1, #4]
 8006766:	f004 0403 	and.w	r4, r4, #3
 800676a:	2c02      	cmp	r4, #2
 800676c:	d088      	beq.n	8006680 <HAL_GPIO_Init+0x30>
      temp = GPIOx->MODER;
 800676e:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006770:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8006774:	f04f 0c03 	mov.w	ip, #3
 8006778:	fa0c fc0e 	lsl.w	ip, ip, lr
 800677c:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006780:	684c      	ldr	r4, [r1, #4]
 8006782:	f004 0403 	and.w	r4, r4, #3
 8006786:	fa04 f40e 	lsl.w	r4, r4, lr
 800678a:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 800678e:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006790:	684c      	ldr	r4, [r1, #4]
 8006792:	f414 3f40 	tst.w	r4, #196608	@ 0x30000
 8006796:	d0c1      	beq.n	800671c <HAL_GPIO_Init+0xcc>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006798:	4c20      	ldr	r4, [pc, #128]	@ (800681c <HAL_GPIO_Init+0x1cc>)
 800679a:	6e25      	ldr	r5, [r4, #96]	@ 0x60
 800679c:	f045 0501 	orr.w	r5, r5, #1
 80067a0:	6625      	str	r5, [r4, #96]	@ 0x60
 80067a2:	6e24      	ldr	r4, [r4, #96]	@ 0x60
 80067a4:	f004 0401 	and.w	r4, r4, #1
 80067a8:	9401      	str	r4, [sp, #4]
 80067aa:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80067ac:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 80067b0:	f10c 0502 	add.w	r5, ip, #2
 80067b4:	4c17      	ldr	r4, [pc, #92]	@ (8006814 <HAL_GPIO_Init+0x1c4>)
 80067b6:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80067ba:	f003 0e03 	and.w	lr, r3, #3
 80067be:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80067c2:	240f      	movs	r4, #15
 80067c4:	fa04 f40e 	lsl.w	r4, r4, lr
 80067c8:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80067cc:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
 80067d0:	f43f af6e 	beq.w	80066b0 <HAL_GPIO_Init+0x60>
 80067d4:	4c12      	ldr	r4, [pc, #72]	@ (8006820 <HAL_GPIO_Init+0x1d0>)
 80067d6:	42a0      	cmp	r0, r4
 80067d8:	d012      	beq.n	8006800 <HAL_GPIO_Init+0x1b0>
 80067da:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80067de:	42a0      	cmp	r0, r4
 80067e0:	d010      	beq.n	8006804 <HAL_GPIO_Init+0x1b4>
 80067e2:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80067e6:	42a0      	cmp	r0, r4
 80067e8:	d00e      	beq.n	8006808 <HAL_GPIO_Init+0x1b8>
 80067ea:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80067ee:	42a0      	cmp	r0, r4
 80067f0:	d00c      	beq.n	800680c <HAL_GPIO_Init+0x1bc>
 80067f2:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80067f6:	42a0      	cmp	r0, r4
 80067f8:	f43f af58 	beq.w	80066ac <HAL_GPIO_Init+0x5c>
 80067fc:	2406      	movs	r4, #6
 80067fe:	e758      	b.n	80066b2 <HAL_GPIO_Init+0x62>
 8006800:	2401      	movs	r4, #1
 8006802:	e756      	b.n	80066b2 <HAL_GPIO_Init+0x62>
 8006804:	2402      	movs	r4, #2
 8006806:	e754      	b.n	80066b2 <HAL_GPIO_Init+0x62>
 8006808:	2403      	movs	r4, #3
 800680a:	e752      	b.n	80066b2 <HAL_GPIO_Init+0x62>
 800680c:	2404      	movs	r4, #4
 800680e:	e750      	b.n	80066b2 <HAL_GPIO_Init+0x62>
  }
}
 8006810:	b003      	add	sp, #12
 8006812:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006814:	40010000 	.word	0x40010000
 8006818:	40010400 	.word	0x40010400
 800681c:	40021000 	.word	0x40021000
 8006820:	48000400 	.word	0x48000400

08006824 <HAL_GPIO_DeInit>:
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00U;
 8006824:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8006826:	fa31 f203 	lsrs.w	r2, r1, r3
 800682a:	f000 8081 	beq.w	8006930 <HAL_GPIO_DeInit+0x10c>
{
 800682e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006830:	e02e      	b.n	8006890 <HAL_GPIO_DeInit+0x6c>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8006832:	2505      	movs	r5, #5
 8006834:	e000      	b.n	8006838 <HAL_GPIO_DeInit+0x14>
 8006836:	2500      	movs	r5, #0
 8006838:	fa05 f50c 	lsl.w	r5, r5, ip
 800683c:	42a5      	cmp	r5, r4
 800683e:	d05b      	beq.n	80068f8 <HAL_GPIO_DeInit+0xd4>
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8006840:	6804      	ldr	r4, [r0, #0]
 8006842:	005d      	lsls	r5, r3, #1
 8006844:	f04f 0c03 	mov.w	ip, #3
 8006848:	fa0c fc05 	lsl.w	ip, ip, r5
 800684c:	ea44 040c 	orr.w	r4, r4, ip
 8006850:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 8006852:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8006856:	f10e 0e08 	add.w	lr, lr, #8
 800685a:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 800685e:	f003 0607 	and.w	r6, r3, #7
 8006862:	00b6      	lsls	r6, r6, #2
 8006864:	250f      	movs	r5, #15
 8006866:	40b5      	lsls	r5, r6
 8006868:	ea24 0405 	bic.w	r4, r4, r5
 800686c:	f840 402e 	str.w	r4, [r0, lr, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8006870:	68c4      	ldr	r4, [r0, #12]
 8006872:	ea24 040c 	bic.w	r4, r4, ip
 8006876:	60c4      	str	r4, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 8006878:	6844      	ldr	r4, [r0, #4]
 800687a:	ea24 0202 	bic.w	r2, r4, r2
 800687e:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006880:	6882      	ldr	r2, [r0, #8]
 8006882:	ea22 020c 	bic.w	r2, r2, ip
 8006886:	6082      	str	r2, [r0, #8]
    }

    position++;
 8006888:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0U)
 800688a:	fa31 f203 	lsrs.w	r2, r1, r3
 800688e:	d04e      	beq.n	800692e <HAL_GPIO_DeInit+0x10a>
    iocurrent = (GPIO_Pin) & (1UL << position);
 8006890:	2201      	movs	r2, #1
 8006892:	409a      	lsls	r2, r3
    if (iocurrent != 0x00u)
 8006894:	ea12 0701 	ands.w	r7, r2, r1
 8006898:	d0f6      	beq.n	8006888 <HAL_GPIO_DeInit+0x64>
      tmp = SYSCFG->EXTICR[position >> 2U];
 800689a:	ea4f 0e93 	mov.w	lr, r3, lsr #2
 800689e:	f10e 0502 	add.w	r5, lr, #2
 80068a2:	4c24      	ldr	r4, [pc, #144]	@ (8006934 <HAL_GPIO_DeInit+0x110>)
 80068a4:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80068a8:	f003 0c03 	and.w	ip, r3, #3
 80068ac:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80068b0:	250f      	movs	r5, #15
 80068b2:	fa05 f60c 	lsl.w	r6, r5, ip
 80068b6:	4034      	ands	r4, r6
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80068b8:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
 80068bc:	d0bb      	beq.n	8006836 <HAL_GPIO_DeInit+0x12>
 80068be:	4d1e      	ldr	r5, [pc, #120]	@ (8006938 <HAL_GPIO_DeInit+0x114>)
 80068c0:	42a8      	cmp	r0, r5
 80068c2:	d011      	beq.n	80068e8 <HAL_GPIO_DeInit+0xc4>
 80068c4:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80068c8:	42a8      	cmp	r0, r5
 80068ca:	d00f      	beq.n	80068ec <HAL_GPIO_DeInit+0xc8>
 80068cc:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80068d0:	42a8      	cmp	r0, r5
 80068d2:	d00d      	beq.n	80068f0 <HAL_GPIO_DeInit+0xcc>
 80068d4:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80068d8:	42a8      	cmp	r0, r5
 80068da:	d00b      	beq.n	80068f4 <HAL_GPIO_DeInit+0xd0>
 80068dc:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80068e0:	42a8      	cmp	r0, r5
 80068e2:	d0a6      	beq.n	8006832 <HAL_GPIO_DeInit+0xe>
 80068e4:	2506      	movs	r5, #6
 80068e6:	e7a7      	b.n	8006838 <HAL_GPIO_DeInit+0x14>
 80068e8:	2501      	movs	r5, #1
 80068ea:	e7a5      	b.n	8006838 <HAL_GPIO_DeInit+0x14>
 80068ec:	2502      	movs	r5, #2
 80068ee:	e7a3      	b.n	8006838 <HAL_GPIO_DeInit+0x14>
 80068f0:	2503      	movs	r5, #3
 80068f2:	e7a1      	b.n	8006838 <HAL_GPIO_DeInit+0x14>
 80068f4:	2504      	movs	r5, #4
 80068f6:	e79f      	b.n	8006838 <HAL_GPIO_DeInit+0x14>
        EXTI->IMR1 &= ~(iocurrent);
 80068f8:	4c10      	ldr	r4, [pc, #64]	@ (800693c <HAL_GPIO_DeInit+0x118>)
 80068fa:	6825      	ldr	r5, [r4, #0]
 80068fc:	ea25 0507 	bic.w	r5, r5, r7
 8006900:	6025      	str	r5, [r4, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8006902:	6865      	ldr	r5, [r4, #4]
 8006904:	ea25 0507 	bic.w	r5, r5, r7
 8006908:	6065      	str	r5, [r4, #4]
        EXTI->FTSR1 &= ~(iocurrent);
 800690a:	68e5      	ldr	r5, [r4, #12]
 800690c:	ea25 0507 	bic.w	r5, r5, r7
 8006910:	60e5      	str	r5, [r4, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8006912:	68a5      	ldr	r5, [r4, #8]
 8006914:	ea25 0507 	bic.w	r5, r5, r7
 8006918:	60a5      	str	r5, [r4, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800691a:	4f06      	ldr	r7, [pc, #24]	@ (8006934 <HAL_GPIO_DeInit+0x110>)
 800691c:	f10e 0402 	add.w	r4, lr, #2
 8006920:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8006924:	ea25 0506 	bic.w	r5, r5, r6
 8006928:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
 800692c:	e788      	b.n	8006840 <HAL_GPIO_DeInit+0x1c>
  }
}
 800692e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006930:	4770      	bx	lr
 8006932:	bf00      	nop
 8006934:	40010000 	.word	0x40010000
 8006938:	48000400 	.word	0x48000400
 800693c:	40010400 	.word	0x40010400

08006940 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006940:	b10a      	cbz	r2, 8006946 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006942:	6181      	str	r1, [r0, #24]
 8006944:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006946:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 8006948:	4770      	bx	lr

0800694a <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800694a:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800694c:	ea01 0203 	and.w	r2, r1, r3
 8006950:	ea21 0103 	bic.w	r1, r1, r3
 8006954:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006958:	6181      	str	r1, [r0, #24]
}
 800695a:	4770      	bx	lr

0800695c <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800695c:	6803      	ldr	r3, [r0, #0]
 800695e:	699a      	ldr	r2, [r3, #24]
 8006960:	f012 0f02 	tst.w	r2, #2
 8006964:	d001      	beq.n	800696a <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006966:	2200      	movs	r2, #0
 8006968:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800696a:	6803      	ldr	r3, [r0, #0]
 800696c:	699a      	ldr	r2, [r3, #24]
 800696e:	f012 0f01 	tst.w	r2, #1
 8006972:	d103      	bne.n	800697c <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006974:	699a      	ldr	r2, [r3, #24]
 8006976:	f042 0201 	orr.w	r2, r2, #1
 800697a:	619a      	str	r2, [r3, #24]
  }
}
 800697c:	4770      	bx	lr

0800697e <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800697e:	b410      	push	{r4}
 8006980:	9c01      	ldr	r4, [sp, #4]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006982:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8006986:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800698a:	4319      	orrs	r1, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800698c:	4321      	orrs	r1, r4
 800698e:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006992:	6802      	ldr	r2, [r0, #0]
 8006994:	6853      	ldr	r3, [r2, #4]
 8006996:	0d64      	lsrs	r4, r4, #21
 8006998:	f404 6480 	and.w	r4, r4, #1024	@ 0x400
 800699c:	f044 747f 	orr.w	r4, r4, #66846720	@ 0x3fc0000
 80069a0:	f444 3458 	orr.w	r4, r4, #221184	@ 0x36000
 80069a4:	f444 747f 	orr.w	r4, r4, #1020	@ 0x3fc
 80069a8:	f044 0403 	orr.w	r4, r4, #3
 80069ac:	ea23 0304 	bic.w	r3, r3, r4
 80069b0:	430b      	orrs	r3, r1
 80069b2:	6053      	str	r3, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80069b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80069b8:	4770      	bx	lr

080069ba <I2C_IsErrorOccurred>:
{
 80069ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069be:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 80069c0:	6803      	ldr	r3, [r0, #0]
 80069c2:	699e      	ldr	r6, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80069c4:	f016 0610 	ands.w	r6, r6, #16
 80069c8:	d07c      	beq.n	8006ac4 <I2C_IsErrorOccurred+0x10a>
 80069ca:	460d      	mov	r5, r1
 80069cc:	4690      	mov	r8, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069ce:	2210      	movs	r2, #16
 80069d0:	61da      	str	r2, [r3, #28]
  uint32_t error_code = 0;
 80069d2:	2600      	movs	r6, #0
  HAL_StatusTypeDef status = HAL_OK;
 80069d4:	4637      	mov	r7, r6
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80069d6:	6823      	ldr	r3, [r4, #0]
 80069d8:	6998      	ldr	r0, [r3, #24]
 80069da:	f010 0f20 	tst.w	r0, #32
 80069de:	d130      	bne.n	8006a42 <I2C_IsErrorOccurred+0x88>
 80069e0:	bb7f      	cbnz	r7, 8006a42 <I2C_IsErrorOccurred+0x88>
      if (Timeout != HAL_MAX_DELAY)
 80069e2:	f1b5 3fff 	cmp.w	r5, #4294967295
 80069e6:	d0f6      	beq.n	80069d6 <I2C_IsErrorOccurred+0x1c>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80069e8:	f7fe f958 	bl	8004c9c <HAL_GetTick>
 80069ec:	eba0 0008 	sub.w	r0, r0, r8
 80069f0:	42a8      	cmp	r0, r5
 80069f2:	d801      	bhi.n	80069f8 <I2C_IsErrorOccurred+0x3e>
 80069f4:	2d00      	cmp	r5, #0
 80069f6:	d1ee      	bne.n	80069d6 <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80069f8:	6821      	ldr	r1, [r4, #0]
 80069fa:	684b      	ldr	r3, [r1, #4]
 80069fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          tmp2 = hi2c->Mode;
 8006a00:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
 8006a04:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006a06:	6988      	ldr	r0, [r1, #24]
 8006a08:	f410 4f00 	tst.w	r0, #32768	@ 0x8000
 8006a0c:	d002      	beq.n	8006a14 <I2C_IsErrorOccurred+0x5a>
 8006a0e:	b90b      	cbnz	r3, 8006a14 <I2C_IsErrorOccurred+0x5a>
              (tmp1 != I2C_CR2_STOP) && \
 8006a10:	2a20      	cmp	r2, #32
 8006a12:	d10e      	bne.n	8006a32 <I2C_IsErrorOccurred+0x78>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a14:	6823      	ldr	r3, [r4, #0]
 8006a16:	699b      	ldr	r3, [r3, #24]
 8006a18:	f013 0f20 	tst.w	r3, #32
 8006a1c:	d1db      	bne.n	80069d6 <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006a1e:	f7fe f93d 	bl	8004c9c <HAL_GetTick>
 8006a22:	eba0 0008 	sub.w	r0, r0, r8
 8006a26:	2819      	cmp	r0, #25
 8006a28:	d9f4      	bls.n	8006a14 <I2C_IsErrorOccurred+0x5a>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006a2a:	f046 0620 	orr.w	r6, r6, #32
              status = HAL_ERROR;
 8006a2e:	2701      	movs	r7, #1
              break;
 8006a30:	e7d1      	b.n	80069d6 <I2C_IsErrorOccurred+0x1c>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006a32:	684b      	ldr	r3, [r1, #4]
 8006a34:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006a38:	604b      	str	r3, [r1, #4]
            tickstart = HAL_GetTick();
 8006a3a:	f7fe f92f 	bl	8004c9c <HAL_GetTick>
 8006a3e:	4680      	mov	r8, r0
 8006a40:	e7e8      	b.n	8006a14 <I2C_IsErrorOccurred+0x5a>
    if (status == HAL_OK)
 8006a42:	b90f      	cbnz	r7, 8006a48 <I2C_IsErrorOccurred+0x8e>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a44:	2220      	movs	r2, #32
 8006a46:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 8006a48:	f046 0604 	orr.w	r6, r6, #4
    status = HAL_ERROR;
 8006a4c:	2501      	movs	r5, #1
  itflag = hi2c->Instance->ISR;
 8006a4e:	6822      	ldr	r2, [r4, #0]
 8006a50:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006a52:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8006a56:	d005      	beq.n	8006a64 <I2C_IsErrorOccurred+0xaa>
    error_code |= HAL_I2C_ERROR_BERR;
 8006a58:	f046 0601 	orr.w	r6, r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006a5c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006a60:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 8006a62:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006a64:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8006a68:	d006      	beq.n	8006a78 <I2C_IsErrorOccurred+0xbe>
    error_code |= HAL_I2C_ERROR_OVR;
 8006a6a:	f046 0608 	orr.w	r6, r6, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006a6e:	6822      	ldr	r2, [r4, #0]
 8006a70:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006a74:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 8006a76:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006a78:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8006a7c:	d024      	beq.n	8006ac8 <I2C_IsErrorOccurred+0x10e>
    error_code |= HAL_I2C_ERROR_ARLO;
 8006a7e:	f046 0602 	orr.w	r6, r6, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006a82:	6823      	ldr	r3, [r4, #0]
 8006a84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006a88:	61da      	str	r2, [r3, #28]
    status = HAL_ERROR;
 8006a8a:	2501      	movs	r5, #1
    I2C_Flush_TXDR(hi2c);
 8006a8c:	4620      	mov	r0, r4
 8006a8e:	f7ff ff65 	bl	800695c <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8006a92:	6822      	ldr	r2, [r4, #0]
 8006a94:	6853      	ldr	r3, [r2, #4]
 8006a96:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 8006a9a:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 8006a9e:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8006aa2:	f023 0301 	bic.w	r3, r3, #1
 8006aa6:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 8006aa8:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8006aaa:	4333      	orrs	r3, r6
 8006aac:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006aae:	2320      	movs	r3, #32
 8006ab0:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 8006aba:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 8006abe:	4628      	mov	r0, r5
 8006ac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8006ac4:	2500      	movs	r5, #0
 8006ac6:	e7c2      	b.n	8006a4e <I2C_IsErrorOccurred+0x94>
  if (status != HAL_OK)
 8006ac8:	2d00      	cmp	r5, #0
 8006aca:	d0f8      	beq.n	8006abe <I2C_IsErrorOccurred+0x104>
 8006acc:	e7de      	b.n	8006a8c <I2C_IsErrorOccurred+0xd2>

08006ace <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8006ace:	b570      	push	{r4, r5, r6, lr}
 8006ad0:	4604      	mov	r4, r0
 8006ad2:	460d      	mov	r5, r1
 8006ad4:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006ad6:	6823      	ldr	r3, [r4, #0]
 8006ad8:	699b      	ldr	r3, [r3, #24]
 8006ada:	f013 0f02 	tst.w	r3, #2
 8006ade:	d122      	bne.n	8006b26 <I2C_WaitOnTXISFlagUntilTimeout+0x58>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ae0:	4632      	mov	r2, r6
 8006ae2:	4629      	mov	r1, r5
 8006ae4:	4620      	mov	r0, r4
 8006ae6:	f7ff ff68 	bl	80069ba <I2C_IsErrorOccurred>
 8006aea:	b9f0      	cbnz	r0, 8006b2a <I2C_WaitOnTXISFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 8006aec:	f1b5 3fff 	cmp.w	r5, #4294967295
 8006af0:	d0f1      	beq.n	8006ad6 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006af2:	f7fe f8d3 	bl	8004c9c <HAL_GetTick>
 8006af6:	1b80      	subs	r0, r0, r6
 8006af8:	42a8      	cmp	r0, r5
 8006afa:	d801      	bhi.n	8006b00 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8006afc:	2d00      	cmp	r5, #0
 8006afe:	d1ea      	bne.n	8006ad6 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006b00:	6823      	ldr	r3, [r4, #0]
 8006b02:	699b      	ldr	r3, [r3, #24]
 8006b04:	f013 0f02 	tst.w	r3, #2
 8006b08:	d1e5      	bne.n	8006ad6 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006b0a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8006b0c:	f043 0320 	orr.w	r3, r3, #32
 8006b10:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006b12:	2320      	movs	r3, #32
 8006b14:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
 8006b1e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
          return HAL_ERROR;
 8006b22:	2001      	movs	r0, #1
 8006b24:	e000      	b.n	8006b28 <I2C_WaitOnTXISFlagUntilTimeout+0x5a>
  return HAL_OK;
 8006b26:	2000      	movs	r0, #0
}
 8006b28:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8006b2a:	2001      	movs	r0, #1
 8006b2c:	e7fc      	b.n	8006b28 <I2C_WaitOnTXISFlagUntilTimeout+0x5a>

08006b2e <I2C_WaitOnFlagUntilTimeout>:
{
 8006b2e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b32:	4605      	mov	r5, r0
 8006b34:	4688      	mov	r8, r1
 8006b36:	4617      	mov	r7, r2
 8006b38:	461e      	mov	r6, r3
 8006b3a:	f8dd 9020 	ldr.w	r9, [sp, #32]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006b3e:	682b      	ldr	r3, [r5, #0]
 8006b40:	699c      	ldr	r4, [r3, #24]
 8006b42:	ea38 0404 	bics.w	r4, r8, r4
 8006b46:	bf0c      	ite	eq
 8006b48:	2301      	moveq	r3, #1
 8006b4a:	2300      	movne	r3, #0
 8006b4c:	42bb      	cmp	r3, r7
 8006b4e:	d127      	bne.n	8006ba0 <I2C_WaitOnFlagUntilTimeout+0x72>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b50:	464a      	mov	r2, r9
 8006b52:	4631      	mov	r1, r6
 8006b54:	4628      	mov	r0, r5
 8006b56:	f7ff ff30 	bl	80069ba <I2C_IsErrorOccurred>
 8006b5a:	bb20      	cbnz	r0, 8006ba6 <I2C_WaitOnFlagUntilTimeout+0x78>
    if (Timeout != HAL_MAX_DELAY)
 8006b5c:	f1b6 3fff 	cmp.w	r6, #4294967295
 8006b60:	d0ed      	beq.n	8006b3e <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b62:	f7fe f89b 	bl	8004c9c <HAL_GetTick>
 8006b66:	eba0 0009 	sub.w	r0, r0, r9
 8006b6a:	42b0      	cmp	r0, r6
 8006b6c:	d801      	bhi.n	8006b72 <I2C_WaitOnFlagUntilTimeout+0x44>
 8006b6e:	2e00      	cmp	r6, #0
 8006b70:	d1e5      	bne.n	8006b3e <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006b72:	682b      	ldr	r3, [r5, #0]
 8006b74:	699b      	ldr	r3, [r3, #24]
 8006b76:	ea38 0303 	bics.w	r3, r8, r3
 8006b7a:	bf0c      	ite	eq
 8006b7c:	2301      	moveq	r3, #1
 8006b7e:	2300      	movne	r3, #0
 8006b80:	42bb      	cmp	r3, r7
 8006b82:	d1dc      	bne.n	8006b3e <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006b84:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8006b86:	f043 0320 	orr.w	r3, r3, #32
 8006b8a:	646b      	str	r3, [r5, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006b8c:	2320      	movs	r3, #32
 8006b8e:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b92:	2300      	movs	r3, #0
 8006b94:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
 8006b98:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
          return HAL_ERROR;
 8006b9c:	2001      	movs	r0, #1
 8006b9e:	e000      	b.n	8006ba2 <I2C_WaitOnFlagUntilTimeout+0x74>
  return HAL_OK;
 8006ba0:	2000      	movs	r0, #0
}
 8006ba2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return HAL_ERROR;
 8006ba6:	2001      	movs	r0, #1
 8006ba8:	e7fb      	b.n	8006ba2 <I2C_WaitOnFlagUntilTimeout+0x74>
	...

08006bac <I2C_RequestMemoryWrite>:
{
 8006bac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bb0:	b082      	sub	sp, #8
 8006bb2:	4604      	mov	r4, r0
 8006bb4:	4690      	mov	r8, r2
 8006bb6:	461d      	mov	r5, r3
 8006bb8:	9e08      	ldr	r6, [sp, #32]
 8006bba:	9f09      	ldr	r7, [sp, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006bbc:	4b19      	ldr	r3, [pc, #100]	@ (8006c24 <I2C_RequestMemoryWrite+0x78>)
 8006bbe:	9300      	str	r3, [sp, #0]
 8006bc0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006bc4:	b2ea      	uxtb	r2, r5
 8006bc6:	f7ff feda 	bl	800697e <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006bca:	463a      	mov	r2, r7
 8006bcc:	4631      	mov	r1, r6
 8006bce:	4620      	mov	r0, r4
 8006bd0:	f7ff ff7d 	bl	8006ace <I2C_WaitOnTXISFlagUntilTimeout>
 8006bd4:	b9f8      	cbnz	r0, 8006c16 <I2C_RequestMemoryWrite+0x6a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006bd6:	2d01      	cmp	r5, #1
 8006bd8:	d10e      	bne.n	8006bf8 <I2C_RequestMemoryWrite+0x4c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006bda:	6823      	ldr	r3, [r4, #0]
 8006bdc:	fa5f f288 	uxtb.w	r2, r8
 8006be0:	629a      	str	r2, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006be2:	9700      	str	r7, [sp, #0]
 8006be4:	4633      	mov	r3, r6
 8006be6:	2200      	movs	r2, #0
 8006be8:	2180      	movs	r1, #128	@ 0x80
 8006bea:	4620      	mov	r0, r4
 8006bec:	f7ff ff9f 	bl	8006b2e <I2C_WaitOnFlagUntilTimeout>
 8006bf0:	b9a8      	cbnz	r0, 8006c1e <I2C_RequestMemoryWrite+0x72>
}
 8006bf2:	b002      	add	sp, #8
 8006bf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006bf8:	6823      	ldr	r3, [r4, #0]
 8006bfa:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8006bfe:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c00:	463a      	mov	r2, r7
 8006c02:	4631      	mov	r1, r6
 8006c04:	4620      	mov	r0, r4
 8006c06:	f7ff ff62 	bl	8006ace <I2C_WaitOnTXISFlagUntilTimeout>
 8006c0a:	b930      	cbnz	r0, 8006c1a <I2C_RequestMemoryWrite+0x6e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006c0c:	6823      	ldr	r3, [r4, #0]
 8006c0e:	fa5f f288 	uxtb.w	r2, r8
 8006c12:	629a      	str	r2, [r3, #40]	@ 0x28
 8006c14:	e7e5      	b.n	8006be2 <I2C_RequestMemoryWrite+0x36>
    return HAL_ERROR;
 8006c16:	2001      	movs	r0, #1
 8006c18:	e7eb      	b.n	8006bf2 <I2C_RequestMemoryWrite+0x46>
      return HAL_ERROR;
 8006c1a:	2001      	movs	r0, #1
 8006c1c:	e7e9      	b.n	8006bf2 <I2C_RequestMemoryWrite+0x46>
    return HAL_ERROR;
 8006c1e:	2001      	movs	r0, #1
 8006c20:	e7e7      	b.n	8006bf2 <I2C_RequestMemoryWrite+0x46>
 8006c22:	bf00      	nop
 8006c24:	80002000 	.word	0x80002000

08006c28 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8006c28:	b570      	push	{r4, r5, r6, lr}
 8006c2a:	4604      	mov	r4, r0
 8006c2c:	460d      	mov	r5, r1
 8006c2e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006c30:	e004      	b.n	8006c3c <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006c32:	6823      	ldr	r3, [r4, #0]
 8006c34:	699b      	ldr	r3, [r3, #24]
 8006c36:	f013 0f20 	tst.w	r3, #32
 8006c3a:	d012      	beq.n	8006c62 <I2C_WaitOnSTOPFlagUntilTimeout+0x3a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006c3c:	6823      	ldr	r3, [r4, #0]
 8006c3e:	699b      	ldr	r3, [r3, #24]
 8006c40:	f013 0f20 	tst.w	r3, #32
 8006c44:	d11b      	bne.n	8006c7e <I2C_WaitOnSTOPFlagUntilTimeout+0x56>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c46:	4632      	mov	r2, r6
 8006c48:	4629      	mov	r1, r5
 8006c4a:	4620      	mov	r0, r4
 8006c4c:	f7ff feb5 	bl	80069ba <I2C_IsErrorOccurred>
 8006c50:	b9b8      	cbnz	r0, 8006c82 <I2C_WaitOnSTOPFlagUntilTimeout+0x5a>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c52:	f7fe f823 	bl	8004c9c <HAL_GetTick>
 8006c56:	1b80      	subs	r0, r0, r6
 8006c58:	42a8      	cmp	r0, r5
 8006c5a:	d8ea      	bhi.n	8006c32 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
 8006c5c:	2d00      	cmp	r5, #0
 8006c5e:	d1ed      	bne.n	8006c3c <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
 8006c60:	e7e7      	b.n	8006c32 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006c62:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8006c64:	f043 0320 	orr.w	r3, r3, #32
 8006c68:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006c6a:	2320      	movs	r3, #32
 8006c6c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c70:	2300      	movs	r3, #0
 8006c72:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        __HAL_UNLOCK(hi2c);
 8006c76:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        return HAL_ERROR;
 8006c7a:	2001      	movs	r0, #1
 8006c7c:	e000      	b.n	8006c80 <I2C_WaitOnSTOPFlagUntilTimeout+0x58>
  return HAL_OK;
 8006c7e:	2000      	movs	r0, #0
}
 8006c80:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8006c82:	2001      	movs	r0, #1
 8006c84:	e7fc      	b.n	8006c80 <I2C_WaitOnSTOPFlagUntilTimeout+0x58>

08006c86 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8006c86:	2800      	cmp	r0, #0
 8006c88:	d05f      	beq.n	8006d4a <HAL_I2C_Init+0xc4>
{
 8006c8a:	b510      	push	{r4, lr}
 8006c8c:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006c8e:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d048      	beq.n	8006d28 <HAL_I2C_Init+0xa2>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8006c96:	2324      	movs	r3, #36	@ 0x24
 8006c98:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 8006c9c:	6822      	ldr	r2, [r4, #0]
 8006c9e:	6813      	ldr	r3, [r2, #0]
 8006ca0:	f023 0301 	bic.w	r3, r3, #1
 8006ca4:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006ca6:	6863      	ldr	r3, [r4, #4]
 8006ca8:	6822      	ldr	r2, [r4, #0]
 8006caa:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8006cae:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006cb0:	6822      	ldr	r2, [r4, #0]
 8006cb2:	6893      	ldr	r3, [r2, #8]
 8006cb4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006cb8:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006cba:	68e3      	ldr	r3, [r4, #12]
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d038      	beq.n	8006d32 <HAL_I2C_Init+0xac>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006cc0:	68a3      	ldr	r3, [r4, #8]
 8006cc2:	6822      	ldr	r2, [r4, #0]
 8006cc4:	f443 4304 	orr.w	r3, r3, #33792	@ 0x8400
 8006cc8:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006cca:	68e3      	ldr	r3, [r4, #12]
 8006ccc:	2b02      	cmp	r3, #2
 8006cce:	d036      	beq.n	8006d3e <HAL_I2C_Init+0xb8>
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006cd0:	6822      	ldr	r2, [r4, #0]
 8006cd2:	6853      	ldr	r3, [r2, #4]
 8006cd4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006cd8:	6053      	str	r3, [r2, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006cda:	6822      	ldr	r2, [r4, #0]
 8006cdc:	6853      	ldr	r3, [r2, #4]
 8006cde:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006ce2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ce6:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006ce8:	6822      	ldr	r2, [r4, #0]
 8006cea:	68d3      	ldr	r3, [r2, #12]
 8006cec:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006cf0:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006cf2:	6923      	ldr	r3, [r4, #16]
 8006cf4:	6962      	ldr	r2, [r4, #20]
 8006cf6:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006cf8:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006cfa:	6822      	ldr	r2, [r4, #0]
 8006cfc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006d00:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006d02:	69e3      	ldr	r3, [r4, #28]
 8006d04:	6a21      	ldr	r1, [r4, #32]
 8006d06:	6822      	ldr	r2, [r4, #0]
 8006d08:	430b      	orrs	r3, r1
 8006d0a:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8006d0c:	6822      	ldr	r2, [r4, #0]
 8006d0e:	6813      	ldr	r3, [r2, #0]
 8006d10:	f043 0301 	orr.w	r3, r3, #1
 8006d14:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d16:	2000      	movs	r0, #0
 8006d18:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006d1a:	2320      	movs	r3, #32
 8006d1c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006d20:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d22:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 8006d26:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8006d28:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 8006d2c:	f7fd fa2a 	bl	8004184 <HAL_I2C_MspInit>
 8006d30:	e7b1      	b.n	8006c96 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006d32:	68a3      	ldr	r3, [r4, #8]
 8006d34:	6822      	ldr	r2, [r4, #0]
 8006d36:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d3a:	6093      	str	r3, [r2, #8]
 8006d3c:	e7c5      	b.n	8006cca <HAL_I2C_Init+0x44>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006d3e:	6822      	ldr	r2, [r4, #0]
 8006d40:	6853      	ldr	r3, [r2, #4]
 8006d42:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8006d46:	6053      	str	r3, [r2, #4]
 8006d48:	e7c7      	b.n	8006cda <HAL_I2C_Init+0x54>
    return HAL_ERROR;
 8006d4a:	2001      	movs	r0, #1
}
 8006d4c:	4770      	bx	lr

08006d4e <HAL_I2C_Mem_Write>:
{
 8006d4e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d52:	b083      	sub	sp, #12
 8006d54:	460e      	mov	r6, r1
 8006d56:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 8006d5a:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d5c:	f890 1041 	ldrb.w	r1, [r0, #65]	@ 0x41
 8006d60:	b2c9      	uxtb	r1, r1
 8006d62:	2920      	cmp	r1, #32
 8006d64:	f040 80bb 	bne.w	8006ede <HAL_I2C_Mem_Write+0x190>
 8006d68:	4604      	mov	r4, r0
 8006d6a:	4690      	mov	r8, r2
 8006d6c:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 8006d6e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006d70:	b1cb      	cbz	r3, 8006da6 <HAL_I2C_Mem_Write+0x58>
 8006d72:	f1ba 0f00 	cmp.w	sl, #0
 8006d76:	d016      	beq.n	8006da6 <HAL_I2C_Mem_Write+0x58>
    __HAL_LOCK(hi2c);
 8006d78:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	f000 80b2 	beq.w	8006ee6 <HAL_I2C_Mem_Write+0x198>
 8006d82:	f04f 0b01 	mov.w	fp, #1
 8006d86:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 8006d8a:	f7fd ff87 	bl	8004c9c <HAL_GetTick>
 8006d8e:	4607      	mov	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006d90:	9000      	str	r0, [sp, #0]
 8006d92:	2319      	movs	r3, #25
 8006d94:	465a      	mov	r2, fp
 8006d96:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006d9a:	4620      	mov	r0, r4
 8006d9c:	f7ff fec7 	bl	8006b2e <I2C_WaitOnFlagUntilTimeout>
 8006da0:	b130      	cbz	r0, 8006db0 <HAL_I2C_Mem_Write+0x62>
      return HAL_ERROR;
 8006da2:	2001      	movs	r0, #1
 8006da4:	e09c      	b.n	8006ee0 <HAL_I2C_Mem_Write+0x192>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006da6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006daa:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 8006dac:	2001      	movs	r0, #1
 8006dae:	e097      	b.n	8006ee0 <HAL_I2C_Mem_Write+0x192>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006db0:	2321      	movs	r3, #33	@ 0x21
 8006db2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006db6:	2340      	movs	r3, #64	@ 0x40
 8006db8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
 8006dc0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006dc2:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006dc4:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006dc8:	6363      	str	r3, [r4, #52]	@ 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006dca:	9701      	str	r7, [sp, #4]
 8006dcc:	9500      	str	r5, [sp, #0]
 8006dce:	464b      	mov	r3, r9
 8006dd0:	4642      	mov	r2, r8
 8006dd2:	4631      	mov	r1, r6
 8006dd4:	4620      	mov	r0, r4
 8006dd6:	f7ff fee9 	bl	8006bac <I2C_RequestMemoryWrite>
 8006dda:	b970      	cbnz	r0, 8006dfa <HAL_I2C_Mem_Write+0xac>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006ddc:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	2bff      	cmp	r3, #255	@ 0xff
 8006de2:	d90f      	bls.n	8006e04 <HAL_I2C_Mem_Write+0xb6>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006de4:	22ff      	movs	r2, #255	@ 0xff
 8006de6:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006de8:	2300      	movs	r3, #0
 8006dea:	9300      	str	r3, [sp, #0]
 8006dec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006df0:	4631      	mov	r1, r6
 8006df2:	4620      	mov	r0, r4
 8006df4:	f7ff fdc3 	bl	800697e <I2C_TransferConfig>
 8006df8:	e021      	b.n	8006e3e <HAL_I2C_Mem_Write+0xf0>
      __HAL_UNLOCK(hi2c);
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8006e00:	4658      	mov	r0, fp
 8006e02:	e06d      	b.n	8006ee0 <HAL_I2C_Mem_Write+0x192>
      hi2c->XferSize = hi2c->XferCount;
 8006e04:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8006e06:	b292      	uxth	r2, r2
 8006e08:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	9300      	str	r3, [sp, #0]
 8006e0e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006e12:	b2d2      	uxtb	r2, r2
 8006e14:	4631      	mov	r1, r6
 8006e16:	4620      	mov	r0, r4
 8006e18:	f7ff fdb1 	bl	800697e <I2C_TransferConfig>
 8006e1c:	e00f      	b.n	8006e3e <HAL_I2C_Mem_Write+0xf0>
          hi2c->XferSize = hi2c->XferCount;
 8006e1e:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8006e20:	b292      	uxth	r2, r2
 8006e22:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006e24:	2300      	movs	r3, #0
 8006e26:	9300      	str	r3, [sp, #0]
 8006e28:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006e2c:	b2d2      	uxtb	r2, r2
 8006e2e:	4631      	mov	r1, r6
 8006e30:	4620      	mov	r0, r4
 8006e32:	f7ff fda4 	bl	800697e <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8006e36:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d033      	beq.n	8006ea6 <HAL_I2C_Mem_Write+0x158>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e3e:	463a      	mov	r2, r7
 8006e40:	4629      	mov	r1, r5
 8006e42:	4620      	mov	r0, r4
 8006e44:	f7ff fe43 	bl	8006ace <I2C_WaitOnTXISFlagUntilTimeout>
 8006e48:	2800      	cmp	r0, #0
 8006e4a:	d14e      	bne.n	8006eea <HAL_I2C_Mem_Write+0x19c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006e4c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8006e4e:	6823      	ldr	r3, [r4, #0]
 8006e50:	7812      	ldrb	r2, [r2, #0]
 8006e52:	629a      	str	r2, [r3, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8006e54:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006e56:	3301      	adds	r3, #1
 8006e58:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8006e5a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8006e5c:	b29b      	uxth	r3, r3
 8006e5e:	3b01      	subs	r3, #1
 8006e60:	b29b      	uxth	r3, r3
 8006e62:	8563      	strh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8006e64:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8006e66:	3b01      	subs	r3, #1
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006e6c:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8006e6e:	b292      	uxth	r2, r2
 8006e70:	2a00      	cmp	r2, #0
 8006e72:	d0e0      	beq.n	8006e36 <HAL_I2C_Mem_Write+0xe8>
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d1de      	bne.n	8006e36 <HAL_I2C_Mem_Write+0xe8>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006e78:	9700      	str	r7, [sp, #0]
 8006e7a:	462b      	mov	r3, r5
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	2180      	movs	r1, #128	@ 0x80
 8006e80:	4620      	mov	r0, r4
 8006e82:	f7ff fe54 	bl	8006b2e <I2C_WaitOnFlagUntilTimeout>
 8006e86:	bb90      	cbnz	r0, 8006eee <HAL_I2C_Mem_Write+0x1a0>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006e88:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8006e8a:	b29b      	uxth	r3, r3
 8006e8c:	2bff      	cmp	r3, #255	@ 0xff
 8006e8e:	d9c6      	bls.n	8006e1e <HAL_I2C_Mem_Write+0xd0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006e90:	22ff      	movs	r2, #255	@ 0xff
 8006e92:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006e94:	2300      	movs	r3, #0
 8006e96:	9300      	str	r3, [sp, #0]
 8006e98:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006e9c:	4631      	mov	r1, r6
 8006e9e:	4620      	mov	r0, r4
 8006ea0:	f7ff fd6d 	bl	800697e <I2C_TransferConfig>
 8006ea4:	e7c7      	b.n	8006e36 <HAL_I2C_Mem_Write+0xe8>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ea6:	463a      	mov	r2, r7
 8006ea8:	4629      	mov	r1, r5
 8006eaa:	4620      	mov	r0, r4
 8006eac:	f7ff febc 	bl	8006c28 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006eb0:	b9f8      	cbnz	r0, 8006ef2 <HAL_I2C_Mem_Write+0x1a4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006eb2:	6823      	ldr	r3, [r4, #0]
 8006eb4:	2220      	movs	r2, #32
 8006eb6:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8006eb8:	6821      	ldr	r1, [r4, #0]
 8006eba:	684b      	ldr	r3, [r1, #4]
 8006ebc:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 8006ec0:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 8006ec4:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8006ec8:	f023 0301 	bic.w	r3, r3, #1
 8006ecc:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006ece:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 8006ed8:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    return HAL_OK;
 8006edc:	e000      	b.n	8006ee0 <HAL_I2C_Mem_Write+0x192>
    return HAL_BUSY;
 8006ede:	2002      	movs	r0, #2
}
 8006ee0:	b003      	add	sp, #12
 8006ee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8006ee6:	2002      	movs	r0, #2
 8006ee8:	e7fa      	b.n	8006ee0 <HAL_I2C_Mem_Write+0x192>
        return HAL_ERROR;
 8006eea:	2001      	movs	r0, #1
 8006eec:	e7f8      	b.n	8006ee0 <HAL_I2C_Mem_Write+0x192>
          return HAL_ERROR;
 8006eee:	2001      	movs	r0, #1
 8006ef0:	e7f6      	b.n	8006ee0 <HAL_I2C_Mem_Write+0x192>
      return HAL_ERROR;
 8006ef2:	2001      	movs	r0, #1
 8006ef4:	e7f4      	b.n	8006ee0 <HAL_I2C_Mem_Write+0x192>

08006ef6 <HAL_I2C_IsDeviceReady>:
{
 8006ef6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006efa:	b085      	sub	sp, #20
 8006efc:	461d      	mov	r5, r3
  __IO uint32_t I2C_Trials = 0UL;
 8006efe:	2300      	movs	r3, #0
 8006f00:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f02:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8006f06:	b2db      	uxtb	r3, r3
 8006f08:	2b20      	cmp	r3, #32
 8006f0a:	f040 8089 	bne.w	8007020 <HAL_I2C_IsDeviceReady+0x12a>
 8006f0e:	4606      	mov	r6, r0
 8006f10:	4688      	mov	r8, r1
 8006f12:	4691      	mov	r9, r2
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8006f14:	6803      	ldr	r3, [r0, #0]
 8006f16:	699b      	ldr	r3, [r3, #24]
 8006f18:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8006f1c:	f040 8082 	bne.w	8007024 <HAL_I2C_IsDeviceReady+0x12e>
    __HAL_LOCK(hi2c);
 8006f20:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8006f24:	2b01      	cmp	r3, #1
 8006f26:	d07f      	beq.n	8007028 <HAL_I2C_IsDeviceReady+0x132>
 8006f28:	2301      	movs	r3, #1
 8006f2a:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006f2e:	2324      	movs	r3, #36	@ 0x24
 8006f30:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f34:	2300      	movs	r3, #0
 8006f36:	6443      	str	r3, [r0, #68]	@ 0x44
 8006f38:	e041      	b.n	8006fbe <HAL_I2C_IsDeviceReady+0xc8>
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8006f3a:	f3c8 0309 	ubfx	r3, r8, #0, #10
 8006f3e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006f42:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8006f46:	e043      	b.n	8006fd0 <HAL_I2C_IsDeviceReady+0xda>
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8006f48:	6833      	ldr	r3, [r6, #0]
 8006f4a:	699c      	ldr	r4, [r3, #24]
 8006f4c:	f3c4 1440 	ubfx	r4, r4, #5, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006f50:	699b      	ldr	r3, [r3, #24]
 8006f52:	f3c3 1300 	ubfx	r3, r3, #4, #1
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8006f56:	b9c4      	cbnz	r4, 8006f8a <HAL_I2C_IsDeviceReady+0x94>
 8006f58:	b9bb      	cbnz	r3, 8006f8a <HAL_I2C_IsDeviceReady+0x94>
        if (Timeout != HAL_MAX_DELAY)
 8006f5a:	f1b5 3fff 	cmp.w	r5, #4294967295
 8006f5e:	d0f3      	beq.n	8006f48 <HAL_I2C_IsDeviceReady+0x52>
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006f60:	f7fd fe9c 	bl	8004c9c <HAL_GetTick>
 8006f64:	1bc0      	subs	r0, r0, r7
 8006f66:	42a8      	cmp	r0, r5
 8006f68:	d801      	bhi.n	8006f6e <HAL_I2C_IsDeviceReady+0x78>
 8006f6a:	2d00      	cmp	r5, #0
 8006f6c:	d1ec      	bne.n	8006f48 <HAL_I2C_IsDeviceReady+0x52>
            hi2c->State = HAL_I2C_STATE_READY;
 8006f6e:	2320      	movs	r3, #32
 8006f70:	f886 3041 	strb.w	r3, [r6, #65]	@ 0x41
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006f74:	6c73      	ldr	r3, [r6, #68]	@ 0x44
 8006f76:	f043 0320 	orr.w	r3, r3, #32
 8006f7a:	6473      	str	r3, [r6, #68]	@ 0x44
            __HAL_UNLOCK(hi2c);
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	f886 3040 	strb.w	r3, [r6, #64]	@ 0x40
            return HAL_ERROR;
 8006f82:	2001      	movs	r0, #1
}
 8006f84:	b005      	add	sp, #20
 8006f86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8006f8a:	6833      	ldr	r3, [r6, #0]
 8006f8c:	699b      	ldr	r3, [r3, #24]
 8006f8e:	f013 0f10 	tst.w	r3, #16
 8006f92:	d02a      	beq.n	8006fea <HAL_I2C_IsDeviceReady+0xf4>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8006f94:	9700      	str	r7, [sp, #0]
 8006f96:	462b      	mov	r3, r5
 8006f98:	2200      	movs	r2, #0
 8006f9a:	2120      	movs	r1, #32
 8006f9c:	4630      	mov	r0, r6
 8006f9e:	f7ff fdc6 	bl	8006b2e <I2C_WaitOnFlagUntilTimeout>
 8006fa2:	2800      	cmp	r0, #0
 8006fa4:	d144      	bne.n	8007030 <HAL_I2C_IsDeviceReady+0x13a>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006fa6:	6833      	ldr	r3, [r6, #0]
 8006fa8:	2210      	movs	r2, #16
 8006faa:	61da      	str	r2, [r3, #28]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006fac:	6833      	ldr	r3, [r6, #0]
 8006fae:	2220      	movs	r2, #32
 8006fb0:	61da      	str	r2, [r3, #28]
      I2C_Trials++;
 8006fb2:	9b03      	ldr	r3, [sp, #12]
 8006fb4:	3301      	adds	r3, #1
 8006fb6:	9303      	str	r3, [sp, #12]
    } while (I2C_Trials < Trials);
 8006fb8:	9b03      	ldr	r3, [sp, #12]
 8006fba:	454b      	cmp	r3, r9
 8006fbc:	d226      	bcs.n	800700c <HAL_I2C_IsDeviceReady+0x116>
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8006fbe:	68f3      	ldr	r3, [r6, #12]
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d0ba      	beq.n	8006f3a <HAL_I2C_IsDeviceReady+0x44>
 8006fc4:	f3c8 0309 	ubfx	r3, r8, #0, #10
 8006fc8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006fcc:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8006fd0:	6832      	ldr	r2, [r6, #0]
 8006fd2:	6053      	str	r3, [r2, #4]
      tickstart = HAL_GetTick();
 8006fd4:	f7fd fe62 	bl	8004c9c <HAL_GetTick>
 8006fd8:	4607      	mov	r7, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8006fda:	6833      	ldr	r3, [r6, #0]
 8006fdc:	699c      	ldr	r4, [r3, #24]
 8006fde:	f3c4 1440 	ubfx	r4, r4, #5, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006fe2:	699b      	ldr	r3, [r3, #24]
 8006fe4:	f3c3 1300 	ubfx	r3, r3, #4, #1
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8006fe8:	e7b5      	b.n	8006f56 <HAL_I2C_IsDeviceReady+0x60>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8006fea:	9700      	str	r7, [sp, #0]
 8006fec:	462b      	mov	r3, r5
 8006fee:	2200      	movs	r2, #0
 8006ff0:	2120      	movs	r1, #32
 8006ff2:	4630      	mov	r0, r6
 8006ff4:	f7ff fd9b 	bl	8006b2e <I2C_WaitOnFlagUntilTimeout>
 8006ff8:	b9c0      	cbnz	r0, 800702c <HAL_I2C_IsDeviceReady+0x136>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ffa:	6832      	ldr	r2, [r6, #0]
 8006ffc:	2320      	movs	r3, #32
 8006ffe:	61d3      	str	r3, [r2, #28]
        hi2c->State = HAL_I2C_STATE_READY;
 8007000:	f886 3041 	strb.w	r3, [r6, #65]	@ 0x41
        __HAL_UNLOCK(hi2c);
 8007004:	2300      	movs	r3, #0
 8007006:	f886 3040 	strb.w	r3, [r6, #64]	@ 0x40
        return HAL_OK;
 800700a:	e7bb      	b.n	8006f84 <HAL_I2C_IsDeviceReady+0x8e>
    hi2c->State = HAL_I2C_STATE_READY;
 800700c:	f886 2041 	strb.w	r2, [r6, #65]	@ 0x41
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007010:	6c73      	ldr	r3, [r6, #68]	@ 0x44
 8007012:	4313      	orrs	r3, r2
 8007014:	6473      	str	r3, [r6, #68]	@ 0x44
    __HAL_UNLOCK(hi2c);
 8007016:	2300      	movs	r3, #0
 8007018:	f886 3040 	strb.w	r3, [r6, #64]	@ 0x40
    return HAL_ERROR;
 800701c:	2001      	movs	r0, #1
 800701e:	e7b1      	b.n	8006f84 <HAL_I2C_IsDeviceReady+0x8e>
    return HAL_BUSY;
 8007020:	2002      	movs	r0, #2
 8007022:	e7af      	b.n	8006f84 <HAL_I2C_IsDeviceReady+0x8e>
      return HAL_BUSY;
 8007024:	2002      	movs	r0, #2
 8007026:	e7ad      	b.n	8006f84 <HAL_I2C_IsDeviceReady+0x8e>
    __HAL_LOCK(hi2c);
 8007028:	2002      	movs	r0, #2
 800702a:	e7ab      	b.n	8006f84 <HAL_I2C_IsDeviceReady+0x8e>
          return HAL_ERROR;
 800702c:	2001      	movs	r0, #1
 800702e:	e7a9      	b.n	8006f84 <HAL_I2C_IsDeviceReady+0x8e>
          return HAL_ERROR;
 8007030:	2001      	movs	r0, #1
 8007032:	e7a7      	b.n	8006f84 <HAL_I2C_IsDeviceReady+0x8e>

08007034 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007034:	4603      	mov	r3, r0
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007036:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 800703a:	b2d2      	uxtb	r2, r2
 800703c:	2a20      	cmp	r2, #32
 800703e:	d123      	bne.n	8007088 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007040:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8007044:	2a01      	cmp	r2, #1
 8007046:	d021      	beq.n	800708c <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8007048:	2201      	movs	r2, #1
 800704a:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800704e:	2224      	movs	r2, #36	@ 0x24
 8007050:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007054:	6800      	ldr	r0, [r0, #0]
 8007056:	6802      	ldr	r2, [r0, #0]
 8007058:	f022 0201 	bic.w	r2, r2, #1
 800705c:	6002      	str	r2, [r0, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800705e:	6818      	ldr	r0, [r3, #0]
 8007060:	6802      	ldr	r2, [r0, #0]
 8007062:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007066:	6002      	str	r2, [r0, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007068:	6818      	ldr	r0, [r3, #0]
 800706a:	6802      	ldr	r2, [r0, #0]
 800706c:	4311      	orrs	r1, r2
 800706e:	6001      	str	r1, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007070:	6819      	ldr	r1, [r3, #0]
 8007072:	680a      	ldr	r2, [r1, #0]
 8007074:	f042 0201 	orr.w	r2, r2, #1
 8007078:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800707a:	2220      	movs	r2, #32
 800707c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007080:	2000      	movs	r0, #0
 8007082:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40

    return HAL_OK;
 8007086:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8007088:	2002      	movs	r0, #2
 800708a:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 800708c:	2002      	movs	r0, #2
  }
}
 800708e:	4770      	bx	lr

08007090 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007090:	4603      	mov	r3, r0

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007092:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8007096:	b2d2      	uxtb	r2, r2
 8007098:	2a20      	cmp	r2, #32
 800709a:	d121      	bne.n	80070e0 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800709c:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 80070a0:	2a01      	cmp	r2, #1
 80070a2:	d01f      	beq.n	80070e4 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 80070a4:	2201      	movs	r2, #1
 80070a6:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80070aa:	2224      	movs	r2, #36	@ 0x24
 80070ac:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80070b0:	6800      	ldr	r0, [r0, #0]
 80070b2:	6802      	ldr	r2, [r0, #0]
 80070b4:	f022 0201 	bic.w	r2, r2, #1
 80070b8:	6002      	str	r2, [r0, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80070ba:	6818      	ldr	r0, [r3, #0]
 80070bc:	6802      	ldr	r2, [r0, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80070be:	f422 6270 	bic.w	r2, r2, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80070c2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80070c6:	6002      	str	r2, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 80070c8:	6819      	ldr	r1, [r3, #0]
 80070ca:	680a      	ldr	r2, [r1, #0]
 80070cc:	f042 0201 	orr.w	r2, r2, #1
 80070d0:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80070d2:	2220      	movs	r2, #32
 80070d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80070d8:	2000      	movs	r0, #0
 80070da:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40

    return HAL_OK;
 80070de:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 80070e0:	2002      	movs	r0, #2
 80070e2:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80070e4:	2002      	movs	r0, #2
  }
}
 80070e6:	4770      	bx	lr

080070e8 <HAL_PWREx_ControlVoltageScaling>:
{
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80070e8:	2800      	cmp	r0, #0
 80070ea:	d136      	bne.n	800715a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80070ec:	4b3e      	ldr	r3, [pc, #248]	@ (80071e8 <HAL_PWREx_ControlVoltageScaling+0x100>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80070f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070f8:	d008      	beq.n	800710c <HAL_PWREx_ControlVoltageScaling+0x24>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80070fa:	4a3b      	ldr	r2, [pc, #236]	@ (80071e8 <HAL_PWREx_ControlVoltageScaling+0x100>)
 80070fc:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
 8007100:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007104:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8007108:	2000      	movs	r0, #0
 800710a:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800710c:	4a36      	ldr	r2, [pc, #216]	@ (80071e8 <HAL_PWREx_ControlVoltageScaling+0x100>)
 800710e:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
 8007112:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007116:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800711a:	6813      	ldr	r3, [r2, #0]
 800711c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007120:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007124:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007126:	4b31      	ldr	r3, [pc, #196]	@ (80071ec <HAL_PWREx_ControlVoltageScaling+0x104>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	2232      	movs	r2, #50	@ 0x32
 800712c:	fb02 f303 	mul.w	r3, r2, r3
 8007130:	4a2f      	ldr	r2, [pc, #188]	@ (80071f0 <HAL_PWREx_ControlVoltageScaling+0x108>)
 8007132:	fba2 2303 	umull	r2, r3, r2, r3
 8007136:	0c9b      	lsrs	r3, r3, #18
 8007138:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800713a:	e000      	b.n	800713e <HAL_PWREx_ControlVoltageScaling+0x56>
        wait_loop_index--;
 800713c:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800713e:	4a2a      	ldr	r2, [pc, #168]	@ (80071e8 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8007140:	6952      	ldr	r2, [r2, #20]
 8007142:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8007146:	d001      	beq.n	800714c <HAL_PWREx_ControlVoltageScaling+0x64>
 8007148:	2b00      	cmp	r3, #0
 800714a:	d1f7      	bne.n	800713c <HAL_PWREx_ControlVoltageScaling+0x54>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800714c:	4b26      	ldr	r3, [pc, #152]	@ (80071e8 <HAL_PWREx_ControlVoltageScaling+0x100>)
 800714e:	695b      	ldr	r3, [r3, #20]
 8007150:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8007154:	d144      	bne.n	80071e0 <HAL_PWREx_ControlVoltageScaling+0xf8>
  return HAL_OK;
 8007156:	2000      	movs	r0, #0
 8007158:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800715a:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 800715e:	d008      	beq.n	8007172 <HAL_PWREx_ControlVoltageScaling+0x8a>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007160:	4a21      	ldr	r2, [pc, #132]	@ (80071e8 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8007162:	6813      	ldr	r3, [r2, #0]
 8007164:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007168:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800716c:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 800716e:	2000      	movs	r0, #0
 8007170:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007172:	4b1d      	ldr	r3, [pc, #116]	@ (80071e8 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800717a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800717e:	d008      	beq.n	8007192 <HAL_PWREx_ControlVoltageScaling+0xaa>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007180:	4a19      	ldr	r2, [pc, #100]	@ (80071e8 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8007182:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
 8007186:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800718a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  return HAL_OK;
 800718e:	2000      	movs	r0, #0
 8007190:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007192:	4a15      	ldr	r2, [pc, #84]	@ (80071e8 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8007194:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
 8007198:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800719c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80071a0:	6813      	ldr	r3, [r2, #0]
 80071a2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80071a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80071aa:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80071ac:	4b0f      	ldr	r3, [pc, #60]	@ (80071ec <HAL_PWREx_ControlVoltageScaling+0x104>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	2232      	movs	r2, #50	@ 0x32
 80071b2:	fb02 f303 	mul.w	r3, r2, r3
 80071b6:	4a0e      	ldr	r2, [pc, #56]	@ (80071f0 <HAL_PWREx_ControlVoltageScaling+0x108>)
 80071b8:	fba2 2303 	umull	r2, r3, r2, r3
 80071bc:	0c9b      	lsrs	r3, r3, #18
 80071be:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80071c0:	e000      	b.n	80071c4 <HAL_PWREx_ControlVoltageScaling+0xdc>
        wait_loop_index--;
 80071c2:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80071c4:	4a08      	ldr	r2, [pc, #32]	@ (80071e8 <HAL_PWREx_ControlVoltageScaling+0x100>)
 80071c6:	6952      	ldr	r2, [r2, #20]
 80071c8:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 80071cc:	d001      	beq.n	80071d2 <HAL_PWREx_ControlVoltageScaling+0xea>
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d1f7      	bne.n	80071c2 <HAL_PWREx_ControlVoltageScaling+0xda>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80071d2:	4b05      	ldr	r3, [pc, #20]	@ (80071e8 <HAL_PWREx_ControlVoltageScaling+0x100>)
 80071d4:	695b      	ldr	r3, [r3, #20]
 80071d6:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 80071da:	d103      	bne.n	80071e4 <HAL_PWREx_ControlVoltageScaling+0xfc>
  return HAL_OK;
 80071dc:	2000      	movs	r0, #0
 80071de:	4770      	bx	lr
        return HAL_TIMEOUT;
 80071e0:	2003      	movs	r0, #3
 80071e2:	4770      	bx	lr
        return HAL_TIMEOUT;
 80071e4:	2003      	movs	r0, #3
}
 80071e6:	4770      	bx	lr
 80071e8:	40007000 	.word	0x40007000
 80071ec:	20000050 	.word	0x20000050
 80071f0:	431bde83 	.word	0x431bde83

080071f4 <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80071f4:	4a02      	ldr	r2, [pc, #8]	@ (8007200 <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 80071f6:	6893      	ldr	r3, [r2, #8]
 80071f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80071fc:	6093      	str	r3, [r2, #8]
}
 80071fe:	4770      	bx	lr
 8007200:	40007000 	.word	0x40007000

08007204 <RCC_GetSysClockFreqFromPLLSource>:
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007204:	4b12      	ldr	r3, [pc, #72]	@ (8007250 <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 8007206:	68da      	ldr	r2, [r3, #12]
 8007208:	f002 0203 	and.w	r2, r2, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800720c:	68db      	ldr	r3, [r3, #12]
 800720e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8007212:	3301      	adds	r3, #1

  switch (pllsource)
 8007214:	2a03      	cmp	r2, #3
 8007216:	d011      	beq.n	800723c <RCC_GetSysClockFreqFromPLLSource+0x38>
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007218:	480e      	ldr	r0, [pc, #56]	@ (8007254 <RCC_GetSysClockFreqFromPLLSource+0x50>)
 800721a:	fbb0 f0f3 	udiv	r0, r0, r3
 800721e:	4b0c      	ldr	r3, [pc, #48]	@ (8007250 <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 8007220:	68db      	ldr	r3, [r3, #12]
 8007222:	f3c3 2306 	ubfx	r3, r3, #8, #7
 8007226:	fb03 f000 	mul.w	r0, r3, r0
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800722a:	4b09      	ldr	r3, [pc, #36]	@ (8007250 <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 800722c:	68db      	ldr	r3, [r3, #12]
 800722e:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8007232:	3301      	adds	r3, #1
 8007234:	005b      	lsls	r3, r3, #1
  sysclockfreq = pllvco/pllr;

  return sysclockfreq;
}
 8007236:	fbb0 f0f3 	udiv	r0, r0, r3
 800723a:	4770      	bx	lr
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800723c:	4806      	ldr	r0, [pc, #24]	@ (8007258 <RCC_GetSysClockFreqFromPLLSource+0x54>)
 800723e:	fbb0 f0f3 	udiv	r0, r0, r3
 8007242:	4b03      	ldr	r3, [pc, #12]	@ (8007250 <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 8007244:	68db      	ldr	r3, [r3, #12]
 8007246:	f3c3 2306 	ubfx	r3, r3, #8, #7
 800724a:	fb03 f000 	mul.w	r0, r3, r0
    break;
 800724e:	e7ec      	b.n	800722a <RCC_GetSysClockFreqFromPLLSource+0x26>
 8007250:	40021000 	.word	0x40021000
 8007254:	00f42400 	.word	0x00f42400
 8007258:	00b71b00 	.word	0x00b71b00

0800725c <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 800725c:	2800      	cmp	r0, #0
 800725e:	f000 824f 	beq.w	8007700 <HAL_RCC_OscConfig+0x4a4>
{
 8007262:	b570      	push	{r4, r5, r6, lr}
 8007264:	b082      	sub	sp, #8
 8007266:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007268:	6803      	ldr	r3, [r0, #0]
 800726a:	f013 0f01 	tst.w	r3, #1
 800726e:	d037      	beq.n	80072e0 <HAL_RCC_OscConfig+0x84>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007270:	4aa4      	ldr	r2, [pc, #656]	@ (8007504 <HAL_RCC_OscConfig+0x2a8>)
 8007272:	6893      	ldr	r3, [r2, #8]
 8007274:	f003 030c 	and.w	r3, r3, #12
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007278:	68d2      	ldr	r2, [r2, #12]
 800727a:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800727e:	2b0c      	cmp	r3, #12
 8007280:	d023      	beq.n	80072ca <HAL_RCC_OscConfig+0x6e>
 8007282:	2b08      	cmp	r3, #8
 8007284:	d023      	beq.n	80072ce <HAL_RCC_OscConfig+0x72>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007286:	6863      	ldr	r3, [r4, #4]
 8007288:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800728c:	d04e      	beq.n	800732c <HAL_RCC_OscConfig+0xd0>
 800728e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007292:	d051      	beq.n	8007338 <HAL_RCC_OscConfig+0xdc>
 8007294:	4b9b      	ldr	r3, [pc, #620]	@ (8007504 <HAL_RCC_OscConfig+0x2a8>)
 8007296:	681a      	ldr	r2, [r3, #0]
 8007298:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800729c:	601a      	str	r2, [r3, #0]
 800729e:	681a      	ldr	r2, [r3, #0]
 80072a0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80072a4:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80072a6:	6863      	ldr	r3, [r4, #4]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d052      	beq.n	8007352 <HAL_RCC_OscConfig+0xf6>
        tickstart = HAL_GetTick();
 80072ac:	f7fd fcf6 	bl	8004c9c <HAL_GetTick>
 80072b0:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80072b2:	4b94      	ldr	r3, [pc, #592]	@ (8007504 <HAL_RCC_OscConfig+0x2a8>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80072ba:	d111      	bne.n	80072e0 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80072bc:	f7fd fcee 	bl	8004c9c <HAL_GetTick>
 80072c0:	1b40      	subs	r0, r0, r5
 80072c2:	2864      	cmp	r0, #100	@ 0x64
 80072c4:	d9f5      	bls.n	80072b2 <HAL_RCC_OscConfig+0x56>
            return HAL_TIMEOUT;
 80072c6:	2003      	movs	r0, #3
 80072c8:	e223      	b.n	8007712 <HAL_RCC_OscConfig+0x4b6>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80072ca:	2a03      	cmp	r2, #3
 80072cc:	d1d9      	bne.n	8007282 <HAL_RCC_OscConfig+0x26>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80072ce:	4b8d      	ldr	r3, [pc, #564]	@ (8007504 <HAL_RCC_OscConfig+0x2a8>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80072d6:	d003      	beq.n	80072e0 <HAL_RCC_OscConfig+0x84>
 80072d8:	6863      	ldr	r3, [r4, #4]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	f000 8212 	beq.w	8007704 <HAL_RCC_OscConfig+0x4a8>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80072e0:	6823      	ldr	r3, [r4, #0]
 80072e2:	f013 0f02 	tst.w	r3, #2
 80072e6:	d05d      	beq.n	80073a4 <HAL_RCC_OscConfig+0x148>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80072e8:	4a86      	ldr	r2, [pc, #536]	@ (8007504 <HAL_RCC_OscConfig+0x2a8>)
 80072ea:	6893      	ldr	r3, [r2, #8]
 80072ec:	f003 030c 	and.w	r3, r3, #12
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80072f0:	68d2      	ldr	r2, [r2, #12]
 80072f2:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80072f6:	2b0c      	cmp	r3, #12
 80072f8:	d03a      	beq.n	8007370 <HAL_RCC_OscConfig+0x114>
 80072fa:	2b04      	cmp	r3, #4
 80072fc:	d03a      	beq.n	8007374 <HAL_RCC_OscConfig+0x118>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80072fe:	68e3      	ldr	r3, [r4, #12]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d075      	beq.n	80073f0 <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_ENABLE();
 8007304:	4a7f      	ldr	r2, [pc, #508]	@ (8007504 <HAL_RCC_OscConfig+0x2a8>)
 8007306:	6813      	ldr	r3, [r2, #0]
 8007308:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800730c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800730e:	f7fd fcc5 	bl	8004c9c <HAL_GetTick>
 8007312:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007314:	4b7b      	ldr	r3, [pc, #492]	@ (8007504 <HAL_RCC_OscConfig+0x2a8>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 800731c:	d15f      	bne.n	80073de <HAL_RCC_OscConfig+0x182>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800731e:	f7fd fcbd 	bl	8004c9c <HAL_GetTick>
 8007322:	1b40      	subs	r0, r0, r5
 8007324:	2802      	cmp	r0, #2
 8007326:	d9f5      	bls.n	8007314 <HAL_RCC_OscConfig+0xb8>
            return HAL_TIMEOUT;
 8007328:	2003      	movs	r0, #3
 800732a:	e1f2      	b.n	8007712 <HAL_RCC_OscConfig+0x4b6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800732c:	4a75      	ldr	r2, [pc, #468]	@ (8007504 <HAL_RCC_OscConfig+0x2a8>)
 800732e:	6813      	ldr	r3, [r2, #0]
 8007330:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007334:	6013      	str	r3, [r2, #0]
 8007336:	e7b6      	b.n	80072a6 <HAL_RCC_OscConfig+0x4a>
 8007338:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800733c:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 8007340:	681a      	ldr	r2, [r3, #0]
 8007342:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8007346:	601a      	str	r2, [r3, #0]
 8007348:	681a      	ldr	r2, [r3, #0]
 800734a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800734e:	601a      	str	r2, [r3, #0]
 8007350:	e7a9      	b.n	80072a6 <HAL_RCC_OscConfig+0x4a>
        tickstart = HAL_GetTick();
 8007352:	f7fd fca3 	bl	8004c9c <HAL_GetTick>
 8007356:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007358:	4b6a      	ldr	r3, [pc, #424]	@ (8007504 <HAL_RCC_OscConfig+0x2a8>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8007360:	d0be      	beq.n	80072e0 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007362:	f7fd fc9b 	bl	8004c9c <HAL_GetTick>
 8007366:	1b40      	subs	r0, r0, r5
 8007368:	2864      	cmp	r0, #100	@ 0x64
 800736a:	d9f5      	bls.n	8007358 <HAL_RCC_OscConfig+0xfc>
            return HAL_TIMEOUT;
 800736c:	2003      	movs	r0, #3
 800736e:	e1d0      	b.n	8007712 <HAL_RCC_OscConfig+0x4b6>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007370:	2a02      	cmp	r2, #2
 8007372:	d1c2      	bne.n	80072fa <HAL_RCC_OscConfig+0x9e>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007374:	4b63      	ldr	r3, [pc, #396]	@ (8007504 <HAL_RCC_OscConfig+0x2a8>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 800737c:	d003      	beq.n	8007386 <HAL_RCC_OscConfig+0x12a>
 800737e:	68e3      	ldr	r3, [r4, #12]
 8007380:	2b00      	cmp	r3, #0
 8007382:	f000 81c1 	beq.w	8007708 <HAL_RCC_OscConfig+0x4ac>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007386:	4a5f      	ldr	r2, [pc, #380]	@ (8007504 <HAL_RCC_OscConfig+0x2a8>)
 8007388:	6853      	ldr	r3, [r2, #4]
 800738a:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800738e:	6921      	ldr	r1, [r4, #16]
 8007390:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8007394:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007396:	4b5c      	ldr	r3, [pc, #368]	@ (8007508 <HAL_RCC_OscConfig+0x2ac>)
 8007398:	6818      	ldr	r0, [r3, #0]
 800739a:	f7fd fc3b 	bl	8004c14 <HAL_InitTick>
 800739e:	2800      	cmp	r0, #0
 80073a0:	f040 81b4 	bne.w	800770c <HAL_RCC_OscConfig+0x4b0>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80073a4:	6823      	ldr	r3, [r4, #0]
 80073a6:	f013 0f08 	tst.w	r3, #8
 80073aa:	d04c      	beq.n	8007446 <HAL_RCC_OscConfig+0x1ea>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80073ac:	6963      	ldr	r3, [r4, #20]
 80073ae:	b39b      	cbz	r3, 8007418 <HAL_RCC_OscConfig+0x1bc>
      __HAL_RCC_LSI_ENABLE();
 80073b0:	4a54      	ldr	r2, [pc, #336]	@ (8007504 <HAL_RCC_OscConfig+0x2a8>)
 80073b2:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 80073b6:	f043 0301 	orr.w	r3, r3, #1
 80073ba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      tickstart = HAL_GetTick();
 80073be:	f7fd fc6d 	bl	8004c9c <HAL_GetTick>
 80073c2:	4605      	mov	r5, r0
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80073c4:	4b4f      	ldr	r3, [pc, #316]	@ (8007504 <HAL_RCC_OscConfig+0x2a8>)
 80073c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80073ca:	f013 0f02 	tst.w	r3, #2
 80073ce:	d13a      	bne.n	8007446 <HAL_RCC_OscConfig+0x1ea>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80073d0:	f7fd fc64 	bl	8004c9c <HAL_GetTick>
 80073d4:	1b40      	subs	r0, r0, r5
 80073d6:	2802      	cmp	r0, #2
 80073d8:	d9f4      	bls.n	80073c4 <HAL_RCC_OscConfig+0x168>
          return HAL_TIMEOUT;
 80073da:	2003      	movs	r0, #3
 80073dc:	e199      	b.n	8007712 <HAL_RCC_OscConfig+0x4b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80073de:	4a49      	ldr	r2, [pc, #292]	@ (8007504 <HAL_RCC_OscConfig+0x2a8>)
 80073e0:	6853      	ldr	r3, [r2, #4]
 80073e2:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80073e6:	6921      	ldr	r1, [r4, #16]
 80073e8:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80073ec:	6053      	str	r3, [r2, #4]
 80073ee:	e7d9      	b.n	80073a4 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_DISABLE();
 80073f0:	4a44      	ldr	r2, [pc, #272]	@ (8007504 <HAL_RCC_OscConfig+0x2a8>)
 80073f2:	6813      	ldr	r3, [r2, #0]
 80073f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80073f8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80073fa:	f7fd fc4f 	bl	8004c9c <HAL_GetTick>
 80073fe:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007400:	4b40      	ldr	r3, [pc, #256]	@ (8007504 <HAL_RCC_OscConfig+0x2a8>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8007408:	d0cc      	beq.n	80073a4 <HAL_RCC_OscConfig+0x148>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800740a:	f7fd fc47 	bl	8004c9c <HAL_GetTick>
 800740e:	1b40      	subs	r0, r0, r5
 8007410:	2802      	cmp	r0, #2
 8007412:	d9f5      	bls.n	8007400 <HAL_RCC_OscConfig+0x1a4>
            return HAL_TIMEOUT;
 8007414:	2003      	movs	r0, #3
 8007416:	e17c      	b.n	8007712 <HAL_RCC_OscConfig+0x4b6>
      __HAL_RCC_LSI_DISABLE();
 8007418:	4a3a      	ldr	r2, [pc, #232]	@ (8007504 <HAL_RCC_OscConfig+0x2a8>)
 800741a:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 800741e:	f023 0301 	bic.w	r3, r3, #1
 8007422:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8007426:	f7fd fc39 	bl	8004c9c <HAL_GetTick>
 800742a:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800742c:	4b35      	ldr	r3, [pc, #212]	@ (8007504 <HAL_RCC_OscConfig+0x2a8>)
 800742e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007432:	f013 0f02 	tst.w	r3, #2
 8007436:	d006      	beq.n	8007446 <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007438:	f7fd fc30 	bl	8004c9c <HAL_GetTick>
 800743c:	1b40      	subs	r0, r0, r5
 800743e:	2802      	cmp	r0, #2
 8007440:	d9f4      	bls.n	800742c <HAL_RCC_OscConfig+0x1d0>
          return HAL_TIMEOUT;
 8007442:	2003      	movs	r0, #3
 8007444:	e165      	b.n	8007712 <HAL_RCC_OscConfig+0x4b6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007446:	6823      	ldr	r3, [r4, #0]
 8007448:	f013 0f04 	tst.w	r3, #4
 800744c:	f000 8081 	beq.w	8007552 <HAL_RCC_OscConfig+0x2f6>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007450:	4b2c      	ldr	r3, [pc, #176]	@ (8007504 <HAL_RCC_OscConfig+0x2a8>)
 8007452:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007454:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8007458:	d136      	bne.n	80074c8 <HAL_RCC_OscConfig+0x26c>
      __HAL_RCC_PWR_CLK_ENABLE();
 800745a:	4b2a      	ldr	r3, [pc, #168]	@ (8007504 <HAL_RCC_OscConfig+0x2a8>)
 800745c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800745e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8007462:	659a      	str	r2, [r3, #88]	@ 0x58
 8007464:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007466:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800746a:	9301      	str	r3, [sp, #4]
 800746c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800746e:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007470:	4b26      	ldr	r3, [pc, #152]	@ (800750c <HAL_RCC_OscConfig+0x2b0>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8007478:	d028      	beq.n	80074cc <HAL_RCC_OscConfig+0x270>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800747a:	68a3      	ldr	r3, [r4, #8]
 800747c:	2b01      	cmp	r3, #1
 800747e:	d039      	beq.n	80074f4 <HAL_RCC_OscConfig+0x298>
 8007480:	2b05      	cmp	r3, #5
 8007482:	d045      	beq.n	8007510 <HAL_RCC_OscConfig+0x2b4>
 8007484:	4b1f      	ldr	r3, [pc, #124]	@ (8007504 <HAL_RCC_OscConfig+0x2a8>)
 8007486:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800748a:	f022 0201 	bic.w	r2, r2, #1
 800748e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8007492:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8007496:	f022 0204 	bic.w	r2, r2, #4
 800749a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800749e:	68a3      	ldr	r3, [r4, #8]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d043      	beq.n	800752c <HAL_RCC_OscConfig+0x2d0>
      tickstart = HAL_GetTick();
 80074a4:	f7fd fbfa 	bl	8004c9c <HAL_GetTick>
 80074a8:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80074aa:	4b16      	ldr	r3, [pc, #88]	@ (8007504 <HAL_RCC_OscConfig+0x2a8>)
 80074ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074b0:	f013 0f02 	tst.w	r3, #2
 80074b4:	d14c      	bne.n	8007550 <HAL_RCC_OscConfig+0x2f4>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074b6:	f7fd fbf1 	bl	8004c9c <HAL_GetTick>
 80074ba:	1b80      	subs	r0, r0, r6
 80074bc:	f241 3388 	movw	r3, #5000	@ 0x1388
 80074c0:	4298      	cmp	r0, r3
 80074c2:	d9f2      	bls.n	80074aa <HAL_RCC_OscConfig+0x24e>
          return HAL_TIMEOUT;
 80074c4:	2003      	movs	r0, #3
 80074c6:	e124      	b.n	8007712 <HAL_RCC_OscConfig+0x4b6>
    FlagStatus       pwrclkchanged = RESET;
 80074c8:	2500      	movs	r5, #0
 80074ca:	e7d1      	b.n	8007470 <HAL_RCC_OscConfig+0x214>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80074cc:	4a0f      	ldr	r2, [pc, #60]	@ (800750c <HAL_RCC_OscConfig+0x2b0>)
 80074ce:	6813      	ldr	r3, [r2, #0]
 80074d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80074d4:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80074d6:	f7fd fbe1 	bl	8004c9c <HAL_GetTick>
 80074da:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80074dc:	4b0b      	ldr	r3, [pc, #44]	@ (800750c <HAL_RCC_OscConfig+0x2b0>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80074e4:	d1c9      	bne.n	800747a <HAL_RCC_OscConfig+0x21e>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80074e6:	f7fd fbd9 	bl	8004c9c <HAL_GetTick>
 80074ea:	1b80      	subs	r0, r0, r6
 80074ec:	2802      	cmp	r0, #2
 80074ee:	d9f5      	bls.n	80074dc <HAL_RCC_OscConfig+0x280>
          return HAL_TIMEOUT;
 80074f0:	2003      	movs	r0, #3
 80074f2:	e10e      	b.n	8007712 <HAL_RCC_OscConfig+0x4b6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80074f4:	4a03      	ldr	r2, [pc, #12]	@ (8007504 <HAL_RCC_OscConfig+0x2a8>)
 80074f6:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80074fa:	f043 0301 	orr.w	r3, r3, #1
 80074fe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007502:	e7cc      	b.n	800749e <HAL_RCC_OscConfig+0x242>
 8007504:	40021000 	.word	0x40021000
 8007508:	20000058 	.word	0x20000058
 800750c:	40007000 	.word	0x40007000
 8007510:	4b88      	ldr	r3, [pc, #544]	@ (8007734 <HAL_RCC_OscConfig+0x4d8>)
 8007512:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8007516:	f042 0204 	orr.w	r2, r2, #4
 800751a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 800751e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8007522:	f042 0201 	orr.w	r2, r2, #1
 8007526:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 800752a:	e7b8      	b.n	800749e <HAL_RCC_OscConfig+0x242>
      tickstart = HAL_GetTick();
 800752c:	f7fd fbb6 	bl	8004c9c <HAL_GetTick>
 8007530:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007532:	4b80      	ldr	r3, [pc, #512]	@ (8007734 <HAL_RCC_OscConfig+0x4d8>)
 8007534:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007538:	f013 0f02 	tst.w	r3, #2
 800753c:	d008      	beq.n	8007550 <HAL_RCC_OscConfig+0x2f4>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800753e:	f7fd fbad 	bl	8004c9c <HAL_GetTick>
 8007542:	1b80      	subs	r0, r0, r6
 8007544:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007548:	4298      	cmp	r0, r3
 800754a:	d9f2      	bls.n	8007532 <HAL_RCC_OscConfig+0x2d6>
          return HAL_TIMEOUT;
 800754c:	2003      	movs	r0, #3
 800754e:	e0e0      	b.n	8007712 <HAL_RCC_OscConfig+0x4b6>
    if (pwrclkchanged == SET)
 8007550:	b9e5      	cbnz	r5, 800758c <HAL_RCC_OscConfig+0x330>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007552:	6823      	ldr	r3, [r4, #0]
 8007554:	f013 0f20 	tst.w	r3, #32
 8007558:	d035      	beq.n	80075c6 <HAL_RCC_OscConfig+0x36a>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800755a:	69a3      	ldr	r3, [r4, #24]
 800755c:	b1e3      	cbz	r3, 8007598 <HAL_RCC_OscConfig+0x33c>
      __HAL_RCC_HSI48_ENABLE();
 800755e:	4a75      	ldr	r2, [pc, #468]	@ (8007734 <HAL_RCC_OscConfig+0x4d8>)
 8007560:	f8d2 3098 	ldr.w	r3, [r2, #152]	@ 0x98
 8007564:	f043 0301 	orr.w	r3, r3, #1
 8007568:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
      tickstart = HAL_GetTick();
 800756c:	f7fd fb96 	bl	8004c9c <HAL_GetTick>
 8007570:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007572:	4b70      	ldr	r3, [pc, #448]	@ (8007734 <HAL_RCC_OscConfig+0x4d8>)
 8007574:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007578:	f013 0f02 	tst.w	r3, #2
 800757c:	d123      	bne.n	80075c6 <HAL_RCC_OscConfig+0x36a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800757e:	f7fd fb8d 	bl	8004c9c <HAL_GetTick>
 8007582:	1b40      	subs	r0, r0, r5
 8007584:	2802      	cmp	r0, #2
 8007586:	d9f4      	bls.n	8007572 <HAL_RCC_OscConfig+0x316>
          return HAL_TIMEOUT;
 8007588:	2003      	movs	r0, #3
 800758a:	e0c2      	b.n	8007712 <HAL_RCC_OscConfig+0x4b6>
      __HAL_RCC_PWR_CLK_DISABLE();
 800758c:	4a69      	ldr	r2, [pc, #420]	@ (8007734 <HAL_RCC_OscConfig+0x4d8>)
 800758e:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8007590:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007594:	6593      	str	r3, [r2, #88]	@ 0x58
 8007596:	e7dc      	b.n	8007552 <HAL_RCC_OscConfig+0x2f6>
      __HAL_RCC_HSI48_DISABLE();
 8007598:	4a66      	ldr	r2, [pc, #408]	@ (8007734 <HAL_RCC_OscConfig+0x4d8>)
 800759a:	f8d2 3098 	ldr.w	r3, [r2, #152]	@ 0x98
 800759e:	f023 0301 	bic.w	r3, r3, #1
 80075a2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
      tickstart = HAL_GetTick();
 80075a6:	f7fd fb79 	bl	8004c9c <HAL_GetTick>
 80075aa:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80075ac:	4b61      	ldr	r3, [pc, #388]	@ (8007734 <HAL_RCC_OscConfig+0x4d8>)
 80075ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80075b2:	f013 0f02 	tst.w	r3, #2
 80075b6:	d006      	beq.n	80075c6 <HAL_RCC_OscConfig+0x36a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80075b8:	f7fd fb70 	bl	8004c9c <HAL_GetTick>
 80075bc:	1b40      	subs	r0, r0, r5
 80075be:	2802      	cmp	r0, #2
 80075c0:	d9f4      	bls.n	80075ac <HAL_RCC_OscConfig+0x350>
          return HAL_TIMEOUT;
 80075c2:	2003      	movs	r0, #3
 80075c4:	e0a5      	b.n	8007712 <HAL_RCC_OscConfig+0x4b6>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80075c6:	69e3      	ldr	r3, [r4, #28]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	f000 80a1 	beq.w	8007710 <HAL_RCC_OscConfig+0x4b4>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80075ce:	4a59      	ldr	r2, [pc, #356]	@ (8007734 <HAL_RCC_OscConfig+0x4d8>)
 80075d0:	6892      	ldr	r2, [r2, #8]
 80075d2:	f002 020c 	and.w	r2, r2, #12
 80075d6:	2a0c      	cmp	r2, #12
 80075d8:	d064      	beq.n	80076a4 <HAL_RCC_OscConfig+0x448>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80075da:	2b02      	cmp	r3, #2
 80075dc:	d013      	beq.n	8007606 <HAL_RCC_OscConfig+0x3aa>
        __HAL_RCC_PLL_DISABLE();
 80075de:	4a55      	ldr	r2, [pc, #340]	@ (8007734 <HAL_RCC_OscConfig+0x4d8>)
 80075e0:	6813      	ldr	r3, [r2, #0]
 80075e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80075e6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80075e8:	f7fd fb58 	bl	8004c9c <HAL_GetTick>
 80075ec:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80075ee:	4b51      	ldr	r3, [pc, #324]	@ (8007734 <HAL_RCC_OscConfig+0x4d8>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80075f6:	d04e      	beq.n	8007696 <HAL_RCC_OscConfig+0x43a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80075f8:	f7fd fb50 	bl	8004c9c <HAL_GetTick>
 80075fc:	1b00      	subs	r0, r0, r4
 80075fe:	2802      	cmp	r0, #2
 8007600:	d9f5      	bls.n	80075ee <HAL_RCC_OscConfig+0x392>
            return HAL_TIMEOUT;
 8007602:	2003      	movs	r0, #3
 8007604:	e085      	b.n	8007712 <HAL_RCC_OscConfig+0x4b6>
        __HAL_RCC_PLL_DISABLE();
 8007606:	4a4b      	ldr	r2, [pc, #300]	@ (8007734 <HAL_RCC_OscConfig+0x4d8>)
 8007608:	6813      	ldr	r3, [r2, #0]
 800760a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800760e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8007610:	f7fd fb44 	bl	8004c9c <HAL_GetTick>
 8007614:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007616:	4b47      	ldr	r3, [pc, #284]	@ (8007734 <HAL_RCC_OscConfig+0x4d8>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800761e:	d006      	beq.n	800762e <HAL_RCC_OscConfig+0x3d2>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007620:	f7fd fb3c 	bl	8004c9c <HAL_GetTick>
 8007624:	1b40      	subs	r0, r0, r5
 8007626:	2802      	cmp	r0, #2
 8007628:	d9f5      	bls.n	8007616 <HAL_RCC_OscConfig+0x3ba>
            return HAL_TIMEOUT;
 800762a:	2003      	movs	r0, #3
 800762c:	e071      	b.n	8007712 <HAL_RCC_OscConfig+0x4b6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800762e:	4a41      	ldr	r2, [pc, #260]	@ (8007734 <HAL_RCC_OscConfig+0x4d8>)
 8007630:	68d3      	ldr	r3, [r2, #12]
 8007632:	4941      	ldr	r1, [pc, #260]	@ (8007738 <HAL_RCC_OscConfig+0x4dc>)
 8007634:	4019      	ands	r1, r3
 8007636:	6a23      	ldr	r3, [r4, #32]
 8007638:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800763a:	3801      	subs	r0, #1
 800763c:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8007640:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8007642:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8007646:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8007648:	0840      	lsrs	r0, r0, #1
 800764a:	3801      	subs	r0, #1
 800764c:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
 8007650:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8007652:	0840      	lsrs	r0, r0, #1
 8007654:	3801      	subs	r0, #1
 8007656:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 800765a:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800765c:	ea43 63c0 	orr.w	r3, r3, r0, lsl #27
 8007660:	4319      	orrs	r1, r3
 8007662:	60d1      	str	r1, [r2, #12]
        __HAL_RCC_PLL_ENABLE();
 8007664:	6813      	ldr	r3, [r2, #0]
 8007666:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800766a:	6013      	str	r3, [r2, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800766c:	68d3      	ldr	r3, [r2, #12]
 800766e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007672:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8007674:	f7fd fb12 	bl	8004c9c <HAL_GetTick>
 8007678:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800767a:	4b2e      	ldr	r3, [pc, #184]	@ (8007734 <HAL_RCC_OscConfig+0x4d8>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8007682:	d106      	bne.n	8007692 <HAL_RCC_OscConfig+0x436>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007684:	f7fd fb0a 	bl	8004c9c <HAL_GetTick>
 8007688:	1b00      	subs	r0, r0, r4
 800768a:	2802      	cmp	r0, #2
 800768c:	d9f5      	bls.n	800767a <HAL_RCC_OscConfig+0x41e>
            return HAL_TIMEOUT;
 800768e:	2003      	movs	r0, #3
 8007690:	e03f      	b.n	8007712 <HAL_RCC_OscConfig+0x4b6>
  return HAL_OK;
 8007692:	2000      	movs	r0, #0
 8007694:	e03d      	b.n	8007712 <HAL_RCC_OscConfig+0x4b6>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8007696:	4a27      	ldr	r2, [pc, #156]	@ (8007734 <HAL_RCC_OscConfig+0x4d8>)
 8007698:	68d1      	ldr	r1, [r2, #12]
 800769a:	4b28      	ldr	r3, [pc, #160]	@ (800773c <HAL_RCC_OscConfig+0x4e0>)
 800769c:	400b      	ands	r3, r1
 800769e:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 80076a0:	2000      	movs	r0, #0
 80076a2:	e036      	b.n	8007712 <HAL_RCC_OscConfig+0x4b6>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	d036      	beq.n	8007716 <HAL_RCC_OscConfig+0x4ba>
      temp_pllckcfg = RCC->PLLCFGR;
 80076a8:	4b22      	ldr	r3, [pc, #136]	@ (8007734 <HAL_RCC_OscConfig+0x4d8>)
 80076aa:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80076ac:	f003 0103 	and.w	r1, r3, #3
 80076b0:	6a22      	ldr	r2, [r4, #32]
 80076b2:	4291      	cmp	r1, r2
 80076b4:	d131      	bne.n	800771a <HAL_RCC_OscConfig+0x4be>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80076b6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80076ba:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80076bc:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80076be:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 80076c2:	d12c      	bne.n	800771e <HAL_RCC_OscConfig+0x4c2>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80076c4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80076c8:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80076ca:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 80076ce:	d128      	bne.n	8007722 <HAL_RCC_OscConfig+0x4c6>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80076d0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80076d4:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80076d6:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 80076da:	d124      	bne.n	8007726 <HAL_RCC_OscConfig+0x4ca>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80076dc:	f403 01c0 	and.w	r1, r3, #6291456	@ 0x600000
 80076e0:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80076e2:	0852      	lsrs	r2, r2, #1
 80076e4:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80076e6:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 80076ea:	d11e      	bne.n	800772a <HAL_RCC_OscConfig+0x4ce>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80076ec:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 80076f0:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80076f2:	0852      	lsrs	r2, r2, #1
 80076f4:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80076f6:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 80076fa:	d118      	bne.n	800772e <HAL_RCC_OscConfig+0x4d2>
  return HAL_OK;
 80076fc:	2000      	movs	r0, #0
 80076fe:	e008      	b.n	8007712 <HAL_RCC_OscConfig+0x4b6>
    return HAL_ERROR;
 8007700:	2001      	movs	r0, #1
}
 8007702:	4770      	bx	lr
        return HAL_ERROR;
 8007704:	2001      	movs	r0, #1
 8007706:	e004      	b.n	8007712 <HAL_RCC_OscConfig+0x4b6>
        return HAL_ERROR;
 8007708:	2001      	movs	r0, #1
 800770a:	e002      	b.n	8007712 <HAL_RCC_OscConfig+0x4b6>
          return HAL_ERROR;
 800770c:	2001      	movs	r0, #1
 800770e:	e000      	b.n	8007712 <HAL_RCC_OscConfig+0x4b6>
  return HAL_OK;
 8007710:	2000      	movs	r0, #0
}
 8007712:	b002      	add	sp, #8
 8007714:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8007716:	2001      	movs	r0, #1
 8007718:	e7fb      	b.n	8007712 <HAL_RCC_OscConfig+0x4b6>
        return HAL_ERROR;
 800771a:	2001      	movs	r0, #1
 800771c:	e7f9      	b.n	8007712 <HAL_RCC_OscConfig+0x4b6>
 800771e:	2001      	movs	r0, #1
 8007720:	e7f7      	b.n	8007712 <HAL_RCC_OscConfig+0x4b6>
 8007722:	2001      	movs	r0, #1
 8007724:	e7f5      	b.n	8007712 <HAL_RCC_OscConfig+0x4b6>
 8007726:	2001      	movs	r0, #1
 8007728:	e7f3      	b.n	8007712 <HAL_RCC_OscConfig+0x4b6>
 800772a:	2001      	movs	r0, #1
 800772c:	e7f1      	b.n	8007712 <HAL_RCC_OscConfig+0x4b6>
 800772e:	2001      	movs	r0, #1
 8007730:	e7ef      	b.n	8007712 <HAL_RCC_OscConfig+0x4b6>
 8007732:	bf00      	nop
 8007734:	40021000 	.word	0x40021000
 8007738:	019f800c 	.word	0x019f800c
 800773c:	feeefffc 	.word	0xfeeefffc

08007740 <HAL_RCC_GetSysClockFreq>:
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007740:	4b1e      	ldr	r3, [pc, #120]	@ (80077bc <HAL_RCC_GetSysClockFreq+0x7c>)
 8007742:	689b      	ldr	r3, [r3, #8]
 8007744:	f003 030c 	and.w	r3, r3, #12
 8007748:	2b04      	cmp	r3, #4
 800774a:	d033      	beq.n	80077b4 <HAL_RCC_GetSysClockFreq+0x74>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800774c:	4b1b      	ldr	r3, [pc, #108]	@ (80077bc <HAL_RCC_GetSysClockFreq+0x7c>)
 800774e:	689b      	ldr	r3, [r3, #8]
 8007750:	f003 030c 	and.w	r3, r3, #12
 8007754:	2b08      	cmp	r3, #8
 8007756:	d02f      	beq.n	80077b8 <HAL_RCC_GetSysClockFreq+0x78>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007758:	4b18      	ldr	r3, [pc, #96]	@ (80077bc <HAL_RCC_GetSysClockFreq+0x7c>)
 800775a:	689b      	ldr	r3, [r3, #8]
 800775c:	f003 030c 	and.w	r3, r3, #12
 8007760:	2b0c      	cmp	r3, #12
 8007762:	d001      	beq.n	8007768 <HAL_RCC_GetSysClockFreq+0x28>
    sysclockfreq = 0U;
 8007764:	2000      	movs	r0, #0
}
 8007766:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007768:	4b14      	ldr	r3, [pc, #80]	@ (80077bc <HAL_RCC_GetSysClockFreq+0x7c>)
 800776a:	68da      	ldr	r2, [r3, #12]
 800776c:	f002 0203 	and.w	r2, r2, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007770:	68db      	ldr	r3, [r3, #12]
 8007772:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8007776:	3301      	adds	r3, #1
    switch (pllsource)
 8007778:	2a03      	cmp	r2, #3
 800777a:	d011      	beq.n	80077a0 <HAL_RCC_GetSysClockFreq+0x60>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800777c:	4810      	ldr	r0, [pc, #64]	@ (80077c0 <HAL_RCC_GetSysClockFreq+0x80>)
 800777e:	fbb0 f0f3 	udiv	r0, r0, r3
 8007782:	4b0e      	ldr	r3, [pc, #56]	@ (80077bc <HAL_RCC_GetSysClockFreq+0x7c>)
 8007784:	68db      	ldr	r3, [r3, #12]
 8007786:	f3c3 2306 	ubfx	r3, r3, #8, #7
 800778a:	fb03 f000 	mul.w	r0, r3, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800778e:	4b0b      	ldr	r3, [pc, #44]	@ (80077bc <HAL_RCC_GetSysClockFreq+0x7c>)
 8007790:	68db      	ldr	r3, [r3, #12]
 8007792:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8007796:	3301      	adds	r3, #1
 8007798:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 800779a:	fbb0 f0f3 	udiv	r0, r0, r3
 800779e:	4770      	bx	lr
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80077a0:	4808      	ldr	r0, [pc, #32]	@ (80077c4 <HAL_RCC_GetSysClockFreq+0x84>)
 80077a2:	fbb0 f0f3 	udiv	r0, r0, r3
 80077a6:	4b05      	ldr	r3, [pc, #20]	@ (80077bc <HAL_RCC_GetSysClockFreq+0x7c>)
 80077a8:	68db      	ldr	r3, [r3, #12]
 80077aa:	f3c3 2306 	ubfx	r3, r3, #8, #7
 80077ae:	fb03 f000 	mul.w	r0, r3, r0
      break;
 80077b2:	e7ec      	b.n	800778e <HAL_RCC_GetSysClockFreq+0x4e>
    sysclockfreq = HSI_VALUE;
 80077b4:	4802      	ldr	r0, [pc, #8]	@ (80077c0 <HAL_RCC_GetSysClockFreq+0x80>)
 80077b6:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 80077b8:	4802      	ldr	r0, [pc, #8]	@ (80077c4 <HAL_RCC_GetSysClockFreq+0x84>)
 80077ba:	4770      	bx	lr
 80077bc:	40021000 	.word	0x40021000
 80077c0:	00f42400 	.word	0x00f42400
 80077c4:	00b71b00 	.word	0x00b71b00

080077c8 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80077c8:	2800      	cmp	r0, #0
 80077ca:	f000 80e6 	beq.w	800799a <HAL_RCC_ClockConfig+0x1d2>
{
 80077ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077d0:	460c      	mov	r4, r1
 80077d2:	4605      	mov	r5, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80077d4:	4b74      	ldr	r3, [pc, #464]	@ (80079a8 <HAL_RCC_ClockConfig+0x1e0>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f003 030f 	and.w	r3, r3, #15
 80077dc:	428b      	cmp	r3, r1
 80077de:	d20b      	bcs.n	80077f8 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077e0:	4a71      	ldr	r2, [pc, #452]	@ (80079a8 <HAL_RCC_ClockConfig+0x1e0>)
 80077e2:	6813      	ldr	r3, [r2, #0]
 80077e4:	f023 030f 	bic.w	r3, r3, #15
 80077e8:	430b      	orrs	r3, r1
 80077ea:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80077ec:	6813      	ldr	r3, [r2, #0]
 80077ee:	f003 030f 	and.w	r3, r3, #15
 80077f2:	428b      	cmp	r3, r1
 80077f4:	f040 80d3 	bne.w	800799e <HAL_RCC_ClockConfig+0x1d6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80077f8:	682e      	ldr	r6, [r5, #0]
 80077fa:	f016 0601 	ands.w	r6, r6, #1
 80077fe:	d05f      	beq.n	80078c0 <HAL_RCC_ClockConfig+0xf8>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007800:	686b      	ldr	r3, [r5, #4]
 8007802:	2b03      	cmp	r3, #3
 8007804:	d02f      	beq.n	8007866 <HAL_RCC_ClockConfig+0x9e>
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007806:	2b02      	cmp	r3, #2
 8007808:	d04d      	beq.n	80078a6 <HAL_RCC_ClockConfig+0xde>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800780a:	4b68      	ldr	r3, [pc, #416]	@ (80079ac <HAL_RCC_ClockConfig+0x1e4>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8007812:	f000 80c6 	beq.w	80079a2 <HAL_RCC_ClockConfig+0x1da>
      pllfreq = HAL_RCC_GetSysClockFreq();
 8007816:	f7ff ff93 	bl	8007740 <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 800781a:	4b65      	ldr	r3, [pc, #404]	@ (80079b0 <HAL_RCC_ClockConfig+0x1e8>)
 800781c:	4298      	cmp	r0, r3
 800781e:	d94d      	bls.n	80078bc <HAL_RCC_ClockConfig+0xf4>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007820:	4a62      	ldr	r2, [pc, #392]	@ (80079ac <HAL_RCC_ClockConfig+0x1e4>)
 8007822:	6893      	ldr	r3, [r2, #8]
 8007824:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007828:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800782c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800782e:	2680      	movs	r6, #128	@ 0x80
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007830:	4a5e      	ldr	r2, [pc, #376]	@ (80079ac <HAL_RCC_ClockConfig+0x1e4>)
 8007832:	6893      	ldr	r3, [r2, #8]
 8007834:	f023 0303 	bic.w	r3, r3, #3
 8007838:	6869      	ldr	r1, [r5, #4]
 800783a:	430b      	orrs	r3, r1
 800783c:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 800783e:	f7fd fa2d 	bl	8004c9c <HAL_GetTick>
 8007842:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007844:	4b59      	ldr	r3, [pc, #356]	@ (80079ac <HAL_RCC_ClockConfig+0x1e4>)
 8007846:	689b      	ldr	r3, [r3, #8]
 8007848:	f003 030c 	and.w	r3, r3, #12
 800784c:	686a      	ldr	r2, [r5, #4]
 800784e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8007852:	d035      	beq.n	80078c0 <HAL_RCC_ClockConfig+0xf8>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007854:	f7fd fa22 	bl	8004c9c <HAL_GetTick>
 8007858:	1bc0      	subs	r0, r0, r7
 800785a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800785e:	4298      	cmp	r0, r3
 8007860:	d9f0      	bls.n	8007844 <HAL_RCC_ClockConfig+0x7c>
        return HAL_TIMEOUT;
 8007862:	2003      	movs	r0, #3
 8007864:	e078      	b.n	8007958 <HAL_RCC_ClockConfig+0x190>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007866:	4b51      	ldr	r3, [pc, #324]	@ (80079ac <HAL_RCC_ClockConfig+0x1e4>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800786e:	d101      	bne.n	8007874 <HAL_RCC_ClockConfig+0xac>
        return HAL_ERROR;
 8007870:	2001      	movs	r0, #1
 8007872:	e071      	b.n	8007958 <HAL_RCC_ClockConfig+0x190>
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007874:	f7ff fcc6 	bl	8007204 <RCC_GetSysClockFreqFromPLLSource>
      if(pllfreq > 80000000U)
 8007878:	4b4d      	ldr	r3, [pc, #308]	@ (80079b0 <HAL_RCC_ClockConfig+0x1e8>)
 800787a:	4298      	cmp	r0, r3
 800787c:	d91a      	bls.n	80078b4 <HAL_RCC_ClockConfig+0xec>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800787e:	4b4b      	ldr	r3, [pc, #300]	@ (80079ac <HAL_RCC_ClockConfig+0x1e4>)
 8007880:	689b      	ldr	r3, [r3, #8]
 8007882:	f013 0ff0 	tst.w	r3, #240	@ 0xf0
 8007886:	d005      	beq.n	8007894 <HAL_RCC_ClockConfig+0xcc>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007888:	682e      	ldr	r6, [r5, #0]
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800788a:	f016 0602 	ands.w	r6, r6, #2
 800788e:	d0cf      	beq.n	8007830 <HAL_RCC_ClockConfig+0x68>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8007890:	68ab      	ldr	r3, [r5, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007892:	b98b      	cbnz	r3, 80078b8 <HAL_RCC_ClockConfig+0xf0>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007894:	4a45      	ldr	r2, [pc, #276]	@ (80079ac <HAL_RCC_ClockConfig+0x1e4>)
 8007896:	6893      	ldr	r3, [r2, #8]
 8007898:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800789c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078a0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80078a2:	2680      	movs	r6, #128	@ 0x80
 80078a4:	e7c4      	b.n	8007830 <HAL_RCC_ClockConfig+0x68>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80078a6:	4b41      	ldr	r3, [pc, #260]	@ (80079ac <HAL_RCC_ClockConfig+0x1e4>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80078ae:	d1b2      	bne.n	8007816 <HAL_RCC_ClockConfig+0x4e>
          return HAL_ERROR;
 80078b0:	2001      	movs	r0, #1
 80078b2:	e051      	b.n	8007958 <HAL_RCC_ClockConfig+0x190>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80078b4:	2600      	movs	r6, #0
 80078b6:	e7bb      	b.n	8007830 <HAL_RCC_ClockConfig+0x68>
 80078b8:	2600      	movs	r6, #0
 80078ba:	e7b9      	b.n	8007830 <HAL_RCC_ClockConfig+0x68>
 80078bc:	2600      	movs	r6, #0
 80078be:	e7b7      	b.n	8007830 <HAL_RCC_ClockConfig+0x68>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80078c0:	682b      	ldr	r3, [r5, #0]
 80078c2:	f013 0f02 	tst.w	r3, #2
 80078c6:	d048      	beq.n	800795a <HAL_RCC_ClockConfig+0x192>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80078c8:	f013 0f04 	tst.w	r3, #4
 80078cc:	d004      	beq.n	80078d8 <HAL_RCC_ClockConfig+0x110>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80078ce:	4a37      	ldr	r2, [pc, #220]	@ (80079ac <HAL_RCC_ClockConfig+0x1e4>)
 80078d0:	6893      	ldr	r3, [r2, #8]
 80078d2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80078d6:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80078d8:	682b      	ldr	r3, [r5, #0]
 80078da:	f013 0f08 	tst.w	r3, #8
 80078de:	d006      	beq.n	80078ee <HAL_RCC_ClockConfig+0x126>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80078e0:	4a32      	ldr	r2, [pc, #200]	@ (80079ac <HAL_RCC_ClockConfig+0x1e4>)
 80078e2:	6893      	ldr	r3, [r2, #8]
 80078e4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80078e8:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80078ec:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80078ee:	4a2f      	ldr	r2, [pc, #188]	@ (80079ac <HAL_RCC_ClockConfig+0x1e4>)
 80078f0:	6893      	ldr	r3, [r2, #8]
 80078f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80078f6:	68a9      	ldr	r1, [r5, #8]
 80078f8:	430b      	orrs	r3, r1
 80078fa:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80078fc:	4b2a      	ldr	r3, [pc, #168]	@ (80079a8 <HAL_RCC_ClockConfig+0x1e0>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f003 030f 	and.w	r3, r3, #15
 8007904:	42a3      	cmp	r3, r4
 8007906:	d830      	bhi.n	800796a <HAL_RCC_ClockConfig+0x1a2>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007908:	682b      	ldr	r3, [r5, #0]
 800790a:	f013 0f04 	tst.w	r3, #4
 800790e:	d006      	beq.n	800791e <HAL_RCC_ClockConfig+0x156>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007910:	4a26      	ldr	r2, [pc, #152]	@ (80079ac <HAL_RCC_ClockConfig+0x1e4>)
 8007912:	6893      	ldr	r3, [r2, #8]
 8007914:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8007918:	68e9      	ldr	r1, [r5, #12]
 800791a:	430b      	orrs	r3, r1
 800791c:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800791e:	682b      	ldr	r3, [r5, #0]
 8007920:	f013 0f08 	tst.w	r3, #8
 8007924:	d007      	beq.n	8007936 <HAL_RCC_ClockConfig+0x16e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007926:	4a21      	ldr	r2, [pc, #132]	@ (80079ac <HAL_RCC_ClockConfig+0x1e4>)
 8007928:	6893      	ldr	r3, [r2, #8]
 800792a:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 800792e:	6929      	ldr	r1, [r5, #16]
 8007930:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8007934:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007936:	f7ff ff03 	bl	8007740 <HAL_RCC_GetSysClockFreq>
 800793a:	4b1c      	ldr	r3, [pc, #112]	@ (80079ac <HAL_RCC_ClockConfig+0x1e4>)
 800793c:	689b      	ldr	r3, [r3, #8]
 800793e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8007942:	4a1c      	ldr	r2, [pc, #112]	@ (80079b4 <HAL_RCC_ClockConfig+0x1ec>)
 8007944:	5cd3      	ldrb	r3, [r2, r3]
 8007946:	f003 031f 	and.w	r3, r3, #31
 800794a:	40d8      	lsrs	r0, r3
 800794c:	4b1a      	ldr	r3, [pc, #104]	@ (80079b8 <HAL_RCC_ClockConfig+0x1f0>)
 800794e:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8007950:	4b1a      	ldr	r3, [pc, #104]	@ (80079bc <HAL_RCC_ClockConfig+0x1f4>)
 8007952:	6818      	ldr	r0, [r3, #0]
 8007954:	f7fd f95e 	bl	8004c14 <HAL_InitTick>
}
 8007958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(hpre == RCC_SYSCLK_DIV2)
 800795a:	2e80      	cmp	r6, #128	@ 0x80
 800795c:	d1ce      	bne.n	80078fc <HAL_RCC_ClockConfig+0x134>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800795e:	4a13      	ldr	r2, [pc, #76]	@ (80079ac <HAL_RCC_ClockConfig+0x1e4>)
 8007960:	6893      	ldr	r3, [r2, #8]
 8007962:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007966:	6093      	str	r3, [r2, #8]
 8007968:	e7c8      	b.n	80078fc <HAL_RCC_ClockConfig+0x134>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800796a:	4a0f      	ldr	r2, [pc, #60]	@ (80079a8 <HAL_RCC_ClockConfig+0x1e0>)
 800796c:	6813      	ldr	r3, [r2, #0]
 800796e:	f023 030f 	bic.w	r3, r3, #15
 8007972:	4323      	orrs	r3, r4
 8007974:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8007976:	f7fd f991 	bl	8004c9c <HAL_GetTick>
 800797a:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800797c:	4b0a      	ldr	r3, [pc, #40]	@ (80079a8 <HAL_RCC_ClockConfig+0x1e0>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f003 030f 	and.w	r3, r3, #15
 8007984:	42a3      	cmp	r3, r4
 8007986:	d0bf      	beq.n	8007908 <HAL_RCC_ClockConfig+0x140>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007988:	f7fd f988 	bl	8004c9c <HAL_GetTick>
 800798c:	1b80      	subs	r0, r0, r6
 800798e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007992:	4298      	cmp	r0, r3
 8007994:	d9f2      	bls.n	800797c <HAL_RCC_ClockConfig+0x1b4>
        return HAL_TIMEOUT;
 8007996:	2003      	movs	r0, #3
 8007998:	e7de      	b.n	8007958 <HAL_RCC_ClockConfig+0x190>
    return HAL_ERROR;
 800799a:	2001      	movs	r0, #1
}
 800799c:	4770      	bx	lr
      return HAL_ERROR;
 800799e:	2001      	movs	r0, #1
 80079a0:	e7da      	b.n	8007958 <HAL_RCC_ClockConfig+0x190>
          return HAL_ERROR;
 80079a2:	2001      	movs	r0, #1
 80079a4:	e7d8      	b.n	8007958 <HAL_RCC_ClockConfig+0x190>
 80079a6:	bf00      	nop
 80079a8:	40022000 	.word	0x40022000
 80079ac:	40021000 	.word	0x40021000
 80079b0:	04c4b400 	.word	0x04c4b400
 80079b4:	08015ff4 	.word	0x08015ff4
 80079b8:	20000050 	.word	0x20000050
 80079bc:	20000058 	.word	0x20000058

080079c0 <HAL_RCC_GetHCLKFreq>:
}
 80079c0:	4b01      	ldr	r3, [pc, #4]	@ (80079c8 <HAL_RCC_GetHCLKFreq+0x8>)
 80079c2:	6818      	ldr	r0, [r3, #0]
 80079c4:	4770      	bx	lr
 80079c6:	bf00      	nop
 80079c8:	20000050 	.word	0x20000050

080079cc <HAL_RCC_GetPCLK1Freq>:
{
 80079cc:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80079ce:	f7ff fff7 	bl	80079c0 <HAL_RCC_GetHCLKFreq>
 80079d2:	4b05      	ldr	r3, [pc, #20]	@ (80079e8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80079d4:	689b      	ldr	r3, [r3, #8]
 80079d6:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80079da:	4a04      	ldr	r2, [pc, #16]	@ (80079ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80079dc:	5cd3      	ldrb	r3, [r2, r3]
 80079de:	f003 031f 	and.w	r3, r3, #31
}
 80079e2:	40d8      	lsrs	r0, r3
 80079e4:	bd08      	pop	{r3, pc}
 80079e6:	bf00      	nop
 80079e8:	40021000 	.word	0x40021000
 80079ec:	08015fec 	.word	0x08015fec

080079f0 <HAL_RCC_GetPCLK2Freq>:
{
 80079f0:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80079f2:	f7ff ffe5 	bl	80079c0 <HAL_RCC_GetHCLKFreq>
 80079f6:	4b05      	ldr	r3, [pc, #20]	@ (8007a0c <HAL_RCC_GetPCLK2Freq+0x1c>)
 80079f8:	689b      	ldr	r3, [r3, #8]
 80079fa:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80079fe:	4a04      	ldr	r2, [pc, #16]	@ (8007a10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007a00:	5cd3      	ldrb	r3, [r2, r3]
 8007a02:	f003 031f 	and.w	r3, r3, #31
}
 8007a06:	40d8      	lsrs	r0, r3
 8007a08:	bd08      	pop	{r3, pc}
 8007a0a:	bf00      	nop
 8007a0c:	40021000 	.word	0x40021000
 8007a10:	08015fec 	.word	0x08015fec

08007a14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007a14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a16:	b083      	sub	sp, #12
 8007a18:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007a1a:	6803      	ldr	r3, [r0, #0]
 8007a1c:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8007a20:	d06e      	beq.n	8007b00 <HAL_RCCEx_PeriphCLKConfig+0xec>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007a22:	4b35      	ldr	r3, [pc, #212]	@ (8007af8 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8007a24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a26:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8007a2a:	d11e      	bne.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a2c:	4b32      	ldr	r3, [pc, #200]	@ (8007af8 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8007a2e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007a30:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8007a34:	659a      	str	r2, [r3, #88]	@ 0x58
 8007a36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007a3c:	9301      	str	r3, [sp, #4]
 8007a3e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8007a40:	2601      	movs	r6, #1
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007a42:	4a2e      	ldr	r2, [pc, #184]	@ (8007afc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007a44:	6813      	ldr	r3, [r2, #0]
 8007a46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007a4a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007a4c:	f7fd f926 	bl	8004c9c <HAL_GetTick>
 8007a50:	4605      	mov	r5, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007a52:	4b2a      	ldr	r3, [pc, #168]	@ (8007afc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8007a5a:	d108      	bne.n	8007a6e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a5c:	f7fd f91e 	bl	8004c9c <HAL_GetTick>
 8007a60:	1b40      	subs	r0, r0, r5
 8007a62:	2802      	cmp	r0, #2
 8007a64:	d9f5      	bls.n	8007a52 <HAL_RCCEx_PeriphCLKConfig+0x3e>
      {
        ret = HAL_TIMEOUT;
 8007a66:	2503      	movs	r5, #3
 8007a68:	e002      	b.n	8007a70 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    FlagStatus       pwrclkchanged = RESET;
 8007a6a:	2600      	movs	r6, #0
 8007a6c:	e7e9      	b.n	8007a42 <HAL_RCCEx_PeriphCLKConfig+0x2e>
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007a6e:	2500      	movs	r5, #0
        break;
      }
    }

    if(ret == HAL_OK)
 8007a70:	bb45      	cbnz	r5, 8007ac4 <HAL_RCCEx_PeriphCLKConfig+0xb0>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007a72:	4b21      	ldr	r3, [pc, #132]	@ (8007af8 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8007a74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007a78:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8007a7c:	d015      	beq.n	8007aaa <HAL_RCCEx_PeriphCLKConfig+0x96>
 8007a7e:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8007a80:	429a      	cmp	r2, r3
 8007a82:	d012      	beq.n	8007aaa <HAL_RCCEx_PeriphCLKConfig+0x96>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007a84:	4a1c      	ldr	r2, [pc, #112]	@ (8007af8 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8007a86:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8007a8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007a8e:	f8d2 1090 	ldr.w	r1, [r2, #144]	@ 0x90
 8007a92:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 8007a96:	f8c2 1090 	str.w	r1, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007a9a:	f8d2 1090 	ldr.w	r1, [r2, #144]	@ 0x90
 8007a9e:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 8007aa2:	f8c2 1090 	str.w	r1, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007aa6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007aaa:	f013 0f01 	tst.w	r3, #1
 8007aae:	d110      	bne.n	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0xbe>
            break;
          }
        }
      }
      
      if(ret == HAL_OK)
 8007ab0:	b945      	cbnz	r5, 8007ac4 <HAL_RCCEx_PeriphCLKConfig+0xb0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007ab2:	4a11      	ldr	r2, [pc, #68]	@ (8007af8 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8007ab4:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8007ab8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007abc:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8007abe:	430b      	orrs	r3, r1
 8007ac0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007ac4:	b1ee      	cbz	r6, 8007b02 <HAL_RCCEx_PeriphCLKConfig+0xee>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007ac6:	4a0c      	ldr	r2, [pc, #48]	@ (8007af8 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8007ac8:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8007aca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007ace:	6593      	str	r3, [r2, #88]	@ 0x58
 8007ad0:	e017      	b.n	8007b02 <HAL_RCCEx_PeriphCLKConfig+0xee>
        tickstart = HAL_GetTick();
 8007ad2:	f7fd f8e3 	bl	8004c9c <HAL_GetTick>
 8007ad6:	4607      	mov	r7, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007ad8:	4b07      	ldr	r3, [pc, #28]	@ (8007af8 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8007ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ade:	f013 0f02 	tst.w	r3, #2
 8007ae2:	d1e5      	bne.n	8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ae4:	f7fd f8da 	bl	8004c9c <HAL_GetTick>
 8007ae8:	1bc0      	subs	r0, r0, r7
 8007aea:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007aee:	4298      	cmp	r0, r3
 8007af0:	d9f2      	bls.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
            ret = HAL_TIMEOUT;
 8007af2:	2503      	movs	r5, #3
 8007af4:	e7dc      	b.n	8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8007af6:	bf00      	nop
 8007af8:	40021000 	.word	0x40021000
 8007afc:	40007000 	.word	0x40007000
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007b00:	2500      	movs	r5, #0
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007b02:	6823      	ldr	r3, [r4, #0]
 8007b04:	f013 0f01 	tst.w	r3, #1
 8007b08:	d008      	beq.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007b0a:	4a9f      	ldr	r2, [pc, #636]	@ (8007d88 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007b0c:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8007b10:	f023 0303 	bic.w	r3, r3, #3
 8007b14:	6861      	ldr	r1, [r4, #4]
 8007b16:	430b      	orrs	r3, r1
 8007b18:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007b1c:	6823      	ldr	r3, [r4, #0]
 8007b1e:	f013 0f02 	tst.w	r3, #2
 8007b22:	d008      	beq.n	8007b36 <HAL_RCCEx_PeriphCLKConfig+0x122>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007b24:	4a98      	ldr	r2, [pc, #608]	@ (8007d88 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007b26:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8007b2a:	f023 030c 	bic.w	r3, r3, #12
 8007b2e:	68a1      	ldr	r1, [r4, #8]
 8007b30:	430b      	orrs	r3, r1
 8007b32:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007b36:	6823      	ldr	r3, [r4, #0]
 8007b38:	f013 0f04 	tst.w	r3, #4
 8007b3c:	d008      	beq.n	8007b50 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007b3e:	4a92      	ldr	r2, [pc, #584]	@ (8007d88 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007b40:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8007b44:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8007b48:	68e1      	ldr	r1, [r4, #12]
 8007b4a:	430b      	orrs	r3, r1
 8007b4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007b50:	6823      	ldr	r3, [r4, #0]
 8007b52:	f013 0f08 	tst.w	r3, #8
 8007b56:	d008      	beq.n	8007b6a <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007b58:	4a8b      	ldr	r2, [pc, #556]	@ (8007d88 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007b5a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8007b5e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007b62:	6921      	ldr	r1, [r4, #16]
 8007b64:	430b      	orrs	r3, r1
 8007b66:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007b6a:	6823      	ldr	r3, [r4, #0]
 8007b6c:	f013 0f10 	tst.w	r3, #16
 8007b70:	d008      	beq.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007b72:	4a85      	ldr	r2, [pc, #532]	@ (8007d88 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007b74:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8007b78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007b7c:	6961      	ldr	r1, [r4, #20]
 8007b7e:	430b      	orrs	r3, r1
 8007b80:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007b84:	6823      	ldr	r3, [r4, #0]
 8007b86:	f013 0f20 	tst.w	r3, #32
 8007b8a:	d008      	beq.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0x18a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007b8c:	4a7e      	ldr	r2, [pc, #504]	@ (8007d88 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007b8e:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8007b92:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8007b96:	69a1      	ldr	r1, [r4, #24]
 8007b98:	430b      	orrs	r3, r1
 8007b9a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007b9e:	6823      	ldr	r3, [r4, #0]
 8007ba0:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8007ba4:	d008      	beq.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007ba6:	4a78      	ldr	r2, [pc, #480]	@ (8007d88 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007ba8:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8007bac:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8007bb0:	69e1      	ldr	r1, [r4, #28]
 8007bb2:	430b      	orrs	r3, r1
 8007bb4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007bb8:	6823      	ldr	r3, [r4, #0]
 8007bba:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007bbe:	d008      	beq.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007bc0:	4a71      	ldr	r2, [pc, #452]	@ (8007d88 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007bc2:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8007bc6:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8007bca:	6a21      	ldr	r1, [r4, #32]
 8007bcc:	430b      	orrs	r3, r1
 8007bce:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007bd2:	6823      	ldr	r3, [r4, #0]
 8007bd4:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8007bd8:	d008      	beq.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007bda:	4a6b      	ldr	r2, [pc, #428]	@ (8007d88 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007bdc:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8007be0:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8007be4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8007be6:	430b      	orrs	r3, r1
 8007be8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007bec:	6823      	ldr	r3, [r4, #0]
 8007bee:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8007bf2:	d008      	beq.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007bf4:	4a64      	ldr	r2, [pc, #400]	@ (8007d88 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007bf6:	f8d2 309c 	ldr.w	r3, [r2, #156]	@ 0x9c
 8007bfa:	f023 0303 	bic.w	r3, r3, #3
 8007bfe:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8007c00:	430b      	orrs	r3, r1
 8007c02:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007c06:	6823      	ldr	r3, [r4, #0]
 8007c08:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8007c0c:	d008      	beq.n	8007c20 <HAL_RCCEx_PeriphCLKConfig+0x20c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007c0e:	4a5e      	ldr	r2, [pc, #376]	@ (8007d88 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007c10:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8007c14:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 8007c18:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007c1a:	430b      	orrs	r3, r1
 8007c1c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007c20:	6823      	ldr	r3, [r4, #0]
 8007c22:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8007c26:	d00c      	beq.n	8007c42 <HAL_RCCEx_PeriphCLKConfig+0x22e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007c28:	4a57      	ldr	r2, [pc, #348]	@ (8007d88 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007c2a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8007c2e:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007c32:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007c34:	430b      	orrs	r3, r1
 8007c36:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007c3a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8007c3c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007c40:	d079      	beq.n	8007d36 <HAL_RCCEx_PeriphCLKConfig+0x322>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007c42:	6823      	ldr	r3, [r4, #0]
 8007c44:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8007c48:	d00c      	beq.n	8007c64 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007c4a:	4a4f      	ldr	r2, [pc, #316]	@ (8007d88 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007c4c:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8007c50:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8007c54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007c56:	430b      	orrs	r3, r1
 8007c58:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007c5c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007c5e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007c62:	d06d      	beq.n	8007d40 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007c64:	6823      	ldr	r3, [r4, #0]
 8007c66:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 8007c6a:	d00c      	beq.n	8007c86 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007c6c:	4a46      	ldr	r2, [pc, #280]	@ (8007d88 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007c6e:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8007c72:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 8007c76:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8007c78:	430b      	orrs	r3, r1
 8007c7a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007c7e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007c80:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007c84:	d061      	beq.n	8007d4a <HAL_RCCEx_PeriphCLKConfig+0x336>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007c86:	6823      	ldr	r3, [r4, #0]
 8007c88:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 8007c8c:	d00c      	beq.n	8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x294>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007c8e:	4a3e      	ldr	r2, [pc, #248]	@ (8007d88 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007c90:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8007c94:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8007c98:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8007c9a:	430b      	orrs	r3, r1
 8007c9c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007ca0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007ca2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007ca6:	d055      	beq.n	8007d54 <HAL_RCCEx_PeriphCLKConfig+0x340>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007ca8:	6823      	ldr	r3, [r4, #0]
 8007caa:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8007cae:	d00c      	beq.n	8007cca <HAL_RCCEx_PeriphCLKConfig+0x2b6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007cb0:	4a35      	ldr	r2, [pc, #212]	@ (8007d88 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007cb2:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8007cb6:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8007cba:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8007cbc:	430b      	orrs	r3, r1
 8007cbe:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007cc2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007cc4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007cc8:	d049      	beq.n	8007d5e <HAL_RCCEx_PeriphCLKConfig+0x34a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007cca:	6823      	ldr	r3, [r4, #0]
 8007ccc:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8007cd0:	d00c      	beq.n	8007cec <HAL_RCCEx_PeriphCLKConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007cd2:	4a2d      	ldr	r2, [pc, #180]	@ (8007d88 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007cd4:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8007cd8:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8007cdc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007cde:	430b      	orrs	r3, r1
 8007ce0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007ce4:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8007ce6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007cea:	d03d      	beq.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0x354>
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8007cec:	6823      	ldr	r3, [r4, #0]
 8007cee:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8007cf2:	d00c      	beq.n	8007d0e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007cf4:	4a24      	ldr	r2, [pc, #144]	@ (8007d88 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007cf6:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8007cfa:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8007cfe:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007d00:	430b      	orrs	r3, r1
 8007d02:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8007d06:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8007d08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d0c:	d031      	beq.n	8007d72 <HAL_RCCEx_PeriphCLKConfig+0x35e>
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007d0e:	6823      	ldr	r3, [r4, #0]
 8007d10:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 8007d14:	d00c      	beq.n	8007d30 <HAL_RCCEx_PeriphCLKConfig+0x31c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007d16:	4a1c      	ldr	r2, [pc, #112]	@ (8007d88 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007d18:	f8d2 309c 	ldr.w	r3, [r2, #156]	@ 0x9c
 8007d1c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007d20:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8007d22:	430b      	orrs	r3, r1
 8007d24:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8007d28:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8007d2a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007d2e:	d025      	beq.n	8007d7c <HAL_RCCEx_PeriphCLKConfig+0x368>
  }

#endif /* QUADSPI */

  return status;
}
 8007d30:	4628      	mov	r0, r5
 8007d32:	b003      	add	sp, #12
 8007d34:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007d36:	68d3      	ldr	r3, [r2, #12]
 8007d38:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007d3c:	60d3      	str	r3, [r2, #12]
 8007d3e:	e780      	b.n	8007c42 <HAL_RCCEx_PeriphCLKConfig+0x22e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007d40:	68d3      	ldr	r3, [r2, #12]
 8007d42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007d46:	60d3      	str	r3, [r2, #12]
 8007d48:	e78c      	b.n	8007c64 <HAL_RCCEx_PeriphCLKConfig+0x250>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007d4a:	68d3      	ldr	r3, [r2, #12]
 8007d4c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007d50:	60d3      	str	r3, [r2, #12]
 8007d52:	e798      	b.n	8007c86 <HAL_RCCEx_PeriphCLKConfig+0x272>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007d54:	68d3      	ldr	r3, [r2, #12]
 8007d56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007d5a:	60d3      	str	r3, [r2, #12]
 8007d5c:	e7a4      	b.n	8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x294>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007d5e:	68d3      	ldr	r3, [r2, #12]
 8007d60:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007d64:	60d3      	str	r3, [r2, #12]
 8007d66:	e7b0      	b.n	8007cca <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007d68:	68d3      	ldr	r3, [r2, #12]
 8007d6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d6e:	60d3      	str	r3, [r2, #12]
 8007d70:	e7bc      	b.n	8007cec <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007d72:	68d3      	ldr	r3, [r2, #12]
 8007d74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d78:	60d3      	str	r3, [r2, #12]
 8007d7a:	e7c8      	b.n	8007d0e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007d7c:	68d3      	ldr	r3, [r2, #12]
 8007d7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007d82:	60d3      	str	r3, [r2, #12]
 8007d84:	e7d4      	b.n	8007d30 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8007d86:	bf00      	nop
 8007d88:	40021000 	.word	0x40021000

08007d8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007d8c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d8e:	6a02      	ldr	r2, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d90:	6a03      	ldr	r3, [r0, #32]
 8007d92:	f023 0301 	bic.w	r3, r3, #1
 8007d96:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d98:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d9a:	6983      	ldr	r3, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007d9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007da0:	f023 0373 	bic.w	r3, r3, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007da4:	680d      	ldr	r5, [r1, #0]
 8007da6:	431d      	orrs	r5, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007da8:	f022 0202 	bic.w	r2, r2, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007dac:	688b      	ldr	r3, [r1, #8]
 8007dae:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007db0:	4a20      	ldr	r2, [pc, #128]	@ (8007e34 <TIM_OC1_SetConfig+0xa8>)
 8007db2:	4290      	cmp	r0, r2
 8007db4:	d013      	beq.n	8007dde <TIM_OC1_SetConfig+0x52>
 8007db6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007dba:	4290      	cmp	r0, r2
 8007dbc:	d00f      	beq.n	8007dde <TIM_OC1_SetConfig+0x52>
 8007dbe:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8007dc2:	4290      	cmp	r0, r2
 8007dc4:	d00b      	beq.n	8007dde <TIM_OC1_SetConfig+0x52>
 8007dc6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007dca:	4290      	cmp	r0, r2
 8007dcc:	d007      	beq.n	8007dde <TIM_OC1_SetConfig+0x52>
 8007dce:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007dd2:	4290      	cmp	r0, r2
 8007dd4:	d003      	beq.n	8007dde <TIM_OC1_SetConfig+0x52>
 8007dd6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007dda:	4290      	cmp	r0, r2
 8007ddc:	d105      	bne.n	8007dea <TIM_OC1_SetConfig+0x5e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007dde:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007de2:	68ca      	ldr	r2, [r1, #12]
 8007de4:	431a      	orrs	r2, r3
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007de6:	f022 0304 	bic.w	r3, r2, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007dea:	4a12      	ldr	r2, [pc, #72]	@ (8007e34 <TIM_OC1_SetConfig+0xa8>)
 8007dec:	4290      	cmp	r0, r2
 8007dee:	d013      	beq.n	8007e18 <TIM_OC1_SetConfig+0x8c>
 8007df0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007df4:	4290      	cmp	r0, r2
 8007df6:	d00f      	beq.n	8007e18 <TIM_OC1_SetConfig+0x8c>
 8007df8:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8007dfc:	4290      	cmp	r0, r2
 8007dfe:	d00b      	beq.n	8007e18 <TIM_OC1_SetConfig+0x8c>
 8007e00:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007e04:	4290      	cmp	r0, r2
 8007e06:	d007      	beq.n	8007e18 <TIM_OC1_SetConfig+0x8c>
 8007e08:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007e0c:	4290      	cmp	r0, r2
 8007e0e:	d003      	beq.n	8007e18 <TIM_OC1_SetConfig+0x8c>
 8007e10:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007e14:	4290      	cmp	r0, r2
 8007e16:	d105      	bne.n	8007e24 <TIM_OC1_SetConfig+0x98>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007e18:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007e1c:	694a      	ldr	r2, [r1, #20]
 8007e1e:	4322      	orrs	r2, r4
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007e20:	698c      	ldr	r4, [r1, #24]
 8007e22:	4314      	orrs	r4, r2
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e24:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007e26:	6185      	str	r5, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007e28:	684a      	ldr	r2, [r1, #4]
 8007e2a:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e2c:	6203      	str	r3, [r0, #32]
}
 8007e2e:	bc30      	pop	{r4, r5}
 8007e30:	4770      	bx	lr
 8007e32:	bf00      	nop
 8007e34:	40012c00 	.word	0x40012c00

08007e38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e38:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e3a:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007e3c:	6a02      	ldr	r2, [r0, #32]
 8007e3e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007e42:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e44:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e46:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007e48:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8007e4c:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e50:	680d      	ldr	r5, [r1, #0]
 8007e52:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007e54:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007e58:	688a      	ldr	r2, [r1, #8]
 8007e5a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007e5e:	4a1c      	ldr	r2, [pc, #112]	@ (8007ed0 <TIM_OC3_SetConfig+0x98>)
 8007e60:	4290      	cmp	r0, r2
 8007e62:	d007      	beq.n	8007e74 <TIM_OC3_SetConfig+0x3c>
 8007e64:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007e68:	4290      	cmp	r0, r2
 8007e6a:	d003      	beq.n	8007e74 <TIM_OC3_SetConfig+0x3c>
 8007e6c:	f502 52e0 	add.w	r2, r2, #7168	@ 0x1c00
 8007e70:	4290      	cmp	r0, r2
 8007e72:	d106      	bne.n	8007e82 <TIM_OC3_SetConfig+0x4a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007e74:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007e78:	68ca      	ldr	r2, [r1, #12]
 8007e7a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007e7e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e82:	4a13      	ldr	r2, [pc, #76]	@ (8007ed0 <TIM_OC3_SetConfig+0x98>)
 8007e84:	4290      	cmp	r0, r2
 8007e86:	d013      	beq.n	8007eb0 <TIM_OC3_SetConfig+0x78>
 8007e88:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007e8c:	4290      	cmp	r0, r2
 8007e8e:	d00f      	beq.n	8007eb0 <TIM_OC3_SetConfig+0x78>
 8007e90:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8007e94:	4290      	cmp	r0, r2
 8007e96:	d00b      	beq.n	8007eb0 <TIM_OC3_SetConfig+0x78>
 8007e98:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007e9c:	4290      	cmp	r0, r2
 8007e9e:	d007      	beq.n	8007eb0 <TIM_OC3_SetConfig+0x78>
 8007ea0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007ea4:	4290      	cmp	r0, r2
 8007ea6:	d003      	beq.n	8007eb0 <TIM_OC3_SetConfig+0x78>
 8007ea8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007eac:	4290      	cmp	r0, r2
 8007eae:	d107      	bne.n	8007ec0 <TIM_OC3_SetConfig+0x88>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007eb0:	f424 5240 	bic.w	r2, r4, #12288	@ 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007eb4:	694c      	ldr	r4, [r1, #20]
 8007eb6:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007eba:	698c      	ldr	r4, [r1, #24]
 8007ebc:	ea42 1404 	orr.w	r4, r2, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ec0:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ec2:	61c5      	str	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007ec4:	684a      	ldr	r2, [r1, #4]
 8007ec6:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ec8:	6203      	str	r3, [r0, #32]
}
 8007eca:	bc30      	pop	{r4, r5}
 8007ecc:	4770      	bx	lr
 8007ece:	bf00      	nop
 8007ed0:	40012c00 	.word	0x40012c00

08007ed4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ed4:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ed6:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007ed8:	6a02      	ldr	r2, [r0, #32]
 8007eda:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007ede:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ee0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007ee2:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007ee4:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8007ee8:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007eec:	680d      	ldr	r5, [r1, #0]
 8007eee:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007ef2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007ef6:	688d      	ldr	r5, [r1, #8]
 8007ef8:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007efc:	4d1b      	ldr	r5, [pc, #108]	@ (8007f6c <TIM_OC4_SetConfig+0x98>)
 8007efe:	42a8      	cmp	r0, r5
 8007f00:	d007      	beq.n	8007f12 <TIM_OC4_SetConfig+0x3e>
 8007f02:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8007f06:	42a8      	cmp	r0, r5
 8007f08:	d003      	beq.n	8007f12 <TIM_OC4_SetConfig+0x3e>
 8007f0a:	f505 55e0 	add.w	r5, r5, #7168	@ 0x1c00
 8007f0e:	42a8      	cmp	r0, r5
 8007f10:	d106      	bne.n	8007f20 <TIM_OC4_SetConfig+0x4c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007f12:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007f16:	68cd      	ldr	r5, [r1, #12]
 8007f18:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007f1c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f20:	4d12      	ldr	r5, [pc, #72]	@ (8007f6c <TIM_OC4_SetConfig+0x98>)
 8007f22:	42a8      	cmp	r0, r5
 8007f24:	d013      	beq.n	8007f4e <TIM_OC4_SetConfig+0x7a>
 8007f26:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8007f2a:	42a8      	cmp	r0, r5
 8007f2c:	d00f      	beq.n	8007f4e <TIM_OC4_SetConfig+0x7a>
 8007f2e:	f505 6540 	add.w	r5, r5, #3072	@ 0xc00
 8007f32:	42a8      	cmp	r0, r5
 8007f34:	d00b      	beq.n	8007f4e <TIM_OC4_SetConfig+0x7a>
 8007f36:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007f3a:	42a8      	cmp	r0, r5
 8007f3c:	d007      	beq.n	8007f4e <TIM_OC4_SetConfig+0x7a>
 8007f3e:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007f42:	42a8      	cmp	r0, r5
 8007f44:	d003      	beq.n	8007f4e <TIM_OC4_SetConfig+0x7a>
 8007f46:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8007f4a:	42a8      	cmp	r0, r5
 8007f4c:	d107      	bne.n	8007f5e <TIM_OC4_SetConfig+0x8a>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007f4e:	f424 4c40 	bic.w	ip, r4, #49152	@ 0xc000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007f52:	694c      	ldr	r4, [r1, #20]
 8007f54:	ea4c 1c84 	orr.w	ip, ip, r4, lsl #6
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007f58:	698c      	ldr	r4, [r1, #24]
 8007f5a:	ea4c 1484 	orr.w	r4, ip, r4, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f5e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f60:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007f62:	684a      	ldr	r2, [r1, #4]
 8007f64:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f66:	6203      	str	r3, [r0, #32]
}
 8007f68:	bc30      	pop	{r4, r5}
 8007f6a:	4770      	bx	lr
 8007f6c:	40012c00 	.word	0x40012c00

08007f70 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007f70:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f72:	6a03      	ldr	r3, [r0, #32]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007f74:	6a02      	ldr	r2, [r0, #32]
 8007f76:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8007f7a:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f7c:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007f7e:	6d02      	ldr	r2, [r0, #80]	@ 0x50

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007f80:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8007f84:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f88:	680d      	ldr	r5, [r1, #0]
 8007f8a:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007f8c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007f90:	688a      	ldr	r2, [r1, #8]
 8007f92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f96:	4a11      	ldr	r2, [pc, #68]	@ (8007fdc <TIM_OC5_SetConfig+0x6c>)
 8007f98:	4290      	cmp	r0, r2
 8007f9a:	d013      	beq.n	8007fc4 <TIM_OC5_SetConfig+0x54>
 8007f9c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007fa0:	4290      	cmp	r0, r2
 8007fa2:	d00f      	beq.n	8007fc4 <TIM_OC5_SetConfig+0x54>
 8007fa4:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8007fa8:	4290      	cmp	r0, r2
 8007faa:	d00b      	beq.n	8007fc4 <TIM_OC5_SetConfig+0x54>
 8007fac:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007fb0:	4290      	cmp	r0, r2
 8007fb2:	d007      	beq.n	8007fc4 <TIM_OC5_SetConfig+0x54>
 8007fb4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007fb8:	4290      	cmp	r0, r2
 8007fba:	d003      	beq.n	8007fc4 <TIM_OC5_SetConfig+0x54>
 8007fbc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007fc0:	4290      	cmp	r0, r2
 8007fc2:	d104      	bne.n	8007fce <TIM_OC5_SetConfig+0x5e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007fc4:	f424 3480 	bic.w	r4, r4, #65536	@ 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007fc8:	694a      	ldr	r2, [r1, #20]
 8007fca:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fce:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007fd0:	6505      	str	r5, [r0, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007fd2:	684a      	ldr	r2, [r1, #4]
 8007fd4:	6482      	str	r2, [r0, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fd6:	6203      	str	r3, [r0, #32]
}
 8007fd8:	bc30      	pop	{r4, r5}
 8007fda:	4770      	bx	lr
 8007fdc:	40012c00 	.word	0x40012c00

08007fe0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007fe0:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fe2:	6a03      	ldr	r3, [r0, #32]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007fe4:	6a02      	ldr	r2, [r0, #32]
 8007fe6:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8007fea:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fec:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007fee:	6d02      	ldr	r2, [r0, #80]	@ 0x50

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007ff0:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8007ff4:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ff8:	680d      	ldr	r5, [r1, #0]
 8007ffa:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007ffe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008002:	688d      	ldr	r5, [r1, #8]
 8008004:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008008:	4d11      	ldr	r5, [pc, #68]	@ (8008050 <TIM_OC6_SetConfig+0x70>)
 800800a:	42a8      	cmp	r0, r5
 800800c:	d013      	beq.n	8008036 <TIM_OC6_SetConfig+0x56>
 800800e:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8008012:	42a8      	cmp	r0, r5
 8008014:	d00f      	beq.n	8008036 <TIM_OC6_SetConfig+0x56>
 8008016:	f505 6540 	add.w	r5, r5, #3072	@ 0xc00
 800801a:	42a8      	cmp	r0, r5
 800801c:	d00b      	beq.n	8008036 <TIM_OC6_SetConfig+0x56>
 800801e:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8008022:	42a8      	cmp	r0, r5
 8008024:	d007      	beq.n	8008036 <TIM_OC6_SetConfig+0x56>
 8008026:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800802a:	42a8      	cmp	r0, r5
 800802c:	d003      	beq.n	8008036 <TIM_OC6_SetConfig+0x56>
 800802e:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8008032:	42a8      	cmp	r0, r5
 8008034:	d104      	bne.n	8008040 <TIM_OC6_SetConfig+0x60>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008036:	f424 2480 	bic.w	r4, r4, #262144	@ 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800803a:	694d      	ldr	r5, [r1, #20]
 800803c:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008040:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008042:	6502      	str	r2, [r0, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008044:	684a      	ldr	r2, [r1, #4]
 8008046:	64c2      	str	r2, [r0, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008048:	6203      	str	r3, [r0, #32]
}
 800804a:	bc30      	pop	{r4, r5}
 800804c:	4770      	bx	lr
 800804e:	bf00      	nop
 8008050:	40012c00 	.word	0x40012c00

08008054 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008054:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008056:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008058:	6a04      	ldr	r4, [r0, #32]
 800805a:	f024 0401 	bic.w	r4, r4, #1
 800805e:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008060:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008062:	f024 0cf0 	bic.w	ip, r4, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008066:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800806a:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 800806e:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008070:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8008072:	6203      	str	r3, [r0, #32]
}
 8008074:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008078:	4770      	bx	lr

0800807a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800807a:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800807c:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800807e:	6a04      	ldr	r4, [r0, #32]
 8008080:	f024 0410 	bic.w	r4, r4, #16
 8008084:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008086:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008088:	f424 4c70 	bic.w	ip, r4, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800808c:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008090:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8008094:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008098:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800809a:	6203      	str	r3, [r0, #32]
}
 800809c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80080a0:	4770      	bx	lr

080080a2 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80080a2:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80080a4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80080a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80080ac:	430b      	orrs	r3, r1
 80080ae:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80080b2:	6083      	str	r3, [r0, #8]
}
 80080b4:	4770      	bx	lr
	...

080080b8 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 80080b8:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80080bc:	b2db      	uxtb	r3, r3
 80080be:	2b01      	cmp	r3, #1
 80080c0:	d135      	bne.n	800812e <HAL_TIM_Base_Start+0x76>
  htim->State = HAL_TIM_STATE_BUSY;
 80080c2:	2302      	movs	r3, #2
 80080c4:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080c8:	6803      	ldr	r3, [r0, #0]
 80080ca:	4a1c      	ldr	r2, [pc, #112]	@ (800813c <HAL_TIM_Base_Start+0x84>)
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d020      	beq.n	8008112 <HAL_TIM_Base_Start+0x5a>
 80080d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080d4:	d01d      	beq.n	8008112 <HAL_TIM_Base_Start+0x5a>
 80080d6:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80080da:	4293      	cmp	r3, r2
 80080dc:	d019      	beq.n	8008112 <HAL_TIM_Base_Start+0x5a>
 80080de:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d015      	beq.n	8008112 <HAL_TIM_Base_Start+0x5a>
 80080e6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d011      	beq.n	8008112 <HAL_TIM_Base_Start+0x5a>
 80080ee:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d00d      	beq.n	8008112 <HAL_TIM_Base_Start+0x5a>
 80080f6:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d009      	beq.n	8008112 <HAL_TIM_Base_Start+0x5a>
 80080fe:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008102:	4293      	cmp	r3, r2
 8008104:	d005      	beq.n	8008112 <HAL_TIM_Base_Start+0x5a>
    __HAL_TIM_ENABLE(htim);
 8008106:	681a      	ldr	r2, [r3, #0]
 8008108:	f042 0201 	orr.w	r2, r2, #1
 800810c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800810e:	2000      	movs	r0, #0
 8008110:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008112:	6899      	ldr	r1, [r3, #8]
 8008114:	4a0a      	ldr	r2, [pc, #40]	@ (8008140 <HAL_TIM_Base_Start+0x88>)
 8008116:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008118:	2a06      	cmp	r2, #6
 800811a:	d00a      	beq.n	8008132 <HAL_TIM_Base_Start+0x7a>
 800811c:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8008120:	d009      	beq.n	8008136 <HAL_TIM_Base_Start+0x7e>
      __HAL_TIM_ENABLE(htim);
 8008122:	681a      	ldr	r2, [r3, #0]
 8008124:	f042 0201 	orr.w	r2, r2, #1
 8008128:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800812a:	2000      	movs	r0, #0
 800812c:	4770      	bx	lr
    return HAL_ERROR;
 800812e:	2001      	movs	r0, #1
 8008130:	4770      	bx	lr
  return HAL_OK;
 8008132:	2000      	movs	r0, #0
 8008134:	4770      	bx	lr
 8008136:	2000      	movs	r0, #0
}
 8008138:	4770      	bx	lr
 800813a:	bf00      	nop
 800813c:	40012c00 	.word	0x40012c00
 8008140:	00010007 	.word	0x00010007

08008144 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8008144:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8008148:	b2db      	uxtb	r3, r3
 800814a:	2b01      	cmp	r3, #1
 800814c:	d13a      	bne.n	80081c4 <HAL_TIM_Base_Start_IT+0x80>
  htim->State = HAL_TIM_STATE_BUSY;
 800814e:	2302      	movs	r3, #2
 8008150:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008154:	6802      	ldr	r2, [r0, #0]
 8008156:	68d3      	ldr	r3, [r2, #12]
 8008158:	f043 0301 	orr.w	r3, r3, #1
 800815c:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800815e:	6803      	ldr	r3, [r0, #0]
 8008160:	4a1b      	ldr	r2, [pc, #108]	@ (80081d0 <HAL_TIM_Base_Start_IT+0x8c>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d020      	beq.n	80081a8 <HAL_TIM_Base_Start_IT+0x64>
 8008166:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800816a:	d01d      	beq.n	80081a8 <HAL_TIM_Base_Start_IT+0x64>
 800816c:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8008170:	4293      	cmp	r3, r2
 8008172:	d019      	beq.n	80081a8 <HAL_TIM_Base_Start_IT+0x64>
 8008174:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008178:	4293      	cmp	r3, r2
 800817a:	d015      	beq.n	80081a8 <HAL_TIM_Base_Start_IT+0x64>
 800817c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008180:	4293      	cmp	r3, r2
 8008182:	d011      	beq.n	80081a8 <HAL_TIM_Base_Start_IT+0x64>
 8008184:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 8008188:	4293      	cmp	r3, r2
 800818a:	d00d      	beq.n	80081a8 <HAL_TIM_Base_Start_IT+0x64>
 800818c:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8008190:	4293      	cmp	r3, r2
 8008192:	d009      	beq.n	80081a8 <HAL_TIM_Base_Start_IT+0x64>
 8008194:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008198:	4293      	cmp	r3, r2
 800819a:	d005      	beq.n	80081a8 <HAL_TIM_Base_Start_IT+0x64>
    __HAL_TIM_ENABLE(htim);
 800819c:	681a      	ldr	r2, [r3, #0]
 800819e:	f042 0201 	orr.w	r2, r2, #1
 80081a2:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80081a4:	2000      	movs	r0, #0
 80081a6:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80081a8:	6899      	ldr	r1, [r3, #8]
 80081aa:	4a0a      	ldr	r2, [pc, #40]	@ (80081d4 <HAL_TIM_Base_Start_IT+0x90>)
 80081ac:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081ae:	2a06      	cmp	r2, #6
 80081b0:	d00a      	beq.n	80081c8 <HAL_TIM_Base_Start_IT+0x84>
 80081b2:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 80081b6:	d009      	beq.n	80081cc <HAL_TIM_Base_Start_IT+0x88>
      __HAL_TIM_ENABLE(htim);
 80081b8:	681a      	ldr	r2, [r3, #0]
 80081ba:	f042 0201 	orr.w	r2, r2, #1
 80081be:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80081c0:	2000      	movs	r0, #0
 80081c2:	4770      	bx	lr
    return HAL_ERROR;
 80081c4:	2001      	movs	r0, #1
 80081c6:	4770      	bx	lr
  return HAL_OK;
 80081c8:	2000      	movs	r0, #0
 80081ca:	4770      	bx	lr
 80081cc:	2000      	movs	r0, #0
}
 80081ce:	4770      	bx	lr
 80081d0:	40012c00 	.word	0x40012c00
 80081d4:	00010007 	.word	0x00010007

080081d8 <HAL_TIM_PWM_MspInit>:
}
 80081d8:	4770      	bx	lr

080081da <HAL_TIM_OC_DelayElapsedCallback>:
}
 80081da:	4770      	bx	lr

080081dc <HAL_TIM_IC_CaptureCallback>:
}
 80081dc:	4770      	bx	lr

080081de <HAL_TIM_PWM_PulseFinishedCallback>:
}
 80081de:	4770      	bx	lr

080081e0 <HAL_TIM_TriggerCallback>:
}
 80081e0:	4770      	bx	lr

080081e2 <HAL_TIM_IRQHandler>:
{
 80081e2:	b570      	push	{r4, r5, r6, lr}
 80081e4:	4605      	mov	r5, r0
  uint32_t itsource = htim->Instance->DIER;
 80081e6:	6803      	ldr	r3, [r0, #0]
 80081e8:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 80081ea:	691c      	ldr	r4, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80081ec:	f014 0f02 	tst.w	r4, #2
 80081f0:	d010      	beq.n	8008214 <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80081f2:	f016 0f02 	tst.w	r6, #2
 80081f6:	d00d      	beq.n	8008214 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80081f8:	f06f 0202 	mvn.w	r2, #2
 80081fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80081fe:	2301      	movs	r3, #1
 8008200:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008202:	6803      	ldr	r3, [r0, #0]
 8008204:	699b      	ldr	r3, [r3, #24]
 8008206:	f013 0f03 	tst.w	r3, #3
 800820a:	d07c      	beq.n	8008306 <HAL_TIM_IRQHandler+0x124>
          HAL_TIM_IC_CaptureCallback(htim);
 800820c:	f7ff ffe6 	bl	80081dc <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008210:	2300      	movs	r3, #0
 8008212:	772b      	strb	r3, [r5, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008214:	f014 0f04 	tst.w	r4, #4
 8008218:	d012      	beq.n	8008240 <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800821a:	f016 0f04 	tst.w	r6, #4
 800821e:	d00f      	beq.n	8008240 <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008220:	682b      	ldr	r3, [r5, #0]
 8008222:	f06f 0204 	mvn.w	r2, #4
 8008226:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008228:	2302      	movs	r3, #2
 800822a:	772b      	strb	r3, [r5, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800822c:	682b      	ldr	r3, [r5, #0]
 800822e:	699b      	ldr	r3, [r3, #24]
 8008230:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8008234:	d06d      	beq.n	8008312 <HAL_TIM_IRQHandler+0x130>
        HAL_TIM_IC_CaptureCallback(htim);
 8008236:	4628      	mov	r0, r5
 8008238:	f7ff ffd0 	bl	80081dc <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800823c:	2300      	movs	r3, #0
 800823e:	772b      	strb	r3, [r5, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008240:	f014 0f08 	tst.w	r4, #8
 8008244:	d012      	beq.n	800826c <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008246:	f016 0f08 	tst.w	r6, #8
 800824a:	d00f      	beq.n	800826c <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800824c:	682b      	ldr	r3, [r5, #0]
 800824e:	f06f 0208 	mvn.w	r2, #8
 8008252:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008254:	2304      	movs	r3, #4
 8008256:	772b      	strb	r3, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008258:	682b      	ldr	r3, [r5, #0]
 800825a:	69db      	ldr	r3, [r3, #28]
 800825c:	f013 0f03 	tst.w	r3, #3
 8008260:	d05e      	beq.n	8008320 <HAL_TIM_IRQHandler+0x13e>
        HAL_TIM_IC_CaptureCallback(htim);
 8008262:	4628      	mov	r0, r5
 8008264:	f7ff ffba 	bl	80081dc <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008268:	2300      	movs	r3, #0
 800826a:	772b      	strb	r3, [r5, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800826c:	f014 0f10 	tst.w	r4, #16
 8008270:	d012      	beq.n	8008298 <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008272:	f016 0f10 	tst.w	r6, #16
 8008276:	d00f      	beq.n	8008298 <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008278:	682b      	ldr	r3, [r5, #0]
 800827a:	f06f 0210 	mvn.w	r2, #16
 800827e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008280:	2308      	movs	r3, #8
 8008282:	772b      	strb	r3, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008284:	682b      	ldr	r3, [r5, #0]
 8008286:	69db      	ldr	r3, [r3, #28]
 8008288:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800828c:	d04f      	beq.n	800832e <HAL_TIM_IRQHandler+0x14c>
        HAL_TIM_IC_CaptureCallback(htim);
 800828e:	4628      	mov	r0, r5
 8008290:	f7ff ffa4 	bl	80081dc <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008294:	2300      	movs	r3, #0
 8008296:	772b      	strb	r3, [r5, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008298:	f014 0f01 	tst.w	r4, #1
 800829c:	d002      	beq.n	80082a4 <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800829e:	f016 0f01 	tst.w	r6, #1
 80082a2:	d14b      	bne.n	800833c <HAL_TIM_IRQHandler+0x15a>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80082a4:	f414 5f02 	tst.w	r4, #8320	@ 0x2080
 80082a8:	d002      	beq.n	80082b0 <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80082aa:	f016 0f80 	tst.w	r6, #128	@ 0x80
 80082ae:	d14d      	bne.n	800834c <HAL_TIM_IRQHandler+0x16a>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80082b0:	f414 7f80 	tst.w	r4, #256	@ 0x100
 80082b4:	d002      	beq.n	80082bc <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80082b6:	f016 0f80 	tst.w	r6, #128	@ 0x80
 80082ba:	d14f      	bne.n	800835c <HAL_TIM_IRQHandler+0x17a>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80082bc:	f014 0f40 	tst.w	r4, #64	@ 0x40
 80082c0:	d002      	beq.n	80082c8 <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80082c2:	f016 0f40 	tst.w	r6, #64	@ 0x40
 80082c6:	d151      	bne.n	800836c <HAL_TIM_IRQHandler+0x18a>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80082c8:	f014 0f20 	tst.w	r4, #32
 80082cc:	d002      	beq.n	80082d4 <HAL_TIM_IRQHandler+0xf2>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80082ce:	f016 0f20 	tst.w	r6, #32
 80082d2:	d153      	bne.n	800837c <HAL_TIM_IRQHandler+0x19a>
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80082d4:	f414 1f80 	tst.w	r4, #1048576	@ 0x100000
 80082d8:	d002      	beq.n	80082e0 <HAL_TIM_IRQHandler+0xfe>
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80082da:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 80082de:	d155      	bne.n	800838c <HAL_TIM_IRQHandler+0x1aa>
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80082e0:	f414 1f00 	tst.w	r4, #2097152	@ 0x200000
 80082e4:	d002      	beq.n	80082ec <HAL_TIM_IRQHandler+0x10a>
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80082e6:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 80082ea:	d157      	bne.n	800839c <HAL_TIM_IRQHandler+0x1ba>
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80082ec:	f414 0f80 	tst.w	r4, #4194304	@ 0x400000
 80082f0:	d002      	beq.n	80082f8 <HAL_TIM_IRQHandler+0x116>
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80082f2:	f416 0f80 	tst.w	r6, #4194304	@ 0x400000
 80082f6:	d159      	bne.n	80083ac <HAL_TIM_IRQHandler+0x1ca>
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80082f8:	f414 0f00 	tst.w	r4, #8388608	@ 0x800000
 80082fc:	d002      	beq.n	8008304 <HAL_TIM_IRQHandler+0x122>
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80082fe:	f416 0f00 	tst.w	r6, #8388608	@ 0x800000
 8008302:	d15b      	bne.n	80083bc <HAL_TIM_IRQHandler+0x1da>
}
 8008304:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008306:	f7ff ff68 	bl	80081da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800830a:	4628      	mov	r0, r5
 800830c:	f7ff ff67 	bl	80081de <HAL_TIM_PWM_PulseFinishedCallback>
 8008310:	e77e      	b.n	8008210 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008312:	4628      	mov	r0, r5
 8008314:	f7ff ff61 	bl	80081da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008318:	4628      	mov	r0, r5
 800831a:	f7ff ff60 	bl	80081de <HAL_TIM_PWM_PulseFinishedCallback>
 800831e:	e78d      	b.n	800823c <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008320:	4628      	mov	r0, r5
 8008322:	f7ff ff5a 	bl	80081da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008326:	4628      	mov	r0, r5
 8008328:	f7ff ff59 	bl	80081de <HAL_TIM_PWM_PulseFinishedCallback>
 800832c:	e79c      	b.n	8008268 <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800832e:	4628      	mov	r0, r5
 8008330:	f7ff ff53 	bl	80081da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008334:	4628      	mov	r0, r5
 8008336:	f7ff ff52 	bl	80081de <HAL_TIM_PWM_PulseFinishedCallback>
 800833a:	e7ab      	b.n	8008294 <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800833c:	682b      	ldr	r3, [r5, #0]
 800833e:	f06f 0201 	mvn.w	r2, #1
 8008342:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8008344:	4628      	mov	r0, r5
 8008346:	f7f9 fd6f 	bl	8001e28 <HAL_TIM_PeriodElapsedCallback>
 800834a:	e7ab      	b.n	80082a4 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800834c:	682b      	ldr	r3, [r5, #0]
 800834e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008352:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8008354:	4628      	mov	r0, r5
 8008356:	f000 fc24 	bl	8008ba2 <HAL_TIMEx_BreakCallback>
 800835a:	e7a9      	b.n	80082b0 <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800835c:	682b      	ldr	r3, [r5, #0]
 800835e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008362:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8008364:	4628      	mov	r0, r5
 8008366:	f000 fc1d 	bl	8008ba4 <HAL_TIMEx_Break2Callback>
 800836a:	e7a7      	b.n	80082bc <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800836c:	682b      	ldr	r3, [r5, #0]
 800836e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008372:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8008374:	4628      	mov	r0, r5
 8008376:	f7ff ff33 	bl	80081e0 <HAL_TIM_TriggerCallback>
 800837a:	e7a5      	b.n	80082c8 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800837c:	682b      	ldr	r3, [r5, #0]
 800837e:	f06f 0220 	mvn.w	r2, #32
 8008382:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8008384:	4628      	mov	r0, r5
 8008386:	f000 fc0b 	bl	8008ba0 <HAL_TIMEx_CommutCallback>
 800838a:	e7a3      	b.n	80082d4 <HAL_TIM_IRQHandler+0xf2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800838c:	682b      	ldr	r3, [r5, #0]
 800838e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8008392:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008394:	4628      	mov	r0, r5
 8008396:	f000 fc06 	bl	8008ba6 <HAL_TIMEx_EncoderIndexCallback>
 800839a:	e7a1      	b.n	80082e0 <HAL_TIM_IRQHandler+0xfe>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800839c:	682b      	ldr	r3, [r5, #0]
 800839e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80083a2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_DirectionChangeCallback(htim);
 80083a4:	4628      	mov	r0, r5
 80083a6:	f000 fbff 	bl	8008ba8 <HAL_TIMEx_DirectionChangeCallback>
 80083aa:	e79f      	b.n	80082ec <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80083ac:	682b      	ldr	r3, [r5, #0]
 80083ae:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80083b2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_IndexErrorCallback(htim);
 80083b4:	4628      	mov	r0, r5
 80083b6:	f000 fbf8 	bl	8008baa <HAL_TIMEx_IndexErrorCallback>
 80083ba:	e79d      	b.n	80082f8 <HAL_TIM_IRQHandler+0x116>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80083bc:	682b      	ldr	r3, [r5, #0]
 80083be:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80083c2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_TransitionErrorCallback(htim);
 80083c4:	4628      	mov	r0, r5
 80083c6:	f000 fbf1 	bl	8008bac <HAL_TIMEx_TransitionErrorCallback>
}
 80083ca:	e79b      	b.n	8008304 <HAL_TIM_IRQHandler+0x122>

080083cc <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 80083cc:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80083ce:	4a3a      	ldr	r2, [pc, #232]	@ (80084b8 <TIM_Base_SetConfig+0xec>)
 80083d0:	4290      	cmp	r0, r2
 80083d2:	d016      	beq.n	8008402 <TIM_Base_SetConfig+0x36>
 80083d4:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80083d8:	d013      	beq.n	8008402 <TIM_Base_SetConfig+0x36>
 80083da:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80083de:	4290      	cmp	r0, r2
 80083e0:	d00f      	beq.n	8008402 <TIM_Base_SetConfig+0x36>
 80083e2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80083e6:	4290      	cmp	r0, r2
 80083e8:	d00b      	beq.n	8008402 <TIM_Base_SetConfig+0x36>
 80083ea:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80083ee:	4290      	cmp	r0, r2
 80083f0:	d007      	beq.n	8008402 <TIM_Base_SetConfig+0x36>
 80083f2:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 80083f6:	4290      	cmp	r0, r2
 80083f8:	d003      	beq.n	8008402 <TIM_Base_SetConfig+0x36>
 80083fa:	f502 52e0 	add.w	r2, r2, #7168	@ 0x1c00
 80083fe:	4290      	cmp	r0, r2
 8008400:	d103      	bne.n	800840a <TIM_Base_SetConfig+0x3e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008402:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8008406:	684a      	ldr	r2, [r1, #4]
 8008408:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800840a:	4a2b      	ldr	r2, [pc, #172]	@ (80084b8 <TIM_Base_SetConfig+0xec>)
 800840c:	4290      	cmp	r0, r2
 800840e:	d022      	beq.n	8008456 <TIM_Base_SetConfig+0x8a>
 8008410:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8008414:	d01f      	beq.n	8008456 <TIM_Base_SetConfig+0x8a>
 8008416:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 800841a:	4290      	cmp	r0, r2
 800841c:	d01b      	beq.n	8008456 <TIM_Base_SetConfig+0x8a>
 800841e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008422:	4290      	cmp	r0, r2
 8008424:	d017      	beq.n	8008456 <TIM_Base_SetConfig+0x8a>
 8008426:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800842a:	4290      	cmp	r0, r2
 800842c:	d013      	beq.n	8008456 <TIM_Base_SetConfig+0x8a>
 800842e:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 8008432:	4290      	cmp	r0, r2
 8008434:	d00f      	beq.n	8008456 <TIM_Base_SetConfig+0x8a>
 8008436:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 800843a:	4290      	cmp	r0, r2
 800843c:	d00b      	beq.n	8008456 <TIM_Base_SetConfig+0x8a>
 800843e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008442:	4290      	cmp	r0, r2
 8008444:	d007      	beq.n	8008456 <TIM_Base_SetConfig+0x8a>
 8008446:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800844a:	4290      	cmp	r0, r2
 800844c:	d003      	beq.n	8008456 <TIM_Base_SetConfig+0x8a>
 800844e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008452:	4290      	cmp	r0, r2
 8008454:	d103      	bne.n	800845e <TIM_Base_SetConfig+0x92>
    tmpcr1 &= ~TIM_CR1_CKD;
 8008456:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800845a:	68ca      	ldr	r2, [r1, #12]
 800845c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800845e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008462:	694a      	ldr	r2, [r1, #20]
 8008464:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8008466:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008468:	688b      	ldr	r3, [r1, #8]
 800846a:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800846c:	680b      	ldr	r3, [r1, #0]
 800846e:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008470:	4b11      	ldr	r3, [pc, #68]	@ (80084b8 <TIM_Base_SetConfig+0xec>)
 8008472:	4298      	cmp	r0, r3
 8008474:	d013      	beq.n	800849e <TIM_Base_SetConfig+0xd2>
 8008476:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800847a:	4298      	cmp	r0, r3
 800847c:	d00f      	beq.n	800849e <TIM_Base_SetConfig+0xd2>
 800847e:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 8008482:	4298      	cmp	r0, r3
 8008484:	d00b      	beq.n	800849e <TIM_Base_SetConfig+0xd2>
 8008486:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800848a:	4298      	cmp	r0, r3
 800848c:	d007      	beq.n	800849e <TIM_Base_SetConfig+0xd2>
 800848e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008492:	4298      	cmp	r0, r3
 8008494:	d003      	beq.n	800849e <TIM_Base_SetConfig+0xd2>
 8008496:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800849a:	4298      	cmp	r0, r3
 800849c:	d101      	bne.n	80084a2 <TIM_Base_SetConfig+0xd6>
    TIMx->RCR = Structure->RepetitionCounter;
 800849e:	690b      	ldr	r3, [r1, #16]
 80084a0:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 80084a2:	2301      	movs	r3, #1
 80084a4:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80084a6:	6903      	ldr	r3, [r0, #16]
 80084a8:	f013 0f01 	tst.w	r3, #1
 80084ac:	d003      	beq.n	80084b6 <TIM_Base_SetConfig+0xea>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80084ae:	6903      	ldr	r3, [r0, #16]
 80084b0:	f023 0301 	bic.w	r3, r3, #1
 80084b4:	6103      	str	r3, [r0, #16]
}
 80084b6:	4770      	bx	lr
 80084b8:	40012c00 	.word	0x40012c00

080084bc <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80084bc:	b360      	cbz	r0, 8008518 <HAL_TIM_Base_Init+0x5c>
{
 80084be:	b510      	push	{r4, lr}
 80084c0:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80084c2:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80084c6:	b313      	cbz	r3, 800850e <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 80084c8:	2302      	movs	r3, #2
 80084ca:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80084ce:	4621      	mov	r1, r4
 80084d0:	f851 0b04 	ldr.w	r0, [r1], #4
 80084d4:	f7ff ff7a 	bl	80083cc <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80084d8:	2301      	movs	r3, #1
 80084da:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084de:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80084e2:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80084e6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80084ea:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 80084ee:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80084f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084f6:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80084fa:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80084fe:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8008502:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8008506:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 800850a:	2000      	movs	r0, #0
}
 800850c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800850e:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8008512:	f7fc f8c5 	bl	80046a0 <HAL_TIM_Base_MspInit>
 8008516:	e7d7      	b.n	80084c8 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8008518:	2001      	movs	r0, #1
}
 800851a:	4770      	bx	lr

0800851c <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 800851c:	b360      	cbz	r0, 8008578 <HAL_TIM_PWM_Init+0x5c>
{
 800851e:	b510      	push	{r4, lr}
 8008520:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8008522:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8008526:	b313      	cbz	r3, 800856e <HAL_TIM_PWM_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8008528:	2302      	movs	r3, #2
 800852a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800852e:	4621      	mov	r1, r4
 8008530:	f851 0b04 	ldr.w	r0, [r1], #4
 8008534:	f7ff ff4a 	bl	80083cc <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008538:	2301      	movs	r3, #1
 800853a:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800853e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8008542:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8008546:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800854a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800854e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008552:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008556:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800855a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800855e:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8008562:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8008566:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 800856a:	2000      	movs	r0, #0
}
 800856c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800856e:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8008572:	f7ff fe31 	bl	80081d8 <HAL_TIM_PWM_MspInit>
 8008576:	e7d7      	b.n	8008528 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8008578:	2001      	movs	r0, #1
}
 800857a:	4770      	bx	lr

0800857c <TIM_OC2_SetConfig>:
{
 800857c:	b430      	push	{r4, r5}
  tmpccer = TIMx->CCER;
 800857e:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008580:	6a02      	ldr	r2, [r0, #32]
 8008582:	f022 0210 	bic.w	r2, r2, #16
 8008586:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8008588:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800858a:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800858c:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8008590:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008594:	680d      	ldr	r5, [r1, #0]
 8008596:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 800859a:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800859e:	688d      	ldr	r5, [r1, #8]
 80085a0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80085a4:	4d1b      	ldr	r5, [pc, #108]	@ (8008614 <TIM_OC2_SetConfig+0x98>)
 80085a6:	42a8      	cmp	r0, r5
 80085a8:	d007      	beq.n	80085ba <TIM_OC2_SetConfig+0x3e>
 80085aa:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 80085ae:	42a8      	cmp	r0, r5
 80085b0:	d003      	beq.n	80085ba <TIM_OC2_SetConfig+0x3e>
 80085b2:	f505 55e0 	add.w	r5, r5, #7168	@ 0x1c00
 80085b6:	42a8      	cmp	r0, r5
 80085b8:	d106      	bne.n	80085c8 <TIM_OC2_SetConfig+0x4c>
    tmpccer &= ~TIM_CCER_CC2NP;
 80085ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80085be:	68cd      	ldr	r5, [r1, #12]
 80085c0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80085c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085c8:	4d12      	ldr	r5, [pc, #72]	@ (8008614 <TIM_OC2_SetConfig+0x98>)
 80085ca:	42a8      	cmp	r0, r5
 80085cc:	d013      	beq.n	80085f6 <TIM_OC2_SetConfig+0x7a>
 80085ce:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 80085d2:	42a8      	cmp	r0, r5
 80085d4:	d00f      	beq.n	80085f6 <TIM_OC2_SetConfig+0x7a>
 80085d6:	f505 6540 	add.w	r5, r5, #3072	@ 0xc00
 80085da:	42a8      	cmp	r0, r5
 80085dc:	d00b      	beq.n	80085f6 <TIM_OC2_SetConfig+0x7a>
 80085de:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80085e2:	42a8      	cmp	r0, r5
 80085e4:	d007      	beq.n	80085f6 <TIM_OC2_SetConfig+0x7a>
 80085e6:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80085ea:	42a8      	cmp	r0, r5
 80085ec:	d003      	beq.n	80085f6 <TIM_OC2_SetConfig+0x7a>
 80085ee:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 80085f2:	42a8      	cmp	r0, r5
 80085f4:	d107      	bne.n	8008606 <TIM_OC2_SetConfig+0x8a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80085f6:	f424 6c40 	bic.w	ip, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80085fa:	694c      	ldr	r4, [r1, #20]
 80085fc:	ea4c 0c84 	orr.w	ip, ip, r4, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008600:	698c      	ldr	r4, [r1, #24]
 8008602:	ea4c 0484 	orr.w	r4, ip, r4, lsl #2
  TIMx->CR2 = tmpcr2;
 8008606:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8008608:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800860a:	684a      	ldr	r2, [r1, #4]
 800860c:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 800860e:	6203      	str	r3, [r0, #32]
}
 8008610:	bc30      	pop	{r4, r5}
 8008612:	4770      	bx	lr
 8008614:	40012c00 	.word	0x40012c00

08008618 <HAL_TIM_PWM_ConfigChannel>:
{
 8008618:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800861a:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800861e:	2b01      	cmp	r3, #1
 8008620:	f000 8095 	beq.w	800874e <HAL_TIM_PWM_ConfigChannel+0x136>
 8008624:	4604      	mov	r4, r0
 8008626:	460d      	mov	r5, r1
 8008628:	2301      	movs	r3, #1
 800862a:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 800862e:	2a14      	cmp	r2, #20
 8008630:	f200 8088 	bhi.w	8008744 <HAL_TIM_PWM_ConfigChannel+0x12c>
 8008634:	e8df f002 	tbb	[pc, r2]
 8008638:	8686860b 	.word	0x8686860b
 800863c:	8686861f 	.word	0x8686861f
 8008640:	86868634 	.word	0x86868634
 8008644:	86868648 	.word	0x86868648
 8008648:	8686865d 	.word	0x8686865d
 800864c:	71          	.byte	0x71
 800864d:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800864e:	6800      	ldr	r0, [r0, #0]
 8008650:	f7ff fb9c 	bl	8007d8c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008654:	6822      	ldr	r2, [r4, #0]
 8008656:	6993      	ldr	r3, [r2, #24]
 8008658:	f043 0308 	orr.w	r3, r3, #8
 800865c:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800865e:	6822      	ldr	r2, [r4, #0]
 8008660:	6993      	ldr	r3, [r2, #24]
 8008662:	f023 0304 	bic.w	r3, r3, #4
 8008666:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008668:	6822      	ldr	r2, [r4, #0]
 800866a:	6993      	ldr	r3, [r2, #24]
 800866c:	6929      	ldr	r1, [r5, #16]
 800866e:	430b      	orrs	r3, r1
 8008670:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8008672:	2000      	movs	r0, #0
      break;
 8008674:	e067      	b.n	8008746 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008676:	6800      	ldr	r0, [r0, #0]
 8008678:	f7ff ff80 	bl	800857c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800867c:	6822      	ldr	r2, [r4, #0]
 800867e:	6993      	ldr	r3, [r2, #24]
 8008680:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8008684:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008686:	6822      	ldr	r2, [r4, #0]
 8008688:	6993      	ldr	r3, [r2, #24]
 800868a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800868e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008690:	6822      	ldr	r2, [r4, #0]
 8008692:	6993      	ldr	r3, [r2, #24]
 8008694:	6929      	ldr	r1, [r5, #16]
 8008696:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800869a:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800869c:	2000      	movs	r0, #0
      break;
 800869e:	e052      	b.n	8008746 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80086a0:	6800      	ldr	r0, [r0, #0]
 80086a2:	f7ff fbc9 	bl	8007e38 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80086a6:	6822      	ldr	r2, [r4, #0]
 80086a8:	69d3      	ldr	r3, [r2, #28]
 80086aa:	f043 0308 	orr.w	r3, r3, #8
 80086ae:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80086b0:	6822      	ldr	r2, [r4, #0]
 80086b2:	69d3      	ldr	r3, [r2, #28]
 80086b4:	f023 0304 	bic.w	r3, r3, #4
 80086b8:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80086ba:	6822      	ldr	r2, [r4, #0]
 80086bc:	69d3      	ldr	r3, [r2, #28]
 80086be:	6929      	ldr	r1, [r5, #16]
 80086c0:	430b      	orrs	r3, r1
 80086c2:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80086c4:	2000      	movs	r0, #0
      break;
 80086c6:	e03e      	b.n	8008746 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80086c8:	6800      	ldr	r0, [r0, #0]
 80086ca:	f7ff fc03 	bl	8007ed4 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80086ce:	6822      	ldr	r2, [r4, #0]
 80086d0:	69d3      	ldr	r3, [r2, #28]
 80086d2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80086d6:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80086d8:	6822      	ldr	r2, [r4, #0]
 80086da:	69d3      	ldr	r3, [r2, #28]
 80086dc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80086e0:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80086e2:	6822      	ldr	r2, [r4, #0]
 80086e4:	69d3      	ldr	r3, [r2, #28]
 80086e6:	6929      	ldr	r1, [r5, #16]
 80086e8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80086ec:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80086ee:	2000      	movs	r0, #0
      break;
 80086f0:	e029      	b.n	8008746 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80086f2:	6800      	ldr	r0, [r0, #0]
 80086f4:	f7ff fc3c 	bl	8007f70 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80086f8:	6822      	ldr	r2, [r4, #0]
 80086fa:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 80086fc:	f043 0308 	orr.w	r3, r3, #8
 8008700:	6513      	str	r3, [r2, #80]	@ 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008702:	6822      	ldr	r2, [r4, #0]
 8008704:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8008706:	f023 0304 	bic.w	r3, r3, #4
 800870a:	6513      	str	r3, [r2, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800870c:	6822      	ldr	r2, [r4, #0]
 800870e:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8008710:	6929      	ldr	r1, [r5, #16]
 8008712:	430b      	orrs	r3, r1
 8008714:	6513      	str	r3, [r2, #80]	@ 0x50
  HAL_StatusTypeDef status = HAL_OK;
 8008716:	2000      	movs	r0, #0
      break;
 8008718:	e015      	b.n	8008746 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800871a:	6800      	ldr	r0, [r0, #0]
 800871c:	f7ff fc60 	bl	8007fe0 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008720:	6822      	ldr	r2, [r4, #0]
 8008722:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8008724:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8008728:	6513      	str	r3, [r2, #80]	@ 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800872a:	6822      	ldr	r2, [r4, #0]
 800872c:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800872e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008732:	6513      	str	r3, [r2, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008734:	6822      	ldr	r2, [r4, #0]
 8008736:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8008738:	6929      	ldr	r1, [r5, #16]
 800873a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800873e:	6513      	str	r3, [r2, #80]	@ 0x50
  HAL_StatusTypeDef status = HAL_OK;
 8008740:	2000      	movs	r0, #0
      break;
 8008742:	e000      	b.n	8008746 <HAL_TIM_PWM_ConfigChannel+0x12e>
  switch (Channel)
 8008744:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8008746:	2300      	movs	r3, #0
 8008748:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 800874c:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 800874e:	2002      	movs	r0, #2
 8008750:	e7fc      	b.n	800874c <HAL_TIM_PWM_ConfigChannel+0x134>

08008752 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008752:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008754:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008756:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800875a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800875e:	430a      	orrs	r2, r1
 8008760:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008764:	6082      	str	r2, [r0, #8]
}
 8008766:	f85d 4b04 	ldr.w	r4, [sp], #4
 800876a:	4770      	bx	lr

0800876c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800876c:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8008770:	2b01      	cmp	r3, #1
 8008772:	f000 8095 	beq.w	80088a0 <HAL_TIM_ConfigClockSource+0x134>
{
 8008776:	b510      	push	{r4, lr}
 8008778:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800877a:	2301      	movs	r3, #1
 800877c:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8008780:	2302      	movs	r3, #2
 8008782:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8008786:	6802      	ldr	r2, [r0, #0]
 8008788:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800878a:	4b46      	ldr	r3, [pc, #280]	@ (80088a4 <HAL_TIM_ConfigClockSource+0x138>)
 800878c:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 800878e:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8008790:	680b      	ldr	r3, [r1, #0]
 8008792:	2b70      	cmp	r3, #112	@ 0x70
 8008794:	d05b      	beq.n	800884e <HAL_TIM_ConfigClockSource+0xe2>
 8008796:	d831      	bhi.n	80087fc <HAL_TIM_ConfigClockSource+0x90>
 8008798:	2b50      	cmp	r3, #80	@ 0x50
 800879a:	d072      	beq.n	8008882 <HAL_TIM_ConfigClockSource+0x116>
 800879c:	d90c      	bls.n	80087b8 <HAL_TIM_ConfigClockSource+0x4c>
 800879e:	2b60      	cmp	r3, #96	@ 0x60
 80087a0:	d12a      	bne.n	80087f8 <HAL_TIM_ConfigClockSource+0x8c>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80087a2:	68ca      	ldr	r2, [r1, #12]
 80087a4:	6849      	ldr	r1, [r1, #4]
 80087a6:	6820      	ldr	r0, [r4, #0]
 80087a8:	f7ff fc67 	bl	800807a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80087ac:	2160      	movs	r1, #96	@ 0x60
 80087ae:	6820      	ldr	r0, [r4, #0]
 80087b0:	f7ff fc77 	bl	80080a2 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80087b4:	2000      	movs	r0, #0
      break;
 80087b6:	e038      	b.n	800882a <HAL_TIM_ConfigClockSource+0xbe>
  switch (sClockSourceConfig->ClockSource)
 80087b8:	2b40      	cmp	r3, #64	@ 0x40
 80087ba:	d10a      	bne.n	80087d2 <HAL_TIM_ConfigClockSource+0x66>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80087bc:	68ca      	ldr	r2, [r1, #12]
 80087be:	6849      	ldr	r1, [r1, #4]
 80087c0:	6820      	ldr	r0, [r4, #0]
 80087c2:	f7ff fc47 	bl	8008054 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80087c6:	2140      	movs	r1, #64	@ 0x40
 80087c8:	6820      	ldr	r0, [r4, #0]
 80087ca:	f7ff fc6a 	bl	80080a2 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80087ce:	2000      	movs	r0, #0
      break;
 80087d0:	e02b      	b.n	800882a <HAL_TIM_ConfigClockSource+0xbe>
  switch (sClockSourceConfig->ClockSource)
 80087d2:	d861      	bhi.n	8008898 <HAL_TIM_ConfigClockSource+0x12c>
 80087d4:	2b20      	cmp	r3, #32
 80087d6:	d007      	beq.n	80087e8 <HAL_TIM_ConfigClockSource+0x7c>
 80087d8:	d903      	bls.n	80087e2 <HAL_TIM_ConfigClockSource+0x76>
 80087da:	2b30      	cmp	r3, #48	@ 0x30
 80087dc:	d004      	beq.n	80087e8 <HAL_TIM_ConfigClockSource+0x7c>
      status = HAL_ERROR;
 80087de:	2001      	movs	r0, #1
 80087e0:	e023      	b.n	800882a <HAL_TIM_ConfigClockSource+0xbe>
  switch (sClockSourceConfig->ClockSource)
 80087e2:	b10b      	cbz	r3, 80087e8 <HAL_TIM_ConfigClockSource+0x7c>
 80087e4:	2b10      	cmp	r3, #16
 80087e6:	d105      	bne.n	80087f4 <HAL_TIM_ConfigClockSource+0x88>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80087e8:	4619      	mov	r1, r3
 80087ea:	6820      	ldr	r0, [r4, #0]
 80087ec:	f7ff fc59 	bl	80080a2 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80087f0:	2000      	movs	r0, #0
      break;
 80087f2:	e01a      	b.n	800882a <HAL_TIM_ConfigClockSource+0xbe>
      status = HAL_ERROR;
 80087f4:	2001      	movs	r0, #1
 80087f6:	e018      	b.n	800882a <HAL_TIM_ConfigClockSource+0xbe>
 80087f8:	2001      	movs	r0, #1
 80087fa:	e016      	b.n	800882a <HAL_TIM_ConfigClockSource+0xbe>
  switch (sClockSourceConfig->ClockSource)
 80087fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008800:	d032      	beq.n	8008868 <HAL_TIM_ConfigClockSource+0xfc>
 8008802:	d90e      	bls.n	8008822 <HAL_TIM_ConfigClockSource+0xb6>
 8008804:	4a28      	ldr	r2, [pc, #160]	@ (80088a8 <HAL_TIM_ConfigClockSource+0x13c>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d0ee      	beq.n	80087e8 <HAL_TIM_ConfigClockSource+0x7c>
 800880a:	d915      	bls.n	8008838 <HAL_TIM_ConfigClockSource+0xcc>
 800880c:	4a27      	ldr	r2, [pc, #156]	@ (80088ac <HAL_TIM_ConfigClockSource+0x140>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d0ea      	beq.n	80087e8 <HAL_TIM_ConfigClockSource+0x7c>
 8008812:	3220      	adds	r2, #32
 8008814:	4293      	cmp	r3, r2
 8008816:	d0e7      	beq.n	80087e8 <HAL_TIM_ConfigClockSource+0x7c>
 8008818:	3a30      	subs	r2, #48	@ 0x30
 800881a:	4293      	cmp	r3, r2
 800881c:	d0e4      	beq.n	80087e8 <HAL_TIM_ConfigClockSource+0x7c>
      status = HAL_ERROR;
 800881e:	2001      	movs	r0, #1
 8008820:	e003      	b.n	800882a <HAL_TIM_ConfigClockSource+0xbe>
  switch (sClockSourceConfig->ClockSource)
 8008822:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008826:	d139      	bne.n	800889c <HAL_TIM_ConfigClockSource+0x130>
 8008828:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800882a:	2301      	movs	r3, #1
 800882c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8008830:	2300      	movs	r3, #0
 8008832:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8008836:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 8008838:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800883c:	d0d4      	beq.n	80087e8 <HAL_TIM_ConfigClockSource+0x7c>
 800883e:	3a10      	subs	r2, #16
 8008840:	4293      	cmp	r3, r2
 8008842:	d0d1      	beq.n	80087e8 <HAL_TIM_ConfigClockSource+0x7c>
 8008844:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008848:	d0ce      	beq.n	80087e8 <HAL_TIM_ConfigClockSource+0x7c>
      status = HAL_ERROR;
 800884a:	2001      	movs	r0, #1
 800884c:	e7ed      	b.n	800882a <HAL_TIM_ConfigClockSource+0xbe>
      TIM_ETR_SetConfig(htim->Instance,
 800884e:	68cb      	ldr	r3, [r1, #12]
 8008850:	684a      	ldr	r2, [r1, #4]
 8008852:	6889      	ldr	r1, [r1, #8]
 8008854:	6820      	ldr	r0, [r4, #0]
 8008856:	f7ff ff7c 	bl	8008752 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800885a:	6822      	ldr	r2, [r4, #0]
 800885c:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800885e:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8008862:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8008864:	2000      	movs	r0, #0
      break;
 8008866:	e7e0      	b.n	800882a <HAL_TIM_ConfigClockSource+0xbe>
      TIM_ETR_SetConfig(htim->Instance,
 8008868:	68cb      	ldr	r3, [r1, #12]
 800886a:	684a      	ldr	r2, [r1, #4]
 800886c:	6889      	ldr	r1, [r1, #8]
 800886e:	6820      	ldr	r0, [r4, #0]
 8008870:	f7ff ff6f 	bl	8008752 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008874:	6822      	ldr	r2, [r4, #0]
 8008876:	6893      	ldr	r3, [r2, #8]
 8008878:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800887c:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800887e:	2000      	movs	r0, #0
      break;
 8008880:	e7d3      	b.n	800882a <HAL_TIM_ConfigClockSource+0xbe>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008882:	68ca      	ldr	r2, [r1, #12]
 8008884:	6849      	ldr	r1, [r1, #4]
 8008886:	6820      	ldr	r0, [r4, #0]
 8008888:	f7ff fbe4 	bl	8008054 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800888c:	2150      	movs	r1, #80	@ 0x50
 800888e:	6820      	ldr	r0, [r4, #0]
 8008890:	f7ff fc07 	bl	80080a2 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8008894:	2000      	movs	r0, #0
      break;
 8008896:	e7c8      	b.n	800882a <HAL_TIM_ConfigClockSource+0xbe>
      status = HAL_ERROR;
 8008898:	2001      	movs	r0, #1
 800889a:	e7c6      	b.n	800882a <HAL_TIM_ConfigClockSource+0xbe>
 800889c:	2001      	movs	r0, #1
 800889e:	e7c4      	b.n	800882a <HAL_TIM_ConfigClockSource+0xbe>
  __HAL_LOCK(htim);
 80088a0:	2002      	movs	r0, #2
}
 80088a2:	4770      	bx	lr
 80088a4:	ffce0088 	.word	0xffce0088
 80088a8:	00100030 	.word	0x00100030
 80088ac:	00100050 	.word	0x00100050

080088b0 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80088b0:	f001 011f 	and.w	r1, r1, #31
 80088b4:	f04f 0c01 	mov.w	ip, #1
 80088b8:	fa0c fc01 	lsl.w	ip, ip, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80088bc:	6a03      	ldr	r3, [r0, #32]
 80088be:	ea23 030c 	bic.w	r3, r3, ip
 80088c2:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80088c4:	6a03      	ldr	r3, [r0, #32]
 80088c6:	408a      	lsls	r2, r1
 80088c8:	4313      	orrs	r3, r2
 80088ca:	6203      	str	r3, [r0, #32]
}
 80088cc:	4770      	bx	lr
	...

080088d0 <HAL_TIM_PWM_Start>:
{
 80088d0:	b510      	push	{r4, lr}
 80088d2:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80088d4:	2910      	cmp	r1, #16
 80088d6:	d83d      	bhi.n	8008954 <HAL_TIM_PWM_Start+0x84>
 80088d8:	e8df f001 	tbb	[pc, r1]
 80088dc:	3c3c3c09 	.word	0x3c3c3c09
 80088e0:	3c3c3c20 	.word	0x3c3c3c20
 80088e4:	3c3c3c27 	.word	0x3c3c3c27
 80088e8:	3c3c3c2e 	.word	0x3c3c3c2e
 80088ec:	35          	.byte	0x35
 80088ed:	00          	.byte	0x00
 80088ee:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 80088f2:	b2db      	uxtb	r3, r3
 80088f4:	3b01      	subs	r3, #1
 80088f6:	bf18      	it	ne
 80088f8:	2301      	movne	r3, #1
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	f040 809b 	bne.w	8008a36 <HAL_TIM_PWM_Start+0x166>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008900:	2910      	cmp	r1, #16
 8008902:	f200 8086 	bhi.w	8008a12 <HAL_TIM_PWM_Start+0x142>
 8008906:	e8df f001 	tbb	[pc, r1]
 800890a:	842c      	.short	0x842c
 800890c:	84748484 	.word	0x84748484
 8008910:	84788484 	.word	0x84788484
 8008914:	847c8484 	.word	0x847c8484
 8008918:	8484      	.short	0x8484
 800891a:	80          	.byte	0x80
 800891b:	00          	.byte	0x00
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800891c:	f890 303f 	ldrb.w	r3, [r0, #63]	@ 0x3f
 8008920:	b2db      	uxtb	r3, r3
 8008922:	3b01      	subs	r3, #1
 8008924:	bf18      	it	ne
 8008926:	2301      	movne	r3, #1
 8008928:	e7e7      	b.n	80088fa <HAL_TIM_PWM_Start+0x2a>
 800892a:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800892e:	b2db      	uxtb	r3, r3
 8008930:	3b01      	subs	r3, #1
 8008932:	bf18      	it	ne
 8008934:	2301      	movne	r3, #1
 8008936:	e7e0      	b.n	80088fa <HAL_TIM_PWM_Start+0x2a>
 8008938:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800893c:	b2db      	uxtb	r3, r3
 800893e:	3b01      	subs	r3, #1
 8008940:	bf18      	it	ne
 8008942:	2301      	movne	r3, #1
 8008944:	e7d9      	b.n	80088fa <HAL_TIM_PWM_Start+0x2a>
 8008946:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800894a:	b2db      	uxtb	r3, r3
 800894c:	3b01      	subs	r3, #1
 800894e:	bf18      	it	ne
 8008950:	2301      	movne	r3, #1
 8008952:	e7d2      	b.n	80088fa <HAL_TIM_PWM_Start+0x2a>
 8008954:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 8008958:	b2db      	uxtb	r3, r3
 800895a:	3b01      	subs	r3, #1
 800895c:	bf18      	it	ne
 800895e:	2301      	movne	r3, #1
 8008960:	e7cb      	b.n	80088fa <HAL_TIM_PWM_Start+0x2a>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008962:	2302      	movs	r3, #2
 8008964:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008968:	2201      	movs	r2, #1
 800896a:	6820      	ldr	r0, [r4, #0]
 800896c:	f7ff ffa0 	bl	80088b0 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008970:	6823      	ldr	r3, [r4, #0]
 8008972:	4a34      	ldr	r2, [pc, #208]	@ (8008a44 <HAL_TIM_PWM_Start+0x174>)
 8008974:	4293      	cmp	r3, r2
 8008976:	d013      	beq.n	80089a0 <HAL_TIM_PWM_Start+0xd0>
 8008978:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800897c:	4293      	cmp	r3, r2
 800897e:	d00f      	beq.n	80089a0 <HAL_TIM_PWM_Start+0xd0>
 8008980:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8008984:	4293      	cmp	r3, r2
 8008986:	d00b      	beq.n	80089a0 <HAL_TIM_PWM_Start+0xd0>
 8008988:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800898c:	4293      	cmp	r3, r2
 800898e:	d007      	beq.n	80089a0 <HAL_TIM_PWM_Start+0xd0>
 8008990:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008994:	4293      	cmp	r3, r2
 8008996:	d003      	beq.n	80089a0 <HAL_TIM_PWM_Start+0xd0>
 8008998:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800899c:	4293      	cmp	r3, r2
 800899e:	d103      	bne.n	80089a8 <HAL_TIM_PWM_Start+0xd8>
    __HAL_TIM_MOE_ENABLE(htim);
 80089a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80089a2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80089a6:	645a      	str	r2, [r3, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80089a8:	6823      	ldr	r3, [r4, #0]
 80089aa:	4a26      	ldr	r2, [pc, #152]	@ (8008a44 <HAL_TIM_PWM_Start+0x174>)
 80089ac:	4293      	cmp	r3, r2
 80089ae:	d034      	beq.n	8008a1a <HAL_TIM_PWM_Start+0x14a>
 80089b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80089b4:	d031      	beq.n	8008a1a <HAL_TIM_PWM_Start+0x14a>
 80089b6:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80089ba:	4293      	cmp	r3, r2
 80089bc:	d02d      	beq.n	8008a1a <HAL_TIM_PWM_Start+0x14a>
 80089be:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80089c2:	4293      	cmp	r3, r2
 80089c4:	d029      	beq.n	8008a1a <HAL_TIM_PWM_Start+0x14a>
 80089c6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80089ca:	4293      	cmp	r3, r2
 80089cc:	d025      	beq.n	8008a1a <HAL_TIM_PWM_Start+0x14a>
 80089ce:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d021      	beq.n	8008a1a <HAL_TIM_PWM_Start+0x14a>
 80089d6:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 80089da:	4293      	cmp	r3, r2
 80089dc:	d01d      	beq.n	8008a1a <HAL_TIM_PWM_Start+0x14a>
 80089de:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d019      	beq.n	8008a1a <HAL_TIM_PWM_Start+0x14a>
    __HAL_TIM_ENABLE(htim);
 80089e6:	681a      	ldr	r2, [r3, #0]
 80089e8:	f042 0201 	orr.w	r2, r2, #1
 80089ec:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80089ee:	2000      	movs	r0, #0
 80089f0:	e022      	b.n	8008a38 <HAL_TIM_PWM_Start+0x168>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80089f2:	2302      	movs	r3, #2
 80089f4:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80089f8:	e7b6      	b.n	8008968 <HAL_TIM_PWM_Start+0x98>
 80089fa:	2302      	movs	r3, #2
 80089fc:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8008a00:	e7b2      	b.n	8008968 <HAL_TIM_PWM_Start+0x98>
 8008a02:	2302      	movs	r3, #2
 8008a04:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8008a08:	e7ae      	b.n	8008968 <HAL_TIM_PWM_Start+0x98>
 8008a0a:	2302      	movs	r3, #2
 8008a0c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008a10:	e7aa      	b.n	8008968 <HAL_TIM_PWM_Start+0x98>
 8008a12:	2302      	movs	r3, #2
 8008a14:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a18:	e7a6      	b.n	8008968 <HAL_TIM_PWM_Start+0x98>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a1a:	6899      	ldr	r1, [r3, #8]
 8008a1c:	4a0a      	ldr	r2, [pc, #40]	@ (8008a48 <HAL_TIM_PWM_Start+0x178>)
 8008a1e:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a20:	2a06      	cmp	r2, #6
 8008a22:	d00a      	beq.n	8008a3a <HAL_TIM_PWM_Start+0x16a>
 8008a24:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8008a28:	d009      	beq.n	8008a3e <HAL_TIM_PWM_Start+0x16e>
      __HAL_TIM_ENABLE(htim);
 8008a2a:	681a      	ldr	r2, [r3, #0]
 8008a2c:	f042 0201 	orr.w	r2, r2, #1
 8008a30:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8008a32:	2000      	movs	r0, #0
 8008a34:	e000      	b.n	8008a38 <HAL_TIM_PWM_Start+0x168>
    return HAL_ERROR;
 8008a36:	2001      	movs	r0, #1
}
 8008a38:	bd10      	pop	{r4, pc}
  return HAL_OK;
 8008a3a:	2000      	movs	r0, #0
 8008a3c:	e7fc      	b.n	8008a38 <HAL_TIM_PWM_Start+0x168>
 8008a3e:	2000      	movs	r0, #0
 8008a40:	e7fa      	b.n	8008a38 <HAL_TIM_PWM_Start+0x168>
 8008a42:	bf00      	nop
 8008a44:	40012c00 	.word	0x40012c00
 8008a48:	00010007 	.word	0x00010007

08008a4c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008a4c:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8008a50:	2a01      	cmp	r2, #1
 8008a52:	d04c      	beq.n	8008aee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
{
 8008a54:	b430      	push	{r4, r5}
 8008a56:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8008a58:	2201      	movs	r2, #1
 8008a5a:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a5e:	2202      	movs	r2, #2
 8008a60:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008a64:	6800      	ldr	r0, [r0, #0]
 8008a66:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008a68:	6884      	ldr	r4, [r0, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008a6a:	4d22      	ldr	r5, [pc, #136]	@ (8008af4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8008a6c:	42a8      	cmp	r0, r5
 8008a6e:	d007      	beq.n	8008a80 <HAL_TIMEx_MasterConfigSynchronization+0x34>
 8008a70:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8008a74:	42a8      	cmp	r0, r5
 8008a76:	d003      	beq.n	8008a80 <HAL_TIMEx_MasterConfigSynchronization+0x34>
 8008a78:	f505 55e0 	add.w	r5, r5, #7168	@ 0x1c00
 8008a7c:	42a8      	cmp	r0, r5
 8008a7e:	d103      	bne.n	8008a88 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008a80:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008a84:	684d      	ldr	r5, [r1, #4]
 8008a86:	432a      	orrs	r2, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008a88:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 8008a8c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008a90:	680d      	ldr	r5, [r1, #0]
 8008a92:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008a94:	6042      	str	r2, [r0, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a96:	681a      	ldr	r2, [r3, #0]
 8008a98:	4816      	ldr	r0, [pc, #88]	@ (8008af4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8008a9a:	4282      	cmp	r2, r0
 8008a9c:	d01a      	beq.n	8008ad4 <HAL_TIMEx_MasterConfigSynchronization+0x88>
 8008a9e:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8008aa2:	d017      	beq.n	8008ad4 <HAL_TIMEx_MasterConfigSynchronization+0x88>
 8008aa4:	f5a0 3094 	sub.w	r0, r0, #75776	@ 0x12800
 8008aa8:	4282      	cmp	r2, r0
 8008aaa:	d013      	beq.n	8008ad4 <HAL_TIMEx_MasterConfigSynchronization+0x88>
 8008aac:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8008ab0:	4282      	cmp	r2, r0
 8008ab2:	d00f      	beq.n	8008ad4 <HAL_TIMEx_MasterConfigSynchronization+0x88>
 8008ab4:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8008ab8:	4282      	cmp	r2, r0
 8008aba:	d00b      	beq.n	8008ad4 <HAL_TIMEx_MasterConfigSynchronization+0x88>
 8008abc:	f500 3094 	add.w	r0, r0, #75776	@ 0x12800
 8008ac0:	4282      	cmp	r2, r0
 8008ac2:	d007      	beq.n	8008ad4 <HAL_TIMEx_MasterConfigSynchronization+0x88>
 8008ac4:	f500 6040 	add.w	r0, r0, #3072	@ 0xc00
 8008ac8:	4282      	cmp	r2, r0
 8008aca:	d003      	beq.n	8008ad4 <HAL_TIMEx_MasterConfigSynchronization+0x88>
 8008acc:	f500 5080 	add.w	r0, r0, #4096	@ 0x1000
 8008ad0:	4282      	cmp	r2, r0
 8008ad2:	d104      	bne.n	8008ade <HAL_TIMEx_MasterConfigSynchronization+0x92>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008ad4:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008ad8:	6889      	ldr	r1, [r1, #8]
 8008ada:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008adc:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008ade:	2201      	movs	r2, #1
 8008ae0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008ae4:	2000      	movs	r0, #0
 8008ae6:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 8008aea:	bc30      	pop	{r4, r5}
 8008aec:	4770      	bx	lr
  __HAL_LOCK(htim);
 8008aee:	2002      	movs	r0, #2
}
 8008af0:	4770      	bx	lr
 8008af2:	bf00      	nop
 8008af4:	40012c00 	.word	0x40012c00

08008af8 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008af8:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8008afc:	2b01      	cmp	r3, #1
 8008afe:	d04a      	beq.n	8008b96 <HAL_TIMEx_ConfigBreakDeadTime+0x9e>
{
 8008b00:	b410      	push	{r4}
 8008b02:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 8008b04:	2301      	movs	r3, #1
 8008b06:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008b0a:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008b0c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008b10:	6888      	ldr	r0, [r1, #8]
 8008b12:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008b14:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008b18:	6848      	ldr	r0, [r1, #4]
 8008b1a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008b1c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008b20:	6808      	ldr	r0, [r1, #0]
 8008b22:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008b24:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008b28:	6908      	ldr	r0, [r1, #16]
 8008b2a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008b2c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008b30:	6948      	ldr	r0, [r1, #20]
 8008b32:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008b34:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008b38:	6b08      	ldr	r0, [r1, #48]	@ 0x30
 8008b3a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008b3c:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8008b40:	6988      	ldr	r0, [r1, #24]
 8008b42:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008b46:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008b4a:	69c8      	ldr	r0, [r1, #28]
 8008b4c:	4303      	orrs	r3, r0

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008b4e:	6810      	ldr	r0, [r2, #0]
 8008b50:	4c12      	ldr	r4, [pc, #72]	@ (8008b9c <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8008b52:	42a0      	cmp	r0, r4
 8008b54:	d007      	beq.n	8008b66 <HAL_TIMEx_ConfigBreakDeadTime+0x6e>
 8008b56:	f504 6400 	add.w	r4, r4, #2048	@ 0x800
 8008b5a:	42a0      	cmp	r0, r4
 8008b5c:	d003      	beq.n	8008b66 <HAL_TIMEx_ConfigBreakDeadTime+0x6e>
 8008b5e:	f504 54e0 	add.w	r4, r4, #7168	@ 0x1c00
 8008b62:	42a0      	cmp	r0, r4
 8008b64:	d110      	bne.n	8008b88 <HAL_TIMEx_ConfigBreakDeadTime+0x90>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008b66:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008b6a:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 8008b6c:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008b70:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008b74:	6a0c      	ldr	r4, [r1, #32]
 8008b76:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008b78:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008b7c:	6a4c      	ldr	r4, [r1, #36]	@ 0x24
 8008b7e:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008b80:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008b84:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
 8008b86:	430b      	orrs	r3, r1
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008b88:	6443      	str	r3, [r0, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008b8a:	2000      	movs	r0, #0
 8008b8c:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c

  return HAL_OK;
}
 8008b90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b94:	4770      	bx	lr
  __HAL_LOCK(htim);
 8008b96:	2002      	movs	r0, #2
}
 8008b98:	4770      	bx	lr
 8008b9a:	bf00      	nop
 8008b9c:	40012c00 	.word	0x40012c00

08008ba0 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008ba0:	4770      	bx	lr

08008ba2 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008ba2:	4770      	bx	lr

08008ba4 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008ba4:	4770      	bx	lr

08008ba6 <HAL_TIMEx_EncoderIndexCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008ba6:	4770      	bx	lr

08008ba8 <HAL_TIMEx_DirectionChangeCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008ba8:	4770      	bx	lr

08008baa <HAL_TIMEx_IndexErrorCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008baa:	4770      	bx	lr

08008bac <HAL_TIMEx_TransitionErrorCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008bac:	4770      	bx	lr

08008bae <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008bae:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bb0:	e852 3f00 	ldrex	r3, [r2]
 8008bb4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bb8:	e842 3100 	strex	r1, r3, [r2]
 8008bbc:	2900      	cmp	r1, #0
 8008bbe:	d1f6      	bne.n	8008bae <UART_EndTxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008bc0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bc2:	f102 0308 	add.w	r3, r2, #8
 8008bc6:	e853 3f00 	ldrex	r3, [r3]
 8008bca:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bce:	3208      	adds	r2, #8
 8008bd0:	e842 3100 	strex	r1, r3, [r2]
 8008bd4:	2900      	cmp	r1, #0
 8008bd6:	d1f3      	bne.n	8008bc0 <UART_EndTxTransfer+0x12>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008bd8:	2320      	movs	r3, #32
 8008bda:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
}
 8008bde:	4770      	bx	lr

08008be0 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008be0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008be2:	e852 3f00 	ldrex	r3, [r2]
 8008be6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bea:	e842 3100 	strex	r1, r3, [r2]
 8008bee:	2900      	cmp	r1, #0
 8008bf0:	d1f6      	bne.n	8008be0 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008bf2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bf4:	f102 0308 	add.w	r3, r2, #8
 8008bf8:	e853 3f00 	ldrex	r3, [r3]
 8008bfc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008c00:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c04:	3208      	adds	r2, #8
 8008c06:	e842 3100 	strex	r1, r3, [r2]
 8008c0a:	2900      	cmp	r1, #0
 8008c0c:	d1f1      	bne.n	8008bf2 <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c0e:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8008c10:	2b01      	cmp	r3, #1
 8008c12:	d006      	beq.n	8008c22 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008c14:	2320      	movs	r3, #32
 8008c16:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008c1e:	6743      	str	r3, [r0, #116]	@ 0x74
}
 8008c20:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c22:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c24:	e852 3f00 	ldrex	r3, [r2]
 8008c28:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c2c:	e842 3100 	strex	r1, r3, [r2]
 8008c30:	2900      	cmp	r1, #0
 8008c32:	d1f6      	bne.n	8008c22 <UART_EndRxTransfer+0x42>
 8008c34:	e7ee      	b.n	8008c14 <UART_EndRxTransfer+0x34>

08008c36 <HAL_UART_DeInit>:
  if (huart == NULL)
 8008c36:	b1f0      	cbz	r0, 8008c76 <HAL_UART_DeInit+0x40>
{
 8008c38:	b538      	push	{r3, r4, r5, lr}
 8008c3a:	4605      	mov	r5, r0
  huart->gState = HAL_UART_STATE_BUSY;
 8008c3c:	2324      	movs	r3, #36	@ 0x24
 8008c3e:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 8008c42:	6802      	ldr	r2, [r0, #0]
 8008c44:	6813      	ldr	r3, [r2, #0]
 8008c46:	f023 0301 	bic.w	r3, r3, #1
 8008c4a:	6013      	str	r3, [r2, #0]
  huart->Instance->CR1 = 0x0U;
 8008c4c:	6803      	ldr	r3, [r0, #0]
 8008c4e:	2400      	movs	r4, #0
 8008c50:	601c      	str	r4, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8008c52:	6803      	ldr	r3, [r0, #0]
 8008c54:	605c      	str	r4, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8008c56:	6803      	ldr	r3, [r0, #0]
 8008c58:	609c      	str	r4, [r3, #8]
  HAL_UART_MspDeInit(huart);
 8008c5a:	f7fb ff75 	bl	8004b48 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c5e:	f8c5 4090 	str.w	r4, [r5, #144]	@ 0x90
  huart->gState = HAL_UART_STATE_RESET;
 8008c62:	f8c5 4088 	str.w	r4, [r5, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_RESET;
 8008c66:	f8c5 408c 	str.w	r4, [r5, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c6a:	66ec      	str	r4, [r5, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008c6c:	672c      	str	r4, [r5, #112]	@ 0x70
  __HAL_UNLOCK(huart);
 8008c6e:	f885 4084 	strb.w	r4, [r5, #132]	@ 0x84
  return HAL_OK;
 8008c72:	4620      	mov	r0, r4
}
 8008c74:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8008c76:	2001      	movs	r0, #1
}
 8008c78:	4770      	bx	lr
	...

08008c7c <HAL_UART_Transmit_DMA>:
{
 8008c7c:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8008c7e:	f8d0 2088 	ldr.w	r2, [r0, #136]	@ 0x88
 8008c82:	2a20      	cmp	r2, #32
 8008c84:	d13d      	bne.n	8008d02 <HAL_UART_Transmit_DMA+0x86>
{
 8008c86:	b510      	push	{r4, lr}
 8008c88:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 8008c8a:	2900      	cmp	r1, #0
 8008c8c:	d03b      	beq.n	8008d06 <HAL_UART_Transmit_DMA+0x8a>
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d03b      	beq.n	8008d0a <HAL_UART_Transmit_DMA+0x8e>
    huart->pTxBuffPtr  = pData;
 8008c92:	6501      	str	r1, [r0, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8008c94:	f8a0 3054 	strh.w	r3, [r0, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008c98:	f8a0 3056 	strh.w	r3, [r0, #86]	@ 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	f8c0 2090 	str.w	r2, [r0, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008ca2:	2221      	movs	r2, #33	@ 0x21
 8008ca4:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
    if (huart->hdmatx != NULL)
 8008ca8:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
 8008caa:	b1ca      	cbz	r2, 8008ce0 <HAL_UART_Transmit_DMA+0x64>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008cac:	4918      	ldr	r1, [pc, #96]	@ (8008d10 <HAL_UART_Transmit_DMA+0x94>)
 8008cae:	62d1      	str	r1, [r2, #44]	@ 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008cb0:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
 8008cb2:	4918      	ldr	r1, [pc, #96]	@ (8008d14 <HAL_UART_Transmit_DMA+0x98>)
 8008cb4:	6311      	str	r1, [r2, #48]	@ 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008cb6:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
 8008cb8:	4917      	ldr	r1, [pc, #92]	@ (8008d18 <HAL_UART_Transmit_DMA+0x9c>)
 8008cba:	6351      	str	r1, [r2, #52]	@ 0x34
      huart->hdmatx->XferAbortCallback = NULL;
 8008cbc:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
 8008cbe:	2100      	movs	r1, #0
 8008cc0:	6391      	str	r1, [r2, #56]	@ 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008cc2:	6802      	ldr	r2, [r0, #0]
 8008cc4:	3228      	adds	r2, #40	@ 0x28
 8008cc6:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 8008cc8:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 8008cca:	f7fd fb9f 	bl	800640c <HAL_DMA_Start_IT>
 8008cce:	b138      	cbz	r0, 8008ce0 <HAL_UART_Transmit_DMA+0x64>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008cd0:	2310      	movs	r3, #16
 8008cd2:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        huart->gState = HAL_UART_STATE_READY;
 8008cd6:	2320      	movs	r3, #32
 8008cd8:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
        return HAL_ERROR;
 8008cdc:	2001      	movs	r0, #1
 8008cde:	e00f      	b.n	8008d00 <HAL_UART_Transmit_DMA+0x84>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008ce0:	6823      	ldr	r3, [r4, #0]
 8008ce2:	2240      	movs	r2, #64	@ 0x40
 8008ce4:	621a      	str	r2, [r3, #32]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008ce6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ce8:	f102 0308 	add.w	r3, r2, #8
 8008cec:	e853 3f00 	ldrex	r3, [r3]
 8008cf0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cf4:	3208      	adds	r2, #8
 8008cf6:	e842 3100 	strex	r1, r3, [r2]
 8008cfa:	2900      	cmp	r1, #0
 8008cfc:	d1f3      	bne.n	8008ce6 <HAL_UART_Transmit_DMA+0x6a>
    return HAL_OK;
 8008cfe:	2000      	movs	r0, #0
}
 8008d00:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8008d02:	2002      	movs	r0, #2
}
 8008d04:	4770      	bx	lr
      return HAL_ERROR;
 8008d06:	2001      	movs	r0, #1
 8008d08:	e7fa      	b.n	8008d00 <HAL_UART_Transmit_DMA+0x84>
 8008d0a:	2001      	movs	r0, #1
 8008d0c:	e7f8      	b.n	8008d00 <HAL_UART_Transmit_DMA+0x84>
 8008d0e:	bf00      	nop
 8008d10:	08008d1f 	.word	0x08008d1f
 8008d14:	08008d8d 	.word	0x08008d8d
 8008d18:	08008d9d 	.word	0x08008d9d

08008d1c <HAL_UART_TxCpltCallback>:
}
 8008d1c:	4770      	bx	lr

08008d1e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008d1e:	b508      	push	{r3, lr}
 8008d20:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008d22:	6a80      	ldr	r0, [r0, #40]	@ 0x28

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f013 0f20 	tst.w	r3, #32
 8008d2c:	d118      	bne.n	8008d60 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 8008d2e:	2300      	movs	r3, #0
 8008d30:	f8a0 3056 	strh.w	r3, [r0, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008d34:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d36:	f102 0308 	add.w	r3, r2, #8
 8008d3a:	e853 3f00 	ldrex	r3, [r3]
 8008d3e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d42:	3208      	adds	r2, #8
 8008d44:	e842 3100 	strex	r1, r3, [r2]
 8008d48:	2900      	cmp	r1, #0
 8008d4a:	d1f3      	bne.n	8008d34 <UART_DMATransmitCplt+0x16>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008d4c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d4e:	e852 3f00 	ldrex	r3, [r2]
 8008d52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d56:	e842 3100 	strex	r1, r3, [r2]
 8008d5a:	2900      	cmp	r1, #0
 8008d5c:	d1f6      	bne.n	8008d4c <UART_DMATransmitCplt+0x2e>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008d5e:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8008d60:	f7ff ffdc 	bl	8008d1c <HAL_UART_TxCpltCallback>
}
 8008d64:	e7fb      	b.n	8008d5e <UART_DMATransmitCplt+0x40>

08008d66 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008d66:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008d68:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d6a:	e852 3f00 	ldrex	r3, [r2]
 8008d6e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d72:	e842 3100 	strex	r1, r3, [r2]
 8008d76:	2900      	cmp	r1, #0
 8008d78:	d1f6      	bne.n	8008d68 <UART_EndTransmit_IT+0x2>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008d7a:	2320      	movs	r3, #32
 8008d7c:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008d80:	2300      	movs	r3, #0
 8008d82:	6783      	str	r3, [r0, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008d84:	f7ff ffca 	bl	8008d1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d88:	bd08      	pop	{r3, pc}

08008d8a <HAL_UART_TxHalfCpltCallback>:
}
 8008d8a:	4770      	bx	lr

08008d8c <UART_DMATxHalfCplt>:
{
 8008d8c:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8008d8e:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8008d90:	f7ff fffb 	bl	8008d8a <HAL_UART_TxHalfCpltCallback>
}
 8008d94:	bd08      	pop	{r3, pc}

08008d96 <HAL_UART_RxCpltCallback>:
}
 8008d96:	4770      	bx	lr

08008d98 <HAL_UART_RxHalfCpltCallback>:
}
 8008d98:	4770      	bx	lr

08008d9a <HAL_UART_ErrorCallback>:
}
 8008d9a:	4770      	bx	lr

08008d9c <UART_DMAError>:
{
 8008d9c:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008d9e:	6a84      	ldr	r4, [r0, #40]	@ 0x28
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008da0:	f8d4 2088 	ldr.w	r2, [r4, #136]	@ 0x88
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008da4:	f8d4 508c 	ldr.w	r5, [r4, #140]	@ 0x8c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008da8:	6823      	ldr	r3, [r4, #0]
 8008daa:	689b      	ldr	r3, [r3, #8]
 8008dac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008db0:	d001      	beq.n	8008db6 <UART_DMAError+0x1a>
 8008db2:	2a21      	cmp	r2, #33	@ 0x21
 8008db4:	d010      	beq.n	8008dd8 <UART_DMAError+0x3c>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008db6:	6823      	ldr	r3, [r4, #0]
 8008db8:	689b      	ldr	r3, [r3, #8]
 8008dba:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8008dbe:	d001      	beq.n	8008dc4 <UART_DMAError+0x28>
 8008dc0:	2d22      	cmp	r5, #34	@ 0x22
 8008dc2:	d010      	beq.n	8008de6 <UART_DMAError+0x4a>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008dc4:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8008dc8:	f043 0310 	orr.w	r3, r3, #16
 8008dcc:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
  HAL_UART_ErrorCallback(huart);
 8008dd0:	4620      	mov	r0, r4
 8008dd2:	f7ff ffe2 	bl	8008d9a <HAL_UART_ErrorCallback>
}
 8008dd6:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 8008dd8:	2300      	movs	r3, #0
 8008dda:	f8a4 3056 	strh.w	r3, [r4, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8008dde:	4620      	mov	r0, r4
 8008de0:	f7ff fee5 	bl	8008bae <UART_EndTxTransfer>
 8008de4:	e7e7      	b.n	8008db6 <UART_DMAError+0x1a>
    huart->RxXferCount = 0U;
 8008de6:	2300      	movs	r3, #0
 8008de8:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8008dec:	4620      	mov	r0, r4
 8008dee:	f7ff fef7 	bl	8008be0 <UART_EndRxTransfer>
 8008df2:	e7e7      	b.n	8008dc4 <UART_DMAError+0x28>

08008df4 <UART_DMAAbortOnError>:
{
 8008df4:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008df6:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  huart->RxXferCount = 0U;
 8008df8:	2300      	movs	r3, #0
 8008dfa:	f8a0 305e 	strh.w	r3, [r0, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8008dfe:	f8a0 3056 	strh.w	r3, [r0, #86]	@ 0x56
  HAL_UART_ErrorCallback(huart);
 8008e02:	f7ff ffca 	bl	8008d9a <HAL_UART_ErrorCallback>
}
 8008e06:	bd08      	pop	{r3, pc}

08008e08 <HAL_UARTEx_RxEventCallback>:
}
 8008e08:	4770      	bx	lr
	...

08008e0c <HAL_UART_IRQHandler>:
{
 8008e0c:	b570      	push	{r4, r5, r6, lr}
 8008e0e:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008e10:	6802      	ldr	r2, [r0, #0]
 8008e12:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008e14:	6810      	ldr	r0, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008e16:	6891      	ldr	r1, [r2, #8]
  if (errorflags == 0U)
 8008e18:	f640 0c0f 	movw	ip, #2063	@ 0x80f
 8008e1c:	ea13 0f0c 	tst.w	r3, ip
 8008e20:	d10d      	bne.n	8008e3e <HAL_UART_IRQHandler+0x32>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008e22:	f013 0f20 	tst.w	r3, #32
 8008e26:	d010      	beq.n	8008e4a <HAL_UART_IRQHandler+0x3e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008e28:	f010 0f20 	tst.w	r0, #32
 8008e2c:	d102      	bne.n	8008e34 <HAL_UART_IRQHandler+0x28>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008e2e:	f011 5f80 	tst.w	r1, #268435456	@ 0x10000000
 8008e32:	d00a      	beq.n	8008e4a <HAL_UART_IRQHandler+0x3e>
      if (huart->RxISR != NULL)
 8008e34:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8008e36:	b393      	cbz	r3, 8008e9e <HAL_UART_IRQHandler+0x92>
        huart->RxISR(huart);
 8008e38:	4620      	mov	r0, r4
 8008e3a:	4798      	blx	r3
      return;
 8008e3c:	e02f      	b.n	8008e9e <HAL_UART_IRQHandler+0x92>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008e3e:	4db4      	ldr	r5, [pc, #720]	@ (8009110 <HAL_UART_IRQHandler+0x304>)
 8008e40:	400d      	ands	r5, r1
 8008e42:	d12d      	bne.n	8008ea0 <HAL_UART_IRQHandler+0x94>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008e44:	4eb3      	ldr	r6, [pc, #716]	@ (8009114 <HAL_UART_IRQHandler+0x308>)
 8008e46:	4230      	tst	r0, r6
 8008e48:	d12a      	bne.n	8008ea0 <HAL_UART_IRQHandler+0x94>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e4a:	6ee5      	ldr	r5, [r4, #108]	@ 0x6c
 8008e4c:	2d01      	cmp	r5, #1
 8008e4e:	f000 80c0 	beq.w	8008fd2 <HAL_UART_IRQHandler+0x1c6>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008e52:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8008e56:	d003      	beq.n	8008e60 <HAL_UART_IRQHandler+0x54>
 8008e58:	f411 0f80 	tst.w	r1, #4194304	@ 0x400000
 8008e5c:	f040 815e 	bne.w	800911c <HAL_UART_IRQHandler+0x310>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008e60:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008e64:	d007      	beq.n	8008e76 <HAL_UART_IRQHandler+0x6a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008e66:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8008e6a:	f040 815e 	bne.w	800912a <HAL_UART_IRQHandler+0x31e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008e6e:	f411 0f00 	tst.w	r1, #8388608	@ 0x800000
 8008e72:	f040 815a 	bne.w	800912a <HAL_UART_IRQHandler+0x31e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008e76:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8008e7a:	d003      	beq.n	8008e84 <HAL_UART_IRQHandler+0x78>
 8008e7c:	f010 0f40 	tst.w	r0, #64	@ 0x40
 8008e80:	f040 815a 	bne.w	8009138 <HAL_UART_IRQHandler+0x32c>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008e84:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 8008e88:	d003      	beq.n	8008e92 <HAL_UART_IRQHandler+0x86>
 8008e8a:	f010 4f80 	tst.w	r0, #1073741824	@ 0x40000000
 8008e8e:	f040 8157 	bne.w	8009140 <HAL_UART_IRQHandler+0x334>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008e92:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8008e96:	d002      	beq.n	8008e9e <HAL_UART_IRQHandler+0x92>
 8008e98:	2800      	cmp	r0, #0
 8008e9a:	f2c0 8155 	blt.w	8009148 <HAL_UART_IRQHandler+0x33c>
}
 8008e9e:	bd70      	pop	{r4, r5, r6, pc}
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008ea0:	f013 0f01 	tst.w	r3, #1
 8008ea4:	d009      	beq.n	8008eba <HAL_UART_IRQHandler+0xae>
 8008ea6:	f410 7f80 	tst.w	r0, #256	@ 0x100
 8008eaa:	d006      	beq.n	8008eba <HAL_UART_IRQHandler+0xae>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008eac:	2601      	movs	r6, #1
 8008eae:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008eb0:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 8008eb4:	4332      	orrs	r2, r6
 8008eb6:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008eba:	f013 0f02 	tst.w	r3, #2
 8008ebe:	d00b      	beq.n	8008ed8 <HAL_UART_IRQHandler+0xcc>
 8008ec0:	f011 0f01 	tst.w	r1, #1
 8008ec4:	d008      	beq.n	8008ed8 <HAL_UART_IRQHandler+0xcc>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008ec6:	6822      	ldr	r2, [r4, #0]
 8008ec8:	2602      	movs	r6, #2
 8008eca:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008ecc:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 8008ed0:	f042 0204 	orr.w	r2, r2, #4
 8008ed4:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008ed8:	f013 0f04 	tst.w	r3, #4
 8008edc:	d00b      	beq.n	8008ef6 <HAL_UART_IRQHandler+0xea>
 8008ede:	f011 0f01 	tst.w	r1, #1
 8008ee2:	d008      	beq.n	8008ef6 <HAL_UART_IRQHandler+0xea>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008ee4:	6822      	ldr	r2, [r4, #0]
 8008ee6:	2604      	movs	r6, #4
 8008ee8:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008eea:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 8008eee:	f042 0202 	orr.w	r2, r2, #2
 8008ef2:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008ef6:	f013 0f08 	tst.w	r3, #8
 8008efa:	d00b      	beq.n	8008f14 <HAL_UART_IRQHandler+0x108>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008efc:	f010 0f20 	tst.w	r0, #32
 8008f00:	d100      	bne.n	8008f04 <HAL_UART_IRQHandler+0xf8>
 8008f02:	b13d      	cbz	r5, 8008f14 <HAL_UART_IRQHandler+0x108>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008f04:	6822      	ldr	r2, [r4, #0]
 8008f06:	2508      	movs	r5, #8
 8008f08:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008f0a:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 8008f0e:	432a      	orrs	r2, r5
 8008f10:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008f14:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8008f18:	d00c      	beq.n	8008f34 <HAL_UART_IRQHandler+0x128>
 8008f1a:	f010 6f80 	tst.w	r0, #67108864	@ 0x4000000
 8008f1e:	d009      	beq.n	8008f34 <HAL_UART_IRQHandler+0x128>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008f20:	6822      	ldr	r2, [r4, #0]
 8008f22:	f44f 6500 	mov.w	r5, #2048	@ 0x800
 8008f26:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008f28:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 8008f2c:	f042 0220 	orr.w	r2, r2, #32
 8008f30:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008f34:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 8008f38:	2a00      	cmp	r2, #0
 8008f3a:	d0b0      	beq.n	8008e9e <HAL_UART_IRQHandler+0x92>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008f3c:	f013 0f20 	tst.w	r3, #32
 8008f40:	d009      	beq.n	8008f56 <HAL_UART_IRQHandler+0x14a>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008f42:	f010 0f20 	tst.w	r0, #32
 8008f46:	d102      	bne.n	8008f4e <HAL_UART_IRQHandler+0x142>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008f48:	f011 5f80 	tst.w	r1, #268435456	@ 0x10000000
 8008f4c:	d003      	beq.n	8008f56 <HAL_UART_IRQHandler+0x14a>
        if (huart->RxISR != NULL)
 8008f4e:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8008f50:	b10b      	cbz	r3, 8008f56 <HAL_UART_IRQHandler+0x14a>
          huart->RxISR(huart);
 8008f52:	4620      	mov	r0, r4
 8008f54:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8008f56:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008f5a:	6823      	ldr	r3, [r4, #0]
 8008f5c:	689b      	ldr	r3, [r3, #8]
 8008f5e:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8008f62:	d102      	bne.n	8008f6a <HAL_UART_IRQHandler+0x15e>
 8008f64:	f012 0f28 	tst.w	r2, #40	@ 0x28
 8008f68:	d02c      	beq.n	8008fc4 <HAL_UART_IRQHandler+0x1b8>
        UART_EndRxTransfer(huart);
 8008f6a:	4620      	mov	r0, r4
 8008f6c:	f7ff fe38 	bl	8008be0 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f70:	6823      	ldr	r3, [r4, #0]
 8008f72:	689b      	ldr	r3, [r3, #8]
 8008f74:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8008f78:	d020      	beq.n	8008fbc <HAL_UART_IRQHandler+0x1b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f7a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f7c:	f102 0308 	add.w	r3, r2, #8
 8008f80:	e853 3f00 	ldrex	r3, [r3]
 8008f84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f88:	3208      	adds	r2, #8
 8008f8a:	e842 3100 	strex	r1, r3, [r2]
 8008f8e:	2900      	cmp	r1, #0
 8008f90:	d1f3      	bne.n	8008f7a <HAL_UART_IRQHandler+0x16e>
          if (huart->hdmarx != NULL)
 8008f92:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8008f96:	b16b      	cbz	r3, 8008fb4 <HAL_UART_IRQHandler+0x1a8>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008f98:	4a5f      	ldr	r2, [pc, #380]	@ (8009118 <HAL_UART_IRQHandler+0x30c>)
 8008f9a:	639a      	str	r2, [r3, #56]	@ 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008f9c:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8008fa0:	f7fd fab4 	bl	800650c <HAL_DMA_Abort_IT>
 8008fa4:	2800      	cmp	r0, #0
 8008fa6:	f43f af7a 	beq.w	8008e9e <HAL_UART_IRQHandler+0x92>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008faa:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8008fae:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8008fb0:	4798      	blx	r3
 8008fb2:	e774      	b.n	8008e9e <HAL_UART_IRQHandler+0x92>
            HAL_UART_ErrorCallback(huart);
 8008fb4:	4620      	mov	r0, r4
 8008fb6:	f7ff fef0 	bl	8008d9a <HAL_UART_ErrorCallback>
 8008fba:	e770      	b.n	8008e9e <HAL_UART_IRQHandler+0x92>
          HAL_UART_ErrorCallback(huart);
 8008fbc:	4620      	mov	r0, r4
 8008fbe:	f7ff feec 	bl	8008d9a <HAL_UART_ErrorCallback>
 8008fc2:	e76c      	b.n	8008e9e <HAL_UART_IRQHandler+0x92>
        HAL_UART_ErrorCallback(huart);
 8008fc4:	4620      	mov	r0, r4
 8008fc6:	f7ff fee8 	bl	8008d9a <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
    return;
 8008fd0:	e765      	b.n	8008e9e <HAL_UART_IRQHandler+0x92>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008fd2:	f013 0f10 	tst.w	r3, #16
 8008fd6:	f43f af3c 	beq.w	8008e52 <HAL_UART_IRQHandler+0x46>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008fda:	f010 0f10 	tst.w	r0, #16
 8008fde:	f43f af38 	beq.w	8008e52 <HAL_UART_IRQHandler+0x46>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008fe2:	2310      	movs	r3, #16
 8008fe4:	6213      	str	r3, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fe6:	6823      	ldr	r3, [r4, #0]
 8008fe8:	689b      	ldr	r3, [r3, #8]
 8008fea:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8008fee:	d053      	beq.n	8009098 <HAL_UART_IRQHandler+0x28c>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008ff0:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 8008ff4:	6813      	ldr	r3, [r2, #0]
 8008ff6:	685b      	ldr	r3, [r3, #4]
 8008ff8:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	f43f af4f 	beq.w	8008e9e <HAL_UART_IRQHandler+0x92>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009000:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 8009004:	4299      	cmp	r1, r3
 8009006:	f67f af4a 	bls.w	8008e9e <HAL_UART_IRQHandler+0x92>
        huart->RxXferCount = nb_remaining_rx_data;
 800900a:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800900e:	6813      	ldr	r3, [r2, #0]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f013 0f20 	tst.w	r3, #32
 8009016:	d132      	bne.n	800907e <HAL_UART_IRQHandler+0x272>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009018:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800901a:	e852 3f00 	ldrex	r3, [r2]
 800901e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009022:	e842 3100 	strex	r1, r3, [r2]
 8009026:	2900      	cmp	r1, #0
 8009028:	d1f6      	bne.n	8009018 <HAL_UART_IRQHandler+0x20c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800902a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800902c:	f102 0308 	add.w	r3, r2, #8
 8009030:	e853 3f00 	ldrex	r3, [r3]
 8009034:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009038:	3208      	adds	r2, #8
 800903a:	e842 3100 	strex	r1, r3, [r2]
 800903e:	2900      	cmp	r1, #0
 8009040:	d1f3      	bne.n	800902a <HAL_UART_IRQHandler+0x21e>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009042:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009044:	f102 0308 	add.w	r3, r2, #8
 8009048:	e853 3f00 	ldrex	r3, [r3]
 800904c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009050:	3208      	adds	r2, #8
 8009052:	e842 3100 	strex	r1, r3, [r2]
 8009056:	2900      	cmp	r1, #0
 8009058:	d1f3      	bne.n	8009042 <HAL_UART_IRQHandler+0x236>
          huart->RxState = HAL_UART_STATE_READY;
 800905a:	2320      	movs	r3, #32
 800905c:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009060:	2300      	movs	r3, #0
 8009062:	66e3      	str	r3, [r4, #108]	@ 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009064:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009066:	e852 3f00 	ldrex	r3, [r2]
 800906a:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800906e:	e842 3100 	strex	r1, r3, [r2]
 8009072:	2900      	cmp	r1, #0
 8009074:	d1f6      	bne.n	8009064 <HAL_UART_IRQHandler+0x258>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009076:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 800907a:	f7fd fa11 	bl	80064a0 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800907e:	2302      	movs	r3, #2
 8009080:	6723      	str	r3, [r4, #112]	@ 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009082:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 8009086:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 800908a:	b29b      	uxth	r3, r3
 800908c:	1ac9      	subs	r1, r1, r3
 800908e:	b289      	uxth	r1, r1
 8009090:	4620      	mov	r0, r4
 8009092:	f7ff feb9 	bl	8008e08 <HAL_UARTEx_RxEventCallback>
      return;
 8009096:	e702      	b.n	8008e9e <HAL_UART_IRQHandler+0x92>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009098:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 800909c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 80090a0:	b29b      	uxth	r3, r3
 80090a2:	1ac9      	subs	r1, r1, r3
 80090a4:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 80090a6:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 80090aa:	b29b      	uxth	r3, r3
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	f43f aef6 	beq.w	8008e9e <HAL_UART_IRQHandler+0x92>
          && (nb_rx_data > 0U))
 80090b2:	2900      	cmp	r1, #0
 80090b4:	f43f aef3 	beq.w	8008e9e <HAL_UART_IRQHandler+0x92>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80090b8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090ba:	e852 3f00 	ldrex	r3, [r2]
 80090be:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090c2:	e842 3000 	strex	r0, r3, [r2]
 80090c6:	2800      	cmp	r0, #0
 80090c8:	d1f6      	bne.n	80090b8 <HAL_UART_IRQHandler+0x2ac>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80090ca:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090cc:	f102 0308 	add.w	r3, r2, #8
 80090d0:	e853 3f00 	ldrex	r3, [r3]
 80090d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80090d8:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090dc:	3208      	adds	r2, #8
 80090de:	e842 3000 	strex	r0, r3, [r2]
 80090e2:	2800      	cmp	r0, #0
 80090e4:	d1f1      	bne.n	80090ca <HAL_UART_IRQHandler+0x2be>
        huart->RxState = HAL_UART_STATE_READY;
 80090e6:	2320      	movs	r3, #32
 80090e8:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090ec:	2300      	movs	r3, #0
 80090ee:	66e3      	str	r3, [r4, #108]	@ 0x6c
        huart->RxISR = NULL;
 80090f0:	6763      	str	r3, [r4, #116]	@ 0x74
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090f2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090f4:	e852 3f00 	ldrex	r3, [r2]
 80090f8:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090fc:	e842 3000 	strex	r0, r3, [r2]
 8009100:	2800      	cmp	r0, #0
 8009102:	d1f6      	bne.n	80090f2 <HAL_UART_IRQHandler+0x2e6>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009104:	2302      	movs	r3, #2
 8009106:	6723      	str	r3, [r4, #112]	@ 0x70
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009108:	4620      	mov	r0, r4
 800910a:	f7ff fe7d 	bl	8008e08 <HAL_UARTEx_RxEventCallback>
      return;
 800910e:	e6c6      	b.n	8008e9e <HAL_UART_IRQHandler+0x92>
 8009110:	10000001 	.word	0x10000001
 8009114:	04000120 	.word	0x04000120
 8009118:	08008df5 	.word	0x08008df5
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800911c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8009120:	6213      	str	r3, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8009122:	4620      	mov	r0, r4
 8009124:	f000 fccf 	bl	8009ac6 <HAL_UARTEx_WakeupCallback>
    return;
 8009128:	e6b9      	b.n	8008e9e <HAL_UART_IRQHandler+0x92>
    if (huart->TxISR != NULL)
 800912a:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800912c:	2b00      	cmp	r3, #0
 800912e:	f43f aeb6 	beq.w	8008e9e <HAL_UART_IRQHandler+0x92>
      huart->TxISR(huart);
 8009132:	4620      	mov	r0, r4
 8009134:	4798      	blx	r3
    return;
 8009136:	e6b2      	b.n	8008e9e <HAL_UART_IRQHandler+0x92>
    UART_EndTransmit_IT(huart);
 8009138:	4620      	mov	r0, r4
 800913a:	f7ff fe14 	bl	8008d66 <UART_EndTransmit_IT>
    return;
 800913e:	e6ae      	b.n	8008e9e <HAL_UART_IRQHandler+0x92>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009140:	4620      	mov	r0, r4
 8009142:	f000 fcc2 	bl	8009aca <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 8009146:	e6aa      	b.n	8008e9e <HAL_UART_IRQHandler+0x92>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009148:	4620      	mov	r0, r4
 800914a:	f000 fcbd 	bl	8009ac8 <HAL_UARTEx_RxFifoFullCallback>
    return;
 800914e:	e6a6      	b.n	8008e9e <HAL_UART_IRQHandler+0x92>

08009150 <UART_DMARxHalfCplt>:
{
 8009150:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009152:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009154:	2301      	movs	r3, #1
 8009156:	6703      	str	r3, [r0, #112]	@ 0x70
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009158:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800915a:	2b01      	cmp	r3, #1
 800915c:	d002      	beq.n	8009164 <UART_DMARxHalfCplt+0x14>
    HAL_UART_RxHalfCpltCallback(huart);
 800915e:	f7ff fe1b 	bl	8008d98 <HAL_UART_RxHalfCpltCallback>
}
 8009162:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009164:	f8b0 105c 	ldrh.w	r1, [r0, #92]	@ 0x5c
 8009168:	0849      	lsrs	r1, r1, #1
 800916a:	f7ff fe4d 	bl	8008e08 <HAL_UARTEx_RxEventCallback>
 800916e:	e7f8      	b.n	8009162 <UART_DMARxHalfCplt+0x12>

08009170 <UART_DMAReceiveCplt>:
{
 8009170:	b508      	push	{r3, lr}
 8009172:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009174:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f013 0f20 	tst.w	r3, #32
 800917e:	d129      	bne.n	80091d4 <UART_DMAReceiveCplt+0x64>
    huart->RxXferCount = 0U;
 8009180:	2300      	movs	r3, #0
 8009182:	f8a0 305e 	strh.w	r3, [r0, #94]	@ 0x5e
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009186:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009188:	e852 3f00 	ldrex	r3, [r2]
 800918c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009190:	e842 3100 	strex	r1, r3, [r2]
 8009194:	2900      	cmp	r1, #0
 8009196:	d1f6      	bne.n	8009186 <UART_DMAReceiveCplt+0x16>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009198:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800919a:	f102 0308 	add.w	r3, r2, #8
 800919e:	e853 3f00 	ldrex	r3, [r3]
 80091a2:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091a6:	3208      	adds	r2, #8
 80091a8:	e842 3100 	strex	r1, r3, [r2]
 80091ac:	2900      	cmp	r1, #0
 80091ae:	d1f3      	bne.n	8009198 <UART_DMAReceiveCplt+0x28>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80091b0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091b2:	f102 0308 	add.w	r3, r2, #8
 80091b6:	e853 3f00 	ldrex	r3, [r3]
 80091ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091be:	3208      	adds	r2, #8
 80091c0:	e842 3100 	strex	r1, r3, [r2]
 80091c4:	2900      	cmp	r1, #0
 80091c6:	d1f3      	bne.n	80091b0 <UART_DMAReceiveCplt+0x40>
    huart->RxState = HAL_UART_STATE_READY;
 80091c8:	2320      	movs	r3, #32
 80091ca:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091ce:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 80091d0:	2b01      	cmp	r3, #1
 80091d2:	d007      	beq.n	80091e4 <UART_DMAReceiveCplt+0x74>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80091d4:	2300      	movs	r3, #0
 80091d6:	6703      	str	r3, [r0, #112]	@ 0x70
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091d8:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 80091da:	2b01      	cmp	r3, #1
 80091dc:	d00c      	beq.n	80091f8 <UART_DMAReceiveCplt+0x88>
    HAL_UART_RxCpltCallback(huart);
 80091de:	f7ff fdda 	bl	8008d96 <HAL_UART_RxCpltCallback>
}
 80091e2:	bd08      	pop	{r3, pc}
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091e4:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091e6:	e852 3f00 	ldrex	r3, [r2]
 80091ea:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ee:	e842 3100 	strex	r1, r3, [r2]
 80091f2:	2900      	cmp	r1, #0
 80091f4:	d1f6      	bne.n	80091e4 <UART_DMAReceiveCplt+0x74>
 80091f6:	e7ed      	b.n	80091d4 <UART_DMAReceiveCplt+0x64>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80091f8:	f8b0 105c 	ldrh.w	r1, [r0, #92]	@ 0x5c
 80091fc:	f7ff fe04 	bl	8008e08 <HAL_UARTEx_RxEventCallback>
 8009200:	e7ef      	b.n	80091e2 <UART_DMAReceiveCplt+0x72>
	...

08009204 <UART_SetConfig>:
{
 8009204:	b570      	push	{r4, r5, r6, lr}
 8009206:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8009208:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800920a:	6883      	ldr	r3, [r0, #8]
 800920c:	6902      	ldr	r2, [r0, #16]
 800920e:	4313      	orrs	r3, r2
 8009210:	6942      	ldr	r2, [r0, #20]
 8009212:	4313      	orrs	r3, r2
 8009214:	69c2      	ldr	r2, [r0, #28]
 8009216:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009218:	6808      	ldr	r0, [r1, #0]
 800921a:	4a96      	ldr	r2, [pc, #600]	@ (8009474 <UART_SetConfig+0x270>)
 800921c:	4002      	ands	r2, r0
 800921e:	431a      	orrs	r2, r3
 8009220:	600a      	str	r2, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009222:	6822      	ldr	r2, [r4, #0]
 8009224:	6853      	ldr	r3, [r2, #4]
 8009226:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800922a:	68e1      	ldr	r1, [r4, #12]
 800922c:	430b      	orrs	r3, r1
 800922e:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009230:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009232:	6822      	ldr	r2, [r4, #0]
 8009234:	4b90      	ldr	r3, [pc, #576]	@ (8009478 <UART_SetConfig+0x274>)
 8009236:	429a      	cmp	r2, r3
 8009238:	d001      	beq.n	800923e <UART_SetConfig+0x3a>
    tmpreg |= huart->Init.OneBitSampling;
 800923a:	6a23      	ldr	r3, [r4, #32]
 800923c:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800923e:	6893      	ldr	r3, [r2, #8]
 8009240:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8009244:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8009248:	430b      	orrs	r3, r1
 800924a:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800924c:	6822      	ldr	r2, [r4, #0]
 800924e:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8009250:	f023 030f 	bic.w	r3, r3, #15
 8009254:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8009256:	430b      	orrs	r3, r1
 8009258:	62d3      	str	r3, [r2, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800925a:	6823      	ldr	r3, [r4, #0]
 800925c:	4a87      	ldr	r2, [pc, #540]	@ (800947c <UART_SetConfig+0x278>)
 800925e:	4293      	cmp	r3, r2
 8009260:	d010      	beq.n	8009284 <UART_SetConfig+0x80>
 8009262:	4a87      	ldr	r2, [pc, #540]	@ (8009480 <UART_SetConfig+0x27c>)
 8009264:	4293      	cmp	r3, r2
 8009266:	d021      	beq.n	80092ac <UART_SetConfig+0xa8>
 8009268:	4a86      	ldr	r2, [pc, #536]	@ (8009484 <UART_SetConfig+0x280>)
 800926a:	4293      	cmp	r3, r2
 800926c:	d037      	beq.n	80092de <UART_SetConfig+0xda>
 800926e:	4a86      	ldr	r2, [pc, #536]	@ (8009488 <UART_SetConfig+0x284>)
 8009270:	4293      	cmp	r3, r2
 8009272:	d05c      	beq.n	800932e <UART_SetConfig+0x12a>
 8009274:	4a85      	ldr	r2, [pc, #532]	@ (800948c <UART_SetConfig+0x288>)
 8009276:	4293      	cmp	r3, r2
 8009278:	d06b      	beq.n	8009352 <UART_SetConfig+0x14e>
 800927a:	4a7f      	ldr	r2, [pc, #508]	@ (8009478 <UART_SetConfig+0x274>)
 800927c:	4293      	cmp	r3, r2
 800927e:	d07d      	beq.n	800937c <UART_SetConfig+0x178>
 8009280:	2210      	movs	r2, #16
 8009282:	e03a      	b.n	80092fa <UART_SetConfig+0xf6>
 8009284:	f502 4258 	add.w	r2, r2, #55296	@ 0xd800
 8009288:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 800928c:	f002 0203 	and.w	r2, r2, #3
 8009290:	2a03      	cmp	r2, #3
 8009292:	d809      	bhi.n	80092a8 <UART_SetConfig+0xa4>
 8009294:	e8df f002 	tbb	[pc, r2]
 8009298:	06870402 	.word	0x06870402
 800929c:	2201      	movs	r2, #1
 800929e:	e02c      	b.n	80092fa <UART_SetConfig+0xf6>
 80092a0:	2204      	movs	r2, #4
 80092a2:	e02a      	b.n	80092fa <UART_SetConfig+0xf6>
 80092a4:	2208      	movs	r2, #8
 80092a6:	e028      	b.n	80092fa <UART_SetConfig+0xf6>
 80092a8:	2210      	movs	r2, #16
 80092aa:	e026      	b.n	80092fa <UART_SetConfig+0xf6>
 80092ac:	f502 32e6 	add.w	r2, r2, #117760	@ 0x1cc00
 80092b0:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 80092b4:	f002 020c 	and.w	r2, r2, #12
 80092b8:	2a0c      	cmp	r2, #12
 80092ba:	d80e      	bhi.n	80092da <UART_SetConfig+0xd6>
 80092bc:	e8df f002 	tbb	[pc, r2]
 80092c0:	0d0d0d07 	.word	0x0d0d0d07
 80092c4:	0d0d0d09 	.word	0x0d0d0d09
 80092c8:	0d0d0d75 	.word	0x0d0d0d75
 80092cc:	0b          	.byte	0x0b
 80092cd:	00          	.byte	0x00
 80092ce:	2200      	movs	r2, #0
 80092d0:	e013      	b.n	80092fa <UART_SetConfig+0xf6>
 80092d2:	2204      	movs	r2, #4
 80092d4:	e011      	b.n	80092fa <UART_SetConfig+0xf6>
 80092d6:	2208      	movs	r2, #8
 80092d8:	e00f      	b.n	80092fa <UART_SetConfig+0xf6>
 80092da:	2210      	movs	r2, #16
 80092dc:	e00d      	b.n	80092fa <UART_SetConfig+0xf6>
 80092de:	f502 32e4 	add.w	r2, r2, #116736	@ 0x1c800
 80092e2:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 80092e6:	f002 0230 	and.w	r2, r2, #48	@ 0x30
 80092ea:	2a20      	cmp	r2, #32
 80092ec:	d05f      	beq.n	80093ae <UART_SetConfig+0x1aa>
 80092ee:	d81a      	bhi.n	8009326 <UART_SetConfig+0x122>
 80092f0:	2a00      	cmp	r2, #0
 80092f2:	d05e      	beq.n	80093b2 <UART_SetConfig+0x1ae>
 80092f4:	2a10      	cmp	r2, #16
 80092f6:	d15e      	bne.n	80093b6 <UART_SetConfig+0x1b2>
 80092f8:	2204      	movs	r2, #4
  if (UART_INSTANCE_LOWPOWER(huart))
 80092fa:	495f      	ldr	r1, [pc, #380]	@ (8009478 <UART_SetConfig+0x274>)
 80092fc:	428b      	cmp	r3, r1
 80092fe:	d076      	beq.n	80093ee <UART_SetConfig+0x1ea>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009300:	69e0      	ldr	r0, [r4, #28]
 8009302:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8009306:	f000 80c9 	beq.w	800949c <UART_SetConfig+0x298>
    switch (clocksource)
 800930a:	2a08      	cmp	r2, #8
 800930c:	f200 8134 	bhi.w	8009578 <UART_SetConfig+0x374>
 8009310:	e8df f012 	tbh	[pc, r2, lsl #1]
 8009314:	011900f7 	.word	0x011900f7
 8009318:	013200f5 	.word	0x013200f5
 800931c:	0132011c 	.word	0x0132011c
 8009320:	01320132 	.word	0x01320132
 8009324:	011f      	.short	0x011f
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009326:	2a30      	cmp	r2, #48	@ 0x30
 8009328:	d147      	bne.n	80093ba <UART_SetConfig+0x1b6>
 800932a:	2208      	movs	r2, #8
 800932c:	e7e5      	b.n	80092fa <UART_SetConfig+0xf6>
 800932e:	f502 32e2 	add.w	r2, r2, #115712	@ 0x1c400
 8009332:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8009336:	f002 02c0 	and.w	r2, r2, #192	@ 0xc0
 800933a:	2a80      	cmp	r2, #128	@ 0x80
 800933c:	d03f      	beq.n	80093be <UART_SetConfig+0x1ba>
 800933e:	d804      	bhi.n	800934a <UART_SetConfig+0x146>
 8009340:	b3fa      	cbz	r2, 80093c2 <UART_SetConfig+0x1be>
 8009342:	2a40      	cmp	r2, #64	@ 0x40
 8009344:	d13f      	bne.n	80093c6 <UART_SetConfig+0x1c2>
 8009346:	2204      	movs	r2, #4
 8009348:	e7d7      	b.n	80092fa <UART_SetConfig+0xf6>
 800934a:	2ac0      	cmp	r2, #192	@ 0xc0
 800934c:	d13d      	bne.n	80093ca <UART_SetConfig+0x1c6>
 800934e:	2208      	movs	r2, #8
 8009350:	e7d3      	b.n	80092fa <UART_SetConfig+0xf6>
 8009352:	f502 32e0 	add.w	r2, r2, #114688	@ 0x1c000
 8009356:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 800935a:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 800935e:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 8009362:	d034      	beq.n	80093ce <UART_SetConfig+0x1ca>
 8009364:	d805      	bhi.n	8009372 <UART_SetConfig+0x16e>
 8009366:	b3a2      	cbz	r2, 80093d2 <UART_SetConfig+0x1ce>
 8009368:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 800936c:	d133      	bne.n	80093d6 <UART_SetConfig+0x1d2>
 800936e:	2204      	movs	r2, #4
 8009370:	e7c3      	b.n	80092fa <UART_SetConfig+0xf6>
 8009372:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 8009376:	d130      	bne.n	80093da <UART_SetConfig+0x1d6>
 8009378:	2208      	movs	r2, #8
 800937a:	e7be      	b.n	80092fa <UART_SetConfig+0xf6>
 800937c:	f502 32c8 	add.w	r2, r2, #102400	@ 0x19000
 8009380:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8009384:	f402 6240 	and.w	r2, r2, #3072	@ 0xc00
 8009388:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
 800938c:	d027      	beq.n	80093de <UART_SetConfig+0x1da>
 800938e:	d805      	bhi.n	800939c <UART_SetConfig+0x198>
 8009390:	b33a      	cbz	r2, 80093e2 <UART_SetConfig+0x1de>
 8009392:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8009396:	d126      	bne.n	80093e6 <UART_SetConfig+0x1e2>
 8009398:	2204      	movs	r2, #4
 800939a:	e7ae      	b.n	80092fa <UART_SetConfig+0xf6>
 800939c:	f5b2 6f40 	cmp.w	r2, #3072	@ 0xc00
 80093a0:	d123      	bne.n	80093ea <UART_SetConfig+0x1e6>
 80093a2:	2208      	movs	r2, #8
 80093a4:	e7a9      	b.n	80092fa <UART_SetConfig+0xf6>
 80093a6:	2202      	movs	r2, #2
 80093a8:	e7a7      	b.n	80092fa <UART_SetConfig+0xf6>
 80093aa:	2202      	movs	r2, #2
 80093ac:	e7a5      	b.n	80092fa <UART_SetConfig+0xf6>
 80093ae:	2202      	movs	r2, #2
 80093b0:	e7a3      	b.n	80092fa <UART_SetConfig+0xf6>
 80093b2:	2200      	movs	r2, #0
 80093b4:	e7a1      	b.n	80092fa <UART_SetConfig+0xf6>
 80093b6:	2210      	movs	r2, #16
 80093b8:	e79f      	b.n	80092fa <UART_SetConfig+0xf6>
 80093ba:	2210      	movs	r2, #16
 80093bc:	e79d      	b.n	80092fa <UART_SetConfig+0xf6>
 80093be:	2202      	movs	r2, #2
 80093c0:	e79b      	b.n	80092fa <UART_SetConfig+0xf6>
 80093c2:	2200      	movs	r2, #0
 80093c4:	e799      	b.n	80092fa <UART_SetConfig+0xf6>
 80093c6:	2210      	movs	r2, #16
 80093c8:	e797      	b.n	80092fa <UART_SetConfig+0xf6>
 80093ca:	2210      	movs	r2, #16
 80093cc:	e795      	b.n	80092fa <UART_SetConfig+0xf6>
 80093ce:	2202      	movs	r2, #2
 80093d0:	e793      	b.n	80092fa <UART_SetConfig+0xf6>
 80093d2:	2200      	movs	r2, #0
 80093d4:	e791      	b.n	80092fa <UART_SetConfig+0xf6>
 80093d6:	2210      	movs	r2, #16
 80093d8:	e78f      	b.n	80092fa <UART_SetConfig+0xf6>
 80093da:	2210      	movs	r2, #16
 80093dc:	e78d      	b.n	80092fa <UART_SetConfig+0xf6>
 80093de:	2202      	movs	r2, #2
 80093e0:	e78b      	b.n	80092fa <UART_SetConfig+0xf6>
 80093e2:	2200      	movs	r2, #0
 80093e4:	e789      	b.n	80092fa <UART_SetConfig+0xf6>
 80093e6:	2210      	movs	r2, #16
 80093e8:	e787      	b.n	80092fa <UART_SetConfig+0xf6>
 80093ea:	2210      	movs	r2, #16
 80093ec:	e785      	b.n	80092fa <UART_SetConfig+0xf6>
    switch (clocksource)
 80093ee:	2a08      	cmp	r2, #8
 80093f0:	f200 80b2 	bhi.w	8009558 <UART_SetConfig+0x354>
 80093f4:	e8df f002 	tbb	[pc, r2]
 80093f8:	b03bb008 	.word	0xb03bb008
 80093fc:	b0b0b038 	.word	0xb0b0b038
 8009400:	05          	.byte	0x05
 8009401:	00          	.byte	0x00
 8009402:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8009406:	e004      	b.n	8009412 <UART_SetConfig+0x20e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8009408:	f7fe fae0 	bl	80079cc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800940c:	2800      	cmp	r0, #0
 800940e:	f000 80a5 	beq.w	800955c <UART_SetConfig+0x358>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009412:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8009414:	4b1e      	ldr	r3, [pc, #120]	@ (8009490 <UART_SetConfig+0x28c>)
 8009416:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800941a:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800941e:	6865      	ldr	r5, [r4, #4]
 8009420:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8009424:	4299      	cmp	r1, r3
 8009426:	f200 809b 	bhi.w	8009560 <UART_SetConfig+0x35c>
 800942a:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800942e:	f200 8099 	bhi.w	8009564 <UART_SetConfig+0x360>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009432:	2600      	movs	r6, #0
 8009434:	4633      	mov	r3, r6
 8009436:	4631      	mov	r1, r6
 8009438:	f7f7 fc5e 	bl	8000cf8 <__aeabi_uldivmod>
 800943c:	0209      	lsls	r1, r1, #8
 800943e:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8009442:	0200      	lsls	r0, r0, #8
 8009444:	086b      	lsrs	r3, r5, #1
 8009446:	18c0      	adds	r0, r0, r3
 8009448:	462a      	mov	r2, r5
 800944a:	4633      	mov	r3, r6
 800944c:	f141 0100 	adc.w	r1, r1, #0
 8009450:	f7f7 fc52 	bl	8000cf8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009454:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 8009458:	4b0e      	ldr	r3, [pc, #56]	@ (8009494 <UART_SetConfig+0x290>)
 800945a:	429a      	cmp	r2, r3
 800945c:	f200 8084 	bhi.w	8009568 <UART_SetConfig+0x364>
          huart->Instance->BRR = usartdiv;
 8009460:	6823      	ldr	r3, [r4, #0]
 8009462:	60d8      	str	r0, [r3, #12]
 8009464:	4630      	mov	r0, r6
 8009466:	e065      	b.n	8009534 <UART_SetConfig+0x330>
        pclk = HAL_RCC_GetSysClockFreq();
 8009468:	f7fe f96a 	bl	8007740 <HAL_RCC_GetSysClockFreq>
        break;
 800946c:	e7ce      	b.n	800940c <UART_SetConfig+0x208>
        pclk = (uint32_t) HSI_VALUE;
 800946e:	480a      	ldr	r0, [pc, #40]	@ (8009498 <UART_SetConfig+0x294>)
 8009470:	e7cf      	b.n	8009412 <UART_SetConfig+0x20e>
 8009472:	bf00      	nop
 8009474:	cfff69f3 	.word	0xcfff69f3
 8009478:	40008000 	.word	0x40008000
 800947c:	40013800 	.word	0x40013800
 8009480:	40004400 	.word	0x40004400
 8009484:	40004800 	.word	0x40004800
 8009488:	40004c00 	.word	0x40004c00
 800948c:	40005000 	.word	0x40005000
 8009490:	08016004 	.word	0x08016004
 8009494:	000ffcff 	.word	0x000ffcff
 8009498:	00f42400 	.word	0x00f42400
    switch (clocksource)
 800949c:	2a08      	cmp	r2, #8
 800949e:	d865      	bhi.n	800956c <UART_SetConfig+0x368>
 80094a0:	e8df f002 	tbb	[pc, r2]
 80094a4:	64052707 	.word	0x64052707
 80094a8:	6464642a 	.word	0x6464642a
 80094ac:	0b          	.byte	0x0b
 80094ad:	00          	.byte	0x00
 80094ae:	4835      	ldr	r0, [pc, #212]	@ (8009584 <UART_SetConfig+0x380>)
 80094b0:	e003      	b.n	80094ba <UART_SetConfig+0x2b6>
        pclk = HAL_RCC_GetPCLK1Freq();
 80094b2:	f7fe fa8b 	bl	80079cc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80094b6:	2800      	cmp	r0, #0
 80094b8:	d05a      	beq.n	8009570 <UART_SetConfig+0x36c>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80094ba:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80094bc:	4b32      	ldr	r3, [pc, #200]	@ (8009588 <UART_SetConfig+0x384>)
 80094be:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80094c2:	fbb0 f0f3 	udiv	r0, r0, r3
 80094c6:	6862      	ldr	r2, [r4, #4]
 80094c8:	0853      	lsrs	r3, r2, #1
 80094ca:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80094ce:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80094d2:	f1a3 0110 	sub.w	r1, r3, #16
 80094d6:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 80094da:	4291      	cmp	r1, r2
 80094dc:	d84a      	bhi.n	8009574 <UART_SetConfig+0x370>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80094de:	b29a      	uxth	r2, r3
 80094e0:	f022 020f 	bic.w	r2, r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80094e4:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80094e8:	4313      	orrs	r3, r2
        huart->Instance->BRR = brrtemp;
 80094ea:	6822      	ldr	r2, [r4, #0]
 80094ec:	60d3      	str	r3, [r2, #12]
 80094ee:	2000      	movs	r0, #0
 80094f0:	e020      	b.n	8009534 <UART_SetConfig+0x330>
        pclk = HAL_RCC_GetPCLK2Freq();
 80094f2:	f7fe fa7d 	bl	80079f0 <HAL_RCC_GetPCLK2Freq>
        break;
 80094f6:	e7de      	b.n	80094b6 <UART_SetConfig+0x2b2>
        pclk = HAL_RCC_GetSysClockFreq();
 80094f8:	f7fe f922 	bl	8007740 <HAL_RCC_GetSysClockFreq>
        break;
 80094fc:	e7db      	b.n	80094b6 <UART_SetConfig+0x2b2>
    switch (clocksource)
 80094fe:	4821      	ldr	r0, [pc, #132]	@ (8009584 <UART_SetConfig+0x380>)
 8009500:	e003      	b.n	800950a <UART_SetConfig+0x306>
        pclk = HAL_RCC_GetPCLK1Freq();
 8009502:	f7fe fa63 	bl	80079cc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8009506:	2800      	cmp	r0, #0
 8009508:	d038      	beq.n	800957c <UART_SetConfig+0x378>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800950a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800950c:	4b1e      	ldr	r3, [pc, #120]	@ (8009588 <UART_SetConfig+0x384>)
 800950e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8009512:	fbb0 f0f3 	udiv	r0, r0, r3
 8009516:	6863      	ldr	r3, [r4, #4]
 8009518:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800951c:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009520:	f1a0 0210 	sub.w	r2, r0, #16
 8009524:	f64f 73ef 	movw	r3, #65519	@ 0xffef
 8009528:	429a      	cmp	r2, r3
 800952a:	d829      	bhi.n	8009580 <UART_SetConfig+0x37c>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800952c:	6823      	ldr	r3, [r4, #0]
 800952e:	b280      	uxth	r0, r0
 8009530:	60d8      	str	r0, [r3, #12]
 8009532:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 8009534:	2301      	movs	r3, #1
 8009536:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800953a:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
 800953e:	2300      	movs	r3, #0
 8009540:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->TxISR = NULL;
 8009542:	67a3      	str	r3, [r4, #120]	@ 0x78
}
 8009544:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8009546:	f7fe fa53 	bl	80079f0 <HAL_RCC_GetPCLK2Freq>
        break;
 800954a:	e7dc      	b.n	8009506 <UART_SetConfig+0x302>
        pclk = HAL_RCC_GetSysClockFreq();
 800954c:	f7fe f8f8 	bl	8007740 <HAL_RCC_GetSysClockFreq>
        break;
 8009550:	e7d9      	b.n	8009506 <UART_SetConfig+0x302>
        pclk = (uint32_t) LSE_VALUE;
 8009552:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8009556:	e7d8      	b.n	800950a <UART_SetConfig+0x306>
    switch (clocksource)
 8009558:	2001      	movs	r0, #1
 800955a:	e7eb      	b.n	8009534 <UART_SetConfig+0x330>
 800955c:	2000      	movs	r0, #0
 800955e:	e7e9      	b.n	8009534 <UART_SetConfig+0x330>
        ret = HAL_ERROR;
 8009560:	2001      	movs	r0, #1
 8009562:	e7e7      	b.n	8009534 <UART_SetConfig+0x330>
 8009564:	2001      	movs	r0, #1
 8009566:	e7e5      	b.n	8009534 <UART_SetConfig+0x330>
          ret = HAL_ERROR;
 8009568:	2001      	movs	r0, #1
 800956a:	e7e3      	b.n	8009534 <UART_SetConfig+0x330>
    switch (clocksource)
 800956c:	2001      	movs	r0, #1
 800956e:	e7e1      	b.n	8009534 <UART_SetConfig+0x330>
 8009570:	2000      	movs	r0, #0
 8009572:	e7df      	b.n	8009534 <UART_SetConfig+0x330>
        ret = HAL_ERROR;
 8009574:	2001      	movs	r0, #1
 8009576:	e7dd      	b.n	8009534 <UART_SetConfig+0x330>
    switch (clocksource)
 8009578:	2001      	movs	r0, #1
 800957a:	e7db      	b.n	8009534 <UART_SetConfig+0x330>
 800957c:	2000      	movs	r0, #0
 800957e:	e7d9      	b.n	8009534 <UART_SetConfig+0x330>
        ret = HAL_ERROR;
 8009580:	2001      	movs	r0, #1
 8009582:	e7d7      	b.n	8009534 <UART_SetConfig+0x330>
 8009584:	00f42400 	.word	0x00f42400
 8009588:	08016004 	.word	0x08016004

0800958c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800958c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800958e:	f013 0f08 	tst.w	r3, #8
 8009592:	d006      	beq.n	80095a2 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009594:	6802      	ldr	r2, [r0, #0]
 8009596:	6853      	ldr	r3, [r2, #4]
 8009598:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800959c:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 800959e:	430b      	orrs	r3, r1
 80095a0:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80095a2:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80095a4:	f013 0f01 	tst.w	r3, #1
 80095a8:	d006      	beq.n	80095b8 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80095aa:	6802      	ldr	r2, [r0, #0]
 80095ac:	6853      	ldr	r3, [r2, #4]
 80095ae:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80095b2:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80095b4:	430b      	orrs	r3, r1
 80095b6:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80095b8:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80095ba:	f013 0f02 	tst.w	r3, #2
 80095be:	d006      	beq.n	80095ce <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80095c0:	6802      	ldr	r2, [r0, #0]
 80095c2:	6853      	ldr	r3, [r2, #4]
 80095c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80095c8:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 80095ca:	430b      	orrs	r3, r1
 80095cc:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80095ce:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80095d0:	f013 0f04 	tst.w	r3, #4
 80095d4:	d006      	beq.n	80095e4 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80095d6:	6802      	ldr	r2, [r0, #0]
 80095d8:	6853      	ldr	r3, [r2, #4]
 80095da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80095de:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 80095e0:	430b      	orrs	r3, r1
 80095e2:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80095e4:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80095e6:	f013 0f10 	tst.w	r3, #16
 80095ea:	d006      	beq.n	80095fa <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80095ec:	6802      	ldr	r2, [r0, #0]
 80095ee:	6893      	ldr	r3, [r2, #8]
 80095f0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80095f4:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 80095f6:	430b      	orrs	r3, r1
 80095f8:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80095fa:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80095fc:	f013 0f20 	tst.w	r3, #32
 8009600:	d006      	beq.n	8009610 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009602:	6802      	ldr	r2, [r0, #0]
 8009604:	6893      	ldr	r3, [r2, #8]
 8009606:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800960a:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 800960c:	430b      	orrs	r3, r1
 800960e:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009610:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8009612:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8009616:	d00a      	beq.n	800962e <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009618:	6802      	ldr	r2, [r0, #0]
 800961a:	6853      	ldr	r3, [r2, #4]
 800961c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009620:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 8009622:	430b      	orrs	r3, r1
 8009624:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009626:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8009628:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800962c:	d00b      	beq.n	8009646 <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800962e:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8009630:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009634:	d006      	beq.n	8009644 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009636:	6802      	ldr	r2, [r0, #0]
 8009638:	6853      	ldr	r3, [r2, #4]
 800963a:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 800963e:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8009640:	430b      	orrs	r3, r1
 8009642:	6053      	str	r3, [r2, #4]
}
 8009644:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009646:	6802      	ldr	r2, [r0, #0]
 8009648:	6853      	ldr	r3, [r2, #4]
 800964a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800964e:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8009650:	430b      	orrs	r3, r1
 8009652:	6053      	str	r3, [r2, #4]
 8009654:	e7eb      	b.n	800962e <UART_AdvFeatureConfig+0xa2>

08009656 <UART_WaitOnFlagUntilTimeout>:
{
 8009656:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800965a:	4605      	mov	r5, r0
 800965c:	460e      	mov	r6, r1
 800965e:	4617      	mov	r7, r2
 8009660:	4699      	mov	r9, r3
 8009662:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009666:	682b      	ldr	r3, [r5, #0]
 8009668:	69dc      	ldr	r4, [r3, #28]
 800966a:	ea36 0404 	bics.w	r4, r6, r4
 800966e:	bf0c      	ite	eq
 8009670:	2401      	moveq	r4, #1
 8009672:	2400      	movne	r4, #0
 8009674:	42bc      	cmp	r4, r7
 8009676:	d136      	bne.n	80096e6 <UART_WaitOnFlagUntilTimeout+0x90>
    if (Timeout != HAL_MAX_DELAY)
 8009678:	f1b8 3fff 	cmp.w	r8, #4294967295
 800967c:	d0f3      	beq.n	8009666 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800967e:	f7fb fb0d 	bl	8004c9c <HAL_GetTick>
 8009682:	eba0 0009 	sub.w	r0, r0, r9
 8009686:	4540      	cmp	r0, r8
 8009688:	d830      	bhi.n	80096ec <UART_WaitOnFlagUntilTimeout+0x96>
 800968a:	f1b8 0f00 	cmp.w	r8, #0
 800968e:	d02f      	beq.n	80096f0 <UART_WaitOnFlagUntilTimeout+0x9a>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009690:	682b      	ldr	r3, [r5, #0]
 8009692:	681a      	ldr	r2, [r3, #0]
 8009694:	f012 0f04 	tst.w	r2, #4
 8009698:	d0e5      	beq.n	8009666 <UART_WaitOnFlagUntilTimeout+0x10>
 800969a:	2e80      	cmp	r6, #128	@ 0x80
 800969c:	d0e3      	beq.n	8009666 <UART_WaitOnFlagUntilTimeout+0x10>
 800969e:	2e40      	cmp	r6, #64	@ 0x40
 80096a0:	d0e1      	beq.n	8009666 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80096a2:	69da      	ldr	r2, [r3, #28]
 80096a4:	f012 0f08 	tst.w	r2, #8
 80096a8:	d111      	bne.n	80096ce <UART_WaitOnFlagUntilTimeout+0x78>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80096aa:	69da      	ldr	r2, [r3, #28]
 80096ac:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 80096b0:	d0d9      	beq.n	8009666 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80096b2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80096b6:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 80096b8:	4628      	mov	r0, r5
 80096ba:	f7ff fa91 	bl	8008be0 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80096be:	2320      	movs	r3, #32
 80096c0:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
          __HAL_UNLOCK(huart);
 80096c4:	2300      	movs	r3, #0
 80096c6:	f885 3084 	strb.w	r3, [r5, #132]	@ 0x84
          return HAL_TIMEOUT;
 80096ca:	2003      	movs	r0, #3
 80096cc:	e00c      	b.n	80096e8 <UART_WaitOnFlagUntilTimeout+0x92>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80096ce:	2408      	movs	r4, #8
 80096d0:	621c      	str	r4, [r3, #32]
          UART_EndRxTransfer(huart);
 80096d2:	4628      	mov	r0, r5
 80096d4:	f7ff fa84 	bl	8008be0 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80096d8:	f8c5 4090 	str.w	r4, [r5, #144]	@ 0x90
          __HAL_UNLOCK(huart);
 80096dc:	2300      	movs	r3, #0
 80096de:	f885 3084 	strb.w	r3, [r5, #132]	@ 0x84
          return HAL_ERROR;
 80096e2:	2001      	movs	r0, #1
 80096e4:	e000      	b.n	80096e8 <UART_WaitOnFlagUntilTimeout+0x92>
  return HAL_OK;
 80096e6:	2000      	movs	r0, #0
}
 80096e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 80096ec:	2003      	movs	r0, #3
 80096ee:	e7fb      	b.n	80096e8 <UART_WaitOnFlagUntilTimeout+0x92>
 80096f0:	2003      	movs	r0, #3
 80096f2:	e7f9      	b.n	80096e8 <UART_WaitOnFlagUntilTimeout+0x92>

080096f4 <HAL_UART_Transmit>:
{
 80096f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096f8:	b082      	sub	sp, #8
 80096fa:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80096fc:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 8009700:	2b20      	cmp	r3, #32
 8009702:	d15a      	bne.n	80097ba <HAL_UART_Transmit+0xc6>
 8009704:	4604      	mov	r4, r0
 8009706:	460d      	mov	r5, r1
 8009708:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 800970a:	2900      	cmp	r1, #0
 800970c:	d059      	beq.n	80097c2 <HAL_UART_Transmit+0xce>
 800970e:	b90a      	cbnz	r2, 8009714 <HAL_UART_Transmit+0x20>
      return  HAL_ERROR;
 8009710:	2001      	movs	r0, #1
 8009712:	e053      	b.n	80097bc <HAL_UART_Transmit+0xc8>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009714:	2300      	movs	r3, #0
 8009716:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800971a:	2321      	movs	r3, #33	@ 0x21
 800971c:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
    tickstart = HAL_GetTick();
 8009720:	f7fb fabc 	bl	8004c9c <HAL_GetTick>
 8009724:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 8009726:	f8a4 8054 	strh.w	r8, [r4, #84]	@ 0x54
    huart->TxXferCount = Size;
 800972a:	f8a4 8056 	strh.w	r8, [r4, #86]	@ 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800972e:	68a3      	ldr	r3, [r4, #8]
 8009730:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009734:	d002      	beq.n	800973c <HAL_UART_Transmit+0x48>
      pdata16bits = NULL;
 8009736:	f04f 0800 	mov.w	r8, #0
 800973a:	e016      	b.n	800976a <HAL_UART_Transmit+0x76>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800973c:	6923      	ldr	r3, [r4, #16]
 800973e:	b343      	cbz	r3, 8009792 <HAL_UART_Transmit+0x9e>
      pdata16bits = NULL;
 8009740:	f04f 0800 	mov.w	r8, #0
 8009744:	e011      	b.n	800976a <HAL_UART_Transmit+0x76>
        huart->gState = HAL_UART_STATE_READY;
 8009746:	2320      	movs	r3, #32
 8009748:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
        return HAL_TIMEOUT;
 800974c:	2003      	movs	r0, #3
 800974e:	e035      	b.n	80097bc <HAL_UART_Transmit+0xc8>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009750:	f838 3b02 	ldrh.w	r3, [r8], #2
 8009754:	6822      	ldr	r2, [r4, #0]
 8009756:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800975a:	6293      	str	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 800975c:	f8b4 2056 	ldrh.w	r2, [r4, #86]	@ 0x56
 8009760:	b292      	uxth	r2, r2
 8009762:	3a01      	subs	r2, #1
 8009764:	b292      	uxth	r2, r2
 8009766:	f8a4 2056 	strh.w	r2, [r4, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800976a:	f8b4 3056 	ldrh.w	r3, [r4, #86]	@ 0x56
 800976e:	b29b      	uxth	r3, r3
 8009770:	b193      	cbz	r3, 8009798 <HAL_UART_Transmit+0xa4>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009772:	9600      	str	r6, [sp, #0]
 8009774:	463b      	mov	r3, r7
 8009776:	2200      	movs	r2, #0
 8009778:	2180      	movs	r1, #128	@ 0x80
 800977a:	4620      	mov	r0, r4
 800977c:	f7ff ff6b 	bl	8009656 <UART_WaitOnFlagUntilTimeout>
 8009780:	2800      	cmp	r0, #0
 8009782:	d1e0      	bne.n	8009746 <HAL_UART_Transmit+0x52>
      if (pdata8bits == NULL)
 8009784:	2d00      	cmp	r5, #0
 8009786:	d0e3      	beq.n	8009750 <HAL_UART_Transmit+0x5c>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009788:	f815 2b01 	ldrb.w	r2, [r5], #1
 800978c:	6823      	ldr	r3, [r4, #0]
 800978e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009790:	e7e4      	b.n	800975c <HAL_UART_Transmit+0x68>
      pdata16bits = (const uint16_t *) pData;
 8009792:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8009794:	2500      	movs	r5, #0
 8009796:	e7e8      	b.n	800976a <HAL_UART_Transmit+0x76>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009798:	9600      	str	r6, [sp, #0]
 800979a:	463b      	mov	r3, r7
 800979c:	2200      	movs	r2, #0
 800979e:	2140      	movs	r1, #64	@ 0x40
 80097a0:	4620      	mov	r0, r4
 80097a2:	f7ff ff58 	bl	8009656 <UART_WaitOnFlagUntilTimeout>
 80097a6:	b918      	cbnz	r0, 80097b0 <HAL_UART_Transmit+0xbc>
    huart->gState = HAL_UART_STATE_READY;
 80097a8:	2320      	movs	r3, #32
 80097aa:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
    return HAL_OK;
 80097ae:	e005      	b.n	80097bc <HAL_UART_Transmit+0xc8>
      huart->gState = HAL_UART_STATE_READY;
 80097b0:	2320      	movs	r3, #32
 80097b2:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      return HAL_TIMEOUT;
 80097b6:	2003      	movs	r0, #3
 80097b8:	e000      	b.n	80097bc <HAL_UART_Transmit+0xc8>
    return HAL_BUSY;
 80097ba:	2002      	movs	r0, #2
}
 80097bc:	b002      	add	sp, #8
 80097be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 80097c2:	2001      	movs	r0, #1
 80097c4:	e7fa      	b.n	80097bc <HAL_UART_Transmit+0xc8>

080097c6 <UART_CheckIdleState>:
{
 80097c6:	b530      	push	{r4, r5, lr}
 80097c8:	b083      	sub	sp, #12
 80097ca:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097cc:	2300      	movs	r3, #0
 80097ce:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
  tickstart = HAL_GetTick();
 80097d2:	f7fb fa63 	bl	8004c9c <HAL_GetTick>
 80097d6:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80097d8:	6822      	ldr	r2, [r4, #0]
 80097da:	6812      	ldr	r2, [r2, #0]
 80097dc:	f012 0f08 	tst.w	r2, #8
 80097e0:	d110      	bne.n	8009804 <UART_CheckIdleState+0x3e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80097e2:	6823      	ldr	r3, [r4, #0]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	f013 0f04 	tst.w	r3, #4
 80097ea:	d128      	bne.n	800983e <UART_CheckIdleState+0x78>
  huart->gState = HAL_UART_STATE_READY;
 80097ec:	2320      	movs	r3, #32
 80097ee:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80097f2:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097f6:	2000      	movs	r0, #0
 80097f8:	66e0      	str	r0, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80097fa:	6720      	str	r0, [r4, #112]	@ 0x70
  __HAL_UNLOCK(huart);
 80097fc:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 8009800:	b003      	add	sp, #12
 8009802:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009804:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009808:	9300      	str	r3, [sp, #0]
 800980a:	4603      	mov	r3, r0
 800980c:	2200      	movs	r2, #0
 800980e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009812:	4620      	mov	r0, r4
 8009814:	f7ff ff1f 	bl	8009656 <UART_WaitOnFlagUntilTimeout>
 8009818:	2800      	cmp	r0, #0
 800981a:	d0e2      	beq.n	80097e2 <UART_CheckIdleState+0x1c>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800981c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800981e:	e852 3f00 	ldrex	r3, [r2]
 8009822:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009826:	e842 3100 	strex	r1, r3, [r2]
 800982a:	2900      	cmp	r1, #0
 800982c:	d1f6      	bne.n	800981c <UART_CheckIdleState+0x56>
      huart->gState = HAL_UART_STATE_READY;
 800982e:	2320      	movs	r3, #32
 8009830:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      __HAL_UNLOCK(huart);
 8009834:	2300      	movs	r3, #0
 8009836:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
      return HAL_TIMEOUT;
 800983a:	2003      	movs	r0, #3
 800983c:	e7e0      	b.n	8009800 <UART_CheckIdleState+0x3a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800983e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009842:	9300      	str	r3, [sp, #0]
 8009844:	462b      	mov	r3, r5
 8009846:	2200      	movs	r2, #0
 8009848:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800984c:	4620      	mov	r0, r4
 800984e:	f7ff ff02 	bl	8009656 <UART_WaitOnFlagUntilTimeout>
 8009852:	2800      	cmp	r0, #0
 8009854:	d0ca      	beq.n	80097ec <UART_CheckIdleState+0x26>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009856:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009858:	e852 3f00 	ldrex	r3, [r2]
 800985c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009860:	e842 3100 	strex	r1, r3, [r2]
 8009864:	2900      	cmp	r1, #0
 8009866:	d1f6      	bne.n	8009856 <UART_CheckIdleState+0x90>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009868:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800986a:	f102 0308 	add.w	r3, r2, #8
 800986e:	e853 3f00 	ldrex	r3, [r3]
 8009872:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009876:	3208      	adds	r2, #8
 8009878:	e842 3100 	strex	r1, r3, [r2]
 800987c:	2900      	cmp	r1, #0
 800987e:	d1f3      	bne.n	8009868 <UART_CheckIdleState+0xa2>
      huart->RxState = HAL_UART_STATE_READY;
 8009880:	2320      	movs	r3, #32
 8009882:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
      __HAL_UNLOCK(huart);
 8009886:	2300      	movs	r3, #0
 8009888:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
      return HAL_TIMEOUT;
 800988c:	2003      	movs	r0, #3
 800988e:	e7b7      	b.n	8009800 <UART_CheckIdleState+0x3a>

08009890 <HAL_UART_Init>:
  if (huart == NULL)
 8009890:	b378      	cbz	r0, 80098f2 <HAL_UART_Init+0x62>
{
 8009892:	b510      	push	{r4, lr}
 8009894:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8009896:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 800989a:	b30b      	cbz	r3, 80098e0 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 800989c:	2324      	movs	r3, #36	@ 0x24
 800989e:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 80098a2:	6822      	ldr	r2, [r4, #0]
 80098a4:	6813      	ldr	r3, [r2, #0]
 80098a6:	f023 0301 	bic.w	r3, r3, #1
 80098aa:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80098ac:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80098ae:	b9e3      	cbnz	r3, 80098ea <HAL_UART_Init+0x5a>
  if (UART_SetConfig(huart) == HAL_ERROR)
 80098b0:	4620      	mov	r0, r4
 80098b2:	f7ff fca7 	bl	8009204 <UART_SetConfig>
 80098b6:	2801      	cmp	r0, #1
 80098b8:	d011      	beq.n	80098de <HAL_UART_Init+0x4e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80098ba:	6822      	ldr	r2, [r4, #0]
 80098bc:	6853      	ldr	r3, [r2, #4]
 80098be:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 80098c2:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80098c4:	6822      	ldr	r2, [r4, #0]
 80098c6:	6893      	ldr	r3, [r2, #8]
 80098c8:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 80098cc:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 80098ce:	6822      	ldr	r2, [r4, #0]
 80098d0:	6813      	ldr	r3, [r2, #0]
 80098d2:	f043 0301 	orr.w	r3, r3, #1
 80098d6:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 80098d8:	4620      	mov	r0, r4
 80098da:	f7ff ff74 	bl	80097c6 <UART_CheckIdleState>
}
 80098de:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80098e0:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
    HAL_UART_MspInit(huart);
 80098e4:	f7fb f848 	bl	8004978 <HAL_UART_MspInit>
 80098e8:	e7d8      	b.n	800989c <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 80098ea:	4620      	mov	r0, r4
 80098ec:	f7ff fe4e 	bl	800958c <UART_AdvFeatureConfig>
 80098f0:	e7de      	b.n	80098b0 <HAL_UART_Init+0x20>
    return HAL_ERROR;
 80098f2:	2001      	movs	r0, #1
}
 80098f4:	4770      	bx	lr
	...

080098f8 <UART_Start_Receive_DMA>:
{
 80098f8:	b510      	push	{r4, lr}
 80098fa:	4604      	mov	r4, r0
 80098fc:	4613      	mov	r3, r2
  huart->pRxBuffPtr = pData;
 80098fe:	6581      	str	r1, [r0, #88]	@ 0x58
  huart->RxXferSize = Size;
 8009900:	f8a0 205c 	strh.w	r2, [r0, #92]	@ 0x5c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009904:	2200      	movs	r2, #0
 8009906:	f8c0 2090 	str.w	r2, [r0, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800990a:	2222      	movs	r2, #34	@ 0x22
 800990c:	f8c0 208c 	str.w	r2, [r0, #140]	@ 0x8c
  if (huart->hdmarx != NULL)
 8009910:	f8d0 2080 	ldr.w	r2, [r0, #128]	@ 0x80
 8009914:	b1aa      	cbz	r2, 8009942 <UART_Start_Receive_DMA+0x4a>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009916:	4921      	ldr	r1, [pc, #132]	@ (800999c <UART_Start_Receive_DMA+0xa4>)
 8009918:	62d1      	str	r1, [r2, #44]	@ 0x2c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800991a:	f8d0 2080 	ldr.w	r2, [r0, #128]	@ 0x80
 800991e:	4920      	ldr	r1, [pc, #128]	@ (80099a0 <UART_Start_Receive_DMA+0xa8>)
 8009920:	6311      	str	r1, [r2, #48]	@ 0x30
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009922:	f8d0 2080 	ldr.w	r2, [r0, #128]	@ 0x80
 8009926:	491f      	ldr	r1, [pc, #124]	@ (80099a4 <UART_Start_Receive_DMA+0xac>)
 8009928:	6351      	str	r1, [r2, #52]	@ 0x34
    huart->hdmarx->XferAbortCallback = NULL;
 800992a:	f8d0 2080 	ldr.w	r2, [r0, #128]	@ 0x80
 800992e:	2100      	movs	r1, #0
 8009930:	6391      	str	r1, [r2, #56]	@ 0x38
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009932:	6801      	ldr	r1, [r0, #0]
 8009934:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8009936:	3124      	adds	r1, #36	@ 0x24
 8009938:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 800993c:	f7fc fd66 	bl	800640c <HAL_DMA_Start_IT>
 8009940:	bb20      	cbnz	r0, 800998c <UART_Start_Receive_DMA+0x94>
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009942:	6923      	ldr	r3, [r4, #16]
 8009944:	b143      	cbz	r3, 8009958 <UART_Start_Receive_DMA+0x60>
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009946:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009948:	e852 3f00 	ldrex	r3, [r2]
 800994c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009950:	e842 3100 	strex	r1, r3, [r2]
 8009954:	2900      	cmp	r1, #0
 8009956:	d1f6      	bne.n	8009946 <UART_Start_Receive_DMA+0x4e>
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009958:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800995a:	f102 0308 	add.w	r3, r2, #8
 800995e:	e853 3f00 	ldrex	r3, [r3]
 8009962:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009966:	3208      	adds	r2, #8
 8009968:	e842 3100 	strex	r1, r3, [r2]
 800996c:	2900      	cmp	r1, #0
 800996e:	d1f3      	bne.n	8009958 <UART_Start_Receive_DMA+0x60>
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009970:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009972:	f102 0308 	add.w	r3, r2, #8
 8009976:	e853 3f00 	ldrex	r3, [r3]
 800997a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800997e:	3208      	adds	r2, #8
 8009980:	e842 3100 	strex	r1, r3, [r2]
 8009984:	2900      	cmp	r1, #0
 8009986:	d1f3      	bne.n	8009970 <UART_Start_Receive_DMA+0x78>
  return HAL_OK;
 8009988:	2000      	movs	r0, #0
}
 800998a:	bd10      	pop	{r4, pc}
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800998c:	2310      	movs	r3, #16
 800998e:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
      huart->RxState = HAL_UART_STATE_READY;
 8009992:	2320      	movs	r3, #32
 8009994:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
      return HAL_ERROR;
 8009998:	2001      	movs	r0, #1
 800999a:	e7f6      	b.n	800998a <UART_Start_Receive_DMA+0x92>
 800999c:	08009171 	.word	0x08009171
 80099a0:	08009151 	.word	0x08009151
 80099a4:	08008d9d 	.word	0x08008d9d

080099a8 <HAL_UART_Receive_DMA>:
{
 80099a8:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 80099aa:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
 80099ae:	2b20      	cmp	r3, #32
 80099b0:	d117      	bne.n	80099e2 <HAL_UART_Receive_DMA+0x3a>
    if ((pData == NULL) || (Size == 0U))
 80099b2:	b1c1      	cbz	r1, 80099e6 <HAL_UART_Receive_DMA+0x3e>
 80099b4:	b1ca      	cbz	r2, 80099ea <HAL_UART_Receive_DMA+0x42>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099b6:	2300      	movs	r3, #0
 80099b8:	66c3      	str	r3, [r0, #108]	@ 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80099ba:	6803      	ldr	r3, [r0, #0]
 80099bc:	4c0c      	ldr	r4, [pc, #48]	@ (80099f0 <HAL_UART_Receive_DMA+0x48>)
 80099be:	42a3      	cmp	r3, r4
 80099c0:	d00c      	beq.n	80099dc <HAL_UART_Receive_DMA+0x34>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80099c2:	685b      	ldr	r3, [r3, #4]
 80099c4:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 80099c8:	d008      	beq.n	80099dc <HAL_UART_Receive_DMA+0x34>
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80099ca:	6804      	ldr	r4, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099cc:	e854 3f00 	ldrex	r3, [r4]
 80099d0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099d4:	e844 3500 	strex	r5, r3, [r4]
 80099d8:	2d00      	cmp	r5, #0
 80099da:	d1f6      	bne.n	80099ca <HAL_UART_Receive_DMA+0x22>
    return (UART_Start_Receive_DMA(huart, pData, Size));
 80099dc:	f7ff ff8c 	bl	80098f8 <UART_Start_Receive_DMA>
 80099e0:	e000      	b.n	80099e4 <HAL_UART_Receive_DMA+0x3c>
    return HAL_BUSY;
 80099e2:	2002      	movs	r0, #2
}
 80099e4:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 80099e6:	2001      	movs	r0, #1
 80099e8:	e7fc      	b.n	80099e4 <HAL_UART_Receive_DMA+0x3c>
 80099ea:	2001      	movs	r0, #1
 80099ec:	e7fa      	b.n	80099e4 <HAL_UART_Receive_DMA+0x3c>
 80099ee:	bf00      	nop
 80099f0:	40008000 	.word	0x40008000

080099f4 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80099f4:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 80099f6:	b92b      	cbnz	r3, 8009a04 <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 80099f8:	2301      	movs	r3, #1
 80099fa:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80099fe:	f8a0 3068 	strh.w	r3, [r0, #104]	@ 0x68
 8009a02:	4770      	bx	lr
{
 8009a04:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009a06:	6803      	ldr	r3, [r0, #0]
 8009a08:	689a      	ldr	r2, [r3, #8]
 8009a0a:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009a0e:	6899      	ldr	r1, [r3, #8]
 8009a10:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009a12:	4d09      	ldr	r5, [pc, #36]	@ (8009a38 <UARTEx_SetNbDataToProcess+0x44>)
 8009a14:	5c6b      	ldrb	r3, [r5, r1]
 8009a16:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009a18:	4c08      	ldr	r4, [pc, #32]	@ (8009a3c <UARTEx_SetNbDataToProcess+0x48>)
 8009a1a:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009a1c:	fb93 f3f1 	sdiv	r3, r3, r1
 8009a20:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009a24:	5cab      	ldrb	r3, [r5, r2]
 8009a26:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009a28:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009a2a:	fb93 f3f2 	sdiv	r3, r3, r2
 8009a2e:	f8a0 3068 	strh.w	r3, [r0, #104]	@ 0x68
  }
}
 8009a32:	bc30      	pop	{r4, r5}
 8009a34:	4770      	bx	lr
 8009a36:	bf00      	nop
 8009a38:	08016024 	.word	0x08016024
 8009a3c:	0801601c 	.word	0x0801601c

08009a40 <HAL_RS485Ex_Init>:
  if (huart == NULL)
 8009a40:	2800      	cmp	r0, #0
 8009a42:	d03e      	beq.n	8009ac2 <HAL_RS485Ex_Init+0x82>
{
 8009a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a46:	460f      	mov	r7, r1
 8009a48:	4616      	mov	r6, r2
 8009a4a:	461d      	mov	r5, r3
 8009a4c:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8009a4e:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 8009a52:	b36b      	cbz	r3, 8009ab0 <HAL_RS485Ex_Init+0x70>
  huart->gState = HAL_UART_STATE_BUSY;
 8009a54:	2324      	movs	r3, #36	@ 0x24
 8009a56:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 8009a5a:	6822      	ldr	r2, [r4, #0]
 8009a5c:	6813      	ldr	r3, [r2, #0]
 8009a5e:	f023 0301 	bic.w	r3, r3, #1
 8009a62:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009a64:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8009a66:	bb43      	cbnz	r3, 8009aba <HAL_RS485Ex_Init+0x7a>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009a68:	4620      	mov	r0, r4
 8009a6a:	f7ff fbcb 	bl	8009204 <UART_SetConfig>
 8009a6e:	2801      	cmp	r0, #1
 8009a70:	d01d      	beq.n	8009aae <HAL_RS485Ex_Init+0x6e>
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8009a72:	6822      	ldr	r2, [r4, #0]
 8009a74:	6893      	ldr	r3, [r2, #8]
 8009a76:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009a7a:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8009a7c:	6822      	ldr	r2, [r4, #0]
 8009a7e:	6893      	ldr	r3, [r2, #8]
 8009a80:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009a84:	433b      	orrs	r3, r7
 8009a86:	6093      	str	r3, [r2, #8]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8009a88:	042d      	lsls	r5, r5, #16
 8009a8a:	ea45 5246 	orr.w	r2, r5, r6, lsl #21
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8009a8e:	6821      	ldr	r1, [r4, #0]
 8009a90:	680b      	ldr	r3, [r1, #0]
 8009a92:	f023 737f 	bic.w	r3, r3, #66846720	@ 0x3fc0000
 8009a96:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8009a9a:	4313      	orrs	r3, r2
 8009a9c:	600b      	str	r3, [r1, #0]
  __HAL_UART_ENABLE(huart);
 8009a9e:	6822      	ldr	r2, [r4, #0]
 8009aa0:	6813      	ldr	r3, [r2, #0]
 8009aa2:	f043 0301 	orr.w	r3, r3, #1
 8009aa6:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8009aa8:	4620      	mov	r0, r4
 8009aaa:	f7ff fe8c 	bl	80097c6 <UART_CheckIdleState>
}
 8009aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    huart->Lock = HAL_UNLOCKED;
 8009ab0:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
    HAL_UART_MspInit(huart);
 8009ab4:	f7fa ff60 	bl	8004978 <HAL_UART_MspInit>
 8009ab8:	e7cc      	b.n	8009a54 <HAL_RS485Ex_Init+0x14>
    UART_AdvFeatureConfig(huart);
 8009aba:	4620      	mov	r0, r4
 8009abc:	f7ff fd66 	bl	800958c <UART_AdvFeatureConfig>
 8009ac0:	e7d2      	b.n	8009a68 <HAL_RS485Ex_Init+0x28>
    return HAL_ERROR;
 8009ac2:	2001      	movs	r0, #1
}
 8009ac4:	4770      	bx	lr

08009ac6 <HAL_UARTEx_WakeupCallback>:
}
 8009ac6:	4770      	bx	lr

08009ac8 <HAL_UARTEx_RxFifoFullCallback>:
}
 8009ac8:	4770      	bx	lr

08009aca <HAL_UARTEx_TxFifoEmptyCallback>:
}
 8009aca:	4770      	bx	lr

08009acc <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 8009acc:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8009ad0:	2b01      	cmp	r3, #1
 8009ad2:	d018      	beq.n	8009b06 <HAL_UARTEx_DisableFifoMode+0x3a>
 8009ad4:	2301      	movs	r3, #1
 8009ad6:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8009ada:	2324      	movs	r3, #36	@ 0x24
 8009adc:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009ae0:	6803      	ldr	r3, [r0, #0]
 8009ae2:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8009ae4:	6819      	ldr	r1, [r3, #0]
 8009ae6:	f021 0101 	bic.w	r1, r1, #1
 8009aea:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009aec:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009af0:	2300      	movs	r3, #0
 8009af2:	6643      	str	r3, [r0, #100]	@ 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009af4:	6801      	ldr	r1, [r0, #0]
 8009af6:	600a      	str	r2, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 8009af8:	2220      	movs	r2, #32
 8009afa:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 8009afe:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  return HAL_OK;
 8009b02:	4618      	mov	r0, r3
 8009b04:	4770      	bx	lr
  __HAL_LOCK(huart);
 8009b06:	2002      	movs	r0, #2
}
 8009b08:	4770      	bx	lr

08009b0a <HAL_UARTEx_SetTxFifoThreshold>:
{
 8009b0a:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8009b0c:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8009b10:	2b01      	cmp	r3, #1
 8009b12:	d01d      	beq.n	8009b50 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 8009b14:	4604      	mov	r4, r0
 8009b16:	2301      	movs	r3, #1
 8009b18:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8009b1c:	2324      	movs	r3, #36	@ 0x24
 8009b1e:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009b22:	6803      	ldr	r3, [r0, #0]
 8009b24:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8009b26:	681a      	ldr	r2, [r3, #0]
 8009b28:	f022 0201 	bic.w	r2, r2, #1
 8009b2c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009b2e:	6802      	ldr	r2, [r0, #0]
 8009b30:	6893      	ldr	r3, [r2, #8]
 8009b32:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 8009b36:	4319      	orrs	r1, r3
 8009b38:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8009b3a:	f7ff ff5b 	bl	80099f4 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009b3e:	6823      	ldr	r3, [r4, #0]
 8009b40:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8009b42:	2320      	movs	r3, #32
 8009b44:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 8009b48:	2000      	movs	r0, #0
 8009b4a:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 8009b4e:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8009b50:	2002      	movs	r0, #2
 8009b52:	e7fc      	b.n	8009b4e <HAL_UARTEx_SetTxFifoThreshold+0x44>

08009b54 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8009b54:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8009b56:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8009b5a:	2b01      	cmp	r3, #1
 8009b5c:	d01d      	beq.n	8009b9a <HAL_UARTEx_SetRxFifoThreshold+0x46>
 8009b5e:	4604      	mov	r4, r0
 8009b60:	2301      	movs	r3, #1
 8009b62:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8009b66:	2324      	movs	r3, #36	@ 0x24
 8009b68:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009b6c:	6803      	ldr	r3, [r0, #0]
 8009b6e:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8009b70:	681a      	ldr	r2, [r3, #0]
 8009b72:	f022 0201 	bic.w	r2, r2, #1
 8009b76:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009b78:	6802      	ldr	r2, [r0, #0]
 8009b7a:	6893      	ldr	r3, [r2, #8]
 8009b7c:	f023 6360 	bic.w	r3, r3, #234881024	@ 0xe000000
 8009b80:	4319      	orrs	r1, r3
 8009b82:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8009b84:	f7ff ff36 	bl	80099f4 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009b88:	6823      	ldr	r3, [r4, #0]
 8009b8a:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8009b8c:	2320      	movs	r3, #32
 8009b8e:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 8009b92:	2000      	movs	r0, #0
 8009b94:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 8009b98:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8009b9a:	2002      	movs	r0, #2
 8009b9c:	e7fc      	b.n	8009b98 <HAL_UARTEx_SetRxFifoThreshold+0x44>

08009b9e <sulp>:
 8009b9e:	b570      	push	{r4, r5, r6, lr}
 8009ba0:	4604      	mov	r4, r0
 8009ba2:	460d      	mov	r5, r1
 8009ba4:	ec45 4b10 	vmov	d0, r4, r5
 8009ba8:	4616      	mov	r6, r2
 8009baa:	f003 fb61 	bl	800d270 <__ulp>
 8009bae:	ec51 0b10 	vmov	r0, r1, d0
 8009bb2:	b17e      	cbz	r6, 8009bd4 <sulp+0x36>
 8009bb4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009bb8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	dd09      	ble.n	8009bd4 <sulp+0x36>
 8009bc0:	051b      	lsls	r3, r3, #20
 8009bc2:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009bc6:	2400      	movs	r4, #0
 8009bc8:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8009bcc:	4622      	mov	r2, r4
 8009bce:	462b      	mov	r3, r5
 8009bd0:	f7f6 fd4a 	bl	8000668 <__aeabi_dmul>
 8009bd4:	ec41 0b10 	vmov	d0, r0, r1
 8009bd8:	bd70      	pop	{r4, r5, r6, pc}
 8009bda:	0000      	movs	r0, r0
 8009bdc:	0000      	movs	r0, r0
	...

08009be0 <_strtod_l>:
 8009be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009be4:	b09f      	sub	sp, #124	@ 0x7c
 8009be6:	460c      	mov	r4, r1
 8009be8:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009bea:	2200      	movs	r2, #0
 8009bec:	921a      	str	r2, [sp, #104]	@ 0x68
 8009bee:	9005      	str	r0, [sp, #20]
 8009bf0:	f04f 0a00 	mov.w	sl, #0
 8009bf4:	f04f 0b00 	mov.w	fp, #0
 8009bf8:	460a      	mov	r2, r1
 8009bfa:	9219      	str	r2, [sp, #100]	@ 0x64
 8009bfc:	7811      	ldrb	r1, [r2, #0]
 8009bfe:	292b      	cmp	r1, #43	@ 0x2b
 8009c00:	d04a      	beq.n	8009c98 <_strtod_l+0xb8>
 8009c02:	d838      	bhi.n	8009c76 <_strtod_l+0x96>
 8009c04:	290d      	cmp	r1, #13
 8009c06:	d832      	bhi.n	8009c6e <_strtod_l+0x8e>
 8009c08:	2908      	cmp	r1, #8
 8009c0a:	d832      	bhi.n	8009c72 <_strtod_l+0x92>
 8009c0c:	2900      	cmp	r1, #0
 8009c0e:	d03b      	beq.n	8009c88 <_strtod_l+0xa8>
 8009c10:	2200      	movs	r2, #0
 8009c12:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009c14:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009c16:	782a      	ldrb	r2, [r5, #0]
 8009c18:	2a30      	cmp	r2, #48	@ 0x30
 8009c1a:	f040 80b3 	bne.w	8009d84 <_strtod_l+0x1a4>
 8009c1e:	786a      	ldrb	r2, [r5, #1]
 8009c20:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009c24:	2a58      	cmp	r2, #88	@ 0x58
 8009c26:	d16e      	bne.n	8009d06 <_strtod_l+0x126>
 8009c28:	9302      	str	r3, [sp, #8]
 8009c2a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009c2c:	9301      	str	r3, [sp, #4]
 8009c2e:	ab1a      	add	r3, sp, #104	@ 0x68
 8009c30:	9300      	str	r3, [sp, #0]
 8009c32:	4a8e      	ldr	r2, [pc, #568]	@ (8009e6c <_strtod_l+0x28c>)
 8009c34:	9805      	ldr	r0, [sp, #20]
 8009c36:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009c38:	a919      	add	r1, sp, #100	@ 0x64
 8009c3a:	f002 fc0b 	bl	800c454 <__gethex>
 8009c3e:	f010 060f 	ands.w	r6, r0, #15
 8009c42:	4604      	mov	r4, r0
 8009c44:	d005      	beq.n	8009c52 <_strtod_l+0x72>
 8009c46:	2e06      	cmp	r6, #6
 8009c48:	d128      	bne.n	8009c9c <_strtod_l+0xbc>
 8009c4a:	3501      	adds	r5, #1
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	9519      	str	r5, [sp, #100]	@ 0x64
 8009c50:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009c52:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	f040 858e 	bne.w	800a776 <_strtod_l+0xb96>
 8009c5a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009c5c:	b1cb      	cbz	r3, 8009c92 <_strtod_l+0xb2>
 8009c5e:	4652      	mov	r2, sl
 8009c60:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8009c64:	ec43 2b10 	vmov	d0, r2, r3
 8009c68:	b01f      	add	sp, #124	@ 0x7c
 8009c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c6e:	2920      	cmp	r1, #32
 8009c70:	d1ce      	bne.n	8009c10 <_strtod_l+0x30>
 8009c72:	3201      	adds	r2, #1
 8009c74:	e7c1      	b.n	8009bfa <_strtod_l+0x1a>
 8009c76:	292d      	cmp	r1, #45	@ 0x2d
 8009c78:	d1ca      	bne.n	8009c10 <_strtod_l+0x30>
 8009c7a:	2101      	movs	r1, #1
 8009c7c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009c7e:	1c51      	adds	r1, r2, #1
 8009c80:	9119      	str	r1, [sp, #100]	@ 0x64
 8009c82:	7852      	ldrb	r2, [r2, #1]
 8009c84:	2a00      	cmp	r2, #0
 8009c86:	d1c5      	bne.n	8009c14 <_strtod_l+0x34>
 8009c88:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009c8a:	9419      	str	r4, [sp, #100]	@ 0x64
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	f040 8570 	bne.w	800a772 <_strtod_l+0xb92>
 8009c92:	4652      	mov	r2, sl
 8009c94:	465b      	mov	r3, fp
 8009c96:	e7e5      	b.n	8009c64 <_strtod_l+0x84>
 8009c98:	2100      	movs	r1, #0
 8009c9a:	e7ef      	b.n	8009c7c <_strtod_l+0x9c>
 8009c9c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009c9e:	b13a      	cbz	r2, 8009cb0 <_strtod_l+0xd0>
 8009ca0:	2135      	movs	r1, #53	@ 0x35
 8009ca2:	a81c      	add	r0, sp, #112	@ 0x70
 8009ca4:	f003 fbde 	bl	800d464 <__copybits>
 8009ca8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009caa:	9805      	ldr	r0, [sp, #20]
 8009cac:	f002 ffac 	bl	800cc08 <_Bfree>
 8009cb0:	3e01      	subs	r6, #1
 8009cb2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009cb4:	2e04      	cmp	r6, #4
 8009cb6:	d806      	bhi.n	8009cc6 <_strtod_l+0xe6>
 8009cb8:	e8df f006 	tbb	[pc, r6]
 8009cbc:	201d0314 	.word	0x201d0314
 8009cc0:	14          	.byte	0x14
 8009cc1:	00          	.byte	0x00
 8009cc2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009cc6:	05e1      	lsls	r1, r4, #23
 8009cc8:	bf48      	it	mi
 8009cca:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8009cce:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009cd2:	0d1b      	lsrs	r3, r3, #20
 8009cd4:	051b      	lsls	r3, r3, #20
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d1bb      	bne.n	8009c52 <_strtod_l+0x72>
 8009cda:	f001 fc67 	bl	800b5ac <__errno>
 8009cde:	2322      	movs	r3, #34	@ 0x22
 8009ce0:	6003      	str	r3, [r0, #0]
 8009ce2:	e7b6      	b.n	8009c52 <_strtod_l+0x72>
 8009ce4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009ce8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009cec:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009cf0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009cf4:	e7e7      	b.n	8009cc6 <_strtod_l+0xe6>
 8009cf6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8009e74 <_strtod_l+0x294>
 8009cfa:	e7e4      	b.n	8009cc6 <_strtod_l+0xe6>
 8009cfc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009d00:	f04f 3aff 	mov.w	sl, #4294967295
 8009d04:	e7df      	b.n	8009cc6 <_strtod_l+0xe6>
 8009d06:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009d08:	1c5a      	adds	r2, r3, #1
 8009d0a:	9219      	str	r2, [sp, #100]	@ 0x64
 8009d0c:	785b      	ldrb	r3, [r3, #1]
 8009d0e:	2b30      	cmp	r3, #48	@ 0x30
 8009d10:	d0f9      	beq.n	8009d06 <_strtod_l+0x126>
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d09d      	beq.n	8009c52 <_strtod_l+0x72>
 8009d16:	2301      	movs	r3, #1
 8009d18:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d1a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009d1c:	930c      	str	r3, [sp, #48]	@ 0x30
 8009d1e:	2300      	movs	r3, #0
 8009d20:	9308      	str	r3, [sp, #32]
 8009d22:	930a      	str	r3, [sp, #40]	@ 0x28
 8009d24:	461f      	mov	r7, r3
 8009d26:	220a      	movs	r2, #10
 8009d28:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009d2a:	7805      	ldrb	r5, [r0, #0]
 8009d2c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009d30:	b2d9      	uxtb	r1, r3
 8009d32:	2909      	cmp	r1, #9
 8009d34:	d928      	bls.n	8009d88 <_strtod_l+0x1a8>
 8009d36:	494e      	ldr	r1, [pc, #312]	@ (8009e70 <_strtod_l+0x290>)
 8009d38:	2201      	movs	r2, #1
 8009d3a:	f001 fbaf 	bl	800b49c <strncmp>
 8009d3e:	2800      	cmp	r0, #0
 8009d40:	d032      	beq.n	8009da8 <_strtod_l+0x1c8>
 8009d42:	2000      	movs	r0, #0
 8009d44:	462a      	mov	r2, r5
 8009d46:	4681      	mov	r9, r0
 8009d48:	463d      	mov	r5, r7
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	2a65      	cmp	r2, #101	@ 0x65
 8009d4e:	d001      	beq.n	8009d54 <_strtod_l+0x174>
 8009d50:	2a45      	cmp	r2, #69	@ 0x45
 8009d52:	d114      	bne.n	8009d7e <_strtod_l+0x19e>
 8009d54:	b91d      	cbnz	r5, 8009d5e <_strtod_l+0x17e>
 8009d56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009d58:	4302      	orrs	r2, r0
 8009d5a:	d095      	beq.n	8009c88 <_strtod_l+0xa8>
 8009d5c:	2500      	movs	r5, #0
 8009d5e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009d60:	1c62      	adds	r2, r4, #1
 8009d62:	9219      	str	r2, [sp, #100]	@ 0x64
 8009d64:	7862      	ldrb	r2, [r4, #1]
 8009d66:	2a2b      	cmp	r2, #43	@ 0x2b
 8009d68:	d077      	beq.n	8009e5a <_strtod_l+0x27a>
 8009d6a:	2a2d      	cmp	r2, #45	@ 0x2d
 8009d6c:	d07b      	beq.n	8009e66 <_strtod_l+0x286>
 8009d6e:	f04f 0c00 	mov.w	ip, #0
 8009d72:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009d76:	2909      	cmp	r1, #9
 8009d78:	f240 8082 	bls.w	8009e80 <_strtod_l+0x2a0>
 8009d7c:	9419      	str	r4, [sp, #100]	@ 0x64
 8009d7e:	f04f 0800 	mov.w	r8, #0
 8009d82:	e0a2      	b.n	8009eca <_strtod_l+0x2ea>
 8009d84:	2300      	movs	r3, #0
 8009d86:	e7c7      	b.n	8009d18 <_strtod_l+0x138>
 8009d88:	2f08      	cmp	r7, #8
 8009d8a:	bfd5      	itete	le
 8009d8c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8009d8e:	9908      	ldrgt	r1, [sp, #32]
 8009d90:	fb02 3301 	mlale	r3, r2, r1, r3
 8009d94:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009d98:	f100 0001 	add.w	r0, r0, #1
 8009d9c:	bfd4      	ite	le
 8009d9e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8009da0:	9308      	strgt	r3, [sp, #32]
 8009da2:	3701      	adds	r7, #1
 8009da4:	9019      	str	r0, [sp, #100]	@ 0x64
 8009da6:	e7bf      	b.n	8009d28 <_strtod_l+0x148>
 8009da8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009daa:	1c5a      	adds	r2, r3, #1
 8009dac:	9219      	str	r2, [sp, #100]	@ 0x64
 8009dae:	785a      	ldrb	r2, [r3, #1]
 8009db0:	b37f      	cbz	r7, 8009e12 <_strtod_l+0x232>
 8009db2:	4681      	mov	r9, r0
 8009db4:	463d      	mov	r5, r7
 8009db6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009dba:	2b09      	cmp	r3, #9
 8009dbc:	d912      	bls.n	8009de4 <_strtod_l+0x204>
 8009dbe:	2301      	movs	r3, #1
 8009dc0:	e7c4      	b.n	8009d4c <_strtod_l+0x16c>
 8009dc2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009dc4:	1c5a      	adds	r2, r3, #1
 8009dc6:	9219      	str	r2, [sp, #100]	@ 0x64
 8009dc8:	785a      	ldrb	r2, [r3, #1]
 8009dca:	3001      	adds	r0, #1
 8009dcc:	2a30      	cmp	r2, #48	@ 0x30
 8009dce:	d0f8      	beq.n	8009dc2 <_strtod_l+0x1e2>
 8009dd0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009dd4:	2b08      	cmp	r3, #8
 8009dd6:	f200 84d3 	bhi.w	800a780 <_strtod_l+0xba0>
 8009dda:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009ddc:	930c      	str	r3, [sp, #48]	@ 0x30
 8009dde:	4681      	mov	r9, r0
 8009de0:	2000      	movs	r0, #0
 8009de2:	4605      	mov	r5, r0
 8009de4:	3a30      	subs	r2, #48	@ 0x30
 8009de6:	f100 0301 	add.w	r3, r0, #1
 8009dea:	d02a      	beq.n	8009e42 <_strtod_l+0x262>
 8009dec:	4499      	add	r9, r3
 8009dee:	eb00 0c05 	add.w	ip, r0, r5
 8009df2:	462b      	mov	r3, r5
 8009df4:	210a      	movs	r1, #10
 8009df6:	4563      	cmp	r3, ip
 8009df8:	d10d      	bne.n	8009e16 <_strtod_l+0x236>
 8009dfa:	1c69      	adds	r1, r5, #1
 8009dfc:	4401      	add	r1, r0
 8009dfe:	4428      	add	r0, r5
 8009e00:	2808      	cmp	r0, #8
 8009e02:	dc16      	bgt.n	8009e32 <_strtod_l+0x252>
 8009e04:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009e06:	230a      	movs	r3, #10
 8009e08:	fb03 2300 	mla	r3, r3, r0, r2
 8009e0c:	930a      	str	r3, [sp, #40]	@ 0x28
 8009e0e:	2300      	movs	r3, #0
 8009e10:	e018      	b.n	8009e44 <_strtod_l+0x264>
 8009e12:	4638      	mov	r0, r7
 8009e14:	e7da      	b.n	8009dcc <_strtod_l+0x1ec>
 8009e16:	2b08      	cmp	r3, #8
 8009e18:	f103 0301 	add.w	r3, r3, #1
 8009e1c:	dc03      	bgt.n	8009e26 <_strtod_l+0x246>
 8009e1e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009e20:	434e      	muls	r6, r1
 8009e22:	960a      	str	r6, [sp, #40]	@ 0x28
 8009e24:	e7e7      	b.n	8009df6 <_strtod_l+0x216>
 8009e26:	2b10      	cmp	r3, #16
 8009e28:	bfde      	ittt	le
 8009e2a:	9e08      	ldrle	r6, [sp, #32]
 8009e2c:	434e      	mulle	r6, r1
 8009e2e:	9608      	strle	r6, [sp, #32]
 8009e30:	e7e1      	b.n	8009df6 <_strtod_l+0x216>
 8009e32:	280f      	cmp	r0, #15
 8009e34:	dceb      	bgt.n	8009e0e <_strtod_l+0x22e>
 8009e36:	9808      	ldr	r0, [sp, #32]
 8009e38:	230a      	movs	r3, #10
 8009e3a:	fb03 2300 	mla	r3, r3, r0, r2
 8009e3e:	9308      	str	r3, [sp, #32]
 8009e40:	e7e5      	b.n	8009e0e <_strtod_l+0x22e>
 8009e42:	4629      	mov	r1, r5
 8009e44:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009e46:	1c50      	adds	r0, r2, #1
 8009e48:	9019      	str	r0, [sp, #100]	@ 0x64
 8009e4a:	7852      	ldrb	r2, [r2, #1]
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	460d      	mov	r5, r1
 8009e50:	e7b1      	b.n	8009db6 <_strtod_l+0x1d6>
 8009e52:	f04f 0900 	mov.w	r9, #0
 8009e56:	2301      	movs	r3, #1
 8009e58:	e77d      	b.n	8009d56 <_strtod_l+0x176>
 8009e5a:	f04f 0c00 	mov.w	ip, #0
 8009e5e:	1ca2      	adds	r2, r4, #2
 8009e60:	9219      	str	r2, [sp, #100]	@ 0x64
 8009e62:	78a2      	ldrb	r2, [r4, #2]
 8009e64:	e785      	b.n	8009d72 <_strtod_l+0x192>
 8009e66:	f04f 0c01 	mov.w	ip, #1
 8009e6a:	e7f8      	b.n	8009e5e <_strtod_l+0x27e>
 8009e6c:	08016044 	.word	0x08016044
 8009e70:	0801602c 	.word	0x0801602c
 8009e74:	7ff00000 	.word	0x7ff00000
 8009e78:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009e7a:	1c51      	adds	r1, r2, #1
 8009e7c:	9119      	str	r1, [sp, #100]	@ 0x64
 8009e7e:	7852      	ldrb	r2, [r2, #1]
 8009e80:	2a30      	cmp	r2, #48	@ 0x30
 8009e82:	d0f9      	beq.n	8009e78 <_strtod_l+0x298>
 8009e84:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009e88:	2908      	cmp	r1, #8
 8009e8a:	f63f af78 	bhi.w	8009d7e <_strtod_l+0x19e>
 8009e8e:	3a30      	subs	r2, #48	@ 0x30
 8009e90:	920e      	str	r2, [sp, #56]	@ 0x38
 8009e92:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009e94:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009e96:	f04f 080a 	mov.w	r8, #10
 8009e9a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009e9c:	1c56      	adds	r6, r2, #1
 8009e9e:	9619      	str	r6, [sp, #100]	@ 0x64
 8009ea0:	7852      	ldrb	r2, [r2, #1]
 8009ea2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8009ea6:	f1be 0f09 	cmp.w	lr, #9
 8009eaa:	d939      	bls.n	8009f20 <_strtod_l+0x340>
 8009eac:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009eae:	1a76      	subs	r6, r6, r1
 8009eb0:	2e08      	cmp	r6, #8
 8009eb2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8009eb6:	dc03      	bgt.n	8009ec0 <_strtod_l+0x2e0>
 8009eb8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009eba:	4588      	cmp	r8, r1
 8009ebc:	bfa8      	it	ge
 8009ebe:	4688      	movge	r8, r1
 8009ec0:	f1bc 0f00 	cmp.w	ip, #0
 8009ec4:	d001      	beq.n	8009eca <_strtod_l+0x2ea>
 8009ec6:	f1c8 0800 	rsb	r8, r8, #0
 8009eca:	2d00      	cmp	r5, #0
 8009ecc:	d14e      	bne.n	8009f6c <_strtod_l+0x38c>
 8009ece:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009ed0:	4308      	orrs	r0, r1
 8009ed2:	f47f aebe 	bne.w	8009c52 <_strtod_l+0x72>
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	f47f aed6 	bne.w	8009c88 <_strtod_l+0xa8>
 8009edc:	2a69      	cmp	r2, #105	@ 0x69
 8009ede:	d028      	beq.n	8009f32 <_strtod_l+0x352>
 8009ee0:	dc25      	bgt.n	8009f2e <_strtod_l+0x34e>
 8009ee2:	2a49      	cmp	r2, #73	@ 0x49
 8009ee4:	d025      	beq.n	8009f32 <_strtod_l+0x352>
 8009ee6:	2a4e      	cmp	r2, #78	@ 0x4e
 8009ee8:	f47f aece 	bne.w	8009c88 <_strtod_l+0xa8>
 8009eec:	499b      	ldr	r1, [pc, #620]	@ (800a15c <_strtod_l+0x57c>)
 8009eee:	a819      	add	r0, sp, #100	@ 0x64
 8009ef0:	f002 fcd2 	bl	800c898 <__match>
 8009ef4:	2800      	cmp	r0, #0
 8009ef6:	f43f aec7 	beq.w	8009c88 <_strtod_l+0xa8>
 8009efa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009efc:	781b      	ldrb	r3, [r3, #0]
 8009efe:	2b28      	cmp	r3, #40	@ 0x28
 8009f00:	d12e      	bne.n	8009f60 <_strtod_l+0x380>
 8009f02:	4997      	ldr	r1, [pc, #604]	@ (800a160 <_strtod_l+0x580>)
 8009f04:	aa1c      	add	r2, sp, #112	@ 0x70
 8009f06:	a819      	add	r0, sp, #100	@ 0x64
 8009f08:	f002 fcda 	bl	800c8c0 <__hexnan>
 8009f0c:	2805      	cmp	r0, #5
 8009f0e:	d127      	bne.n	8009f60 <_strtod_l+0x380>
 8009f10:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009f12:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8009f16:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009f1a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8009f1e:	e698      	b.n	8009c52 <_strtod_l+0x72>
 8009f20:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009f22:	fb08 2101 	mla	r1, r8, r1, r2
 8009f26:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8009f2a:	920e      	str	r2, [sp, #56]	@ 0x38
 8009f2c:	e7b5      	b.n	8009e9a <_strtod_l+0x2ba>
 8009f2e:	2a6e      	cmp	r2, #110	@ 0x6e
 8009f30:	e7da      	b.n	8009ee8 <_strtod_l+0x308>
 8009f32:	498c      	ldr	r1, [pc, #560]	@ (800a164 <_strtod_l+0x584>)
 8009f34:	a819      	add	r0, sp, #100	@ 0x64
 8009f36:	f002 fcaf 	bl	800c898 <__match>
 8009f3a:	2800      	cmp	r0, #0
 8009f3c:	f43f aea4 	beq.w	8009c88 <_strtod_l+0xa8>
 8009f40:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009f42:	4989      	ldr	r1, [pc, #548]	@ (800a168 <_strtod_l+0x588>)
 8009f44:	3b01      	subs	r3, #1
 8009f46:	a819      	add	r0, sp, #100	@ 0x64
 8009f48:	9319      	str	r3, [sp, #100]	@ 0x64
 8009f4a:	f002 fca5 	bl	800c898 <__match>
 8009f4e:	b910      	cbnz	r0, 8009f56 <_strtod_l+0x376>
 8009f50:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009f52:	3301      	adds	r3, #1
 8009f54:	9319      	str	r3, [sp, #100]	@ 0x64
 8009f56:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800a178 <_strtod_l+0x598>
 8009f5a:	f04f 0a00 	mov.w	sl, #0
 8009f5e:	e678      	b.n	8009c52 <_strtod_l+0x72>
 8009f60:	4882      	ldr	r0, [pc, #520]	@ (800a16c <_strtod_l+0x58c>)
 8009f62:	f001 fb69 	bl	800b638 <nan>
 8009f66:	ec5b ab10 	vmov	sl, fp, d0
 8009f6a:	e672      	b.n	8009c52 <_strtod_l+0x72>
 8009f6c:	eba8 0309 	sub.w	r3, r8, r9
 8009f70:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009f72:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f74:	2f00      	cmp	r7, #0
 8009f76:	bf08      	it	eq
 8009f78:	462f      	moveq	r7, r5
 8009f7a:	2d10      	cmp	r5, #16
 8009f7c:	462c      	mov	r4, r5
 8009f7e:	bfa8      	it	ge
 8009f80:	2410      	movge	r4, #16
 8009f82:	f7f6 faf7 	bl	8000574 <__aeabi_ui2d>
 8009f86:	2d09      	cmp	r5, #9
 8009f88:	4682      	mov	sl, r0
 8009f8a:	468b      	mov	fp, r1
 8009f8c:	dc13      	bgt.n	8009fb6 <_strtod_l+0x3d6>
 8009f8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	f43f ae5e 	beq.w	8009c52 <_strtod_l+0x72>
 8009f96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f98:	dd78      	ble.n	800a08c <_strtod_l+0x4ac>
 8009f9a:	2b16      	cmp	r3, #22
 8009f9c:	dc5f      	bgt.n	800a05e <_strtod_l+0x47e>
 8009f9e:	4974      	ldr	r1, [pc, #464]	@ (800a170 <_strtod_l+0x590>)
 8009fa0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009fa4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009fa8:	4652      	mov	r2, sl
 8009faa:	465b      	mov	r3, fp
 8009fac:	f7f6 fb5c 	bl	8000668 <__aeabi_dmul>
 8009fb0:	4682      	mov	sl, r0
 8009fb2:	468b      	mov	fp, r1
 8009fb4:	e64d      	b.n	8009c52 <_strtod_l+0x72>
 8009fb6:	4b6e      	ldr	r3, [pc, #440]	@ (800a170 <_strtod_l+0x590>)
 8009fb8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009fbc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009fc0:	f7f6 fb52 	bl	8000668 <__aeabi_dmul>
 8009fc4:	4682      	mov	sl, r0
 8009fc6:	9808      	ldr	r0, [sp, #32]
 8009fc8:	468b      	mov	fp, r1
 8009fca:	f7f6 fad3 	bl	8000574 <__aeabi_ui2d>
 8009fce:	4602      	mov	r2, r0
 8009fd0:	460b      	mov	r3, r1
 8009fd2:	4650      	mov	r0, sl
 8009fd4:	4659      	mov	r1, fp
 8009fd6:	f7f6 f991 	bl	80002fc <__adddf3>
 8009fda:	2d0f      	cmp	r5, #15
 8009fdc:	4682      	mov	sl, r0
 8009fde:	468b      	mov	fp, r1
 8009fe0:	ddd5      	ble.n	8009f8e <_strtod_l+0x3ae>
 8009fe2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fe4:	1b2c      	subs	r4, r5, r4
 8009fe6:	441c      	add	r4, r3
 8009fe8:	2c00      	cmp	r4, #0
 8009fea:	f340 8096 	ble.w	800a11a <_strtod_l+0x53a>
 8009fee:	f014 030f 	ands.w	r3, r4, #15
 8009ff2:	d00a      	beq.n	800a00a <_strtod_l+0x42a>
 8009ff4:	495e      	ldr	r1, [pc, #376]	@ (800a170 <_strtod_l+0x590>)
 8009ff6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009ffa:	4652      	mov	r2, sl
 8009ffc:	465b      	mov	r3, fp
 8009ffe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a002:	f7f6 fb31 	bl	8000668 <__aeabi_dmul>
 800a006:	4682      	mov	sl, r0
 800a008:	468b      	mov	fp, r1
 800a00a:	f034 040f 	bics.w	r4, r4, #15
 800a00e:	d073      	beq.n	800a0f8 <_strtod_l+0x518>
 800a010:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800a014:	dd48      	ble.n	800a0a8 <_strtod_l+0x4c8>
 800a016:	2400      	movs	r4, #0
 800a018:	46a0      	mov	r8, r4
 800a01a:	940a      	str	r4, [sp, #40]	@ 0x28
 800a01c:	46a1      	mov	r9, r4
 800a01e:	9a05      	ldr	r2, [sp, #20]
 800a020:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800a178 <_strtod_l+0x598>
 800a024:	2322      	movs	r3, #34	@ 0x22
 800a026:	6013      	str	r3, [r2, #0]
 800a028:	f04f 0a00 	mov.w	sl, #0
 800a02c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a02e:	2b00      	cmp	r3, #0
 800a030:	f43f ae0f 	beq.w	8009c52 <_strtod_l+0x72>
 800a034:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a036:	9805      	ldr	r0, [sp, #20]
 800a038:	f002 fde6 	bl	800cc08 <_Bfree>
 800a03c:	9805      	ldr	r0, [sp, #20]
 800a03e:	4649      	mov	r1, r9
 800a040:	f002 fde2 	bl	800cc08 <_Bfree>
 800a044:	9805      	ldr	r0, [sp, #20]
 800a046:	4641      	mov	r1, r8
 800a048:	f002 fdde 	bl	800cc08 <_Bfree>
 800a04c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a04e:	9805      	ldr	r0, [sp, #20]
 800a050:	f002 fdda 	bl	800cc08 <_Bfree>
 800a054:	9805      	ldr	r0, [sp, #20]
 800a056:	4621      	mov	r1, r4
 800a058:	f002 fdd6 	bl	800cc08 <_Bfree>
 800a05c:	e5f9      	b.n	8009c52 <_strtod_l+0x72>
 800a05e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a060:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800a064:	4293      	cmp	r3, r2
 800a066:	dbbc      	blt.n	8009fe2 <_strtod_l+0x402>
 800a068:	4c41      	ldr	r4, [pc, #260]	@ (800a170 <_strtod_l+0x590>)
 800a06a:	f1c5 050f 	rsb	r5, r5, #15
 800a06e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a072:	4652      	mov	r2, sl
 800a074:	465b      	mov	r3, fp
 800a076:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a07a:	f7f6 faf5 	bl	8000668 <__aeabi_dmul>
 800a07e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a080:	1b5d      	subs	r5, r3, r5
 800a082:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a086:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a08a:	e78f      	b.n	8009fac <_strtod_l+0x3cc>
 800a08c:	3316      	adds	r3, #22
 800a08e:	dba8      	blt.n	8009fe2 <_strtod_l+0x402>
 800a090:	4b37      	ldr	r3, [pc, #220]	@ (800a170 <_strtod_l+0x590>)
 800a092:	eba9 0808 	sub.w	r8, r9, r8
 800a096:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800a09a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a09e:	4650      	mov	r0, sl
 800a0a0:	4659      	mov	r1, fp
 800a0a2:	f7f6 fc0b 	bl	80008bc <__aeabi_ddiv>
 800a0a6:	e783      	b.n	8009fb0 <_strtod_l+0x3d0>
 800a0a8:	4b32      	ldr	r3, [pc, #200]	@ (800a174 <_strtod_l+0x594>)
 800a0aa:	9308      	str	r3, [sp, #32]
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	1124      	asrs	r4, r4, #4
 800a0b0:	4650      	mov	r0, sl
 800a0b2:	4659      	mov	r1, fp
 800a0b4:	461e      	mov	r6, r3
 800a0b6:	2c01      	cmp	r4, #1
 800a0b8:	dc21      	bgt.n	800a0fe <_strtod_l+0x51e>
 800a0ba:	b10b      	cbz	r3, 800a0c0 <_strtod_l+0x4e0>
 800a0bc:	4682      	mov	sl, r0
 800a0be:	468b      	mov	fp, r1
 800a0c0:	492c      	ldr	r1, [pc, #176]	@ (800a174 <_strtod_l+0x594>)
 800a0c2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a0c6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800a0ca:	4652      	mov	r2, sl
 800a0cc:	465b      	mov	r3, fp
 800a0ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a0d2:	f7f6 fac9 	bl	8000668 <__aeabi_dmul>
 800a0d6:	4b28      	ldr	r3, [pc, #160]	@ (800a178 <_strtod_l+0x598>)
 800a0d8:	460a      	mov	r2, r1
 800a0da:	400b      	ands	r3, r1
 800a0dc:	4927      	ldr	r1, [pc, #156]	@ (800a17c <_strtod_l+0x59c>)
 800a0de:	428b      	cmp	r3, r1
 800a0e0:	4682      	mov	sl, r0
 800a0e2:	d898      	bhi.n	800a016 <_strtod_l+0x436>
 800a0e4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800a0e8:	428b      	cmp	r3, r1
 800a0ea:	bf86      	itte	hi
 800a0ec:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800a180 <_strtod_l+0x5a0>
 800a0f0:	f04f 3aff 	movhi.w	sl, #4294967295
 800a0f4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	9308      	str	r3, [sp, #32]
 800a0fc:	e07a      	b.n	800a1f4 <_strtod_l+0x614>
 800a0fe:	07e2      	lsls	r2, r4, #31
 800a100:	d505      	bpl.n	800a10e <_strtod_l+0x52e>
 800a102:	9b08      	ldr	r3, [sp, #32]
 800a104:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a108:	f7f6 faae 	bl	8000668 <__aeabi_dmul>
 800a10c:	2301      	movs	r3, #1
 800a10e:	9a08      	ldr	r2, [sp, #32]
 800a110:	3208      	adds	r2, #8
 800a112:	3601      	adds	r6, #1
 800a114:	1064      	asrs	r4, r4, #1
 800a116:	9208      	str	r2, [sp, #32]
 800a118:	e7cd      	b.n	800a0b6 <_strtod_l+0x4d6>
 800a11a:	d0ed      	beq.n	800a0f8 <_strtod_l+0x518>
 800a11c:	4264      	negs	r4, r4
 800a11e:	f014 020f 	ands.w	r2, r4, #15
 800a122:	d00a      	beq.n	800a13a <_strtod_l+0x55a>
 800a124:	4b12      	ldr	r3, [pc, #72]	@ (800a170 <_strtod_l+0x590>)
 800a126:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a12a:	4650      	mov	r0, sl
 800a12c:	4659      	mov	r1, fp
 800a12e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a132:	f7f6 fbc3 	bl	80008bc <__aeabi_ddiv>
 800a136:	4682      	mov	sl, r0
 800a138:	468b      	mov	fp, r1
 800a13a:	1124      	asrs	r4, r4, #4
 800a13c:	d0dc      	beq.n	800a0f8 <_strtod_l+0x518>
 800a13e:	2c1f      	cmp	r4, #31
 800a140:	dd20      	ble.n	800a184 <_strtod_l+0x5a4>
 800a142:	2400      	movs	r4, #0
 800a144:	46a0      	mov	r8, r4
 800a146:	940a      	str	r4, [sp, #40]	@ 0x28
 800a148:	46a1      	mov	r9, r4
 800a14a:	9a05      	ldr	r2, [sp, #20]
 800a14c:	2322      	movs	r3, #34	@ 0x22
 800a14e:	f04f 0a00 	mov.w	sl, #0
 800a152:	f04f 0b00 	mov.w	fp, #0
 800a156:	6013      	str	r3, [r2, #0]
 800a158:	e768      	b.n	800a02c <_strtod_l+0x44c>
 800a15a:	bf00      	nop
 800a15c:	0801618e 	.word	0x0801618e
 800a160:	08016030 	.word	0x08016030
 800a164:	08016186 	.word	0x08016186
 800a168:	080161c0 	.word	0x080161c0
 800a16c:	0801644c 	.word	0x0801644c
 800a170:	08016338 	.word	0x08016338
 800a174:	08016310 	.word	0x08016310
 800a178:	7ff00000 	.word	0x7ff00000
 800a17c:	7ca00000 	.word	0x7ca00000
 800a180:	7fefffff 	.word	0x7fefffff
 800a184:	f014 0310 	ands.w	r3, r4, #16
 800a188:	bf18      	it	ne
 800a18a:	236a      	movne	r3, #106	@ 0x6a
 800a18c:	4ea9      	ldr	r6, [pc, #676]	@ (800a434 <_strtod_l+0x854>)
 800a18e:	9308      	str	r3, [sp, #32]
 800a190:	4650      	mov	r0, sl
 800a192:	4659      	mov	r1, fp
 800a194:	2300      	movs	r3, #0
 800a196:	07e2      	lsls	r2, r4, #31
 800a198:	d504      	bpl.n	800a1a4 <_strtod_l+0x5c4>
 800a19a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a19e:	f7f6 fa63 	bl	8000668 <__aeabi_dmul>
 800a1a2:	2301      	movs	r3, #1
 800a1a4:	1064      	asrs	r4, r4, #1
 800a1a6:	f106 0608 	add.w	r6, r6, #8
 800a1aa:	d1f4      	bne.n	800a196 <_strtod_l+0x5b6>
 800a1ac:	b10b      	cbz	r3, 800a1b2 <_strtod_l+0x5d2>
 800a1ae:	4682      	mov	sl, r0
 800a1b0:	468b      	mov	fp, r1
 800a1b2:	9b08      	ldr	r3, [sp, #32]
 800a1b4:	b1b3      	cbz	r3, 800a1e4 <_strtod_l+0x604>
 800a1b6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a1ba:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	4659      	mov	r1, fp
 800a1c2:	dd0f      	ble.n	800a1e4 <_strtod_l+0x604>
 800a1c4:	2b1f      	cmp	r3, #31
 800a1c6:	dd55      	ble.n	800a274 <_strtod_l+0x694>
 800a1c8:	2b34      	cmp	r3, #52	@ 0x34
 800a1ca:	bfde      	ittt	le
 800a1cc:	f04f 33ff 	movle.w	r3, #4294967295
 800a1d0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800a1d4:	4093      	lslle	r3, r2
 800a1d6:	f04f 0a00 	mov.w	sl, #0
 800a1da:	bfcc      	ite	gt
 800a1dc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a1e0:	ea03 0b01 	andle.w	fp, r3, r1
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	4650      	mov	r0, sl
 800a1ea:	4659      	mov	r1, fp
 800a1ec:	f7f6 fca4 	bl	8000b38 <__aeabi_dcmpeq>
 800a1f0:	2800      	cmp	r0, #0
 800a1f2:	d1a6      	bne.n	800a142 <_strtod_l+0x562>
 800a1f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a1f6:	9300      	str	r3, [sp, #0]
 800a1f8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a1fa:	9805      	ldr	r0, [sp, #20]
 800a1fc:	462b      	mov	r3, r5
 800a1fe:	463a      	mov	r2, r7
 800a200:	f002 fd6a 	bl	800ccd8 <__s2b>
 800a204:	900a      	str	r0, [sp, #40]	@ 0x28
 800a206:	2800      	cmp	r0, #0
 800a208:	f43f af05 	beq.w	800a016 <_strtod_l+0x436>
 800a20c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a20e:	2a00      	cmp	r2, #0
 800a210:	eba9 0308 	sub.w	r3, r9, r8
 800a214:	bfa8      	it	ge
 800a216:	2300      	movge	r3, #0
 800a218:	9312      	str	r3, [sp, #72]	@ 0x48
 800a21a:	2400      	movs	r4, #0
 800a21c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a220:	9316      	str	r3, [sp, #88]	@ 0x58
 800a222:	46a0      	mov	r8, r4
 800a224:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a226:	9805      	ldr	r0, [sp, #20]
 800a228:	6859      	ldr	r1, [r3, #4]
 800a22a:	f002 fcad 	bl	800cb88 <_Balloc>
 800a22e:	4681      	mov	r9, r0
 800a230:	2800      	cmp	r0, #0
 800a232:	f43f aef4 	beq.w	800a01e <_strtod_l+0x43e>
 800a236:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a238:	691a      	ldr	r2, [r3, #16]
 800a23a:	3202      	adds	r2, #2
 800a23c:	f103 010c 	add.w	r1, r3, #12
 800a240:	0092      	lsls	r2, r2, #2
 800a242:	300c      	adds	r0, #12
 800a244:	f001 f9e7 	bl	800b616 <memcpy>
 800a248:	ec4b ab10 	vmov	d0, sl, fp
 800a24c:	9805      	ldr	r0, [sp, #20]
 800a24e:	aa1c      	add	r2, sp, #112	@ 0x70
 800a250:	a91b      	add	r1, sp, #108	@ 0x6c
 800a252:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a256:	f003 f87b 	bl	800d350 <__d2b>
 800a25a:	901a      	str	r0, [sp, #104]	@ 0x68
 800a25c:	2800      	cmp	r0, #0
 800a25e:	f43f aede 	beq.w	800a01e <_strtod_l+0x43e>
 800a262:	9805      	ldr	r0, [sp, #20]
 800a264:	2101      	movs	r1, #1
 800a266:	f002 fdcd 	bl	800ce04 <__i2b>
 800a26a:	4680      	mov	r8, r0
 800a26c:	b948      	cbnz	r0, 800a282 <_strtod_l+0x6a2>
 800a26e:	f04f 0800 	mov.w	r8, #0
 800a272:	e6d4      	b.n	800a01e <_strtod_l+0x43e>
 800a274:	f04f 32ff 	mov.w	r2, #4294967295
 800a278:	fa02 f303 	lsl.w	r3, r2, r3
 800a27c:	ea03 0a0a 	and.w	sl, r3, sl
 800a280:	e7b0      	b.n	800a1e4 <_strtod_l+0x604>
 800a282:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a284:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a286:	2d00      	cmp	r5, #0
 800a288:	bfab      	itete	ge
 800a28a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800a28c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800a28e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800a290:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800a292:	bfac      	ite	ge
 800a294:	18ef      	addge	r7, r5, r3
 800a296:	1b5e      	sublt	r6, r3, r5
 800a298:	9b08      	ldr	r3, [sp, #32]
 800a29a:	1aed      	subs	r5, r5, r3
 800a29c:	4415      	add	r5, r2
 800a29e:	4b66      	ldr	r3, [pc, #408]	@ (800a438 <_strtod_l+0x858>)
 800a2a0:	3d01      	subs	r5, #1
 800a2a2:	429d      	cmp	r5, r3
 800a2a4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a2a8:	da50      	bge.n	800a34c <_strtod_l+0x76c>
 800a2aa:	1b5b      	subs	r3, r3, r5
 800a2ac:	2b1f      	cmp	r3, #31
 800a2ae:	eba2 0203 	sub.w	r2, r2, r3
 800a2b2:	f04f 0101 	mov.w	r1, #1
 800a2b6:	dc3d      	bgt.n	800a334 <_strtod_l+0x754>
 800a2b8:	fa01 f303 	lsl.w	r3, r1, r3
 800a2bc:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a2be:	2300      	movs	r3, #0
 800a2c0:	9310      	str	r3, [sp, #64]	@ 0x40
 800a2c2:	18bd      	adds	r5, r7, r2
 800a2c4:	9b08      	ldr	r3, [sp, #32]
 800a2c6:	42af      	cmp	r7, r5
 800a2c8:	4416      	add	r6, r2
 800a2ca:	441e      	add	r6, r3
 800a2cc:	463b      	mov	r3, r7
 800a2ce:	bfa8      	it	ge
 800a2d0:	462b      	movge	r3, r5
 800a2d2:	42b3      	cmp	r3, r6
 800a2d4:	bfa8      	it	ge
 800a2d6:	4633      	movge	r3, r6
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	bfc2      	ittt	gt
 800a2dc:	1aed      	subgt	r5, r5, r3
 800a2de:	1af6      	subgt	r6, r6, r3
 800a2e0:	1aff      	subgt	r7, r7, r3
 800a2e2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	dd16      	ble.n	800a316 <_strtod_l+0x736>
 800a2e8:	4641      	mov	r1, r8
 800a2ea:	9805      	ldr	r0, [sp, #20]
 800a2ec:	461a      	mov	r2, r3
 800a2ee:	f002 fe49 	bl	800cf84 <__pow5mult>
 800a2f2:	4680      	mov	r8, r0
 800a2f4:	2800      	cmp	r0, #0
 800a2f6:	d0ba      	beq.n	800a26e <_strtod_l+0x68e>
 800a2f8:	4601      	mov	r1, r0
 800a2fa:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a2fc:	9805      	ldr	r0, [sp, #20]
 800a2fe:	f002 fd97 	bl	800ce30 <__multiply>
 800a302:	900e      	str	r0, [sp, #56]	@ 0x38
 800a304:	2800      	cmp	r0, #0
 800a306:	f43f ae8a 	beq.w	800a01e <_strtod_l+0x43e>
 800a30a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a30c:	9805      	ldr	r0, [sp, #20]
 800a30e:	f002 fc7b 	bl	800cc08 <_Bfree>
 800a312:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a314:	931a      	str	r3, [sp, #104]	@ 0x68
 800a316:	2d00      	cmp	r5, #0
 800a318:	dc1d      	bgt.n	800a356 <_strtod_l+0x776>
 800a31a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	dd23      	ble.n	800a368 <_strtod_l+0x788>
 800a320:	4649      	mov	r1, r9
 800a322:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a324:	9805      	ldr	r0, [sp, #20]
 800a326:	f002 fe2d 	bl	800cf84 <__pow5mult>
 800a32a:	4681      	mov	r9, r0
 800a32c:	b9e0      	cbnz	r0, 800a368 <_strtod_l+0x788>
 800a32e:	f04f 0900 	mov.w	r9, #0
 800a332:	e674      	b.n	800a01e <_strtod_l+0x43e>
 800a334:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800a338:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800a33c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a340:	35e2      	adds	r5, #226	@ 0xe2
 800a342:	fa01 f305 	lsl.w	r3, r1, r5
 800a346:	9310      	str	r3, [sp, #64]	@ 0x40
 800a348:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a34a:	e7ba      	b.n	800a2c2 <_strtod_l+0x6e2>
 800a34c:	2300      	movs	r3, #0
 800a34e:	9310      	str	r3, [sp, #64]	@ 0x40
 800a350:	2301      	movs	r3, #1
 800a352:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a354:	e7b5      	b.n	800a2c2 <_strtod_l+0x6e2>
 800a356:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a358:	9805      	ldr	r0, [sp, #20]
 800a35a:	462a      	mov	r2, r5
 800a35c:	f002 fe6c 	bl	800d038 <__lshift>
 800a360:	901a      	str	r0, [sp, #104]	@ 0x68
 800a362:	2800      	cmp	r0, #0
 800a364:	d1d9      	bne.n	800a31a <_strtod_l+0x73a>
 800a366:	e65a      	b.n	800a01e <_strtod_l+0x43e>
 800a368:	2e00      	cmp	r6, #0
 800a36a:	dd07      	ble.n	800a37c <_strtod_l+0x79c>
 800a36c:	4649      	mov	r1, r9
 800a36e:	9805      	ldr	r0, [sp, #20]
 800a370:	4632      	mov	r2, r6
 800a372:	f002 fe61 	bl	800d038 <__lshift>
 800a376:	4681      	mov	r9, r0
 800a378:	2800      	cmp	r0, #0
 800a37a:	d0d8      	beq.n	800a32e <_strtod_l+0x74e>
 800a37c:	2f00      	cmp	r7, #0
 800a37e:	dd08      	ble.n	800a392 <_strtod_l+0x7b2>
 800a380:	4641      	mov	r1, r8
 800a382:	9805      	ldr	r0, [sp, #20]
 800a384:	463a      	mov	r2, r7
 800a386:	f002 fe57 	bl	800d038 <__lshift>
 800a38a:	4680      	mov	r8, r0
 800a38c:	2800      	cmp	r0, #0
 800a38e:	f43f ae46 	beq.w	800a01e <_strtod_l+0x43e>
 800a392:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a394:	9805      	ldr	r0, [sp, #20]
 800a396:	464a      	mov	r2, r9
 800a398:	f002 fed6 	bl	800d148 <__mdiff>
 800a39c:	4604      	mov	r4, r0
 800a39e:	2800      	cmp	r0, #0
 800a3a0:	f43f ae3d 	beq.w	800a01e <_strtod_l+0x43e>
 800a3a4:	68c3      	ldr	r3, [r0, #12]
 800a3a6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	60c3      	str	r3, [r0, #12]
 800a3ac:	4641      	mov	r1, r8
 800a3ae:	f002 feaf 	bl	800d110 <__mcmp>
 800a3b2:	2800      	cmp	r0, #0
 800a3b4:	da46      	bge.n	800a444 <_strtod_l+0x864>
 800a3b6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a3b8:	ea53 030a 	orrs.w	r3, r3, sl
 800a3bc:	d16c      	bne.n	800a498 <_strtod_l+0x8b8>
 800a3be:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d168      	bne.n	800a498 <_strtod_l+0x8b8>
 800a3c6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a3ca:	0d1b      	lsrs	r3, r3, #20
 800a3cc:	051b      	lsls	r3, r3, #20
 800a3ce:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a3d2:	d961      	bls.n	800a498 <_strtod_l+0x8b8>
 800a3d4:	6963      	ldr	r3, [r4, #20]
 800a3d6:	b913      	cbnz	r3, 800a3de <_strtod_l+0x7fe>
 800a3d8:	6923      	ldr	r3, [r4, #16]
 800a3da:	2b01      	cmp	r3, #1
 800a3dc:	dd5c      	ble.n	800a498 <_strtod_l+0x8b8>
 800a3de:	4621      	mov	r1, r4
 800a3e0:	2201      	movs	r2, #1
 800a3e2:	9805      	ldr	r0, [sp, #20]
 800a3e4:	f002 fe28 	bl	800d038 <__lshift>
 800a3e8:	4641      	mov	r1, r8
 800a3ea:	4604      	mov	r4, r0
 800a3ec:	f002 fe90 	bl	800d110 <__mcmp>
 800a3f0:	2800      	cmp	r0, #0
 800a3f2:	dd51      	ble.n	800a498 <_strtod_l+0x8b8>
 800a3f4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a3f8:	9a08      	ldr	r2, [sp, #32]
 800a3fa:	0d1b      	lsrs	r3, r3, #20
 800a3fc:	051b      	lsls	r3, r3, #20
 800a3fe:	2a00      	cmp	r2, #0
 800a400:	d06b      	beq.n	800a4da <_strtod_l+0x8fa>
 800a402:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a406:	d868      	bhi.n	800a4da <_strtod_l+0x8fa>
 800a408:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a40c:	f67f ae9d 	bls.w	800a14a <_strtod_l+0x56a>
 800a410:	4b0a      	ldr	r3, [pc, #40]	@ (800a43c <_strtod_l+0x85c>)
 800a412:	4650      	mov	r0, sl
 800a414:	4659      	mov	r1, fp
 800a416:	2200      	movs	r2, #0
 800a418:	f7f6 f926 	bl	8000668 <__aeabi_dmul>
 800a41c:	4b08      	ldr	r3, [pc, #32]	@ (800a440 <_strtod_l+0x860>)
 800a41e:	400b      	ands	r3, r1
 800a420:	4682      	mov	sl, r0
 800a422:	468b      	mov	fp, r1
 800a424:	2b00      	cmp	r3, #0
 800a426:	f47f ae05 	bne.w	800a034 <_strtod_l+0x454>
 800a42a:	9a05      	ldr	r2, [sp, #20]
 800a42c:	2322      	movs	r3, #34	@ 0x22
 800a42e:	6013      	str	r3, [r2, #0]
 800a430:	e600      	b.n	800a034 <_strtod_l+0x454>
 800a432:	bf00      	nop
 800a434:	08016058 	.word	0x08016058
 800a438:	fffffc02 	.word	0xfffffc02
 800a43c:	39500000 	.word	0x39500000
 800a440:	7ff00000 	.word	0x7ff00000
 800a444:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a448:	d165      	bne.n	800a516 <_strtod_l+0x936>
 800a44a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a44c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a450:	b35a      	cbz	r2, 800a4aa <_strtod_l+0x8ca>
 800a452:	4a9f      	ldr	r2, [pc, #636]	@ (800a6d0 <_strtod_l+0xaf0>)
 800a454:	4293      	cmp	r3, r2
 800a456:	d12b      	bne.n	800a4b0 <_strtod_l+0x8d0>
 800a458:	9b08      	ldr	r3, [sp, #32]
 800a45a:	4651      	mov	r1, sl
 800a45c:	b303      	cbz	r3, 800a4a0 <_strtod_l+0x8c0>
 800a45e:	4b9d      	ldr	r3, [pc, #628]	@ (800a6d4 <_strtod_l+0xaf4>)
 800a460:	465a      	mov	r2, fp
 800a462:	4013      	ands	r3, r2
 800a464:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a468:	f04f 32ff 	mov.w	r2, #4294967295
 800a46c:	d81b      	bhi.n	800a4a6 <_strtod_l+0x8c6>
 800a46e:	0d1b      	lsrs	r3, r3, #20
 800a470:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a474:	fa02 f303 	lsl.w	r3, r2, r3
 800a478:	4299      	cmp	r1, r3
 800a47a:	d119      	bne.n	800a4b0 <_strtod_l+0x8d0>
 800a47c:	4b96      	ldr	r3, [pc, #600]	@ (800a6d8 <_strtod_l+0xaf8>)
 800a47e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a480:	429a      	cmp	r2, r3
 800a482:	d102      	bne.n	800a48a <_strtod_l+0x8aa>
 800a484:	3101      	adds	r1, #1
 800a486:	f43f adca 	beq.w	800a01e <_strtod_l+0x43e>
 800a48a:	4b92      	ldr	r3, [pc, #584]	@ (800a6d4 <_strtod_l+0xaf4>)
 800a48c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a48e:	401a      	ands	r2, r3
 800a490:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800a494:	f04f 0a00 	mov.w	sl, #0
 800a498:	9b08      	ldr	r3, [sp, #32]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d1b8      	bne.n	800a410 <_strtod_l+0x830>
 800a49e:	e5c9      	b.n	800a034 <_strtod_l+0x454>
 800a4a0:	f04f 33ff 	mov.w	r3, #4294967295
 800a4a4:	e7e8      	b.n	800a478 <_strtod_l+0x898>
 800a4a6:	4613      	mov	r3, r2
 800a4a8:	e7e6      	b.n	800a478 <_strtod_l+0x898>
 800a4aa:	ea53 030a 	orrs.w	r3, r3, sl
 800a4ae:	d0a1      	beq.n	800a3f4 <_strtod_l+0x814>
 800a4b0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a4b2:	b1db      	cbz	r3, 800a4ec <_strtod_l+0x90c>
 800a4b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a4b6:	4213      	tst	r3, r2
 800a4b8:	d0ee      	beq.n	800a498 <_strtod_l+0x8b8>
 800a4ba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a4bc:	9a08      	ldr	r2, [sp, #32]
 800a4be:	4650      	mov	r0, sl
 800a4c0:	4659      	mov	r1, fp
 800a4c2:	b1bb      	cbz	r3, 800a4f4 <_strtod_l+0x914>
 800a4c4:	f7ff fb6b 	bl	8009b9e <sulp>
 800a4c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a4cc:	ec53 2b10 	vmov	r2, r3, d0
 800a4d0:	f7f5 ff14 	bl	80002fc <__adddf3>
 800a4d4:	4682      	mov	sl, r0
 800a4d6:	468b      	mov	fp, r1
 800a4d8:	e7de      	b.n	800a498 <_strtod_l+0x8b8>
 800a4da:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a4de:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a4e2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a4e6:	f04f 3aff 	mov.w	sl, #4294967295
 800a4ea:	e7d5      	b.n	800a498 <_strtod_l+0x8b8>
 800a4ec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a4ee:	ea13 0f0a 	tst.w	r3, sl
 800a4f2:	e7e1      	b.n	800a4b8 <_strtod_l+0x8d8>
 800a4f4:	f7ff fb53 	bl	8009b9e <sulp>
 800a4f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a4fc:	ec53 2b10 	vmov	r2, r3, d0
 800a500:	f7f5 fefa 	bl	80002f8 <__aeabi_dsub>
 800a504:	2200      	movs	r2, #0
 800a506:	2300      	movs	r3, #0
 800a508:	4682      	mov	sl, r0
 800a50a:	468b      	mov	fp, r1
 800a50c:	f7f6 fb14 	bl	8000b38 <__aeabi_dcmpeq>
 800a510:	2800      	cmp	r0, #0
 800a512:	d0c1      	beq.n	800a498 <_strtod_l+0x8b8>
 800a514:	e619      	b.n	800a14a <_strtod_l+0x56a>
 800a516:	4641      	mov	r1, r8
 800a518:	4620      	mov	r0, r4
 800a51a:	f002 ff71 	bl	800d400 <__ratio>
 800a51e:	ec57 6b10 	vmov	r6, r7, d0
 800a522:	2200      	movs	r2, #0
 800a524:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a528:	4630      	mov	r0, r6
 800a52a:	4639      	mov	r1, r7
 800a52c:	f7f6 fb18 	bl	8000b60 <__aeabi_dcmple>
 800a530:	2800      	cmp	r0, #0
 800a532:	d06f      	beq.n	800a614 <_strtod_l+0xa34>
 800a534:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a536:	2b00      	cmp	r3, #0
 800a538:	d17a      	bne.n	800a630 <_strtod_l+0xa50>
 800a53a:	f1ba 0f00 	cmp.w	sl, #0
 800a53e:	d158      	bne.n	800a5f2 <_strtod_l+0xa12>
 800a540:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a542:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a546:	2b00      	cmp	r3, #0
 800a548:	d15a      	bne.n	800a600 <_strtod_l+0xa20>
 800a54a:	4b64      	ldr	r3, [pc, #400]	@ (800a6dc <_strtod_l+0xafc>)
 800a54c:	2200      	movs	r2, #0
 800a54e:	4630      	mov	r0, r6
 800a550:	4639      	mov	r1, r7
 800a552:	f7f6 fafb 	bl	8000b4c <__aeabi_dcmplt>
 800a556:	2800      	cmp	r0, #0
 800a558:	d159      	bne.n	800a60e <_strtod_l+0xa2e>
 800a55a:	4630      	mov	r0, r6
 800a55c:	4639      	mov	r1, r7
 800a55e:	4b60      	ldr	r3, [pc, #384]	@ (800a6e0 <_strtod_l+0xb00>)
 800a560:	2200      	movs	r2, #0
 800a562:	f7f6 f881 	bl	8000668 <__aeabi_dmul>
 800a566:	4606      	mov	r6, r0
 800a568:	460f      	mov	r7, r1
 800a56a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800a56e:	9606      	str	r6, [sp, #24]
 800a570:	9307      	str	r3, [sp, #28]
 800a572:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a576:	4d57      	ldr	r5, [pc, #348]	@ (800a6d4 <_strtod_l+0xaf4>)
 800a578:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a57c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a57e:	401d      	ands	r5, r3
 800a580:	4b58      	ldr	r3, [pc, #352]	@ (800a6e4 <_strtod_l+0xb04>)
 800a582:	429d      	cmp	r5, r3
 800a584:	f040 80b2 	bne.w	800a6ec <_strtod_l+0xb0c>
 800a588:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a58a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800a58e:	ec4b ab10 	vmov	d0, sl, fp
 800a592:	f002 fe6d 	bl	800d270 <__ulp>
 800a596:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a59a:	ec51 0b10 	vmov	r0, r1, d0
 800a59e:	f7f6 f863 	bl	8000668 <__aeabi_dmul>
 800a5a2:	4652      	mov	r2, sl
 800a5a4:	465b      	mov	r3, fp
 800a5a6:	f7f5 fea9 	bl	80002fc <__adddf3>
 800a5aa:	460b      	mov	r3, r1
 800a5ac:	4949      	ldr	r1, [pc, #292]	@ (800a6d4 <_strtod_l+0xaf4>)
 800a5ae:	4a4e      	ldr	r2, [pc, #312]	@ (800a6e8 <_strtod_l+0xb08>)
 800a5b0:	4019      	ands	r1, r3
 800a5b2:	4291      	cmp	r1, r2
 800a5b4:	4682      	mov	sl, r0
 800a5b6:	d942      	bls.n	800a63e <_strtod_l+0xa5e>
 800a5b8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a5ba:	4b47      	ldr	r3, [pc, #284]	@ (800a6d8 <_strtod_l+0xaf8>)
 800a5bc:	429a      	cmp	r2, r3
 800a5be:	d103      	bne.n	800a5c8 <_strtod_l+0x9e8>
 800a5c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a5c2:	3301      	adds	r3, #1
 800a5c4:	f43f ad2b 	beq.w	800a01e <_strtod_l+0x43e>
 800a5c8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800a6d8 <_strtod_l+0xaf8>
 800a5cc:	f04f 3aff 	mov.w	sl, #4294967295
 800a5d0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a5d2:	9805      	ldr	r0, [sp, #20]
 800a5d4:	f002 fb18 	bl	800cc08 <_Bfree>
 800a5d8:	9805      	ldr	r0, [sp, #20]
 800a5da:	4649      	mov	r1, r9
 800a5dc:	f002 fb14 	bl	800cc08 <_Bfree>
 800a5e0:	9805      	ldr	r0, [sp, #20]
 800a5e2:	4641      	mov	r1, r8
 800a5e4:	f002 fb10 	bl	800cc08 <_Bfree>
 800a5e8:	9805      	ldr	r0, [sp, #20]
 800a5ea:	4621      	mov	r1, r4
 800a5ec:	f002 fb0c 	bl	800cc08 <_Bfree>
 800a5f0:	e618      	b.n	800a224 <_strtod_l+0x644>
 800a5f2:	f1ba 0f01 	cmp.w	sl, #1
 800a5f6:	d103      	bne.n	800a600 <_strtod_l+0xa20>
 800a5f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	f43f ada5 	beq.w	800a14a <_strtod_l+0x56a>
 800a600:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800a6b0 <_strtod_l+0xad0>
 800a604:	4f35      	ldr	r7, [pc, #212]	@ (800a6dc <_strtod_l+0xafc>)
 800a606:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a60a:	2600      	movs	r6, #0
 800a60c:	e7b1      	b.n	800a572 <_strtod_l+0x992>
 800a60e:	4f34      	ldr	r7, [pc, #208]	@ (800a6e0 <_strtod_l+0xb00>)
 800a610:	2600      	movs	r6, #0
 800a612:	e7aa      	b.n	800a56a <_strtod_l+0x98a>
 800a614:	4b32      	ldr	r3, [pc, #200]	@ (800a6e0 <_strtod_l+0xb00>)
 800a616:	4630      	mov	r0, r6
 800a618:	4639      	mov	r1, r7
 800a61a:	2200      	movs	r2, #0
 800a61c:	f7f6 f824 	bl	8000668 <__aeabi_dmul>
 800a620:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a622:	4606      	mov	r6, r0
 800a624:	460f      	mov	r7, r1
 800a626:	2b00      	cmp	r3, #0
 800a628:	d09f      	beq.n	800a56a <_strtod_l+0x98a>
 800a62a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a62e:	e7a0      	b.n	800a572 <_strtod_l+0x992>
 800a630:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800a6b8 <_strtod_l+0xad8>
 800a634:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a638:	ec57 6b17 	vmov	r6, r7, d7
 800a63c:	e799      	b.n	800a572 <_strtod_l+0x992>
 800a63e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a642:	9b08      	ldr	r3, [sp, #32]
 800a644:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d1c1      	bne.n	800a5d0 <_strtod_l+0x9f0>
 800a64c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a650:	0d1b      	lsrs	r3, r3, #20
 800a652:	051b      	lsls	r3, r3, #20
 800a654:	429d      	cmp	r5, r3
 800a656:	d1bb      	bne.n	800a5d0 <_strtod_l+0x9f0>
 800a658:	4630      	mov	r0, r6
 800a65a:	4639      	mov	r1, r7
 800a65c:	f7f6 fb64 	bl	8000d28 <__aeabi_d2lz>
 800a660:	f7f5 ffd4 	bl	800060c <__aeabi_l2d>
 800a664:	4602      	mov	r2, r0
 800a666:	460b      	mov	r3, r1
 800a668:	4630      	mov	r0, r6
 800a66a:	4639      	mov	r1, r7
 800a66c:	f7f5 fe44 	bl	80002f8 <__aeabi_dsub>
 800a670:	460b      	mov	r3, r1
 800a672:	4602      	mov	r2, r0
 800a674:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a678:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800a67c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a67e:	ea46 060a 	orr.w	r6, r6, sl
 800a682:	431e      	orrs	r6, r3
 800a684:	d06f      	beq.n	800a766 <_strtod_l+0xb86>
 800a686:	a30e      	add	r3, pc, #56	@ (adr r3, 800a6c0 <_strtod_l+0xae0>)
 800a688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a68c:	f7f6 fa5e 	bl	8000b4c <__aeabi_dcmplt>
 800a690:	2800      	cmp	r0, #0
 800a692:	f47f accf 	bne.w	800a034 <_strtod_l+0x454>
 800a696:	a30c      	add	r3, pc, #48	@ (adr r3, 800a6c8 <_strtod_l+0xae8>)
 800a698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a69c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a6a0:	f7f6 fa72 	bl	8000b88 <__aeabi_dcmpgt>
 800a6a4:	2800      	cmp	r0, #0
 800a6a6:	d093      	beq.n	800a5d0 <_strtod_l+0x9f0>
 800a6a8:	e4c4      	b.n	800a034 <_strtod_l+0x454>
 800a6aa:	bf00      	nop
 800a6ac:	f3af 8000 	nop.w
 800a6b0:	00000000 	.word	0x00000000
 800a6b4:	bff00000 	.word	0xbff00000
 800a6b8:	00000000 	.word	0x00000000
 800a6bc:	3ff00000 	.word	0x3ff00000
 800a6c0:	94a03595 	.word	0x94a03595
 800a6c4:	3fdfffff 	.word	0x3fdfffff
 800a6c8:	35afe535 	.word	0x35afe535
 800a6cc:	3fe00000 	.word	0x3fe00000
 800a6d0:	000fffff 	.word	0x000fffff
 800a6d4:	7ff00000 	.word	0x7ff00000
 800a6d8:	7fefffff 	.word	0x7fefffff
 800a6dc:	3ff00000 	.word	0x3ff00000
 800a6e0:	3fe00000 	.word	0x3fe00000
 800a6e4:	7fe00000 	.word	0x7fe00000
 800a6e8:	7c9fffff 	.word	0x7c9fffff
 800a6ec:	9b08      	ldr	r3, [sp, #32]
 800a6ee:	b323      	cbz	r3, 800a73a <_strtod_l+0xb5a>
 800a6f0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800a6f4:	d821      	bhi.n	800a73a <_strtod_l+0xb5a>
 800a6f6:	a328      	add	r3, pc, #160	@ (adr r3, 800a798 <_strtod_l+0xbb8>)
 800a6f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6fc:	4630      	mov	r0, r6
 800a6fe:	4639      	mov	r1, r7
 800a700:	f7f6 fa2e 	bl	8000b60 <__aeabi_dcmple>
 800a704:	b1a0      	cbz	r0, 800a730 <_strtod_l+0xb50>
 800a706:	4639      	mov	r1, r7
 800a708:	4630      	mov	r0, r6
 800a70a:	f7f6 fa85 	bl	8000c18 <__aeabi_d2uiz>
 800a70e:	2801      	cmp	r0, #1
 800a710:	bf38      	it	cc
 800a712:	2001      	movcc	r0, #1
 800a714:	f7f5 ff2e 	bl	8000574 <__aeabi_ui2d>
 800a718:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a71a:	4606      	mov	r6, r0
 800a71c:	460f      	mov	r7, r1
 800a71e:	b9fb      	cbnz	r3, 800a760 <_strtod_l+0xb80>
 800a720:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a724:	9014      	str	r0, [sp, #80]	@ 0x50
 800a726:	9315      	str	r3, [sp, #84]	@ 0x54
 800a728:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a72c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a730:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a732:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a736:	1b5b      	subs	r3, r3, r5
 800a738:	9311      	str	r3, [sp, #68]	@ 0x44
 800a73a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a73e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800a742:	f002 fd95 	bl	800d270 <__ulp>
 800a746:	4650      	mov	r0, sl
 800a748:	ec53 2b10 	vmov	r2, r3, d0
 800a74c:	4659      	mov	r1, fp
 800a74e:	f7f5 ff8b 	bl	8000668 <__aeabi_dmul>
 800a752:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a756:	f7f5 fdd1 	bl	80002fc <__adddf3>
 800a75a:	4682      	mov	sl, r0
 800a75c:	468b      	mov	fp, r1
 800a75e:	e770      	b.n	800a642 <_strtod_l+0xa62>
 800a760:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a764:	e7e0      	b.n	800a728 <_strtod_l+0xb48>
 800a766:	a30e      	add	r3, pc, #56	@ (adr r3, 800a7a0 <_strtod_l+0xbc0>)
 800a768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a76c:	f7f6 f9ee 	bl	8000b4c <__aeabi_dcmplt>
 800a770:	e798      	b.n	800a6a4 <_strtod_l+0xac4>
 800a772:	2300      	movs	r3, #0
 800a774:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a776:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a778:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a77a:	6013      	str	r3, [r2, #0]
 800a77c:	f7ff ba6d 	b.w	8009c5a <_strtod_l+0x7a>
 800a780:	2a65      	cmp	r2, #101	@ 0x65
 800a782:	f43f ab66 	beq.w	8009e52 <_strtod_l+0x272>
 800a786:	2a45      	cmp	r2, #69	@ 0x45
 800a788:	f43f ab63 	beq.w	8009e52 <_strtod_l+0x272>
 800a78c:	2301      	movs	r3, #1
 800a78e:	f7ff bb9e 	b.w	8009ece <_strtod_l+0x2ee>
 800a792:	bf00      	nop
 800a794:	f3af 8000 	nop.w
 800a798:	ffc00000 	.word	0xffc00000
 800a79c:	41dfffff 	.word	0x41dfffff
 800a7a0:	94a03595 	.word	0x94a03595
 800a7a4:	3fcfffff 	.word	0x3fcfffff

0800a7a8 <strtof>:
 800a7a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7ac:	f8df 80bc 	ldr.w	r8, [pc, #188]	@ 800a86c <strtof+0xc4>
 800a7b0:	4b29      	ldr	r3, [pc, #164]	@ (800a858 <strtof+0xb0>)
 800a7b2:	460a      	mov	r2, r1
 800a7b4:	ed2d 8b02 	vpush	{d8}
 800a7b8:	4601      	mov	r1, r0
 800a7ba:	f8d8 0000 	ldr.w	r0, [r8]
 800a7be:	f7ff fa0f 	bl	8009be0 <_strtod_l>
 800a7c2:	ec55 4b10 	vmov	r4, r5, d0
 800a7c6:	4622      	mov	r2, r4
 800a7c8:	462b      	mov	r3, r5
 800a7ca:	4620      	mov	r0, r4
 800a7cc:	4629      	mov	r1, r5
 800a7ce:	f7f6 f9e5 	bl	8000b9c <__aeabi_dcmpun>
 800a7d2:	b190      	cbz	r0, 800a7fa <strtof+0x52>
 800a7d4:	2d00      	cmp	r5, #0
 800a7d6:	4821      	ldr	r0, [pc, #132]	@ (800a85c <strtof+0xb4>)
 800a7d8:	da09      	bge.n	800a7ee <strtof+0x46>
 800a7da:	f000 ff35 	bl	800b648 <nanf>
 800a7de:	eeb1 8a40 	vneg.f32	s16, s0
 800a7e2:	eeb0 0a48 	vmov.f32	s0, s16
 800a7e6:	ecbd 8b02 	vpop	{d8}
 800a7ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7ee:	ecbd 8b02 	vpop	{d8}
 800a7f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a7f6:	f000 bf27 	b.w	800b648 <nanf>
 800a7fa:	4620      	mov	r0, r4
 800a7fc:	4629      	mov	r1, r5
 800a7fe:	f7f6 fa2b 	bl	8000c58 <__aeabi_d2f>
 800a802:	ee08 0a10 	vmov	s16, r0
 800a806:	eddf 7a16 	vldr	s15, [pc, #88]	@ 800a860 <strtof+0xb8>
 800a80a:	eeb0 7ac8 	vabs.f32	s14, s16
 800a80e:	eeb4 7a67 	vcmp.f32	s14, s15
 800a812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a816:	dd11      	ble.n	800a83c <strtof+0x94>
 800a818:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 800a81c:	4b11      	ldr	r3, [pc, #68]	@ (800a864 <strtof+0xbc>)
 800a81e:	f04f 32ff 	mov.w	r2, #4294967295
 800a822:	4620      	mov	r0, r4
 800a824:	4639      	mov	r1, r7
 800a826:	f7f6 f9b9 	bl	8000b9c <__aeabi_dcmpun>
 800a82a:	b980      	cbnz	r0, 800a84e <strtof+0xa6>
 800a82c:	4b0d      	ldr	r3, [pc, #52]	@ (800a864 <strtof+0xbc>)
 800a82e:	f04f 32ff 	mov.w	r2, #4294967295
 800a832:	4620      	mov	r0, r4
 800a834:	4639      	mov	r1, r7
 800a836:	f7f6 f993 	bl	8000b60 <__aeabi_dcmple>
 800a83a:	b940      	cbnz	r0, 800a84e <strtof+0xa6>
 800a83c:	ee18 3a10 	vmov	r3, s16
 800a840:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800a844:	d1cd      	bne.n	800a7e2 <strtof+0x3a>
 800a846:	4b08      	ldr	r3, [pc, #32]	@ (800a868 <strtof+0xc0>)
 800a848:	402b      	ands	r3, r5
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d0c9      	beq.n	800a7e2 <strtof+0x3a>
 800a84e:	f8d8 3000 	ldr.w	r3, [r8]
 800a852:	2222      	movs	r2, #34	@ 0x22
 800a854:	601a      	str	r2, [r3, #0]
 800a856:	e7c4      	b.n	800a7e2 <strtof+0x3a>
 800a858:	20000068 	.word	0x20000068
 800a85c:	0801644c 	.word	0x0801644c
 800a860:	7f7fffff 	.word	0x7f7fffff
 800a864:	7fefffff 	.word	0x7fefffff
 800a868:	7ff00000 	.word	0x7ff00000
 800a86c:	200001d4 	.word	0x200001d4

0800a870 <_strtoul_l.constprop.0>:
 800a870:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a874:	4e34      	ldr	r6, [pc, #208]	@ (800a948 <_strtoul_l.constprop.0+0xd8>)
 800a876:	4686      	mov	lr, r0
 800a878:	460d      	mov	r5, r1
 800a87a:	4628      	mov	r0, r5
 800a87c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a880:	5d37      	ldrb	r7, [r6, r4]
 800a882:	f017 0708 	ands.w	r7, r7, #8
 800a886:	d1f8      	bne.n	800a87a <_strtoul_l.constprop.0+0xa>
 800a888:	2c2d      	cmp	r4, #45	@ 0x2d
 800a88a:	d12f      	bne.n	800a8ec <_strtoul_l.constprop.0+0x7c>
 800a88c:	782c      	ldrb	r4, [r5, #0]
 800a88e:	2701      	movs	r7, #1
 800a890:	1c85      	adds	r5, r0, #2
 800a892:	f033 0010 	bics.w	r0, r3, #16
 800a896:	d109      	bne.n	800a8ac <_strtoul_l.constprop.0+0x3c>
 800a898:	2c30      	cmp	r4, #48	@ 0x30
 800a89a:	d12c      	bne.n	800a8f6 <_strtoul_l.constprop.0+0x86>
 800a89c:	7828      	ldrb	r0, [r5, #0]
 800a89e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800a8a2:	2858      	cmp	r0, #88	@ 0x58
 800a8a4:	d127      	bne.n	800a8f6 <_strtoul_l.constprop.0+0x86>
 800a8a6:	786c      	ldrb	r4, [r5, #1]
 800a8a8:	2310      	movs	r3, #16
 800a8aa:	3502      	adds	r5, #2
 800a8ac:	f04f 38ff 	mov.w	r8, #4294967295
 800a8b0:	2600      	movs	r6, #0
 800a8b2:	fbb8 f8f3 	udiv	r8, r8, r3
 800a8b6:	fb03 f908 	mul.w	r9, r3, r8
 800a8ba:	ea6f 0909 	mvn.w	r9, r9
 800a8be:	4630      	mov	r0, r6
 800a8c0:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800a8c4:	f1bc 0f09 	cmp.w	ip, #9
 800a8c8:	d81c      	bhi.n	800a904 <_strtoul_l.constprop.0+0x94>
 800a8ca:	4664      	mov	r4, ip
 800a8cc:	42a3      	cmp	r3, r4
 800a8ce:	dd2a      	ble.n	800a926 <_strtoul_l.constprop.0+0xb6>
 800a8d0:	f1b6 3fff 	cmp.w	r6, #4294967295
 800a8d4:	d007      	beq.n	800a8e6 <_strtoul_l.constprop.0+0x76>
 800a8d6:	4580      	cmp	r8, r0
 800a8d8:	d322      	bcc.n	800a920 <_strtoul_l.constprop.0+0xb0>
 800a8da:	d101      	bne.n	800a8e0 <_strtoul_l.constprop.0+0x70>
 800a8dc:	45a1      	cmp	r9, r4
 800a8de:	db1f      	blt.n	800a920 <_strtoul_l.constprop.0+0xb0>
 800a8e0:	fb00 4003 	mla	r0, r0, r3, r4
 800a8e4:	2601      	movs	r6, #1
 800a8e6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a8ea:	e7e9      	b.n	800a8c0 <_strtoul_l.constprop.0+0x50>
 800a8ec:	2c2b      	cmp	r4, #43	@ 0x2b
 800a8ee:	bf04      	itt	eq
 800a8f0:	782c      	ldrbeq	r4, [r5, #0]
 800a8f2:	1c85      	addeq	r5, r0, #2
 800a8f4:	e7cd      	b.n	800a892 <_strtoul_l.constprop.0+0x22>
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d1d8      	bne.n	800a8ac <_strtoul_l.constprop.0+0x3c>
 800a8fa:	2c30      	cmp	r4, #48	@ 0x30
 800a8fc:	bf0c      	ite	eq
 800a8fe:	2308      	moveq	r3, #8
 800a900:	230a      	movne	r3, #10
 800a902:	e7d3      	b.n	800a8ac <_strtoul_l.constprop.0+0x3c>
 800a904:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800a908:	f1bc 0f19 	cmp.w	ip, #25
 800a90c:	d801      	bhi.n	800a912 <_strtoul_l.constprop.0+0xa2>
 800a90e:	3c37      	subs	r4, #55	@ 0x37
 800a910:	e7dc      	b.n	800a8cc <_strtoul_l.constprop.0+0x5c>
 800a912:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800a916:	f1bc 0f19 	cmp.w	ip, #25
 800a91a:	d804      	bhi.n	800a926 <_strtoul_l.constprop.0+0xb6>
 800a91c:	3c57      	subs	r4, #87	@ 0x57
 800a91e:	e7d5      	b.n	800a8cc <_strtoul_l.constprop.0+0x5c>
 800a920:	f04f 36ff 	mov.w	r6, #4294967295
 800a924:	e7df      	b.n	800a8e6 <_strtoul_l.constprop.0+0x76>
 800a926:	1c73      	adds	r3, r6, #1
 800a928:	d106      	bne.n	800a938 <_strtoul_l.constprop.0+0xc8>
 800a92a:	2322      	movs	r3, #34	@ 0x22
 800a92c:	f8ce 3000 	str.w	r3, [lr]
 800a930:	4630      	mov	r0, r6
 800a932:	b932      	cbnz	r2, 800a942 <_strtoul_l.constprop.0+0xd2>
 800a934:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a938:	b107      	cbz	r7, 800a93c <_strtoul_l.constprop.0+0xcc>
 800a93a:	4240      	negs	r0, r0
 800a93c:	2a00      	cmp	r2, #0
 800a93e:	d0f9      	beq.n	800a934 <_strtoul_l.constprop.0+0xc4>
 800a940:	b106      	cbz	r6, 800a944 <_strtoul_l.constprop.0+0xd4>
 800a942:	1e69      	subs	r1, r5, #1
 800a944:	6011      	str	r1, [r2, #0]
 800a946:	e7f5      	b.n	800a934 <_strtoul_l.constprop.0+0xc4>
 800a948:	08016081 	.word	0x08016081

0800a94c <strtoul>:
 800a94c:	4613      	mov	r3, r2
 800a94e:	460a      	mov	r2, r1
 800a950:	4601      	mov	r1, r0
 800a952:	4802      	ldr	r0, [pc, #8]	@ (800a95c <strtoul+0x10>)
 800a954:	6800      	ldr	r0, [r0, #0]
 800a956:	f7ff bf8b 	b.w	800a870 <_strtoul_l.constprop.0>
 800a95a:	bf00      	nop
 800a95c:	200001d4 	.word	0x200001d4

0800a960 <__cvt>:
 800a960:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a964:	ec57 6b10 	vmov	r6, r7, d0
 800a968:	2f00      	cmp	r7, #0
 800a96a:	460c      	mov	r4, r1
 800a96c:	4619      	mov	r1, r3
 800a96e:	463b      	mov	r3, r7
 800a970:	bfbb      	ittet	lt
 800a972:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a976:	461f      	movlt	r7, r3
 800a978:	2300      	movge	r3, #0
 800a97a:	232d      	movlt	r3, #45	@ 0x2d
 800a97c:	700b      	strb	r3, [r1, #0]
 800a97e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a980:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a984:	4691      	mov	r9, r2
 800a986:	f023 0820 	bic.w	r8, r3, #32
 800a98a:	bfbc      	itt	lt
 800a98c:	4632      	movlt	r2, r6
 800a98e:	4616      	movlt	r6, r2
 800a990:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a994:	d005      	beq.n	800a9a2 <__cvt+0x42>
 800a996:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a99a:	d100      	bne.n	800a99e <__cvt+0x3e>
 800a99c:	3401      	adds	r4, #1
 800a99e:	2102      	movs	r1, #2
 800a9a0:	e000      	b.n	800a9a4 <__cvt+0x44>
 800a9a2:	2103      	movs	r1, #3
 800a9a4:	ab03      	add	r3, sp, #12
 800a9a6:	9301      	str	r3, [sp, #4]
 800a9a8:	ab02      	add	r3, sp, #8
 800a9aa:	9300      	str	r3, [sp, #0]
 800a9ac:	ec47 6b10 	vmov	d0, r6, r7
 800a9b0:	4653      	mov	r3, sl
 800a9b2:	4622      	mov	r2, r4
 800a9b4:	f000 fed8 	bl	800b768 <_dtoa_r>
 800a9b8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a9bc:	4605      	mov	r5, r0
 800a9be:	d119      	bne.n	800a9f4 <__cvt+0x94>
 800a9c0:	f019 0f01 	tst.w	r9, #1
 800a9c4:	d00e      	beq.n	800a9e4 <__cvt+0x84>
 800a9c6:	eb00 0904 	add.w	r9, r0, r4
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	4630      	mov	r0, r6
 800a9d0:	4639      	mov	r1, r7
 800a9d2:	f7f6 f8b1 	bl	8000b38 <__aeabi_dcmpeq>
 800a9d6:	b108      	cbz	r0, 800a9dc <__cvt+0x7c>
 800a9d8:	f8cd 900c 	str.w	r9, [sp, #12]
 800a9dc:	2230      	movs	r2, #48	@ 0x30
 800a9de:	9b03      	ldr	r3, [sp, #12]
 800a9e0:	454b      	cmp	r3, r9
 800a9e2:	d31e      	bcc.n	800aa22 <__cvt+0xc2>
 800a9e4:	9b03      	ldr	r3, [sp, #12]
 800a9e6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a9e8:	1b5b      	subs	r3, r3, r5
 800a9ea:	4628      	mov	r0, r5
 800a9ec:	6013      	str	r3, [r2, #0]
 800a9ee:	b004      	add	sp, #16
 800a9f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9f4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a9f8:	eb00 0904 	add.w	r9, r0, r4
 800a9fc:	d1e5      	bne.n	800a9ca <__cvt+0x6a>
 800a9fe:	7803      	ldrb	r3, [r0, #0]
 800aa00:	2b30      	cmp	r3, #48	@ 0x30
 800aa02:	d10a      	bne.n	800aa1a <__cvt+0xba>
 800aa04:	2200      	movs	r2, #0
 800aa06:	2300      	movs	r3, #0
 800aa08:	4630      	mov	r0, r6
 800aa0a:	4639      	mov	r1, r7
 800aa0c:	f7f6 f894 	bl	8000b38 <__aeabi_dcmpeq>
 800aa10:	b918      	cbnz	r0, 800aa1a <__cvt+0xba>
 800aa12:	f1c4 0401 	rsb	r4, r4, #1
 800aa16:	f8ca 4000 	str.w	r4, [sl]
 800aa1a:	f8da 3000 	ldr.w	r3, [sl]
 800aa1e:	4499      	add	r9, r3
 800aa20:	e7d3      	b.n	800a9ca <__cvt+0x6a>
 800aa22:	1c59      	adds	r1, r3, #1
 800aa24:	9103      	str	r1, [sp, #12]
 800aa26:	701a      	strb	r2, [r3, #0]
 800aa28:	e7d9      	b.n	800a9de <__cvt+0x7e>

0800aa2a <__exponent>:
 800aa2a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aa2c:	2900      	cmp	r1, #0
 800aa2e:	bfba      	itte	lt
 800aa30:	4249      	neglt	r1, r1
 800aa32:	232d      	movlt	r3, #45	@ 0x2d
 800aa34:	232b      	movge	r3, #43	@ 0x2b
 800aa36:	2909      	cmp	r1, #9
 800aa38:	7002      	strb	r2, [r0, #0]
 800aa3a:	7043      	strb	r3, [r0, #1]
 800aa3c:	dd29      	ble.n	800aa92 <__exponent+0x68>
 800aa3e:	f10d 0307 	add.w	r3, sp, #7
 800aa42:	461d      	mov	r5, r3
 800aa44:	270a      	movs	r7, #10
 800aa46:	461a      	mov	r2, r3
 800aa48:	fbb1 f6f7 	udiv	r6, r1, r7
 800aa4c:	fb07 1416 	mls	r4, r7, r6, r1
 800aa50:	3430      	adds	r4, #48	@ 0x30
 800aa52:	f802 4c01 	strb.w	r4, [r2, #-1]
 800aa56:	460c      	mov	r4, r1
 800aa58:	2c63      	cmp	r4, #99	@ 0x63
 800aa5a:	f103 33ff 	add.w	r3, r3, #4294967295
 800aa5e:	4631      	mov	r1, r6
 800aa60:	dcf1      	bgt.n	800aa46 <__exponent+0x1c>
 800aa62:	3130      	adds	r1, #48	@ 0x30
 800aa64:	1e94      	subs	r4, r2, #2
 800aa66:	f803 1c01 	strb.w	r1, [r3, #-1]
 800aa6a:	1c41      	adds	r1, r0, #1
 800aa6c:	4623      	mov	r3, r4
 800aa6e:	42ab      	cmp	r3, r5
 800aa70:	d30a      	bcc.n	800aa88 <__exponent+0x5e>
 800aa72:	f10d 0309 	add.w	r3, sp, #9
 800aa76:	1a9b      	subs	r3, r3, r2
 800aa78:	42ac      	cmp	r4, r5
 800aa7a:	bf88      	it	hi
 800aa7c:	2300      	movhi	r3, #0
 800aa7e:	3302      	adds	r3, #2
 800aa80:	4403      	add	r3, r0
 800aa82:	1a18      	subs	r0, r3, r0
 800aa84:	b003      	add	sp, #12
 800aa86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa88:	f813 6b01 	ldrb.w	r6, [r3], #1
 800aa8c:	f801 6f01 	strb.w	r6, [r1, #1]!
 800aa90:	e7ed      	b.n	800aa6e <__exponent+0x44>
 800aa92:	2330      	movs	r3, #48	@ 0x30
 800aa94:	3130      	adds	r1, #48	@ 0x30
 800aa96:	7083      	strb	r3, [r0, #2]
 800aa98:	70c1      	strb	r1, [r0, #3]
 800aa9a:	1d03      	adds	r3, r0, #4
 800aa9c:	e7f1      	b.n	800aa82 <__exponent+0x58>
	...

0800aaa0 <_printf_float>:
 800aaa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaa4:	b08d      	sub	sp, #52	@ 0x34
 800aaa6:	460c      	mov	r4, r1
 800aaa8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800aaac:	4616      	mov	r6, r2
 800aaae:	461f      	mov	r7, r3
 800aab0:	4605      	mov	r5, r0
 800aab2:	f000 fd31 	bl	800b518 <_localeconv_r>
 800aab6:	6803      	ldr	r3, [r0, #0]
 800aab8:	9304      	str	r3, [sp, #16]
 800aaba:	4618      	mov	r0, r3
 800aabc:	f7f5 fc10 	bl	80002e0 <strlen>
 800aac0:	2300      	movs	r3, #0
 800aac2:	930a      	str	r3, [sp, #40]	@ 0x28
 800aac4:	f8d8 3000 	ldr.w	r3, [r8]
 800aac8:	9005      	str	r0, [sp, #20]
 800aaca:	3307      	adds	r3, #7
 800aacc:	f023 0307 	bic.w	r3, r3, #7
 800aad0:	f103 0208 	add.w	r2, r3, #8
 800aad4:	f894 a018 	ldrb.w	sl, [r4, #24]
 800aad8:	f8d4 b000 	ldr.w	fp, [r4]
 800aadc:	f8c8 2000 	str.w	r2, [r8]
 800aae0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800aae4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800aae8:	9307      	str	r3, [sp, #28]
 800aaea:	f8cd 8018 	str.w	r8, [sp, #24]
 800aaee:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800aaf2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aaf6:	4b9c      	ldr	r3, [pc, #624]	@ (800ad68 <_printf_float+0x2c8>)
 800aaf8:	f04f 32ff 	mov.w	r2, #4294967295
 800aafc:	f7f6 f84e 	bl	8000b9c <__aeabi_dcmpun>
 800ab00:	bb70      	cbnz	r0, 800ab60 <_printf_float+0xc0>
 800ab02:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ab06:	4b98      	ldr	r3, [pc, #608]	@ (800ad68 <_printf_float+0x2c8>)
 800ab08:	f04f 32ff 	mov.w	r2, #4294967295
 800ab0c:	f7f6 f828 	bl	8000b60 <__aeabi_dcmple>
 800ab10:	bb30      	cbnz	r0, 800ab60 <_printf_float+0xc0>
 800ab12:	2200      	movs	r2, #0
 800ab14:	2300      	movs	r3, #0
 800ab16:	4640      	mov	r0, r8
 800ab18:	4649      	mov	r1, r9
 800ab1a:	f7f6 f817 	bl	8000b4c <__aeabi_dcmplt>
 800ab1e:	b110      	cbz	r0, 800ab26 <_printf_float+0x86>
 800ab20:	232d      	movs	r3, #45	@ 0x2d
 800ab22:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ab26:	4a91      	ldr	r2, [pc, #580]	@ (800ad6c <_printf_float+0x2cc>)
 800ab28:	4b91      	ldr	r3, [pc, #580]	@ (800ad70 <_printf_float+0x2d0>)
 800ab2a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ab2e:	bf94      	ite	ls
 800ab30:	4690      	movls	r8, r2
 800ab32:	4698      	movhi	r8, r3
 800ab34:	2303      	movs	r3, #3
 800ab36:	6123      	str	r3, [r4, #16]
 800ab38:	f02b 0304 	bic.w	r3, fp, #4
 800ab3c:	6023      	str	r3, [r4, #0]
 800ab3e:	f04f 0900 	mov.w	r9, #0
 800ab42:	9700      	str	r7, [sp, #0]
 800ab44:	4633      	mov	r3, r6
 800ab46:	aa0b      	add	r2, sp, #44	@ 0x2c
 800ab48:	4621      	mov	r1, r4
 800ab4a:	4628      	mov	r0, r5
 800ab4c:	f000 f9d2 	bl	800aef4 <_printf_common>
 800ab50:	3001      	adds	r0, #1
 800ab52:	f040 808d 	bne.w	800ac70 <_printf_float+0x1d0>
 800ab56:	f04f 30ff 	mov.w	r0, #4294967295
 800ab5a:	b00d      	add	sp, #52	@ 0x34
 800ab5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab60:	4642      	mov	r2, r8
 800ab62:	464b      	mov	r3, r9
 800ab64:	4640      	mov	r0, r8
 800ab66:	4649      	mov	r1, r9
 800ab68:	f7f6 f818 	bl	8000b9c <__aeabi_dcmpun>
 800ab6c:	b140      	cbz	r0, 800ab80 <_printf_float+0xe0>
 800ab6e:	464b      	mov	r3, r9
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	bfbc      	itt	lt
 800ab74:	232d      	movlt	r3, #45	@ 0x2d
 800ab76:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800ab7a:	4a7e      	ldr	r2, [pc, #504]	@ (800ad74 <_printf_float+0x2d4>)
 800ab7c:	4b7e      	ldr	r3, [pc, #504]	@ (800ad78 <_printf_float+0x2d8>)
 800ab7e:	e7d4      	b.n	800ab2a <_printf_float+0x8a>
 800ab80:	6863      	ldr	r3, [r4, #4]
 800ab82:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800ab86:	9206      	str	r2, [sp, #24]
 800ab88:	1c5a      	adds	r2, r3, #1
 800ab8a:	d13b      	bne.n	800ac04 <_printf_float+0x164>
 800ab8c:	2306      	movs	r3, #6
 800ab8e:	6063      	str	r3, [r4, #4]
 800ab90:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800ab94:	2300      	movs	r3, #0
 800ab96:	6022      	str	r2, [r4, #0]
 800ab98:	9303      	str	r3, [sp, #12]
 800ab9a:	ab0a      	add	r3, sp, #40	@ 0x28
 800ab9c:	e9cd a301 	strd	sl, r3, [sp, #4]
 800aba0:	ab09      	add	r3, sp, #36	@ 0x24
 800aba2:	9300      	str	r3, [sp, #0]
 800aba4:	6861      	ldr	r1, [r4, #4]
 800aba6:	ec49 8b10 	vmov	d0, r8, r9
 800abaa:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800abae:	4628      	mov	r0, r5
 800abb0:	f7ff fed6 	bl	800a960 <__cvt>
 800abb4:	9b06      	ldr	r3, [sp, #24]
 800abb6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800abb8:	2b47      	cmp	r3, #71	@ 0x47
 800abba:	4680      	mov	r8, r0
 800abbc:	d129      	bne.n	800ac12 <_printf_float+0x172>
 800abbe:	1cc8      	adds	r0, r1, #3
 800abc0:	db02      	blt.n	800abc8 <_printf_float+0x128>
 800abc2:	6863      	ldr	r3, [r4, #4]
 800abc4:	4299      	cmp	r1, r3
 800abc6:	dd41      	ble.n	800ac4c <_printf_float+0x1ac>
 800abc8:	f1aa 0a02 	sub.w	sl, sl, #2
 800abcc:	fa5f fa8a 	uxtb.w	sl, sl
 800abd0:	3901      	subs	r1, #1
 800abd2:	4652      	mov	r2, sl
 800abd4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800abd8:	9109      	str	r1, [sp, #36]	@ 0x24
 800abda:	f7ff ff26 	bl	800aa2a <__exponent>
 800abde:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800abe0:	1813      	adds	r3, r2, r0
 800abe2:	2a01      	cmp	r2, #1
 800abe4:	4681      	mov	r9, r0
 800abe6:	6123      	str	r3, [r4, #16]
 800abe8:	dc02      	bgt.n	800abf0 <_printf_float+0x150>
 800abea:	6822      	ldr	r2, [r4, #0]
 800abec:	07d2      	lsls	r2, r2, #31
 800abee:	d501      	bpl.n	800abf4 <_printf_float+0x154>
 800abf0:	3301      	adds	r3, #1
 800abf2:	6123      	str	r3, [r4, #16]
 800abf4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d0a2      	beq.n	800ab42 <_printf_float+0xa2>
 800abfc:	232d      	movs	r3, #45	@ 0x2d
 800abfe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ac02:	e79e      	b.n	800ab42 <_printf_float+0xa2>
 800ac04:	9a06      	ldr	r2, [sp, #24]
 800ac06:	2a47      	cmp	r2, #71	@ 0x47
 800ac08:	d1c2      	bne.n	800ab90 <_printf_float+0xf0>
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d1c0      	bne.n	800ab90 <_printf_float+0xf0>
 800ac0e:	2301      	movs	r3, #1
 800ac10:	e7bd      	b.n	800ab8e <_printf_float+0xee>
 800ac12:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ac16:	d9db      	bls.n	800abd0 <_printf_float+0x130>
 800ac18:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800ac1c:	d118      	bne.n	800ac50 <_printf_float+0x1b0>
 800ac1e:	2900      	cmp	r1, #0
 800ac20:	6863      	ldr	r3, [r4, #4]
 800ac22:	dd0b      	ble.n	800ac3c <_printf_float+0x19c>
 800ac24:	6121      	str	r1, [r4, #16]
 800ac26:	b913      	cbnz	r3, 800ac2e <_printf_float+0x18e>
 800ac28:	6822      	ldr	r2, [r4, #0]
 800ac2a:	07d0      	lsls	r0, r2, #31
 800ac2c:	d502      	bpl.n	800ac34 <_printf_float+0x194>
 800ac2e:	3301      	adds	r3, #1
 800ac30:	440b      	add	r3, r1
 800ac32:	6123      	str	r3, [r4, #16]
 800ac34:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ac36:	f04f 0900 	mov.w	r9, #0
 800ac3a:	e7db      	b.n	800abf4 <_printf_float+0x154>
 800ac3c:	b913      	cbnz	r3, 800ac44 <_printf_float+0x1a4>
 800ac3e:	6822      	ldr	r2, [r4, #0]
 800ac40:	07d2      	lsls	r2, r2, #31
 800ac42:	d501      	bpl.n	800ac48 <_printf_float+0x1a8>
 800ac44:	3302      	adds	r3, #2
 800ac46:	e7f4      	b.n	800ac32 <_printf_float+0x192>
 800ac48:	2301      	movs	r3, #1
 800ac4a:	e7f2      	b.n	800ac32 <_printf_float+0x192>
 800ac4c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800ac50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ac52:	4299      	cmp	r1, r3
 800ac54:	db05      	blt.n	800ac62 <_printf_float+0x1c2>
 800ac56:	6823      	ldr	r3, [r4, #0]
 800ac58:	6121      	str	r1, [r4, #16]
 800ac5a:	07d8      	lsls	r0, r3, #31
 800ac5c:	d5ea      	bpl.n	800ac34 <_printf_float+0x194>
 800ac5e:	1c4b      	adds	r3, r1, #1
 800ac60:	e7e7      	b.n	800ac32 <_printf_float+0x192>
 800ac62:	2900      	cmp	r1, #0
 800ac64:	bfd4      	ite	le
 800ac66:	f1c1 0202 	rsble	r2, r1, #2
 800ac6a:	2201      	movgt	r2, #1
 800ac6c:	4413      	add	r3, r2
 800ac6e:	e7e0      	b.n	800ac32 <_printf_float+0x192>
 800ac70:	6823      	ldr	r3, [r4, #0]
 800ac72:	055a      	lsls	r2, r3, #21
 800ac74:	d407      	bmi.n	800ac86 <_printf_float+0x1e6>
 800ac76:	6923      	ldr	r3, [r4, #16]
 800ac78:	4642      	mov	r2, r8
 800ac7a:	4631      	mov	r1, r6
 800ac7c:	4628      	mov	r0, r5
 800ac7e:	47b8      	blx	r7
 800ac80:	3001      	adds	r0, #1
 800ac82:	d12b      	bne.n	800acdc <_printf_float+0x23c>
 800ac84:	e767      	b.n	800ab56 <_printf_float+0xb6>
 800ac86:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ac8a:	f240 80dd 	bls.w	800ae48 <_printf_float+0x3a8>
 800ac8e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ac92:	2200      	movs	r2, #0
 800ac94:	2300      	movs	r3, #0
 800ac96:	f7f5 ff4f 	bl	8000b38 <__aeabi_dcmpeq>
 800ac9a:	2800      	cmp	r0, #0
 800ac9c:	d033      	beq.n	800ad06 <_printf_float+0x266>
 800ac9e:	4a37      	ldr	r2, [pc, #220]	@ (800ad7c <_printf_float+0x2dc>)
 800aca0:	2301      	movs	r3, #1
 800aca2:	4631      	mov	r1, r6
 800aca4:	4628      	mov	r0, r5
 800aca6:	47b8      	blx	r7
 800aca8:	3001      	adds	r0, #1
 800acaa:	f43f af54 	beq.w	800ab56 <_printf_float+0xb6>
 800acae:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800acb2:	4543      	cmp	r3, r8
 800acb4:	db02      	blt.n	800acbc <_printf_float+0x21c>
 800acb6:	6823      	ldr	r3, [r4, #0]
 800acb8:	07d8      	lsls	r0, r3, #31
 800acba:	d50f      	bpl.n	800acdc <_printf_float+0x23c>
 800acbc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800acc0:	4631      	mov	r1, r6
 800acc2:	4628      	mov	r0, r5
 800acc4:	47b8      	blx	r7
 800acc6:	3001      	adds	r0, #1
 800acc8:	f43f af45 	beq.w	800ab56 <_printf_float+0xb6>
 800accc:	f04f 0900 	mov.w	r9, #0
 800acd0:	f108 38ff 	add.w	r8, r8, #4294967295
 800acd4:	f104 0a1a 	add.w	sl, r4, #26
 800acd8:	45c8      	cmp	r8, r9
 800acda:	dc09      	bgt.n	800acf0 <_printf_float+0x250>
 800acdc:	6823      	ldr	r3, [r4, #0]
 800acde:	079b      	lsls	r3, r3, #30
 800ace0:	f100 8103 	bmi.w	800aeea <_printf_float+0x44a>
 800ace4:	68e0      	ldr	r0, [r4, #12]
 800ace6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ace8:	4298      	cmp	r0, r3
 800acea:	bfb8      	it	lt
 800acec:	4618      	movlt	r0, r3
 800acee:	e734      	b.n	800ab5a <_printf_float+0xba>
 800acf0:	2301      	movs	r3, #1
 800acf2:	4652      	mov	r2, sl
 800acf4:	4631      	mov	r1, r6
 800acf6:	4628      	mov	r0, r5
 800acf8:	47b8      	blx	r7
 800acfa:	3001      	adds	r0, #1
 800acfc:	f43f af2b 	beq.w	800ab56 <_printf_float+0xb6>
 800ad00:	f109 0901 	add.w	r9, r9, #1
 800ad04:	e7e8      	b.n	800acd8 <_printf_float+0x238>
 800ad06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	dc39      	bgt.n	800ad80 <_printf_float+0x2e0>
 800ad0c:	4a1b      	ldr	r2, [pc, #108]	@ (800ad7c <_printf_float+0x2dc>)
 800ad0e:	2301      	movs	r3, #1
 800ad10:	4631      	mov	r1, r6
 800ad12:	4628      	mov	r0, r5
 800ad14:	47b8      	blx	r7
 800ad16:	3001      	adds	r0, #1
 800ad18:	f43f af1d 	beq.w	800ab56 <_printf_float+0xb6>
 800ad1c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800ad20:	ea59 0303 	orrs.w	r3, r9, r3
 800ad24:	d102      	bne.n	800ad2c <_printf_float+0x28c>
 800ad26:	6823      	ldr	r3, [r4, #0]
 800ad28:	07d9      	lsls	r1, r3, #31
 800ad2a:	d5d7      	bpl.n	800acdc <_printf_float+0x23c>
 800ad2c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ad30:	4631      	mov	r1, r6
 800ad32:	4628      	mov	r0, r5
 800ad34:	47b8      	blx	r7
 800ad36:	3001      	adds	r0, #1
 800ad38:	f43f af0d 	beq.w	800ab56 <_printf_float+0xb6>
 800ad3c:	f04f 0a00 	mov.w	sl, #0
 800ad40:	f104 0b1a 	add.w	fp, r4, #26
 800ad44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad46:	425b      	negs	r3, r3
 800ad48:	4553      	cmp	r3, sl
 800ad4a:	dc01      	bgt.n	800ad50 <_printf_float+0x2b0>
 800ad4c:	464b      	mov	r3, r9
 800ad4e:	e793      	b.n	800ac78 <_printf_float+0x1d8>
 800ad50:	2301      	movs	r3, #1
 800ad52:	465a      	mov	r2, fp
 800ad54:	4631      	mov	r1, r6
 800ad56:	4628      	mov	r0, r5
 800ad58:	47b8      	blx	r7
 800ad5a:	3001      	adds	r0, #1
 800ad5c:	f43f aefb 	beq.w	800ab56 <_printf_float+0xb6>
 800ad60:	f10a 0a01 	add.w	sl, sl, #1
 800ad64:	e7ee      	b.n	800ad44 <_printf_float+0x2a4>
 800ad66:	bf00      	nop
 800ad68:	7fefffff 	.word	0x7fefffff
 800ad6c:	08016181 	.word	0x08016181
 800ad70:	08016185 	.word	0x08016185
 800ad74:	08016189 	.word	0x08016189
 800ad78:	0801618d 	.word	0x0801618d
 800ad7c:	08016191 	.word	0x08016191
 800ad80:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ad82:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ad86:	4553      	cmp	r3, sl
 800ad88:	bfa8      	it	ge
 800ad8a:	4653      	movge	r3, sl
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	4699      	mov	r9, r3
 800ad90:	dc36      	bgt.n	800ae00 <_printf_float+0x360>
 800ad92:	f04f 0b00 	mov.w	fp, #0
 800ad96:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ad9a:	f104 021a 	add.w	r2, r4, #26
 800ad9e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ada0:	9306      	str	r3, [sp, #24]
 800ada2:	eba3 0309 	sub.w	r3, r3, r9
 800ada6:	455b      	cmp	r3, fp
 800ada8:	dc31      	bgt.n	800ae0e <_printf_float+0x36e>
 800adaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800adac:	459a      	cmp	sl, r3
 800adae:	dc3a      	bgt.n	800ae26 <_printf_float+0x386>
 800adb0:	6823      	ldr	r3, [r4, #0]
 800adb2:	07da      	lsls	r2, r3, #31
 800adb4:	d437      	bmi.n	800ae26 <_printf_float+0x386>
 800adb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800adb8:	ebaa 0903 	sub.w	r9, sl, r3
 800adbc:	9b06      	ldr	r3, [sp, #24]
 800adbe:	ebaa 0303 	sub.w	r3, sl, r3
 800adc2:	4599      	cmp	r9, r3
 800adc4:	bfa8      	it	ge
 800adc6:	4699      	movge	r9, r3
 800adc8:	f1b9 0f00 	cmp.w	r9, #0
 800adcc:	dc33      	bgt.n	800ae36 <_printf_float+0x396>
 800adce:	f04f 0800 	mov.w	r8, #0
 800add2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800add6:	f104 0b1a 	add.w	fp, r4, #26
 800adda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800addc:	ebaa 0303 	sub.w	r3, sl, r3
 800ade0:	eba3 0309 	sub.w	r3, r3, r9
 800ade4:	4543      	cmp	r3, r8
 800ade6:	f77f af79 	ble.w	800acdc <_printf_float+0x23c>
 800adea:	2301      	movs	r3, #1
 800adec:	465a      	mov	r2, fp
 800adee:	4631      	mov	r1, r6
 800adf0:	4628      	mov	r0, r5
 800adf2:	47b8      	blx	r7
 800adf4:	3001      	adds	r0, #1
 800adf6:	f43f aeae 	beq.w	800ab56 <_printf_float+0xb6>
 800adfa:	f108 0801 	add.w	r8, r8, #1
 800adfe:	e7ec      	b.n	800adda <_printf_float+0x33a>
 800ae00:	4642      	mov	r2, r8
 800ae02:	4631      	mov	r1, r6
 800ae04:	4628      	mov	r0, r5
 800ae06:	47b8      	blx	r7
 800ae08:	3001      	adds	r0, #1
 800ae0a:	d1c2      	bne.n	800ad92 <_printf_float+0x2f2>
 800ae0c:	e6a3      	b.n	800ab56 <_printf_float+0xb6>
 800ae0e:	2301      	movs	r3, #1
 800ae10:	4631      	mov	r1, r6
 800ae12:	4628      	mov	r0, r5
 800ae14:	9206      	str	r2, [sp, #24]
 800ae16:	47b8      	blx	r7
 800ae18:	3001      	adds	r0, #1
 800ae1a:	f43f ae9c 	beq.w	800ab56 <_printf_float+0xb6>
 800ae1e:	9a06      	ldr	r2, [sp, #24]
 800ae20:	f10b 0b01 	add.w	fp, fp, #1
 800ae24:	e7bb      	b.n	800ad9e <_printf_float+0x2fe>
 800ae26:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ae2a:	4631      	mov	r1, r6
 800ae2c:	4628      	mov	r0, r5
 800ae2e:	47b8      	blx	r7
 800ae30:	3001      	adds	r0, #1
 800ae32:	d1c0      	bne.n	800adb6 <_printf_float+0x316>
 800ae34:	e68f      	b.n	800ab56 <_printf_float+0xb6>
 800ae36:	9a06      	ldr	r2, [sp, #24]
 800ae38:	464b      	mov	r3, r9
 800ae3a:	4442      	add	r2, r8
 800ae3c:	4631      	mov	r1, r6
 800ae3e:	4628      	mov	r0, r5
 800ae40:	47b8      	blx	r7
 800ae42:	3001      	adds	r0, #1
 800ae44:	d1c3      	bne.n	800adce <_printf_float+0x32e>
 800ae46:	e686      	b.n	800ab56 <_printf_float+0xb6>
 800ae48:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ae4c:	f1ba 0f01 	cmp.w	sl, #1
 800ae50:	dc01      	bgt.n	800ae56 <_printf_float+0x3b6>
 800ae52:	07db      	lsls	r3, r3, #31
 800ae54:	d536      	bpl.n	800aec4 <_printf_float+0x424>
 800ae56:	2301      	movs	r3, #1
 800ae58:	4642      	mov	r2, r8
 800ae5a:	4631      	mov	r1, r6
 800ae5c:	4628      	mov	r0, r5
 800ae5e:	47b8      	blx	r7
 800ae60:	3001      	adds	r0, #1
 800ae62:	f43f ae78 	beq.w	800ab56 <_printf_float+0xb6>
 800ae66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ae6a:	4631      	mov	r1, r6
 800ae6c:	4628      	mov	r0, r5
 800ae6e:	47b8      	blx	r7
 800ae70:	3001      	adds	r0, #1
 800ae72:	f43f ae70 	beq.w	800ab56 <_printf_float+0xb6>
 800ae76:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ae82:	f7f5 fe59 	bl	8000b38 <__aeabi_dcmpeq>
 800ae86:	b9c0      	cbnz	r0, 800aeba <_printf_float+0x41a>
 800ae88:	4653      	mov	r3, sl
 800ae8a:	f108 0201 	add.w	r2, r8, #1
 800ae8e:	4631      	mov	r1, r6
 800ae90:	4628      	mov	r0, r5
 800ae92:	47b8      	blx	r7
 800ae94:	3001      	adds	r0, #1
 800ae96:	d10c      	bne.n	800aeb2 <_printf_float+0x412>
 800ae98:	e65d      	b.n	800ab56 <_printf_float+0xb6>
 800ae9a:	2301      	movs	r3, #1
 800ae9c:	465a      	mov	r2, fp
 800ae9e:	4631      	mov	r1, r6
 800aea0:	4628      	mov	r0, r5
 800aea2:	47b8      	blx	r7
 800aea4:	3001      	adds	r0, #1
 800aea6:	f43f ae56 	beq.w	800ab56 <_printf_float+0xb6>
 800aeaa:	f108 0801 	add.w	r8, r8, #1
 800aeae:	45d0      	cmp	r8, sl
 800aeb0:	dbf3      	blt.n	800ae9a <_printf_float+0x3fa>
 800aeb2:	464b      	mov	r3, r9
 800aeb4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800aeb8:	e6df      	b.n	800ac7a <_printf_float+0x1da>
 800aeba:	f04f 0800 	mov.w	r8, #0
 800aebe:	f104 0b1a 	add.w	fp, r4, #26
 800aec2:	e7f4      	b.n	800aeae <_printf_float+0x40e>
 800aec4:	2301      	movs	r3, #1
 800aec6:	4642      	mov	r2, r8
 800aec8:	e7e1      	b.n	800ae8e <_printf_float+0x3ee>
 800aeca:	2301      	movs	r3, #1
 800aecc:	464a      	mov	r2, r9
 800aece:	4631      	mov	r1, r6
 800aed0:	4628      	mov	r0, r5
 800aed2:	47b8      	blx	r7
 800aed4:	3001      	adds	r0, #1
 800aed6:	f43f ae3e 	beq.w	800ab56 <_printf_float+0xb6>
 800aeda:	f108 0801 	add.w	r8, r8, #1
 800aede:	68e3      	ldr	r3, [r4, #12]
 800aee0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800aee2:	1a5b      	subs	r3, r3, r1
 800aee4:	4543      	cmp	r3, r8
 800aee6:	dcf0      	bgt.n	800aeca <_printf_float+0x42a>
 800aee8:	e6fc      	b.n	800ace4 <_printf_float+0x244>
 800aeea:	f04f 0800 	mov.w	r8, #0
 800aeee:	f104 0919 	add.w	r9, r4, #25
 800aef2:	e7f4      	b.n	800aede <_printf_float+0x43e>

0800aef4 <_printf_common>:
 800aef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aef8:	4616      	mov	r6, r2
 800aefa:	4698      	mov	r8, r3
 800aefc:	688a      	ldr	r2, [r1, #8]
 800aefe:	690b      	ldr	r3, [r1, #16]
 800af00:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800af04:	4293      	cmp	r3, r2
 800af06:	bfb8      	it	lt
 800af08:	4613      	movlt	r3, r2
 800af0a:	6033      	str	r3, [r6, #0]
 800af0c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800af10:	4607      	mov	r7, r0
 800af12:	460c      	mov	r4, r1
 800af14:	b10a      	cbz	r2, 800af1a <_printf_common+0x26>
 800af16:	3301      	adds	r3, #1
 800af18:	6033      	str	r3, [r6, #0]
 800af1a:	6823      	ldr	r3, [r4, #0]
 800af1c:	0699      	lsls	r1, r3, #26
 800af1e:	bf42      	ittt	mi
 800af20:	6833      	ldrmi	r3, [r6, #0]
 800af22:	3302      	addmi	r3, #2
 800af24:	6033      	strmi	r3, [r6, #0]
 800af26:	6825      	ldr	r5, [r4, #0]
 800af28:	f015 0506 	ands.w	r5, r5, #6
 800af2c:	d106      	bne.n	800af3c <_printf_common+0x48>
 800af2e:	f104 0a19 	add.w	sl, r4, #25
 800af32:	68e3      	ldr	r3, [r4, #12]
 800af34:	6832      	ldr	r2, [r6, #0]
 800af36:	1a9b      	subs	r3, r3, r2
 800af38:	42ab      	cmp	r3, r5
 800af3a:	dc26      	bgt.n	800af8a <_printf_common+0x96>
 800af3c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800af40:	6822      	ldr	r2, [r4, #0]
 800af42:	3b00      	subs	r3, #0
 800af44:	bf18      	it	ne
 800af46:	2301      	movne	r3, #1
 800af48:	0692      	lsls	r2, r2, #26
 800af4a:	d42b      	bmi.n	800afa4 <_printf_common+0xb0>
 800af4c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800af50:	4641      	mov	r1, r8
 800af52:	4638      	mov	r0, r7
 800af54:	47c8      	blx	r9
 800af56:	3001      	adds	r0, #1
 800af58:	d01e      	beq.n	800af98 <_printf_common+0xa4>
 800af5a:	6823      	ldr	r3, [r4, #0]
 800af5c:	6922      	ldr	r2, [r4, #16]
 800af5e:	f003 0306 	and.w	r3, r3, #6
 800af62:	2b04      	cmp	r3, #4
 800af64:	bf02      	ittt	eq
 800af66:	68e5      	ldreq	r5, [r4, #12]
 800af68:	6833      	ldreq	r3, [r6, #0]
 800af6a:	1aed      	subeq	r5, r5, r3
 800af6c:	68a3      	ldr	r3, [r4, #8]
 800af6e:	bf0c      	ite	eq
 800af70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800af74:	2500      	movne	r5, #0
 800af76:	4293      	cmp	r3, r2
 800af78:	bfc4      	itt	gt
 800af7a:	1a9b      	subgt	r3, r3, r2
 800af7c:	18ed      	addgt	r5, r5, r3
 800af7e:	2600      	movs	r6, #0
 800af80:	341a      	adds	r4, #26
 800af82:	42b5      	cmp	r5, r6
 800af84:	d11a      	bne.n	800afbc <_printf_common+0xc8>
 800af86:	2000      	movs	r0, #0
 800af88:	e008      	b.n	800af9c <_printf_common+0xa8>
 800af8a:	2301      	movs	r3, #1
 800af8c:	4652      	mov	r2, sl
 800af8e:	4641      	mov	r1, r8
 800af90:	4638      	mov	r0, r7
 800af92:	47c8      	blx	r9
 800af94:	3001      	adds	r0, #1
 800af96:	d103      	bne.n	800afa0 <_printf_common+0xac>
 800af98:	f04f 30ff 	mov.w	r0, #4294967295
 800af9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afa0:	3501      	adds	r5, #1
 800afa2:	e7c6      	b.n	800af32 <_printf_common+0x3e>
 800afa4:	18e1      	adds	r1, r4, r3
 800afa6:	1c5a      	adds	r2, r3, #1
 800afa8:	2030      	movs	r0, #48	@ 0x30
 800afaa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800afae:	4422      	add	r2, r4
 800afb0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800afb4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800afb8:	3302      	adds	r3, #2
 800afba:	e7c7      	b.n	800af4c <_printf_common+0x58>
 800afbc:	2301      	movs	r3, #1
 800afbe:	4622      	mov	r2, r4
 800afc0:	4641      	mov	r1, r8
 800afc2:	4638      	mov	r0, r7
 800afc4:	47c8      	blx	r9
 800afc6:	3001      	adds	r0, #1
 800afc8:	d0e6      	beq.n	800af98 <_printf_common+0xa4>
 800afca:	3601      	adds	r6, #1
 800afcc:	e7d9      	b.n	800af82 <_printf_common+0x8e>
	...

0800afd0 <_printf_i>:
 800afd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800afd4:	7e0f      	ldrb	r7, [r1, #24]
 800afd6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800afd8:	2f78      	cmp	r7, #120	@ 0x78
 800afda:	4691      	mov	r9, r2
 800afdc:	4680      	mov	r8, r0
 800afde:	460c      	mov	r4, r1
 800afe0:	469a      	mov	sl, r3
 800afe2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800afe6:	d807      	bhi.n	800aff8 <_printf_i+0x28>
 800afe8:	2f62      	cmp	r7, #98	@ 0x62
 800afea:	d80a      	bhi.n	800b002 <_printf_i+0x32>
 800afec:	2f00      	cmp	r7, #0
 800afee:	f000 80d2 	beq.w	800b196 <_printf_i+0x1c6>
 800aff2:	2f58      	cmp	r7, #88	@ 0x58
 800aff4:	f000 80b9 	beq.w	800b16a <_printf_i+0x19a>
 800aff8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800affc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b000:	e03a      	b.n	800b078 <_printf_i+0xa8>
 800b002:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b006:	2b15      	cmp	r3, #21
 800b008:	d8f6      	bhi.n	800aff8 <_printf_i+0x28>
 800b00a:	a101      	add	r1, pc, #4	@ (adr r1, 800b010 <_printf_i+0x40>)
 800b00c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b010:	0800b069 	.word	0x0800b069
 800b014:	0800b07d 	.word	0x0800b07d
 800b018:	0800aff9 	.word	0x0800aff9
 800b01c:	0800aff9 	.word	0x0800aff9
 800b020:	0800aff9 	.word	0x0800aff9
 800b024:	0800aff9 	.word	0x0800aff9
 800b028:	0800b07d 	.word	0x0800b07d
 800b02c:	0800aff9 	.word	0x0800aff9
 800b030:	0800aff9 	.word	0x0800aff9
 800b034:	0800aff9 	.word	0x0800aff9
 800b038:	0800aff9 	.word	0x0800aff9
 800b03c:	0800b17d 	.word	0x0800b17d
 800b040:	0800b0a7 	.word	0x0800b0a7
 800b044:	0800b137 	.word	0x0800b137
 800b048:	0800aff9 	.word	0x0800aff9
 800b04c:	0800aff9 	.word	0x0800aff9
 800b050:	0800b19f 	.word	0x0800b19f
 800b054:	0800aff9 	.word	0x0800aff9
 800b058:	0800b0a7 	.word	0x0800b0a7
 800b05c:	0800aff9 	.word	0x0800aff9
 800b060:	0800aff9 	.word	0x0800aff9
 800b064:	0800b13f 	.word	0x0800b13f
 800b068:	6833      	ldr	r3, [r6, #0]
 800b06a:	1d1a      	adds	r2, r3, #4
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	6032      	str	r2, [r6, #0]
 800b070:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b074:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b078:	2301      	movs	r3, #1
 800b07a:	e09d      	b.n	800b1b8 <_printf_i+0x1e8>
 800b07c:	6833      	ldr	r3, [r6, #0]
 800b07e:	6820      	ldr	r0, [r4, #0]
 800b080:	1d19      	adds	r1, r3, #4
 800b082:	6031      	str	r1, [r6, #0]
 800b084:	0606      	lsls	r6, r0, #24
 800b086:	d501      	bpl.n	800b08c <_printf_i+0xbc>
 800b088:	681d      	ldr	r5, [r3, #0]
 800b08a:	e003      	b.n	800b094 <_printf_i+0xc4>
 800b08c:	0645      	lsls	r5, r0, #25
 800b08e:	d5fb      	bpl.n	800b088 <_printf_i+0xb8>
 800b090:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b094:	2d00      	cmp	r5, #0
 800b096:	da03      	bge.n	800b0a0 <_printf_i+0xd0>
 800b098:	232d      	movs	r3, #45	@ 0x2d
 800b09a:	426d      	negs	r5, r5
 800b09c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b0a0:	4859      	ldr	r0, [pc, #356]	@ (800b208 <_printf_i+0x238>)
 800b0a2:	230a      	movs	r3, #10
 800b0a4:	e011      	b.n	800b0ca <_printf_i+0xfa>
 800b0a6:	6821      	ldr	r1, [r4, #0]
 800b0a8:	6833      	ldr	r3, [r6, #0]
 800b0aa:	0608      	lsls	r0, r1, #24
 800b0ac:	f853 5b04 	ldr.w	r5, [r3], #4
 800b0b0:	d402      	bmi.n	800b0b8 <_printf_i+0xe8>
 800b0b2:	0649      	lsls	r1, r1, #25
 800b0b4:	bf48      	it	mi
 800b0b6:	b2ad      	uxthmi	r5, r5
 800b0b8:	2f6f      	cmp	r7, #111	@ 0x6f
 800b0ba:	4853      	ldr	r0, [pc, #332]	@ (800b208 <_printf_i+0x238>)
 800b0bc:	6033      	str	r3, [r6, #0]
 800b0be:	bf14      	ite	ne
 800b0c0:	230a      	movne	r3, #10
 800b0c2:	2308      	moveq	r3, #8
 800b0c4:	2100      	movs	r1, #0
 800b0c6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b0ca:	6866      	ldr	r6, [r4, #4]
 800b0cc:	60a6      	str	r6, [r4, #8]
 800b0ce:	2e00      	cmp	r6, #0
 800b0d0:	bfa2      	ittt	ge
 800b0d2:	6821      	ldrge	r1, [r4, #0]
 800b0d4:	f021 0104 	bicge.w	r1, r1, #4
 800b0d8:	6021      	strge	r1, [r4, #0]
 800b0da:	b90d      	cbnz	r5, 800b0e0 <_printf_i+0x110>
 800b0dc:	2e00      	cmp	r6, #0
 800b0de:	d04b      	beq.n	800b178 <_printf_i+0x1a8>
 800b0e0:	4616      	mov	r6, r2
 800b0e2:	fbb5 f1f3 	udiv	r1, r5, r3
 800b0e6:	fb03 5711 	mls	r7, r3, r1, r5
 800b0ea:	5dc7      	ldrb	r7, [r0, r7]
 800b0ec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b0f0:	462f      	mov	r7, r5
 800b0f2:	42bb      	cmp	r3, r7
 800b0f4:	460d      	mov	r5, r1
 800b0f6:	d9f4      	bls.n	800b0e2 <_printf_i+0x112>
 800b0f8:	2b08      	cmp	r3, #8
 800b0fa:	d10b      	bne.n	800b114 <_printf_i+0x144>
 800b0fc:	6823      	ldr	r3, [r4, #0]
 800b0fe:	07df      	lsls	r7, r3, #31
 800b100:	d508      	bpl.n	800b114 <_printf_i+0x144>
 800b102:	6923      	ldr	r3, [r4, #16]
 800b104:	6861      	ldr	r1, [r4, #4]
 800b106:	4299      	cmp	r1, r3
 800b108:	bfde      	ittt	le
 800b10a:	2330      	movle	r3, #48	@ 0x30
 800b10c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b110:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b114:	1b92      	subs	r2, r2, r6
 800b116:	6122      	str	r2, [r4, #16]
 800b118:	f8cd a000 	str.w	sl, [sp]
 800b11c:	464b      	mov	r3, r9
 800b11e:	aa03      	add	r2, sp, #12
 800b120:	4621      	mov	r1, r4
 800b122:	4640      	mov	r0, r8
 800b124:	f7ff fee6 	bl	800aef4 <_printf_common>
 800b128:	3001      	adds	r0, #1
 800b12a:	d14a      	bne.n	800b1c2 <_printf_i+0x1f2>
 800b12c:	f04f 30ff 	mov.w	r0, #4294967295
 800b130:	b004      	add	sp, #16
 800b132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b136:	6823      	ldr	r3, [r4, #0]
 800b138:	f043 0320 	orr.w	r3, r3, #32
 800b13c:	6023      	str	r3, [r4, #0]
 800b13e:	4833      	ldr	r0, [pc, #204]	@ (800b20c <_printf_i+0x23c>)
 800b140:	2778      	movs	r7, #120	@ 0x78
 800b142:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b146:	6823      	ldr	r3, [r4, #0]
 800b148:	6831      	ldr	r1, [r6, #0]
 800b14a:	061f      	lsls	r7, r3, #24
 800b14c:	f851 5b04 	ldr.w	r5, [r1], #4
 800b150:	d402      	bmi.n	800b158 <_printf_i+0x188>
 800b152:	065f      	lsls	r7, r3, #25
 800b154:	bf48      	it	mi
 800b156:	b2ad      	uxthmi	r5, r5
 800b158:	6031      	str	r1, [r6, #0]
 800b15a:	07d9      	lsls	r1, r3, #31
 800b15c:	bf44      	itt	mi
 800b15e:	f043 0320 	orrmi.w	r3, r3, #32
 800b162:	6023      	strmi	r3, [r4, #0]
 800b164:	b11d      	cbz	r5, 800b16e <_printf_i+0x19e>
 800b166:	2310      	movs	r3, #16
 800b168:	e7ac      	b.n	800b0c4 <_printf_i+0xf4>
 800b16a:	4827      	ldr	r0, [pc, #156]	@ (800b208 <_printf_i+0x238>)
 800b16c:	e7e9      	b.n	800b142 <_printf_i+0x172>
 800b16e:	6823      	ldr	r3, [r4, #0]
 800b170:	f023 0320 	bic.w	r3, r3, #32
 800b174:	6023      	str	r3, [r4, #0]
 800b176:	e7f6      	b.n	800b166 <_printf_i+0x196>
 800b178:	4616      	mov	r6, r2
 800b17a:	e7bd      	b.n	800b0f8 <_printf_i+0x128>
 800b17c:	6833      	ldr	r3, [r6, #0]
 800b17e:	6825      	ldr	r5, [r4, #0]
 800b180:	6961      	ldr	r1, [r4, #20]
 800b182:	1d18      	adds	r0, r3, #4
 800b184:	6030      	str	r0, [r6, #0]
 800b186:	062e      	lsls	r6, r5, #24
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	d501      	bpl.n	800b190 <_printf_i+0x1c0>
 800b18c:	6019      	str	r1, [r3, #0]
 800b18e:	e002      	b.n	800b196 <_printf_i+0x1c6>
 800b190:	0668      	lsls	r0, r5, #25
 800b192:	d5fb      	bpl.n	800b18c <_printf_i+0x1bc>
 800b194:	8019      	strh	r1, [r3, #0]
 800b196:	2300      	movs	r3, #0
 800b198:	6123      	str	r3, [r4, #16]
 800b19a:	4616      	mov	r6, r2
 800b19c:	e7bc      	b.n	800b118 <_printf_i+0x148>
 800b19e:	6833      	ldr	r3, [r6, #0]
 800b1a0:	1d1a      	adds	r2, r3, #4
 800b1a2:	6032      	str	r2, [r6, #0]
 800b1a4:	681e      	ldr	r6, [r3, #0]
 800b1a6:	6862      	ldr	r2, [r4, #4]
 800b1a8:	2100      	movs	r1, #0
 800b1aa:	4630      	mov	r0, r6
 800b1ac:	f7f5 f848 	bl	8000240 <memchr>
 800b1b0:	b108      	cbz	r0, 800b1b6 <_printf_i+0x1e6>
 800b1b2:	1b80      	subs	r0, r0, r6
 800b1b4:	6060      	str	r0, [r4, #4]
 800b1b6:	6863      	ldr	r3, [r4, #4]
 800b1b8:	6123      	str	r3, [r4, #16]
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b1c0:	e7aa      	b.n	800b118 <_printf_i+0x148>
 800b1c2:	6923      	ldr	r3, [r4, #16]
 800b1c4:	4632      	mov	r2, r6
 800b1c6:	4649      	mov	r1, r9
 800b1c8:	4640      	mov	r0, r8
 800b1ca:	47d0      	blx	sl
 800b1cc:	3001      	adds	r0, #1
 800b1ce:	d0ad      	beq.n	800b12c <_printf_i+0x15c>
 800b1d0:	6823      	ldr	r3, [r4, #0]
 800b1d2:	079b      	lsls	r3, r3, #30
 800b1d4:	d413      	bmi.n	800b1fe <_printf_i+0x22e>
 800b1d6:	68e0      	ldr	r0, [r4, #12]
 800b1d8:	9b03      	ldr	r3, [sp, #12]
 800b1da:	4298      	cmp	r0, r3
 800b1dc:	bfb8      	it	lt
 800b1de:	4618      	movlt	r0, r3
 800b1e0:	e7a6      	b.n	800b130 <_printf_i+0x160>
 800b1e2:	2301      	movs	r3, #1
 800b1e4:	4632      	mov	r2, r6
 800b1e6:	4649      	mov	r1, r9
 800b1e8:	4640      	mov	r0, r8
 800b1ea:	47d0      	blx	sl
 800b1ec:	3001      	adds	r0, #1
 800b1ee:	d09d      	beq.n	800b12c <_printf_i+0x15c>
 800b1f0:	3501      	adds	r5, #1
 800b1f2:	68e3      	ldr	r3, [r4, #12]
 800b1f4:	9903      	ldr	r1, [sp, #12]
 800b1f6:	1a5b      	subs	r3, r3, r1
 800b1f8:	42ab      	cmp	r3, r5
 800b1fa:	dcf2      	bgt.n	800b1e2 <_printf_i+0x212>
 800b1fc:	e7eb      	b.n	800b1d6 <_printf_i+0x206>
 800b1fe:	2500      	movs	r5, #0
 800b200:	f104 0619 	add.w	r6, r4, #25
 800b204:	e7f5      	b.n	800b1f2 <_printf_i+0x222>
 800b206:	bf00      	nop
 800b208:	08016193 	.word	0x08016193
 800b20c:	080161a4 	.word	0x080161a4

0800b210 <std>:
 800b210:	2300      	movs	r3, #0
 800b212:	b510      	push	{r4, lr}
 800b214:	4604      	mov	r4, r0
 800b216:	e9c0 3300 	strd	r3, r3, [r0]
 800b21a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b21e:	6083      	str	r3, [r0, #8]
 800b220:	8181      	strh	r1, [r0, #12]
 800b222:	6643      	str	r3, [r0, #100]	@ 0x64
 800b224:	81c2      	strh	r2, [r0, #14]
 800b226:	6183      	str	r3, [r0, #24]
 800b228:	4619      	mov	r1, r3
 800b22a:	2208      	movs	r2, #8
 800b22c:	305c      	adds	r0, #92	@ 0x5c
 800b22e:	f000 f92d 	bl	800b48c <memset>
 800b232:	4b0d      	ldr	r3, [pc, #52]	@ (800b268 <std+0x58>)
 800b234:	6263      	str	r3, [r4, #36]	@ 0x24
 800b236:	4b0d      	ldr	r3, [pc, #52]	@ (800b26c <std+0x5c>)
 800b238:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b23a:	4b0d      	ldr	r3, [pc, #52]	@ (800b270 <std+0x60>)
 800b23c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b23e:	4b0d      	ldr	r3, [pc, #52]	@ (800b274 <std+0x64>)
 800b240:	6323      	str	r3, [r4, #48]	@ 0x30
 800b242:	4b0d      	ldr	r3, [pc, #52]	@ (800b278 <std+0x68>)
 800b244:	6224      	str	r4, [r4, #32]
 800b246:	429c      	cmp	r4, r3
 800b248:	d006      	beq.n	800b258 <std+0x48>
 800b24a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b24e:	4294      	cmp	r4, r2
 800b250:	d002      	beq.n	800b258 <std+0x48>
 800b252:	33d0      	adds	r3, #208	@ 0xd0
 800b254:	429c      	cmp	r4, r3
 800b256:	d105      	bne.n	800b264 <std+0x54>
 800b258:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b25c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b260:	f000 b9ce 	b.w	800b600 <__retarget_lock_init_recursive>
 800b264:	bd10      	pop	{r4, pc}
 800b266:	bf00      	nop
 800b268:	0800b395 	.word	0x0800b395
 800b26c:	0800b3b7 	.word	0x0800b3b7
 800b270:	0800b3ef 	.word	0x0800b3ef
 800b274:	0800b413 	.word	0x0800b413
 800b278:	20006ac4 	.word	0x20006ac4

0800b27c <stdio_exit_handler>:
 800b27c:	4a02      	ldr	r2, [pc, #8]	@ (800b288 <stdio_exit_handler+0xc>)
 800b27e:	4903      	ldr	r1, [pc, #12]	@ (800b28c <stdio_exit_handler+0x10>)
 800b280:	4803      	ldr	r0, [pc, #12]	@ (800b290 <stdio_exit_handler+0x14>)
 800b282:	f000 b869 	b.w	800b358 <_fwalk_sglue>
 800b286:	bf00      	nop
 800b288:	2000005c 	.word	0x2000005c
 800b28c:	0800d8bd 	.word	0x0800d8bd
 800b290:	200001d8 	.word	0x200001d8

0800b294 <cleanup_stdio>:
 800b294:	6841      	ldr	r1, [r0, #4]
 800b296:	4b0c      	ldr	r3, [pc, #48]	@ (800b2c8 <cleanup_stdio+0x34>)
 800b298:	4299      	cmp	r1, r3
 800b29a:	b510      	push	{r4, lr}
 800b29c:	4604      	mov	r4, r0
 800b29e:	d001      	beq.n	800b2a4 <cleanup_stdio+0x10>
 800b2a0:	f002 fb0c 	bl	800d8bc <_fflush_r>
 800b2a4:	68a1      	ldr	r1, [r4, #8]
 800b2a6:	4b09      	ldr	r3, [pc, #36]	@ (800b2cc <cleanup_stdio+0x38>)
 800b2a8:	4299      	cmp	r1, r3
 800b2aa:	d002      	beq.n	800b2b2 <cleanup_stdio+0x1e>
 800b2ac:	4620      	mov	r0, r4
 800b2ae:	f002 fb05 	bl	800d8bc <_fflush_r>
 800b2b2:	68e1      	ldr	r1, [r4, #12]
 800b2b4:	4b06      	ldr	r3, [pc, #24]	@ (800b2d0 <cleanup_stdio+0x3c>)
 800b2b6:	4299      	cmp	r1, r3
 800b2b8:	d004      	beq.n	800b2c4 <cleanup_stdio+0x30>
 800b2ba:	4620      	mov	r0, r4
 800b2bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b2c0:	f002 bafc 	b.w	800d8bc <_fflush_r>
 800b2c4:	bd10      	pop	{r4, pc}
 800b2c6:	bf00      	nop
 800b2c8:	20006ac4 	.word	0x20006ac4
 800b2cc:	20006b2c 	.word	0x20006b2c
 800b2d0:	20006b94 	.word	0x20006b94

0800b2d4 <global_stdio_init.part.0>:
 800b2d4:	b510      	push	{r4, lr}
 800b2d6:	4b0b      	ldr	r3, [pc, #44]	@ (800b304 <global_stdio_init.part.0+0x30>)
 800b2d8:	4c0b      	ldr	r4, [pc, #44]	@ (800b308 <global_stdio_init.part.0+0x34>)
 800b2da:	4a0c      	ldr	r2, [pc, #48]	@ (800b30c <global_stdio_init.part.0+0x38>)
 800b2dc:	601a      	str	r2, [r3, #0]
 800b2de:	4620      	mov	r0, r4
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	2104      	movs	r1, #4
 800b2e4:	f7ff ff94 	bl	800b210 <std>
 800b2e8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b2ec:	2201      	movs	r2, #1
 800b2ee:	2109      	movs	r1, #9
 800b2f0:	f7ff ff8e 	bl	800b210 <std>
 800b2f4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b2f8:	2202      	movs	r2, #2
 800b2fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b2fe:	2112      	movs	r1, #18
 800b300:	f7ff bf86 	b.w	800b210 <std>
 800b304:	20006bfc 	.word	0x20006bfc
 800b308:	20006ac4 	.word	0x20006ac4
 800b30c:	0800b27d 	.word	0x0800b27d

0800b310 <__sfp_lock_acquire>:
 800b310:	4801      	ldr	r0, [pc, #4]	@ (800b318 <__sfp_lock_acquire+0x8>)
 800b312:	f000 b976 	b.w	800b602 <__retarget_lock_acquire_recursive>
 800b316:	bf00      	nop
 800b318:	20006c05 	.word	0x20006c05

0800b31c <__sfp_lock_release>:
 800b31c:	4801      	ldr	r0, [pc, #4]	@ (800b324 <__sfp_lock_release+0x8>)
 800b31e:	f000 b971 	b.w	800b604 <__retarget_lock_release_recursive>
 800b322:	bf00      	nop
 800b324:	20006c05 	.word	0x20006c05

0800b328 <__sinit>:
 800b328:	b510      	push	{r4, lr}
 800b32a:	4604      	mov	r4, r0
 800b32c:	f7ff fff0 	bl	800b310 <__sfp_lock_acquire>
 800b330:	6a23      	ldr	r3, [r4, #32]
 800b332:	b11b      	cbz	r3, 800b33c <__sinit+0x14>
 800b334:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b338:	f7ff bff0 	b.w	800b31c <__sfp_lock_release>
 800b33c:	4b04      	ldr	r3, [pc, #16]	@ (800b350 <__sinit+0x28>)
 800b33e:	6223      	str	r3, [r4, #32]
 800b340:	4b04      	ldr	r3, [pc, #16]	@ (800b354 <__sinit+0x2c>)
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d1f5      	bne.n	800b334 <__sinit+0xc>
 800b348:	f7ff ffc4 	bl	800b2d4 <global_stdio_init.part.0>
 800b34c:	e7f2      	b.n	800b334 <__sinit+0xc>
 800b34e:	bf00      	nop
 800b350:	0800b295 	.word	0x0800b295
 800b354:	20006bfc 	.word	0x20006bfc

0800b358 <_fwalk_sglue>:
 800b358:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b35c:	4607      	mov	r7, r0
 800b35e:	4688      	mov	r8, r1
 800b360:	4614      	mov	r4, r2
 800b362:	2600      	movs	r6, #0
 800b364:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b368:	f1b9 0901 	subs.w	r9, r9, #1
 800b36c:	d505      	bpl.n	800b37a <_fwalk_sglue+0x22>
 800b36e:	6824      	ldr	r4, [r4, #0]
 800b370:	2c00      	cmp	r4, #0
 800b372:	d1f7      	bne.n	800b364 <_fwalk_sglue+0xc>
 800b374:	4630      	mov	r0, r6
 800b376:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b37a:	89ab      	ldrh	r3, [r5, #12]
 800b37c:	2b01      	cmp	r3, #1
 800b37e:	d907      	bls.n	800b390 <_fwalk_sglue+0x38>
 800b380:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b384:	3301      	adds	r3, #1
 800b386:	d003      	beq.n	800b390 <_fwalk_sglue+0x38>
 800b388:	4629      	mov	r1, r5
 800b38a:	4638      	mov	r0, r7
 800b38c:	47c0      	blx	r8
 800b38e:	4306      	orrs	r6, r0
 800b390:	3568      	adds	r5, #104	@ 0x68
 800b392:	e7e9      	b.n	800b368 <_fwalk_sglue+0x10>

0800b394 <__sread>:
 800b394:	b510      	push	{r4, lr}
 800b396:	460c      	mov	r4, r1
 800b398:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b39c:	f000 f8e2 	bl	800b564 <_read_r>
 800b3a0:	2800      	cmp	r0, #0
 800b3a2:	bfab      	itete	ge
 800b3a4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b3a6:	89a3      	ldrhlt	r3, [r4, #12]
 800b3a8:	181b      	addge	r3, r3, r0
 800b3aa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b3ae:	bfac      	ite	ge
 800b3b0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b3b2:	81a3      	strhlt	r3, [r4, #12]
 800b3b4:	bd10      	pop	{r4, pc}

0800b3b6 <__swrite>:
 800b3b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3ba:	461f      	mov	r7, r3
 800b3bc:	898b      	ldrh	r3, [r1, #12]
 800b3be:	05db      	lsls	r3, r3, #23
 800b3c0:	4605      	mov	r5, r0
 800b3c2:	460c      	mov	r4, r1
 800b3c4:	4616      	mov	r6, r2
 800b3c6:	d505      	bpl.n	800b3d4 <__swrite+0x1e>
 800b3c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3cc:	2302      	movs	r3, #2
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	f000 f8b6 	bl	800b540 <_lseek_r>
 800b3d4:	89a3      	ldrh	r3, [r4, #12]
 800b3d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b3da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b3de:	81a3      	strh	r3, [r4, #12]
 800b3e0:	4632      	mov	r2, r6
 800b3e2:	463b      	mov	r3, r7
 800b3e4:	4628      	mov	r0, r5
 800b3e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b3ea:	f000 b8cd 	b.w	800b588 <_write_r>

0800b3ee <__sseek>:
 800b3ee:	b510      	push	{r4, lr}
 800b3f0:	460c      	mov	r4, r1
 800b3f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3f6:	f000 f8a3 	bl	800b540 <_lseek_r>
 800b3fa:	1c43      	adds	r3, r0, #1
 800b3fc:	89a3      	ldrh	r3, [r4, #12]
 800b3fe:	bf15      	itete	ne
 800b400:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b402:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b406:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b40a:	81a3      	strheq	r3, [r4, #12]
 800b40c:	bf18      	it	ne
 800b40e:	81a3      	strhne	r3, [r4, #12]
 800b410:	bd10      	pop	{r4, pc}

0800b412 <__sclose>:
 800b412:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b416:	f000 b883 	b.w	800b520 <_close_r>

0800b41a <_vsniprintf_r>:
 800b41a:	b530      	push	{r4, r5, lr}
 800b41c:	4614      	mov	r4, r2
 800b41e:	2c00      	cmp	r4, #0
 800b420:	b09b      	sub	sp, #108	@ 0x6c
 800b422:	4605      	mov	r5, r0
 800b424:	461a      	mov	r2, r3
 800b426:	da05      	bge.n	800b434 <_vsniprintf_r+0x1a>
 800b428:	238b      	movs	r3, #139	@ 0x8b
 800b42a:	6003      	str	r3, [r0, #0]
 800b42c:	f04f 30ff 	mov.w	r0, #4294967295
 800b430:	b01b      	add	sp, #108	@ 0x6c
 800b432:	bd30      	pop	{r4, r5, pc}
 800b434:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b438:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b43c:	bf14      	ite	ne
 800b43e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b442:	4623      	moveq	r3, r4
 800b444:	9302      	str	r3, [sp, #8]
 800b446:	9305      	str	r3, [sp, #20]
 800b448:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b44c:	9100      	str	r1, [sp, #0]
 800b44e:	9104      	str	r1, [sp, #16]
 800b450:	f8ad 300e 	strh.w	r3, [sp, #14]
 800b454:	4669      	mov	r1, sp
 800b456:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800b458:	f002 f8b0 	bl	800d5bc <_svfiprintf_r>
 800b45c:	1c43      	adds	r3, r0, #1
 800b45e:	bfbc      	itt	lt
 800b460:	238b      	movlt	r3, #139	@ 0x8b
 800b462:	602b      	strlt	r3, [r5, #0]
 800b464:	2c00      	cmp	r4, #0
 800b466:	d0e3      	beq.n	800b430 <_vsniprintf_r+0x16>
 800b468:	9b00      	ldr	r3, [sp, #0]
 800b46a:	2200      	movs	r2, #0
 800b46c:	701a      	strb	r2, [r3, #0]
 800b46e:	e7df      	b.n	800b430 <_vsniprintf_r+0x16>

0800b470 <vsniprintf>:
 800b470:	b507      	push	{r0, r1, r2, lr}
 800b472:	9300      	str	r3, [sp, #0]
 800b474:	4613      	mov	r3, r2
 800b476:	460a      	mov	r2, r1
 800b478:	4601      	mov	r1, r0
 800b47a:	4803      	ldr	r0, [pc, #12]	@ (800b488 <vsniprintf+0x18>)
 800b47c:	6800      	ldr	r0, [r0, #0]
 800b47e:	f7ff ffcc 	bl	800b41a <_vsniprintf_r>
 800b482:	b003      	add	sp, #12
 800b484:	f85d fb04 	ldr.w	pc, [sp], #4
 800b488:	200001d4 	.word	0x200001d4

0800b48c <memset>:
 800b48c:	4402      	add	r2, r0
 800b48e:	4603      	mov	r3, r0
 800b490:	4293      	cmp	r3, r2
 800b492:	d100      	bne.n	800b496 <memset+0xa>
 800b494:	4770      	bx	lr
 800b496:	f803 1b01 	strb.w	r1, [r3], #1
 800b49a:	e7f9      	b.n	800b490 <memset+0x4>

0800b49c <strncmp>:
 800b49c:	b510      	push	{r4, lr}
 800b49e:	b16a      	cbz	r2, 800b4bc <strncmp+0x20>
 800b4a0:	3901      	subs	r1, #1
 800b4a2:	1884      	adds	r4, r0, r2
 800b4a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b4a8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b4ac:	429a      	cmp	r2, r3
 800b4ae:	d103      	bne.n	800b4b8 <strncmp+0x1c>
 800b4b0:	42a0      	cmp	r0, r4
 800b4b2:	d001      	beq.n	800b4b8 <strncmp+0x1c>
 800b4b4:	2a00      	cmp	r2, #0
 800b4b6:	d1f5      	bne.n	800b4a4 <strncmp+0x8>
 800b4b8:	1ad0      	subs	r0, r2, r3
 800b4ba:	bd10      	pop	{r4, pc}
 800b4bc:	4610      	mov	r0, r2
 800b4be:	e7fc      	b.n	800b4ba <strncmp+0x1e>

0800b4c0 <__strtok_r>:
 800b4c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b4c2:	4604      	mov	r4, r0
 800b4c4:	b908      	cbnz	r0, 800b4ca <__strtok_r+0xa>
 800b4c6:	6814      	ldr	r4, [r2, #0]
 800b4c8:	b144      	cbz	r4, 800b4dc <__strtok_r+0x1c>
 800b4ca:	4620      	mov	r0, r4
 800b4cc:	f814 5b01 	ldrb.w	r5, [r4], #1
 800b4d0:	460f      	mov	r7, r1
 800b4d2:	f817 6b01 	ldrb.w	r6, [r7], #1
 800b4d6:	b91e      	cbnz	r6, 800b4e0 <__strtok_r+0x20>
 800b4d8:	b965      	cbnz	r5, 800b4f4 <__strtok_r+0x34>
 800b4da:	6015      	str	r5, [r2, #0]
 800b4dc:	2000      	movs	r0, #0
 800b4de:	e005      	b.n	800b4ec <__strtok_r+0x2c>
 800b4e0:	42b5      	cmp	r5, r6
 800b4e2:	d1f6      	bne.n	800b4d2 <__strtok_r+0x12>
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d1f0      	bne.n	800b4ca <__strtok_r+0xa>
 800b4e8:	6014      	str	r4, [r2, #0]
 800b4ea:	7003      	strb	r3, [r0, #0]
 800b4ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b4ee:	461c      	mov	r4, r3
 800b4f0:	e00c      	b.n	800b50c <__strtok_r+0x4c>
 800b4f2:	b915      	cbnz	r5, 800b4fa <__strtok_r+0x3a>
 800b4f4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b4f8:	460e      	mov	r6, r1
 800b4fa:	f816 5b01 	ldrb.w	r5, [r6], #1
 800b4fe:	42ab      	cmp	r3, r5
 800b500:	d1f7      	bne.n	800b4f2 <__strtok_r+0x32>
 800b502:	2b00      	cmp	r3, #0
 800b504:	d0f3      	beq.n	800b4ee <__strtok_r+0x2e>
 800b506:	2300      	movs	r3, #0
 800b508:	f804 3c01 	strb.w	r3, [r4, #-1]
 800b50c:	6014      	str	r4, [r2, #0]
 800b50e:	e7ed      	b.n	800b4ec <__strtok_r+0x2c>

0800b510 <strtok_r>:
 800b510:	2301      	movs	r3, #1
 800b512:	f7ff bfd5 	b.w	800b4c0 <__strtok_r>
	...

0800b518 <_localeconv_r>:
 800b518:	4800      	ldr	r0, [pc, #0]	@ (800b51c <_localeconv_r+0x4>)
 800b51a:	4770      	bx	lr
 800b51c:	20000158 	.word	0x20000158

0800b520 <_close_r>:
 800b520:	b538      	push	{r3, r4, r5, lr}
 800b522:	4d06      	ldr	r5, [pc, #24]	@ (800b53c <_close_r+0x1c>)
 800b524:	2300      	movs	r3, #0
 800b526:	4604      	mov	r4, r0
 800b528:	4608      	mov	r0, r1
 800b52a:	602b      	str	r3, [r5, #0]
 800b52c:	f7f8 fff2 	bl	8004514 <_close>
 800b530:	1c43      	adds	r3, r0, #1
 800b532:	d102      	bne.n	800b53a <_close_r+0x1a>
 800b534:	682b      	ldr	r3, [r5, #0]
 800b536:	b103      	cbz	r3, 800b53a <_close_r+0x1a>
 800b538:	6023      	str	r3, [r4, #0]
 800b53a:	bd38      	pop	{r3, r4, r5, pc}
 800b53c:	20006c00 	.word	0x20006c00

0800b540 <_lseek_r>:
 800b540:	b538      	push	{r3, r4, r5, lr}
 800b542:	4d07      	ldr	r5, [pc, #28]	@ (800b560 <_lseek_r+0x20>)
 800b544:	4604      	mov	r4, r0
 800b546:	4608      	mov	r0, r1
 800b548:	4611      	mov	r1, r2
 800b54a:	2200      	movs	r2, #0
 800b54c:	602a      	str	r2, [r5, #0]
 800b54e:	461a      	mov	r2, r3
 800b550:	f7f8 ffea 	bl	8004528 <_lseek>
 800b554:	1c43      	adds	r3, r0, #1
 800b556:	d102      	bne.n	800b55e <_lseek_r+0x1e>
 800b558:	682b      	ldr	r3, [r5, #0]
 800b55a:	b103      	cbz	r3, 800b55e <_lseek_r+0x1e>
 800b55c:	6023      	str	r3, [r4, #0]
 800b55e:	bd38      	pop	{r3, r4, r5, pc}
 800b560:	20006c00 	.word	0x20006c00

0800b564 <_read_r>:
 800b564:	b538      	push	{r3, r4, r5, lr}
 800b566:	4d07      	ldr	r5, [pc, #28]	@ (800b584 <_read_r+0x20>)
 800b568:	4604      	mov	r4, r0
 800b56a:	4608      	mov	r0, r1
 800b56c:	4611      	mov	r1, r2
 800b56e:	2200      	movs	r2, #0
 800b570:	602a      	str	r2, [r5, #0]
 800b572:	461a      	mov	r2, r3
 800b574:	f7f8 ffb2 	bl	80044dc <_read>
 800b578:	1c43      	adds	r3, r0, #1
 800b57a:	d102      	bne.n	800b582 <_read_r+0x1e>
 800b57c:	682b      	ldr	r3, [r5, #0]
 800b57e:	b103      	cbz	r3, 800b582 <_read_r+0x1e>
 800b580:	6023      	str	r3, [r4, #0]
 800b582:	bd38      	pop	{r3, r4, r5, pc}
 800b584:	20006c00 	.word	0x20006c00

0800b588 <_write_r>:
 800b588:	b538      	push	{r3, r4, r5, lr}
 800b58a:	4d07      	ldr	r5, [pc, #28]	@ (800b5a8 <_write_r+0x20>)
 800b58c:	4604      	mov	r4, r0
 800b58e:	4608      	mov	r0, r1
 800b590:	4611      	mov	r1, r2
 800b592:	2200      	movs	r2, #0
 800b594:	602a      	str	r2, [r5, #0]
 800b596:	461a      	mov	r2, r3
 800b598:	f7f8 ffb0 	bl	80044fc <_write>
 800b59c:	1c43      	adds	r3, r0, #1
 800b59e:	d102      	bne.n	800b5a6 <_write_r+0x1e>
 800b5a0:	682b      	ldr	r3, [r5, #0]
 800b5a2:	b103      	cbz	r3, 800b5a6 <_write_r+0x1e>
 800b5a4:	6023      	str	r3, [r4, #0]
 800b5a6:	bd38      	pop	{r3, r4, r5, pc}
 800b5a8:	20006c00 	.word	0x20006c00

0800b5ac <__errno>:
 800b5ac:	4b01      	ldr	r3, [pc, #4]	@ (800b5b4 <__errno+0x8>)
 800b5ae:	6818      	ldr	r0, [r3, #0]
 800b5b0:	4770      	bx	lr
 800b5b2:	bf00      	nop
 800b5b4:	200001d4 	.word	0x200001d4

0800b5b8 <__libc_init_array>:
 800b5b8:	b570      	push	{r4, r5, r6, lr}
 800b5ba:	4d0d      	ldr	r5, [pc, #52]	@ (800b5f0 <__libc_init_array+0x38>)
 800b5bc:	4c0d      	ldr	r4, [pc, #52]	@ (800b5f4 <__libc_init_array+0x3c>)
 800b5be:	1b64      	subs	r4, r4, r5
 800b5c0:	10a4      	asrs	r4, r4, #2
 800b5c2:	2600      	movs	r6, #0
 800b5c4:	42a6      	cmp	r6, r4
 800b5c6:	d109      	bne.n	800b5dc <__libc_init_array+0x24>
 800b5c8:	4d0b      	ldr	r5, [pc, #44]	@ (800b5f8 <__libc_init_array+0x40>)
 800b5ca:	4c0c      	ldr	r4, [pc, #48]	@ (800b5fc <__libc_init_array+0x44>)
 800b5cc:	f003 faac 	bl	800eb28 <_init>
 800b5d0:	1b64      	subs	r4, r4, r5
 800b5d2:	10a4      	asrs	r4, r4, #2
 800b5d4:	2600      	movs	r6, #0
 800b5d6:	42a6      	cmp	r6, r4
 800b5d8:	d105      	bne.n	800b5e6 <__libc_init_array+0x2e>
 800b5da:	bd70      	pop	{r4, r5, r6, pc}
 800b5dc:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5e0:	4798      	blx	r3
 800b5e2:	3601      	adds	r6, #1
 800b5e4:	e7ee      	b.n	800b5c4 <__libc_init_array+0xc>
 800b5e6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5ea:	4798      	blx	r3
 800b5ec:	3601      	adds	r6, #1
 800b5ee:	e7f2      	b.n	800b5d6 <__libc_init_array+0x1e>
 800b5f0:	08016838 	.word	0x08016838
 800b5f4:	08016838 	.word	0x08016838
 800b5f8:	08016838 	.word	0x08016838
 800b5fc:	0801683c 	.word	0x0801683c

0800b600 <__retarget_lock_init_recursive>:
 800b600:	4770      	bx	lr

0800b602 <__retarget_lock_acquire_recursive>:
 800b602:	4770      	bx	lr

0800b604 <__retarget_lock_release_recursive>:
 800b604:	4770      	bx	lr

0800b606 <strcpy>:
 800b606:	4603      	mov	r3, r0
 800b608:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b60c:	f803 2b01 	strb.w	r2, [r3], #1
 800b610:	2a00      	cmp	r2, #0
 800b612:	d1f9      	bne.n	800b608 <strcpy+0x2>
 800b614:	4770      	bx	lr

0800b616 <memcpy>:
 800b616:	440a      	add	r2, r1
 800b618:	4291      	cmp	r1, r2
 800b61a:	f100 33ff 	add.w	r3, r0, #4294967295
 800b61e:	d100      	bne.n	800b622 <memcpy+0xc>
 800b620:	4770      	bx	lr
 800b622:	b510      	push	{r4, lr}
 800b624:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b628:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b62c:	4291      	cmp	r1, r2
 800b62e:	d1f9      	bne.n	800b624 <memcpy+0xe>
 800b630:	bd10      	pop	{r4, pc}
 800b632:	0000      	movs	r0, r0
 800b634:	0000      	movs	r0, r0
	...

0800b638 <nan>:
 800b638:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b640 <nan+0x8>
 800b63c:	4770      	bx	lr
 800b63e:	bf00      	nop
 800b640:	00000000 	.word	0x00000000
 800b644:	7ff80000 	.word	0x7ff80000

0800b648 <nanf>:
 800b648:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b650 <nanf+0x8>
 800b64c:	4770      	bx	lr
 800b64e:	bf00      	nop
 800b650:	7fc00000 	.word	0x7fc00000

0800b654 <quorem>:
 800b654:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b658:	6903      	ldr	r3, [r0, #16]
 800b65a:	690c      	ldr	r4, [r1, #16]
 800b65c:	42a3      	cmp	r3, r4
 800b65e:	4607      	mov	r7, r0
 800b660:	db7e      	blt.n	800b760 <quorem+0x10c>
 800b662:	3c01      	subs	r4, #1
 800b664:	f101 0814 	add.w	r8, r1, #20
 800b668:	00a3      	lsls	r3, r4, #2
 800b66a:	f100 0514 	add.w	r5, r0, #20
 800b66e:	9300      	str	r3, [sp, #0]
 800b670:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b674:	9301      	str	r3, [sp, #4]
 800b676:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b67a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b67e:	3301      	adds	r3, #1
 800b680:	429a      	cmp	r2, r3
 800b682:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b686:	fbb2 f6f3 	udiv	r6, r2, r3
 800b68a:	d32e      	bcc.n	800b6ea <quorem+0x96>
 800b68c:	f04f 0a00 	mov.w	sl, #0
 800b690:	46c4      	mov	ip, r8
 800b692:	46ae      	mov	lr, r5
 800b694:	46d3      	mov	fp, sl
 800b696:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b69a:	b298      	uxth	r0, r3
 800b69c:	fb06 a000 	mla	r0, r6, r0, sl
 800b6a0:	0c02      	lsrs	r2, r0, #16
 800b6a2:	0c1b      	lsrs	r3, r3, #16
 800b6a4:	fb06 2303 	mla	r3, r6, r3, r2
 800b6a8:	f8de 2000 	ldr.w	r2, [lr]
 800b6ac:	b280      	uxth	r0, r0
 800b6ae:	b292      	uxth	r2, r2
 800b6b0:	1a12      	subs	r2, r2, r0
 800b6b2:	445a      	add	r2, fp
 800b6b4:	f8de 0000 	ldr.w	r0, [lr]
 800b6b8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b6bc:	b29b      	uxth	r3, r3
 800b6be:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b6c2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b6c6:	b292      	uxth	r2, r2
 800b6c8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b6cc:	45e1      	cmp	r9, ip
 800b6ce:	f84e 2b04 	str.w	r2, [lr], #4
 800b6d2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b6d6:	d2de      	bcs.n	800b696 <quorem+0x42>
 800b6d8:	9b00      	ldr	r3, [sp, #0]
 800b6da:	58eb      	ldr	r3, [r5, r3]
 800b6dc:	b92b      	cbnz	r3, 800b6ea <quorem+0x96>
 800b6de:	9b01      	ldr	r3, [sp, #4]
 800b6e0:	3b04      	subs	r3, #4
 800b6e2:	429d      	cmp	r5, r3
 800b6e4:	461a      	mov	r2, r3
 800b6e6:	d32f      	bcc.n	800b748 <quorem+0xf4>
 800b6e8:	613c      	str	r4, [r7, #16]
 800b6ea:	4638      	mov	r0, r7
 800b6ec:	f001 fd10 	bl	800d110 <__mcmp>
 800b6f0:	2800      	cmp	r0, #0
 800b6f2:	db25      	blt.n	800b740 <quorem+0xec>
 800b6f4:	4629      	mov	r1, r5
 800b6f6:	2000      	movs	r0, #0
 800b6f8:	f858 2b04 	ldr.w	r2, [r8], #4
 800b6fc:	f8d1 c000 	ldr.w	ip, [r1]
 800b700:	fa1f fe82 	uxth.w	lr, r2
 800b704:	fa1f f38c 	uxth.w	r3, ip
 800b708:	eba3 030e 	sub.w	r3, r3, lr
 800b70c:	4403      	add	r3, r0
 800b70e:	0c12      	lsrs	r2, r2, #16
 800b710:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b714:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b718:	b29b      	uxth	r3, r3
 800b71a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b71e:	45c1      	cmp	r9, r8
 800b720:	f841 3b04 	str.w	r3, [r1], #4
 800b724:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b728:	d2e6      	bcs.n	800b6f8 <quorem+0xa4>
 800b72a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b72e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b732:	b922      	cbnz	r2, 800b73e <quorem+0xea>
 800b734:	3b04      	subs	r3, #4
 800b736:	429d      	cmp	r5, r3
 800b738:	461a      	mov	r2, r3
 800b73a:	d30b      	bcc.n	800b754 <quorem+0x100>
 800b73c:	613c      	str	r4, [r7, #16]
 800b73e:	3601      	adds	r6, #1
 800b740:	4630      	mov	r0, r6
 800b742:	b003      	add	sp, #12
 800b744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b748:	6812      	ldr	r2, [r2, #0]
 800b74a:	3b04      	subs	r3, #4
 800b74c:	2a00      	cmp	r2, #0
 800b74e:	d1cb      	bne.n	800b6e8 <quorem+0x94>
 800b750:	3c01      	subs	r4, #1
 800b752:	e7c6      	b.n	800b6e2 <quorem+0x8e>
 800b754:	6812      	ldr	r2, [r2, #0]
 800b756:	3b04      	subs	r3, #4
 800b758:	2a00      	cmp	r2, #0
 800b75a:	d1ef      	bne.n	800b73c <quorem+0xe8>
 800b75c:	3c01      	subs	r4, #1
 800b75e:	e7ea      	b.n	800b736 <quorem+0xe2>
 800b760:	2000      	movs	r0, #0
 800b762:	e7ee      	b.n	800b742 <quorem+0xee>
 800b764:	0000      	movs	r0, r0
	...

0800b768 <_dtoa_r>:
 800b768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b76c:	69c7      	ldr	r7, [r0, #28]
 800b76e:	b099      	sub	sp, #100	@ 0x64
 800b770:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b774:	ec55 4b10 	vmov	r4, r5, d0
 800b778:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800b77a:	9109      	str	r1, [sp, #36]	@ 0x24
 800b77c:	4683      	mov	fp, r0
 800b77e:	920e      	str	r2, [sp, #56]	@ 0x38
 800b780:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b782:	b97f      	cbnz	r7, 800b7a4 <_dtoa_r+0x3c>
 800b784:	2010      	movs	r0, #16
 800b786:	f001 f937 	bl	800c9f8 <malloc>
 800b78a:	4602      	mov	r2, r0
 800b78c:	f8cb 001c 	str.w	r0, [fp, #28]
 800b790:	b920      	cbnz	r0, 800b79c <_dtoa_r+0x34>
 800b792:	4ba7      	ldr	r3, [pc, #668]	@ (800ba30 <_dtoa_r+0x2c8>)
 800b794:	21ef      	movs	r1, #239	@ 0xef
 800b796:	48a7      	ldr	r0, [pc, #668]	@ (800ba34 <_dtoa_r+0x2cc>)
 800b798:	f002 f8e2 	bl	800d960 <__assert_func>
 800b79c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b7a0:	6007      	str	r7, [r0, #0]
 800b7a2:	60c7      	str	r7, [r0, #12]
 800b7a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b7a8:	6819      	ldr	r1, [r3, #0]
 800b7aa:	b159      	cbz	r1, 800b7c4 <_dtoa_r+0x5c>
 800b7ac:	685a      	ldr	r2, [r3, #4]
 800b7ae:	604a      	str	r2, [r1, #4]
 800b7b0:	2301      	movs	r3, #1
 800b7b2:	4093      	lsls	r3, r2
 800b7b4:	608b      	str	r3, [r1, #8]
 800b7b6:	4658      	mov	r0, fp
 800b7b8:	f001 fa26 	bl	800cc08 <_Bfree>
 800b7bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b7c0:	2200      	movs	r2, #0
 800b7c2:	601a      	str	r2, [r3, #0]
 800b7c4:	1e2b      	subs	r3, r5, #0
 800b7c6:	bfb9      	ittee	lt
 800b7c8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b7cc:	9303      	strlt	r3, [sp, #12]
 800b7ce:	2300      	movge	r3, #0
 800b7d0:	6033      	strge	r3, [r6, #0]
 800b7d2:	9f03      	ldr	r7, [sp, #12]
 800b7d4:	4b98      	ldr	r3, [pc, #608]	@ (800ba38 <_dtoa_r+0x2d0>)
 800b7d6:	bfbc      	itt	lt
 800b7d8:	2201      	movlt	r2, #1
 800b7da:	6032      	strlt	r2, [r6, #0]
 800b7dc:	43bb      	bics	r3, r7
 800b7de:	d112      	bne.n	800b806 <_dtoa_r+0x9e>
 800b7e0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b7e2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b7e6:	6013      	str	r3, [r2, #0]
 800b7e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b7ec:	4323      	orrs	r3, r4
 800b7ee:	f000 854d 	beq.w	800c28c <_dtoa_r+0xb24>
 800b7f2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b7f4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800ba4c <_dtoa_r+0x2e4>
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	f000 854f 	beq.w	800c29c <_dtoa_r+0xb34>
 800b7fe:	f10a 0303 	add.w	r3, sl, #3
 800b802:	f000 bd49 	b.w	800c298 <_dtoa_r+0xb30>
 800b806:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b80a:	2200      	movs	r2, #0
 800b80c:	ec51 0b17 	vmov	r0, r1, d7
 800b810:	2300      	movs	r3, #0
 800b812:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b816:	f7f5 f98f 	bl	8000b38 <__aeabi_dcmpeq>
 800b81a:	4680      	mov	r8, r0
 800b81c:	b158      	cbz	r0, 800b836 <_dtoa_r+0xce>
 800b81e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b820:	2301      	movs	r3, #1
 800b822:	6013      	str	r3, [r2, #0]
 800b824:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b826:	b113      	cbz	r3, 800b82e <_dtoa_r+0xc6>
 800b828:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b82a:	4b84      	ldr	r3, [pc, #528]	@ (800ba3c <_dtoa_r+0x2d4>)
 800b82c:	6013      	str	r3, [r2, #0]
 800b82e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800ba50 <_dtoa_r+0x2e8>
 800b832:	f000 bd33 	b.w	800c29c <_dtoa_r+0xb34>
 800b836:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b83a:	aa16      	add	r2, sp, #88	@ 0x58
 800b83c:	a917      	add	r1, sp, #92	@ 0x5c
 800b83e:	4658      	mov	r0, fp
 800b840:	f001 fd86 	bl	800d350 <__d2b>
 800b844:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b848:	4681      	mov	r9, r0
 800b84a:	2e00      	cmp	r6, #0
 800b84c:	d077      	beq.n	800b93e <_dtoa_r+0x1d6>
 800b84e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b850:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b854:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b858:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b85c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b860:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b864:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b868:	4619      	mov	r1, r3
 800b86a:	2200      	movs	r2, #0
 800b86c:	4b74      	ldr	r3, [pc, #464]	@ (800ba40 <_dtoa_r+0x2d8>)
 800b86e:	f7f4 fd43 	bl	80002f8 <__aeabi_dsub>
 800b872:	a369      	add	r3, pc, #420	@ (adr r3, 800ba18 <_dtoa_r+0x2b0>)
 800b874:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b878:	f7f4 fef6 	bl	8000668 <__aeabi_dmul>
 800b87c:	a368      	add	r3, pc, #416	@ (adr r3, 800ba20 <_dtoa_r+0x2b8>)
 800b87e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b882:	f7f4 fd3b 	bl	80002fc <__adddf3>
 800b886:	4604      	mov	r4, r0
 800b888:	4630      	mov	r0, r6
 800b88a:	460d      	mov	r5, r1
 800b88c:	f7f4 fe82 	bl	8000594 <__aeabi_i2d>
 800b890:	a365      	add	r3, pc, #404	@ (adr r3, 800ba28 <_dtoa_r+0x2c0>)
 800b892:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b896:	f7f4 fee7 	bl	8000668 <__aeabi_dmul>
 800b89a:	4602      	mov	r2, r0
 800b89c:	460b      	mov	r3, r1
 800b89e:	4620      	mov	r0, r4
 800b8a0:	4629      	mov	r1, r5
 800b8a2:	f7f4 fd2b 	bl	80002fc <__adddf3>
 800b8a6:	4604      	mov	r4, r0
 800b8a8:	460d      	mov	r5, r1
 800b8aa:	f7f5 f98d 	bl	8000bc8 <__aeabi_d2iz>
 800b8ae:	2200      	movs	r2, #0
 800b8b0:	4607      	mov	r7, r0
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	4620      	mov	r0, r4
 800b8b6:	4629      	mov	r1, r5
 800b8b8:	f7f5 f948 	bl	8000b4c <__aeabi_dcmplt>
 800b8bc:	b140      	cbz	r0, 800b8d0 <_dtoa_r+0x168>
 800b8be:	4638      	mov	r0, r7
 800b8c0:	f7f4 fe68 	bl	8000594 <__aeabi_i2d>
 800b8c4:	4622      	mov	r2, r4
 800b8c6:	462b      	mov	r3, r5
 800b8c8:	f7f5 f936 	bl	8000b38 <__aeabi_dcmpeq>
 800b8cc:	b900      	cbnz	r0, 800b8d0 <_dtoa_r+0x168>
 800b8ce:	3f01      	subs	r7, #1
 800b8d0:	2f16      	cmp	r7, #22
 800b8d2:	d851      	bhi.n	800b978 <_dtoa_r+0x210>
 800b8d4:	4b5b      	ldr	r3, [pc, #364]	@ (800ba44 <_dtoa_r+0x2dc>)
 800b8d6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b8da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b8e2:	f7f5 f933 	bl	8000b4c <__aeabi_dcmplt>
 800b8e6:	2800      	cmp	r0, #0
 800b8e8:	d048      	beq.n	800b97c <_dtoa_r+0x214>
 800b8ea:	3f01      	subs	r7, #1
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	9312      	str	r3, [sp, #72]	@ 0x48
 800b8f0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b8f2:	1b9b      	subs	r3, r3, r6
 800b8f4:	1e5a      	subs	r2, r3, #1
 800b8f6:	bf44      	itt	mi
 800b8f8:	f1c3 0801 	rsbmi	r8, r3, #1
 800b8fc:	2300      	movmi	r3, #0
 800b8fe:	9208      	str	r2, [sp, #32]
 800b900:	bf54      	ite	pl
 800b902:	f04f 0800 	movpl.w	r8, #0
 800b906:	9308      	strmi	r3, [sp, #32]
 800b908:	2f00      	cmp	r7, #0
 800b90a:	db39      	blt.n	800b980 <_dtoa_r+0x218>
 800b90c:	9b08      	ldr	r3, [sp, #32]
 800b90e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b910:	443b      	add	r3, r7
 800b912:	9308      	str	r3, [sp, #32]
 800b914:	2300      	movs	r3, #0
 800b916:	930a      	str	r3, [sp, #40]	@ 0x28
 800b918:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b91a:	2b09      	cmp	r3, #9
 800b91c:	d864      	bhi.n	800b9e8 <_dtoa_r+0x280>
 800b91e:	2b05      	cmp	r3, #5
 800b920:	bfc4      	itt	gt
 800b922:	3b04      	subgt	r3, #4
 800b924:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800b926:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b928:	f1a3 0302 	sub.w	r3, r3, #2
 800b92c:	bfcc      	ite	gt
 800b92e:	2400      	movgt	r4, #0
 800b930:	2401      	movle	r4, #1
 800b932:	2b03      	cmp	r3, #3
 800b934:	d863      	bhi.n	800b9fe <_dtoa_r+0x296>
 800b936:	e8df f003 	tbb	[pc, r3]
 800b93a:	372a      	.short	0x372a
 800b93c:	5535      	.short	0x5535
 800b93e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800b942:	441e      	add	r6, r3
 800b944:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b948:	2b20      	cmp	r3, #32
 800b94a:	bfc1      	itttt	gt
 800b94c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b950:	409f      	lslgt	r7, r3
 800b952:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b956:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b95a:	bfd6      	itet	le
 800b95c:	f1c3 0320 	rsble	r3, r3, #32
 800b960:	ea47 0003 	orrgt.w	r0, r7, r3
 800b964:	fa04 f003 	lslle.w	r0, r4, r3
 800b968:	f7f4 fe04 	bl	8000574 <__aeabi_ui2d>
 800b96c:	2201      	movs	r2, #1
 800b96e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b972:	3e01      	subs	r6, #1
 800b974:	9214      	str	r2, [sp, #80]	@ 0x50
 800b976:	e777      	b.n	800b868 <_dtoa_r+0x100>
 800b978:	2301      	movs	r3, #1
 800b97a:	e7b8      	b.n	800b8ee <_dtoa_r+0x186>
 800b97c:	9012      	str	r0, [sp, #72]	@ 0x48
 800b97e:	e7b7      	b.n	800b8f0 <_dtoa_r+0x188>
 800b980:	427b      	negs	r3, r7
 800b982:	930a      	str	r3, [sp, #40]	@ 0x28
 800b984:	2300      	movs	r3, #0
 800b986:	eba8 0807 	sub.w	r8, r8, r7
 800b98a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b98c:	e7c4      	b.n	800b918 <_dtoa_r+0x1b0>
 800b98e:	2300      	movs	r3, #0
 800b990:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b992:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b994:	2b00      	cmp	r3, #0
 800b996:	dc35      	bgt.n	800ba04 <_dtoa_r+0x29c>
 800b998:	2301      	movs	r3, #1
 800b99a:	9300      	str	r3, [sp, #0]
 800b99c:	9307      	str	r3, [sp, #28]
 800b99e:	461a      	mov	r2, r3
 800b9a0:	920e      	str	r2, [sp, #56]	@ 0x38
 800b9a2:	e00b      	b.n	800b9bc <_dtoa_r+0x254>
 800b9a4:	2301      	movs	r3, #1
 800b9a6:	e7f3      	b.n	800b990 <_dtoa_r+0x228>
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b9ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b9ae:	18fb      	adds	r3, r7, r3
 800b9b0:	9300      	str	r3, [sp, #0]
 800b9b2:	3301      	adds	r3, #1
 800b9b4:	2b01      	cmp	r3, #1
 800b9b6:	9307      	str	r3, [sp, #28]
 800b9b8:	bfb8      	it	lt
 800b9ba:	2301      	movlt	r3, #1
 800b9bc:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b9c0:	2100      	movs	r1, #0
 800b9c2:	2204      	movs	r2, #4
 800b9c4:	f102 0514 	add.w	r5, r2, #20
 800b9c8:	429d      	cmp	r5, r3
 800b9ca:	d91f      	bls.n	800ba0c <_dtoa_r+0x2a4>
 800b9cc:	6041      	str	r1, [r0, #4]
 800b9ce:	4658      	mov	r0, fp
 800b9d0:	f001 f8da 	bl	800cb88 <_Balloc>
 800b9d4:	4682      	mov	sl, r0
 800b9d6:	2800      	cmp	r0, #0
 800b9d8:	d13c      	bne.n	800ba54 <_dtoa_r+0x2ec>
 800b9da:	4b1b      	ldr	r3, [pc, #108]	@ (800ba48 <_dtoa_r+0x2e0>)
 800b9dc:	4602      	mov	r2, r0
 800b9de:	f240 11af 	movw	r1, #431	@ 0x1af
 800b9e2:	e6d8      	b.n	800b796 <_dtoa_r+0x2e>
 800b9e4:	2301      	movs	r3, #1
 800b9e6:	e7e0      	b.n	800b9aa <_dtoa_r+0x242>
 800b9e8:	2401      	movs	r4, #1
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800b9ee:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b9f0:	f04f 33ff 	mov.w	r3, #4294967295
 800b9f4:	9300      	str	r3, [sp, #0]
 800b9f6:	9307      	str	r3, [sp, #28]
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	2312      	movs	r3, #18
 800b9fc:	e7d0      	b.n	800b9a0 <_dtoa_r+0x238>
 800b9fe:	2301      	movs	r3, #1
 800ba00:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ba02:	e7f5      	b.n	800b9f0 <_dtoa_r+0x288>
 800ba04:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ba06:	9300      	str	r3, [sp, #0]
 800ba08:	9307      	str	r3, [sp, #28]
 800ba0a:	e7d7      	b.n	800b9bc <_dtoa_r+0x254>
 800ba0c:	3101      	adds	r1, #1
 800ba0e:	0052      	lsls	r2, r2, #1
 800ba10:	e7d8      	b.n	800b9c4 <_dtoa_r+0x25c>
 800ba12:	bf00      	nop
 800ba14:	f3af 8000 	nop.w
 800ba18:	636f4361 	.word	0x636f4361
 800ba1c:	3fd287a7 	.word	0x3fd287a7
 800ba20:	8b60c8b3 	.word	0x8b60c8b3
 800ba24:	3fc68a28 	.word	0x3fc68a28
 800ba28:	509f79fb 	.word	0x509f79fb
 800ba2c:	3fd34413 	.word	0x3fd34413
 800ba30:	080161ca 	.word	0x080161ca
 800ba34:	080161e1 	.word	0x080161e1
 800ba38:	7ff00000 	.word	0x7ff00000
 800ba3c:	08016192 	.word	0x08016192
 800ba40:	3ff80000 	.word	0x3ff80000
 800ba44:	08016338 	.word	0x08016338
 800ba48:	08016239 	.word	0x08016239
 800ba4c:	080161c6 	.word	0x080161c6
 800ba50:	08016191 	.word	0x08016191
 800ba54:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ba58:	6018      	str	r0, [r3, #0]
 800ba5a:	9b07      	ldr	r3, [sp, #28]
 800ba5c:	2b0e      	cmp	r3, #14
 800ba5e:	f200 80a4 	bhi.w	800bbaa <_dtoa_r+0x442>
 800ba62:	2c00      	cmp	r4, #0
 800ba64:	f000 80a1 	beq.w	800bbaa <_dtoa_r+0x442>
 800ba68:	2f00      	cmp	r7, #0
 800ba6a:	dd33      	ble.n	800bad4 <_dtoa_r+0x36c>
 800ba6c:	4bad      	ldr	r3, [pc, #692]	@ (800bd24 <_dtoa_r+0x5bc>)
 800ba6e:	f007 020f 	and.w	r2, r7, #15
 800ba72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ba76:	ed93 7b00 	vldr	d7, [r3]
 800ba7a:	05f8      	lsls	r0, r7, #23
 800ba7c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800ba80:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ba84:	d516      	bpl.n	800bab4 <_dtoa_r+0x34c>
 800ba86:	4ba8      	ldr	r3, [pc, #672]	@ (800bd28 <_dtoa_r+0x5c0>)
 800ba88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ba8c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ba90:	f7f4 ff14 	bl	80008bc <__aeabi_ddiv>
 800ba94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ba98:	f004 040f 	and.w	r4, r4, #15
 800ba9c:	2603      	movs	r6, #3
 800ba9e:	4da2      	ldr	r5, [pc, #648]	@ (800bd28 <_dtoa_r+0x5c0>)
 800baa0:	b954      	cbnz	r4, 800bab8 <_dtoa_r+0x350>
 800baa2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800baa6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800baaa:	f7f4 ff07 	bl	80008bc <__aeabi_ddiv>
 800baae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bab2:	e028      	b.n	800bb06 <_dtoa_r+0x39e>
 800bab4:	2602      	movs	r6, #2
 800bab6:	e7f2      	b.n	800ba9e <_dtoa_r+0x336>
 800bab8:	07e1      	lsls	r1, r4, #31
 800baba:	d508      	bpl.n	800bace <_dtoa_r+0x366>
 800babc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bac0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bac4:	f7f4 fdd0 	bl	8000668 <__aeabi_dmul>
 800bac8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bacc:	3601      	adds	r6, #1
 800bace:	1064      	asrs	r4, r4, #1
 800bad0:	3508      	adds	r5, #8
 800bad2:	e7e5      	b.n	800baa0 <_dtoa_r+0x338>
 800bad4:	f000 80d2 	beq.w	800bc7c <_dtoa_r+0x514>
 800bad8:	427c      	negs	r4, r7
 800bada:	4b92      	ldr	r3, [pc, #584]	@ (800bd24 <_dtoa_r+0x5bc>)
 800badc:	4d92      	ldr	r5, [pc, #584]	@ (800bd28 <_dtoa_r+0x5c0>)
 800bade:	f004 020f 	and.w	r2, r4, #15
 800bae2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800baee:	f7f4 fdbb 	bl	8000668 <__aeabi_dmul>
 800baf2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800baf6:	1124      	asrs	r4, r4, #4
 800baf8:	2300      	movs	r3, #0
 800bafa:	2602      	movs	r6, #2
 800bafc:	2c00      	cmp	r4, #0
 800bafe:	f040 80b2 	bne.w	800bc66 <_dtoa_r+0x4fe>
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d1d3      	bne.n	800baae <_dtoa_r+0x346>
 800bb06:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bb08:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	f000 80b7 	beq.w	800bc80 <_dtoa_r+0x518>
 800bb12:	4b86      	ldr	r3, [pc, #536]	@ (800bd2c <_dtoa_r+0x5c4>)
 800bb14:	2200      	movs	r2, #0
 800bb16:	4620      	mov	r0, r4
 800bb18:	4629      	mov	r1, r5
 800bb1a:	f7f5 f817 	bl	8000b4c <__aeabi_dcmplt>
 800bb1e:	2800      	cmp	r0, #0
 800bb20:	f000 80ae 	beq.w	800bc80 <_dtoa_r+0x518>
 800bb24:	9b07      	ldr	r3, [sp, #28]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	f000 80aa 	beq.w	800bc80 <_dtoa_r+0x518>
 800bb2c:	9b00      	ldr	r3, [sp, #0]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	dd37      	ble.n	800bba2 <_dtoa_r+0x43a>
 800bb32:	1e7b      	subs	r3, r7, #1
 800bb34:	9304      	str	r3, [sp, #16]
 800bb36:	4620      	mov	r0, r4
 800bb38:	4b7d      	ldr	r3, [pc, #500]	@ (800bd30 <_dtoa_r+0x5c8>)
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	4629      	mov	r1, r5
 800bb3e:	f7f4 fd93 	bl	8000668 <__aeabi_dmul>
 800bb42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bb46:	9c00      	ldr	r4, [sp, #0]
 800bb48:	3601      	adds	r6, #1
 800bb4a:	4630      	mov	r0, r6
 800bb4c:	f7f4 fd22 	bl	8000594 <__aeabi_i2d>
 800bb50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bb54:	f7f4 fd88 	bl	8000668 <__aeabi_dmul>
 800bb58:	4b76      	ldr	r3, [pc, #472]	@ (800bd34 <_dtoa_r+0x5cc>)
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	f7f4 fbce 	bl	80002fc <__adddf3>
 800bb60:	4605      	mov	r5, r0
 800bb62:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800bb66:	2c00      	cmp	r4, #0
 800bb68:	f040 808d 	bne.w	800bc86 <_dtoa_r+0x51e>
 800bb6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb70:	4b71      	ldr	r3, [pc, #452]	@ (800bd38 <_dtoa_r+0x5d0>)
 800bb72:	2200      	movs	r2, #0
 800bb74:	f7f4 fbc0 	bl	80002f8 <__aeabi_dsub>
 800bb78:	4602      	mov	r2, r0
 800bb7a:	460b      	mov	r3, r1
 800bb7c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bb80:	462a      	mov	r2, r5
 800bb82:	4633      	mov	r3, r6
 800bb84:	f7f5 f800 	bl	8000b88 <__aeabi_dcmpgt>
 800bb88:	2800      	cmp	r0, #0
 800bb8a:	f040 828b 	bne.w	800c0a4 <_dtoa_r+0x93c>
 800bb8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb92:	462a      	mov	r2, r5
 800bb94:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800bb98:	f7f4 ffd8 	bl	8000b4c <__aeabi_dcmplt>
 800bb9c:	2800      	cmp	r0, #0
 800bb9e:	f040 8128 	bne.w	800bdf2 <_dtoa_r+0x68a>
 800bba2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800bba6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800bbaa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	f2c0 815a 	blt.w	800be66 <_dtoa_r+0x6fe>
 800bbb2:	2f0e      	cmp	r7, #14
 800bbb4:	f300 8157 	bgt.w	800be66 <_dtoa_r+0x6fe>
 800bbb8:	4b5a      	ldr	r3, [pc, #360]	@ (800bd24 <_dtoa_r+0x5bc>)
 800bbba:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bbbe:	ed93 7b00 	vldr	d7, [r3]
 800bbc2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	ed8d 7b00 	vstr	d7, [sp]
 800bbca:	da03      	bge.n	800bbd4 <_dtoa_r+0x46c>
 800bbcc:	9b07      	ldr	r3, [sp, #28]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	f340 8101 	ble.w	800bdd6 <_dtoa_r+0x66e>
 800bbd4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bbd8:	4656      	mov	r6, sl
 800bbda:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bbde:	4620      	mov	r0, r4
 800bbe0:	4629      	mov	r1, r5
 800bbe2:	f7f4 fe6b 	bl	80008bc <__aeabi_ddiv>
 800bbe6:	f7f4 ffef 	bl	8000bc8 <__aeabi_d2iz>
 800bbea:	4680      	mov	r8, r0
 800bbec:	f7f4 fcd2 	bl	8000594 <__aeabi_i2d>
 800bbf0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bbf4:	f7f4 fd38 	bl	8000668 <__aeabi_dmul>
 800bbf8:	4602      	mov	r2, r0
 800bbfa:	460b      	mov	r3, r1
 800bbfc:	4620      	mov	r0, r4
 800bbfe:	4629      	mov	r1, r5
 800bc00:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800bc04:	f7f4 fb78 	bl	80002f8 <__aeabi_dsub>
 800bc08:	f806 4b01 	strb.w	r4, [r6], #1
 800bc0c:	9d07      	ldr	r5, [sp, #28]
 800bc0e:	eba6 040a 	sub.w	r4, r6, sl
 800bc12:	42a5      	cmp	r5, r4
 800bc14:	4602      	mov	r2, r0
 800bc16:	460b      	mov	r3, r1
 800bc18:	f040 8117 	bne.w	800be4a <_dtoa_r+0x6e2>
 800bc1c:	f7f4 fb6e 	bl	80002fc <__adddf3>
 800bc20:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bc24:	4604      	mov	r4, r0
 800bc26:	460d      	mov	r5, r1
 800bc28:	f7f4 ffae 	bl	8000b88 <__aeabi_dcmpgt>
 800bc2c:	2800      	cmp	r0, #0
 800bc2e:	f040 80f9 	bne.w	800be24 <_dtoa_r+0x6bc>
 800bc32:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bc36:	4620      	mov	r0, r4
 800bc38:	4629      	mov	r1, r5
 800bc3a:	f7f4 ff7d 	bl	8000b38 <__aeabi_dcmpeq>
 800bc3e:	b118      	cbz	r0, 800bc48 <_dtoa_r+0x4e0>
 800bc40:	f018 0f01 	tst.w	r8, #1
 800bc44:	f040 80ee 	bne.w	800be24 <_dtoa_r+0x6bc>
 800bc48:	4649      	mov	r1, r9
 800bc4a:	4658      	mov	r0, fp
 800bc4c:	f000 ffdc 	bl	800cc08 <_Bfree>
 800bc50:	2300      	movs	r3, #0
 800bc52:	7033      	strb	r3, [r6, #0]
 800bc54:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bc56:	3701      	adds	r7, #1
 800bc58:	601f      	str	r7, [r3, #0]
 800bc5a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	f000 831d 	beq.w	800c29c <_dtoa_r+0xb34>
 800bc62:	601e      	str	r6, [r3, #0]
 800bc64:	e31a      	b.n	800c29c <_dtoa_r+0xb34>
 800bc66:	07e2      	lsls	r2, r4, #31
 800bc68:	d505      	bpl.n	800bc76 <_dtoa_r+0x50e>
 800bc6a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bc6e:	f7f4 fcfb 	bl	8000668 <__aeabi_dmul>
 800bc72:	3601      	adds	r6, #1
 800bc74:	2301      	movs	r3, #1
 800bc76:	1064      	asrs	r4, r4, #1
 800bc78:	3508      	adds	r5, #8
 800bc7a:	e73f      	b.n	800bafc <_dtoa_r+0x394>
 800bc7c:	2602      	movs	r6, #2
 800bc7e:	e742      	b.n	800bb06 <_dtoa_r+0x39e>
 800bc80:	9c07      	ldr	r4, [sp, #28]
 800bc82:	9704      	str	r7, [sp, #16]
 800bc84:	e761      	b.n	800bb4a <_dtoa_r+0x3e2>
 800bc86:	4b27      	ldr	r3, [pc, #156]	@ (800bd24 <_dtoa_r+0x5bc>)
 800bc88:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bc8a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bc8e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bc92:	4454      	add	r4, sl
 800bc94:	2900      	cmp	r1, #0
 800bc96:	d053      	beq.n	800bd40 <_dtoa_r+0x5d8>
 800bc98:	4928      	ldr	r1, [pc, #160]	@ (800bd3c <_dtoa_r+0x5d4>)
 800bc9a:	2000      	movs	r0, #0
 800bc9c:	f7f4 fe0e 	bl	80008bc <__aeabi_ddiv>
 800bca0:	4633      	mov	r3, r6
 800bca2:	462a      	mov	r2, r5
 800bca4:	f7f4 fb28 	bl	80002f8 <__aeabi_dsub>
 800bca8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bcac:	4656      	mov	r6, sl
 800bcae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bcb2:	f7f4 ff89 	bl	8000bc8 <__aeabi_d2iz>
 800bcb6:	4605      	mov	r5, r0
 800bcb8:	f7f4 fc6c 	bl	8000594 <__aeabi_i2d>
 800bcbc:	4602      	mov	r2, r0
 800bcbe:	460b      	mov	r3, r1
 800bcc0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bcc4:	f7f4 fb18 	bl	80002f8 <__aeabi_dsub>
 800bcc8:	3530      	adds	r5, #48	@ 0x30
 800bcca:	4602      	mov	r2, r0
 800bccc:	460b      	mov	r3, r1
 800bcce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bcd2:	f806 5b01 	strb.w	r5, [r6], #1
 800bcd6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bcda:	f7f4 ff37 	bl	8000b4c <__aeabi_dcmplt>
 800bcde:	2800      	cmp	r0, #0
 800bce0:	d171      	bne.n	800bdc6 <_dtoa_r+0x65e>
 800bce2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bce6:	4911      	ldr	r1, [pc, #68]	@ (800bd2c <_dtoa_r+0x5c4>)
 800bce8:	2000      	movs	r0, #0
 800bcea:	f7f4 fb05 	bl	80002f8 <__aeabi_dsub>
 800bcee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bcf2:	f7f4 ff2b 	bl	8000b4c <__aeabi_dcmplt>
 800bcf6:	2800      	cmp	r0, #0
 800bcf8:	f040 8095 	bne.w	800be26 <_dtoa_r+0x6be>
 800bcfc:	42a6      	cmp	r6, r4
 800bcfe:	f43f af50 	beq.w	800bba2 <_dtoa_r+0x43a>
 800bd02:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bd06:	4b0a      	ldr	r3, [pc, #40]	@ (800bd30 <_dtoa_r+0x5c8>)
 800bd08:	2200      	movs	r2, #0
 800bd0a:	f7f4 fcad 	bl	8000668 <__aeabi_dmul>
 800bd0e:	4b08      	ldr	r3, [pc, #32]	@ (800bd30 <_dtoa_r+0x5c8>)
 800bd10:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bd14:	2200      	movs	r2, #0
 800bd16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd1a:	f7f4 fca5 	bl	8000668 <__aeabi_dmul>
 800bd1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bd22:	e7c4      	b.n	800bcae <_dtoa_r+0x546>
 800bd24:	08016338 	.word	0x08016338
 800bd28:	08016310 	.word	0x08016310
 800bd2c:	3ff00000 	.word	0x3ff00000
 800bd30:	40240000 	.word	0x40240000
 800bd34:	401c0000 	.word	0x401c0000
 800bd38:	40140000 	.word	0x40140000
 800bd3c:	3fe00000 	.word	0x3fe00000
 800bd40:	4631      	mov	r1, r6
 800bd42:	4628      	mov	r0, r5
 800bd44:	f7f4 fc90 	bl	8000668 <__aeabi_dmul>
 800bd48:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bd4c:	9415      	str	r4, [sp, #84]	@ 0x54
 800bd4e:	4656      	mov	r6, sl
 800bd50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd54:	f7f4 ff38 	bl	8000bc8 <__aeabi_d2iz>
 800bd58:	4605      	mov	r5, r0
 800bd5a:	f7f4 fc1b 	bl	8000594 <__aeabi_i2d>
 800bd5e:	4602      	mov	r2, r0
 800bd60:	460b      	mov	r3, r1
 800bd62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd66:	f7f4 fac7 	bl	80002f8 <__aeabi_dsub>
 800bd6a:	3530      	adds	r5, #48	@ 0x30
 800bd6c:	f806 5b01 	strb.w	r5, [r6], #1
 800bd70:	4602      	mov	r2, r0
 800bd72:	460b      	mov	r3, r1
 800bd74:	42a6      	cmp	r6, r4
 800bd76:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bd7a:	f04f 0200 	mov.w	r2, #0
 800bd7e:	d124      	bne.n	800bdca <_dtoa_r+0x662>
 800bd80:	4bac      	ldr	r3, [pc, #688]	@ (800c034 <_dtoa_r+0x8cc>)
 800bd82:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bd86:	f7f4 fab9 	bl	80002fc <__adddf3>
 800bd8a:	4602      	mov	r2, r0
 800bd8c:	460b      	mov	r3, r1
 800bd8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd92:	f7f4 fef9 	bl	8000b88 <__aeabi_dcmpgt>
 800bd96:	2800      	cmp	r0, #0
 800bd98:	d145      	bne.n	800be26 <_dtoa_r+0x6be>
 800bd9a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bd9e:	49a5      	ldr	r1, [pc, #660]	@ (800c034 <_dtoa_r+0x8cc>)
 800bda0:	2000      	movs	r0, #0
 800bda2:	f7f4 faa9 	bl	80002f8 <__aeabi_dsub>
 800bda6:	4602      	mov	r2, r0
 800bda8:	460b      	mov	r3, r1
 800bdaa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bdae:	f7f4 fecd 	bl	8000b4c <__aeabi_dcmplt>
 800bdb2:	2800      	cmp	r0, #0
 800bdb4:	f43f aef5 	beq.w	800bba2 <_dtoa_r+0x43a>
 800bdb8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800bdba:	1e73      	subs	r3, r6, #1
 800bdbc:	9315      	str	r3, [sp, #84]	@ 0x54
 800bdbe:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bdc2:	2b30      	cmp	r3, #48	@ 0x30
 800bdc4:	d0f8      	beq.n	800bdb8 <_dtoa_r+0x650>
 800bdc6:	9f04      	ldr	r7, [sp, #16]
 800bdc8:	e73e      	b.n	800bc48 <_dtoa_r+0x4e0>
 800bdca:	4b9b      	ldr	r3, [pc, #620]	@ (800c038 <_dtoa_r+0x8d0>)
 800bdcc:	f7f4 fc4c 	bl	8000668 <__aeabi_dmul>
 800bdd0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bdd4:	e7bc      	b.n	800bd50 <_dtoa_r+0x5e8>
 800bdd6:	d10c      	bne.n	800bdf2 <_dtoa_r+0x68a>
 800bdd8:	4b98      	ldr	r3, [pc, #608]	@ (800c03c <_dtoa_r+0x8d4>)
 800bdda:	2200      	movs	r2, #0
 800bddc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bde0:	f7f4 fc42 	bl	8000668 <__aeabi_dmul>
 800bde4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bde8:	f7f4 fec4 	bl	8000b74 <__aeabi_dcmpge>
 800bdec:	2800      	cmp	r0, #0
 800bdee:	f000 8157 	beq.w	800c0a0 <_dtoa_r+0x938>
 800bdf2:	2400      	movs	r4, #0
 800bdf4:	4625      	mov	r5, r4
 800bdf6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bdf8:	43db      	mvns	r3, r3
 800bdfa:	9304      	str	r3, [sp, #16]
 800bdfc:	4656      	mov	r6, sl
 800bdfe:	2700      	movs	r7, #0
 800be00:	4621      	mov	r1, r4
 800be02:	4658      	mov	r0, fp
 800be04:	f000 ff00 	bl	800cc08 <_Bfree>
 800be08:	2d00      	cmp	r5, #0
 800be0a:	d0dc      	beq.n	800bdc6 <_dtoa_r+0x65e>
 800be0c:	b12f      	cbz	r7, 800be1a <_dtoa_r+0x6b2>
 800be0e:	42af      	cmp	r7, r5
 800be10:	d003      	beq.n	800be1a <_dtoa_r+0x6b2>
 800be12:	4639      	mov	r1, r7
 800be14:	4658      	mov	r0, fp
 800be16:	f000 fef7 	bl	800cc08 <_Bfree>
 800be1a:	4629      	mov	r1, r5
 800be1c:	4658      	mov	r0, fp
 800be1e:	f000 fef3 	bl	800cc08 <_Bfree>
 800be22:	e7d0      	b.n	800bdc6 <_dtoa_r+0x65e>
 800be24:	9704      	str	r7, [sp, #16]
 800be26:	4633      	mov	r3, r6
 800be28:	461e      	mov	r6, r3
 800be2a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800be2e:	2a39      	cmp	r2, #57	@ 0x39
 800be30:	d107      	bne.n	800be42 <_dtoa_r+0x6da>
 800be32:	459a      	cmp	sl, r3
 800be34:	d1f8      	bne.n	800be28 <_dtoa_r+0x6c0>
 800be36:	9a04      	ldr	r2, [sp, #16]
 800be38:	3201      	adds	r2, #1
 800be3a:	9204      	str	r2, [sp, #16]
 800be3c:	2230      	movs	r2, #48	@ 0x30
 800be3e:	f88a 2000 	strb.w	r2, [sl]
 800be42:	781a      	ldrb	r2, [r3, #0]
 800be44:	3201      	adds	r2, #1
 800be46:	701a      	strb	r2, [r3, #0]
 800be48:	e7bd      	b.n	800bdc6 <_dtoa_r+0x65e>
 800be4a:	4b7b      	ldr	r3, [pc, #492]	@ (800c038 <_dtoa_r+0x8d0>)
 800be4c:	2200      	movs	r2, #0
 800be4e:	f7f4 fc0b 	bl	8000668 <__aeabi_dmul>
 800be52:	2200      	movs	r2, #0
 800be54:	2300      	movs	r3, #0
 800be56:	4604      	mov	r4, r0
 800be58:	460d      	mov	r5, r1
 800be5a:	f7f4 fe6d 	bl	8000b38 <__aeabi_dcmpeq>
 800be5e:	2800      	cmp	r0, #0
 800be60:	f43f aebb 	beq.w	800bbda <_dtoa_r+0x472>
 800be64:	e6f0      	b.n	800bc48 <_dtoa_r+0x4e0>
 800be66:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800be68:	2a00      	cmp	r2, #0
 800be6a:	f000 80db 	beq.w	800c024 <_dtoa_r+0x8bc>
 800be6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800be70:	2a01      	cmp	r2, #1
 800be72:	f300 80bf 	bgt.w	800bff4 <_dtoa_r+0x88c>
 800be76:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800be78:	2a00      	cmp	r2, #0
 800be7a:	f000 80b7 	beq.w	800bfec <_dtoa_r+0x884>
 800be7e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800be82:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800be84:	4646      	mov	r6, r8
 800be86:	9a08      	ldr	r2, [sp, #32]
 800be88:	2101      	movs	r1, #1
 800be8a:	441a      	add	r2, r3
 800be8c:	4658      	mov	r0, fp
 800be8e:	4498      	add	r8, r3
 800be90:	9208      	str	r2, [sp, #32]
 800be92:	f000 ffb7 	bl	800ce04 <__i2b>
 800be96:	4605      	mov	r5, r0
 800be98:	b15e      	cbz	r6, 800beb2 <_dtoa_r+0x74a>
 800be9a:	9b08      	ldr	r3, [sp, #32]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	dd08      	ble.n	800beb2 <_dtoa_r+0x74a>
 800bea0:	42b3      	cmp	r3, r6
 800bea2:	9a08      	ldr	r2, [sp, #32]
 800bea4:	bfa8      	it	ge
 800bea6:	4633      	movge	r3, r6
 800bea8:	eba8 0803 	sub.w	r8, r8, r3
 800beac:	1af6      	subs	r6, r6, r3
 800beae:	1ad3      	subs	r3, r2, r3
 800beb0:	9308      	str	r3, [sp, #32]
 800beb2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800beb4:	b1f3      	cbz	r3, 800bef4 <_dtoa_r+0x78c>
 800beb6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800beb8:	2b00      	cmp	r3, #0
 800beba:	f000 80b7 	beq.w	800c02c <_dtoa_r+0x8c4>
 800bebe:	b18c      	cbz	r4, 800bee4 <_dtoa_r+0x77c>
 800bec0:	4629      	mov	r1, r5
 800bec2:	4622      	mov	r2, r4
 800bec4:	4658      	mov	r0, fp
 800bec6:	f001 f85d 	bl	800cf84 <__pow5mult>
 800beca:	464a      	mov	r2, r9
 800becc:	4601      	mov	r1, r0
 800bece:	4605      	mov	r5, r0
 800bed0:	4658      	mov	r0, fp
 800bed2:	f000 ffad 	bl	800ce30 <__multiply>
 800bed6:	4649      	mov	r1, r9
 800bed8:	9004      	str	r0, [sp, #16]
 800beda:	4658      	mov	r0, fp
 800bedc:	f000 fe94 	bl	800cc08 <_Bfree>
 800bee0:	9b04      	ldr	r3, [sp, #16]
 800bee2:	4699      	mov	r9, r3
 800bee4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bee6:	1b1a      	subs	r2, r3, r4
 800bee8:	d004      	beq.n	800bef4 <_dtoa_r+0x78c>
 800beea:	4649      	mov	r1, r9
 800beec:	4658      	mov	r0, fp
 800beee:	f001 f849 	bl	800cf84 <__pow5mult>
 800bef2:	4681      	mov	r9, r0
 800bef4:	2101      	movs	r1, #1
 800bef6:	4658      	mov	r0, fp
 800bef8:	f000 ff84 	bl	800ce04 <__i2b>
 800befc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800befe:	4604      	mov	r4, r0
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	f000 81cf 	beq.w	800c2a4 <_dtoa_r+0xb3c>
 800bf06:	461a      	mov	r2, r3
 800bf08:	4601      	mov	r1, r0
 800bf0a:	4658      	mov	r0, fp
 800bf0c:	f001 f83a 	bl	800cf84 <__pow5mult>
 800bf10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf12:	2b01      	cmp	r3, #1
 800bf14:	4604      	mov	r4, r0
 800bf16:	f300 8095 	bgt.w	800c044 <_dtoa_r+0x8dc>
 800bf1a:	9b02      	ldr	r3, [sp, #8]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	f040 8087 	bne.w	800c030 <_dtoa_r+0x8c8>
 800bf22:	9b03      	ldr	r3, [sp, #12]
 800bf24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	f040 8089 	bne.w	800c040 <_dtoa_r+0x8d8>
 800bf2e:	9b03      	ldr	r3, [sp, #12]
 800bf30:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bf34:	0d1b      	lsrs	r3, r3, #20
 800bf36:	051b      	lsls	r3, r3, #20
 800bf38:	b12b      	cbz	r3, 800bf46 <_dtoa_r+0x7de>
 800bf3a:	9b08      	ldr	r3, [sp, #32]
 800bf3c:	3301      	adds	r3, #1
 800bf3e:	9308      	str	r3, [sp, #32]
 800bf40:	f108 0801 	add.w	r8, r8, #1
 800bf44:	2301      	movs	r3, #1
 800bf46:	930a      	str	r3, [sp, #40]	@ 0x28
 800bf48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	f000 81b0 	beq.w	800c2b0 <_dtoa_r+0xb48>
 800bf50:	6923      	ldr	r3, [r4, #16]
 800bf52:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bf56:	6918      	ldr	r0, [r3, #16]
 800bf58:	f000 ff08 	bl	800cd6c <__hi0bits>
 800bf5c:	f1c0 0020 	rsb	r0, r0, #32
 800bf60:	9b08      	ldr	r3, [sp, #32]
 800bf62:	4418      	add	r0, r3
 800bf64:	f010 001f 	ands.w	r0, r0, #31
 800bf68:	d077      	beq.n	800c05a <_dtoa_r+0x8f2>
 800bf6a:	f1c0 0320 	rsb	r3, r0, #32
 800bf6e:	2b04      	cmp	r3, #4
 800bf70:	dd6b      	ble.n	800c04a <_dtoa_r+0x8e2>
 800bf72:	9b08      	ldr	r3, [sp, #32]
 800bf74:	f1c0 001c 	rsb	r0, r0, #28
 800bf78:	4403      	add	r3, r0
 800bf7a:	4480      	add	r8, r0
 800bf7c:	4406      	add	r6, r0
 800bf7e:	9308      	str	r3, [sp, #32]
 800bf80:	f1b8 0f00 	cmp.w	r8, #0
 800bf84:	dd05      	ble.n	800bf92 <_dtoa_r+0x82a>
 800bf86:	4649      	mov	r1, r9
 800bf88:	4642      	mov	r2, r8
 800bf8a:	4658      	mov	r0, fp
 800bf8c:	f001 f854 	bl	800d038 <__lshift>
 800bf90:	4681      	mov	r9, r0
 800bf92:	9b08      	ldr	r3, [sp, #32]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	dd05      	ble.n	800bfa4 <_dtoa_r+0x83c>
 800bf98:	4621      	mov	r1, r4
 800bf9a:	461a      	mov	r2, r3
 800bf9c:	4658      	mov	r0, fp
 800bf9e:	f001 f84b 	bl	800d038 <__lshift>
 800bfa2:	4604      	mov	r4, r0
 800bfa4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d059      	beq.n	800c05e <_dtoa_r+0x8f6>
 800bfaa:	4621      	mov	r1, r4
 800bfac:	4648      	mov	r0, r9
 800bfae:	f001 f8af 	bl	800d110 <__mcmp>
 800bfb2:	2800      	cmp	r0, #0
 800bfb4:	da53      	bge.n	800c05e <_dtoa_r+0x8f6>
 800bfb6:	1e7b      	subs	r3, r7, #1
 800bfb8:	9304      	str	r3, [sp, #16]
 800bfba:	4649      	mov	r1, r9
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	220a      	movs	r2, #10
 800bfc0:	4658      	mov	r0, fp
 800bfc2:	f000 fe43 	bl	800cc4c <__multadd>
 800bfc6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bfc8:	4681      	mov	r9, r0
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	f000 8172 	beq.w	800c2b4 <_dtoa_r+0xb4c>
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	4629      	mov	r1, r5
 800bfd4:	220a      	movs	r2, #10
 800bfd6:	4658      	mov	r0, fp
 800bfd8:	f000 fe38 	bl	800cc4c <__multadd>
 800bfdc:	9b00      	ldr	r3, [sp, #0]
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	4605      	mov	r5, r0
 800bfe2:	dc67      	bgt.n	800c0b4 <_dtoa_r+0x94c>
 800bfe4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bfe6:	2b02      	cmp	r3, #2
 800bfe8:	dc41      	bgt.n	800c06e <_dtoa_r+0x906>
 800bfea:	e063      	b.n	800c0b4 <_dtoa_r+0x94c>
 800bfec:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800bfee:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800bff2:	e746      	b.n	800be82 <_dtoa_r+0x71a>
 800bff4:	9b07      	ldr	r3, [sp, #28]
 800bff6:	1e5c      	subs	r4, r3, #1
 800bff8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bffa:	42a3      	cmp	r3, r4
 800bffc:	bfbf      	itttt	lt
 800bffe:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c000:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800c002:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c004:	1ae3      	sublt	r3, r4, r3
 800c006:	bfb4      	ite	lt
 800c008:	18d2      	addlt	r2, r2, r3
 800c00a:	1b1c      	subge	r4, r3, r4
 800c00c:	9b07      	ldr	r3, [sp, #28]
 800c00e:	bfbc      	itt	lt
 800c010:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800c012:	2400      	movlt	r4, #0
 800c014:	2b00      	cmp	r3, #0
 800c016:	bfb5      	itete	lt
 800c018:	eba8 0603 	sublt.w	r6, r8, r3
 800c01c:	9b07      	ldrge	r3, [sp, #28]
 800c01e:	2300      	movlt	r3, #0
 800c020:	4646      	movge	r6, r8
 800c022:	e730      	b.n	800be86 <_dtoa_r+0x71e>
 800c024:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c026:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c028:	4646      	mov	r6, r8
 800c02a:	e735      	b.n	800be98 <_dtoa_r+0x730>
 800c02c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c02e:	e75c      	b.n	800beea <_dtoa_r+0x782>
 800c030:	2300      	movs	r3, #0
 800c032:	e788      	b.n	800bf46 <_dtoa_r+0x7de>
 800c034:	3fe00000 	.word	0x3fe00000
 800c038:	40240000 	.word	0x40240000
 800c03c:	40140000 	.word	0x40140000
 800c040:	9b02      	ldr	r3, [sp, #8]
 800c042:	e780      	b.n	800bf46 <_dtoa_r+0x7de>
 800c044:	2300      	movs	r3, #0
 800c046:	930a      	str	r3, [sp, #40]	@ 0x28
 800c048:	e782      	b.n	800bf50 <_dtoa_r+0x7e8>
 800c04a:	d099      	beq.n	800bf80 <_dtoa_r+0x818>
 800c04c:	9a08      	ldr	r2, [sp, #32]
 800c04e:	331c      	adds	r3, #28
 800c050:	441a      	add	r2, r3
 800c052:	4498      	add	r8, r3
 800c054:	441e      	add	r6, r3
 800c056:	9208      	str	r2, [sp, #32]
 800c058:	e792      	b.n	800bf80 <_dtoa_r+0x818>
 800c05a:	4603      	mov	r3, r0
 800c05c:	e7f6      	b.n	800c04c <_dtoa_r+0x8e4>
 800c05e:	9b07      	ldr	r3, [sp, #28]
 800c060:	9704      	str	r7, [sp, #16]
 800c062:	2b00      	cmp	r3, #0
 800c064:	dc20      	bgt.n	800c0a8 <_dtoa_r+0x940>
 800c066:	9300      	str	r3, [sp, #0]
 800c068:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c06a:	2b02      	cmp	r3, #2
 800c06c:	dd1e      	ble.n	800c0ac <_dtoa_r+0x944>
 800c06e:	9b00      	ldr	r3, [sp, #0]
 800c070:	2b00      	cmp	r3, #0
 800c072:	f47f aec0 	bne.w	800bdf6 <_dtoa_r+0x68e>
 800c076:	4621      	mov	r1, r4
 800c078:	2205      	movs	r2, #5
 800c07a:	4658      	mov	r0, fp
 800c07c:	f000 fde6 	bl	800cc4c <__multadd>
 800c080:	4601      	mov	r1, r0
 800c082:	4604      	mov	r4, r0
 800c084:	4648      	mov	r0, r9
 800c086:	f001 f843 	bl	800d110 <__mcmp>
 800c08a:	2800      	cmp	r0, #0
 800c08c:	f77f aeb3 	ble.w	800bdf6 <_dtoa_r+0x68e>
 800c090:	4656      	mov	r6, sl
 800c092:	2331      	movs	r3, #49	@ 0x31
 800c094:	f806 3b01 	strb.w	r3, [r6], #1
 800c098:	9b04      	ldr	r3, [sp, #16]
 800c09a:	3301      	adds	r3, #1
 800c09c:	9304      	str	r3, [sp, #16]
 800c09e:	e6ae      	b.n	800bdfe <_dtoa_r+0x696>
 800c0a0:	9c07      	ldr	r4, [sp, #28]
 800c0a2:	9704      	str	r7, [sp, #16]
 800c0a4:	4625      	mov	r5, r4
 800c0a6:	e7f3      	b.n	800c090 <_dtoa_r+0x928>
 800c0a8:	9b07      	ldr	r3, [sp, #28]
 800c0aa:	9300      	str	r3, [sp, #0]
 800c0ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	f000 8104 	beq.w	800c2bc <_dtoa_r+0xb54>
 800c0b4:	2e00      	cmp	r6, #0
 800c0b6:	dd05      	ble.n	800c0c4 <_dtoa_r+0x95c>
 800c0b8:	4629      	mov	r1, r5
 800c0ba:	4632      	mov	r2, r6
 800c0bc:	4658      	mov	r0, fp
 800c0be:	f000 ffbb 	bl	800d038 <__lshift>
 800c0c2:	4605      	mov	r5, r0
 800c0c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d05a      	beq.n	800c180 <_dtoa_r+0xa18>
 800c0ca:	6869      	ldr	r1, [r5, #4]
 800c0cc:	4658      	mov	r0, fp
 800c0ce:	f000 fd5b 	bl	800cb88 <_Balloc>
 800c0d2:	4606      	mov	r6, r0
 800c0d4:	b928      	cbnz	r0, 800c0e2 <_dtoa_r+0x97a>
 800c0d6:	4b84      	ldr	r3, [pc, #528]	@ (800c2e8 <_dtoa_r+0xb80>)
 800c0d8:	4602      	mov	r2, r0
 800c0da:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c0de:	f7ff bb5a 	b.w	800b796 <_dtoa_r+0x2e>
 800c0e2:	692a      	ldr	r2, [r5, #16]
 800c0e4:	3202      	adds	r2, #2
 800c0e6:	0092      	lsls	r2, r2, #2
 800c0e8:	f105 010c 	add.w	r1, r5, #12
 800c0ec:	300c      	adds	r0, #12
 800c0ee:	f7ff fa92 	bl	800b616 <memcpy>
 800c0f2:	2201      	movs	r2, #1
 800c0f4:	4631      	mov	r1, r6
 800c0f6:	4658      	mov	r0, fp
 800c0f8:	f000 ff9e 	bl	800d038 <__lshift>
 800c0fc:	f10a 0301 	add.w	r3, sl, #1
 800c100:	9307      	str	r3, [sp, #28]
 800c102:	9b00      	ldr	r3, [sp, #0]
 800c104:	4453      	add	r3, sl
 800c106:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c108:	9b02      	ldr	r3, [sp, #8]
 800c10a:	f003 0301 	and.w	r3, r3, #1
 800c10e:	462f      	mov	r7, r5
 800c110:	930a      	str	r3, [sp, #40]	@ 0x28
 800c112:	4605      	mov	r5, r0
 800c114:	9b07      	ldr	r3, [sp, #28]
 800c116:	4621      	mov	r1, r4
 800c118:	3b01      	subs	r3, #1
 800c11a:	4648      	mov	r0, r9
 800c11c:	9300      	str	r3, [sp, #0]
 800c11e:	f7ff fa99 	bl	800b654 <quorem>
 800c122:	4639      	mov	r1, r7
 800c124:	9002      	str	r0, [sp, #8]
 800c126:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c12a:	4648      	mov	r0, r9
 800c12c:	f000 fff0 	bl	800d110 <__mcmp>
 800c130:	462a      	mov	r2, r5
 800c132:	9008      	str	r0, [sp, #32]
 800c134:	4621      	mov	r1, r4
 800c136:	4658      	mov	r0, fp
 800c138:	f001 f806 	bl	800d148 <__mdiff>
 800c13c:	68c2      	ldr	r2, [r0, #12]
 800c13e:	4606      	mov	r6, r0
 800c140:	bb02      	cbnz	r2, 800c184 <_dtoa_r+0xa1c>
 800c142:	4601      	mov	r1, r0
 800c144:	4648      	mov	r0, r9
 800c146:	f000 ffe3 	bl	800d110 <__mcmp>
 800c14a:	4602      	mov	r2, r0
 800c14c:	4631      	mov	r1, r6
 800c14e:	4658      	mov	r0, fp
 800c150:	920e      	str	r2, [sp, #56]	@ 0x38
 800c152:	f000 fd59 	bl	800cc08 <_Bfree>
 800c156:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c158:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c15a:	9e07      	ldr	r6, [sp, #28]
 800c15c:	ea43 0102 	orr.w	r1, r3, r2
 800c160:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c162:	4319      	orrs	r1, r3
 800c164:	d110      	bne.n	800c188 <_dtoa_r+0xa20>
 800c166:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c16a:	d029      	beq.n	800c1c0 <_dtoa_r+0xa58>
 800c16c:	9b08      	ldr	r3, [sp, #32]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	dd02      	ble.n	800c178 <_dtoa_r+0xa10>
 800c172:	9b02      	ldr	r3, [sp, #8]
 800c174:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c178:	9b00      	ldr	r3, [sp, #0]
 800c17a:	f883 8000 	strb.w	r8, [r3]
 800c17e:	e63f      	b.n	800be00 <_dtoa_r+0x698>
 800c180:	4628      	mov	r0, r5
 800c182:	e7bb      	b.n	800c0fc <_dtoa_r+0x994>
 800c184:	2201      	movs	r2, #1
 800c186:	e7e1      	b.n	800c14c <_dtoa_r+0x9e4>
 800c188:	9b08      	ldr	r3, [sp, #32]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	db04      	blt.n	800c198 <_dtoa_r+0xa30>
 800c18e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c190:	430b      	orrs	r3, r1
 800c192:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c194:	430b      	orrs	r3, r1
 800c196:	d120      	bne.n	800c1da <_dtoa_r+0xa72>
 800c198:	2a00      	cmp	r2, #0
 800c19a:	dded      	ble.n	800c178 <_dtoa_r+0xa10>
 800c19c:	4649      	mov	r1, r9
 800c19e:	2201      	movs	r2, #1
 800c1a0:	4658      	mov	r0, fp
 800c1a2:	f000 ff49 	bl	800d038 <__lshift>
 800c1a6:	4621      	mov	r1, r4
 800c1a8:	4681      	mov	r9, r0
 800c1aa:	f000 ffb1 	bl	800d110 <__mcmp>
 800c1ae:	2800      	cmp	r0, #0
 800c1b0:	dc03      	bgt.n	800c1ba <_dtoa_r+0xa52>
 800c1b2:	d1e1      	bne.n	800c178 <_dtoa_r+0xa10>
 800c1b4:	f018 0f01 	tst.w	r8, #1
 800c1b8:	d0de      	beq.n	800c178 <_dtoa_r+0xa10>
 800c1ba:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c1be:	d1d8      	bne.n	800c172 <_dtoa_r+0xa0a>
 800c1c0:	9a00      	ldr	r2, [sp, #0]
 800c1c2:	2339      	movs	r3, #57	@ 0x39
 800c1c4:	7013      	strb	r3, [r2, #0]
 800c1c6:	4633      	mov	r3, r6
 800c1c8:	461e      	mov	r6, r3
 800c1ca:	3b01      	subs	r3, #1
 800c1cc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c1d0:	2a39      	cmp	r2, #57	@ 0x39
 800c1d2:	d052      	beq.n	800c27a <_dtoa_r+0xb12>
 800c1d4:	3201      	adds	r2, #1
 800c1d6:	701a      	strb	r2, [r3, #0]
 800c1d8:	e612      	b.n	800be00 <_dtoa_r+0x698>
 800c1da:	2a00      	cmp	r2, #0
 800c1dc:	dd07      	ble.n	800c1ee <_dtoa_r+0xa86>
 800c1de:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c1e2:	d0ed      	beq.n	800c1c0 <_dtoa_r+0xa58>
 800c1e4:	9a00      	ldr	r2, [sp, #0]
 800c1e6:	f108 0301 	add.w	r3, r8, #1
 800c1ea:	7013      	strb	r3, [r2, #0]
 800c1ec:	e608      	b.n	800be00 <_dtoa_r+0x698>
 800c1ee:	9b07      	ldr	r3, [sp, #28]
 800c1f0:	9a07      	ldr	r2, [sp, #28]
 800c1f2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c1f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c1f8:	4293      	cmp	r3, r2
 800c1fa:	d028      	beq.n	800c24e <_dtoa_r+0xae6>
 800c1fc:	4649      	mov	r1, r9
 800c1fe:	2300      	movs	r3, #0
 800c200:	220a      	movs	r2, #10
 800c202:	4658      	mov	r0, fp
 800c204:	f000 fd22 	bl	800cc4c <__multadd>
 800c208:	42af      	cmp	r7, r5
 800c20a:	4681      	mov	r9, r0
 800c20c:	f04f 0300 	mov.w	r3, #0
 800c210:	f04f 020a 	mov.w	r2, #10
 800c214:	4639      	mov	r1, r7
 800c216:	4658      	mov	r0, fp
 800c218:	d107      	bne.n	800c22a <_dtoa_r+0xac2>
 800c21a:	f000 fd17 	bl	800cc4c <__multadd>
 800c21e:	4607      	mov	r7, r0
 800c220:	4605      	mov	r5, r0
 800c222:	9b07      	ldr	r3, [sp, #28]
 800c224:	3301      	adds	r3, #1
 800c226:	9307      	str	r3, [sp, #28]
 800c228:	e774      	b.n	800c114 <_dtoa_r+0x9ac>
 800c22a:	f000 fd0f 	bl	800cc4c <__multadd>
 800c22e:	4629      	mov	r1, r5
 800c230:	4607      	mov	r7, r0
 800c232:	2300      	movs	r3, #0
 800c234:	220a      	movs	r2, #10
 800c236:	4658      	mov	r0, fp
 800c238:	f000 fd08 	bl	800cc4c <__multadd>
 800c23c:	4605      	mov	r5, r0
 800c23e:	e7f0      	b.n	800c222 <_dtoa_r+0xaba>
 800c240:	9b00      	ldr	r3, [sp, #0]
 800c242:	2b00      	cmp	r3, #0
 800c244:	bfcc      	ite	gt
 800c246:	461e      	movgt	r6, r3
 800c248:	2601      	movle	r6, #1
 800c24a:	4456      	add	r6, sl
 800c24c:	2700      	movs	r7, #0
 800c24e:	4649      	mov	r1, r9
 800c250:	2201      	movs	r2, #1
 800c252:	4658      	mov	r0, fp
 800c254:	f000 fef0 	bl	800d038 <__lshift>
 800c258:	4621      	mov	r1, r4
 800c25a:	4681      	mov	r9, r0
 800c25c:	f000 ff58 	bl	800d110 <__mcmp>
 800c260:	2800      	cmp	r0, #0
 800c262:	dcb0      	bgt.n	800c1c6 <_dtoa_r+0xa5e>
 800c264:	d102      	bne.n	800c26c <_dtoa_r+0xb04>
 800c266:	f018 0f01 	tst.w	r8, #1
 800c26a:	d1ac      	bne.n	800c1c6 <_dtoa_r+0xa5e>
 800c26c:	4633      	mov	r3, r6
 800c26e:	461e      	mov	r6, r3
 800c270:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c274:	2a30      	cmp	r2, #48	@ 0x30
 800c276:	d0fa      	beq.n	800c26e <_dtoa_r+0xb06>
 800c278:	e5c2      	b.n	800be00 <_dtoa_r+0x698>
 800c27a:	459a      	cmp	sl, r3
 800c27c:	d1a4      	bne.n	800c1c8 <_dtoa_r+0xa60>
 800c27e:	9b04      	ldr	r3, [sp, #16]
 800c280:	3301      	adds	r3, #1
 800c282:	9304      	str	r3, [sp, #16]
 800c284:	2331      	movs	r3, #49	@ 0x31
 800c286:	f88a 3000 	strb.w	r3, [sl]
 800c28a:	e5b9      	b.n	800be00 <_dtoa_r+0x698>
 800c28c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c28e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c2ec <_dtoa_r+0xb84>
 800c292:	b11b      	cbz	r3, 800c29c <_dtoa_r+0xb34>
 800c294:	f10a 0308 	add.w	r3, sl, #8
 800c298:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c29a:	6013      	str	r3, [r2, #0]
 800c29c:	4650      	mov	r0, sl
 800c29e:	b019      	add	sp, #100	@ 0x64
 800c2a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c2a6:	2b01      	cmp	r3, #1
 800c2a8:	f77f ae37 	ble.w	800bf1a <_dtoa_r+0x7b2>
 800c2ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c2ae:	930a      	str	r3, [sp, #40]	@ 0x28
 800c2b0:	2001      	movs	r0, #1
 800c2b2:	e655      	b.n	800bf60 <_dtoa_r+0x7f8>
 800c2b4:	9b00      	ldr	r3, [sp, #0]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	f77f aed6 	ble.w	800c068 <_dtoa_r+0x900>
 800c2bc:	4656      	mov	r6, sl
 800c2be:	4621      	mov	r1, r4
 800c2c0:	4648      	mov	r0, r9
 800c2c2:	f7ff f9c7 	bl	800b654 <quorem>
 800c2c6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c2ca:	f806 8b01 	strb.w	r8, [r6], #1
 800c2ce:	9b00      	ldr	r3, [sp, #0]
 800c2d0:	eba6 020a 	sub.w	r2, r6, sl
 800c2d4:	4293      	cmp	r3, r2
 800c2d6:	ddb3      	ble.n	800c240 <_dtoa_r+0xad8>
 800c2d8:	4649      	mov	r1, r9
 800c2da:	2300      	movs	r3, #0
 800c2dc:	220a      	movs	r2, #10
 800c2de:	4658      	mov	r0, fp
 800c2e0:	f000 fcb4 	bl	800cc4c <__multadd>
 800c2e4:	4681      	mov	r9, r0
 800c2e6:	e7ea      	b.n	800c2be <_dtoa_r+0xb56>
 800c2e8:	08016239 	.word	0x08016239
 800c2ec:	080161bd 	.word	0x080161bd

0800c2f0 <_free_r>:
 800c2f0:	b538      	push	{r3, r4, r5, lr}
 800c2f2:	4605      	mov	r5, r0
 800c2f4:	2900      	cmp	r1, #0
 800c2f6:	d041      	beq.n	800c37c <_free_r+0x8c>
 800c2f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c2fc:	1f0c      	subs	r4, r1, #4
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	bfb8      	it	lt
 800c302:	18e4      	addlt	r4, r4, r3
 800c304:	f000 fc34 	bl	800cb70 <__malloc_lock>
 800c308:	4a1d      	ldr	r2, [pc, #116]	@ (800c380 <_free_r+0x90>)
 800c30a:	6813      	ldr	r3, [r2, #0]
 800c30c:	b933      	cbnz	r3, 800c31c <_free_r+0x2c>
 800c30e:	6063      	str	r3, [r4, #4]
 800c310:	6014      	str	r4, [r2, #0]
 800c312:	4628      	mov	r0, r5
 800c314:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c318:	f000 bc30 	b.w	800cb7c <__malloc_unlock>
 800c31c:	42a3      	cmp	r3, r4
 800c31e:	d908      	bls.n	800c332 <_free_r+0x42>
 800c320:	6820      	ldr	r0, [r4, #0]
 800c322:	1821      	adds	r1, r4, r0
 800c324:	428b      	cmp	r3, r1
 800c326:	bf01      	itttt	eq
 800c328:	6819      	ldreq	r1, [r3, #0]
 800c32a:	685b      	ldreq	r3, [r3, #4]
 800c32c:	1809      	addeq	r1, r1, r0
 800c32e:	6021      	streq	r1, [r4, #0]
 800c330:	e7ed      	b.n	800c30e <_free_r+0x1e>
 800c332:	461a      	mov	r2, r3
 800c334:	685b      	ldr	r3, [r3, #4]
 800c336:	b10b      	cbz	r3, 800c33c <_free_r+0x4c>
 800c338:	42a3      	cmp	r3, r4
 800c33a:	d9fa      	bls.n	800c332 <_free_r+0x42>
 800c33c:	6811      	ldr	r1, [r2, #0]
 800c33e:	1850      	adds	r0, r2, r1
 800c340:	42a0      	cmp	r0, r4
 800c342:	d10b      	bne.n	800c35c <_free_r+0x6c>
 800c344:	6820      	ldr	r0, [r4, #0]
 800c346:	4401      	add	r1, r0
 800c348:	1850      	adds	r0, r2, r1
 800c34a:	4283      	cmp	r3, r0
 800c34c:	6011      	str	r1, [r2, #0]
 800c34e:	d1e0      	bne.n	800c312 <_free_r+0x22>
 800c350:	6818      	ldr	r0, [r3, #0]
 800c352:	685b      	ldr	r3, [r3, #4]
 800c354:	6053      	str	r3, [r2, #4]
 800c356:	4408      	add	r0, r1
 800c358:	6010      	str	r0, [r2, #0]
 800c35a:	e7da      	b.n	800c312 <_free_r+0x22>
 800c35c:	d902      	bls.n	800c364 <_free_r+0x74>
 800c35e:	230c      	movs	r3, #12
 800c360:	602b      	str	r3, [r5, #0]
 800c362:	e7d6      	b.n	800c312 <_free_r+0x22>
 800c364:	6820      	ldr	r0, [r4, #0]
 800c366:	1821      	adds	r1, r4, r0
 800c368:	428b      	cmp	r3, r1
 800c36a:	bf04      	itt	eq
 800c36c:	6819      	ldreq	r1, [r3, #0]
 800c36e:	685b      	ldreq	r3, [r3, #4]
 800c370:	6063      	str	r3, [r4, #4]
 800c372:	bf04      	itt	eq
 800c374:	1809      	addeq	r1, r1, r0
 800c376:	6021      	streq	r1, [r4, #0]
 800c378:	6054      	str	r4, [r2, #4]
 800c37a:	e7ca      	b.n	800c312 <_free_r+0x22>
 800c37c:	bd38      	pop	{r3, r4, r5, pc}
 800c37e:	bf00      	nop
 800c380:	20006c0c 	.word	0x20006c0c

0800c384 <rshift>:
 800c384:	6903      	ldr	r3, [r0, #16]
 800c386:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c38a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c38e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c392:	f100 0414 	add.w	r4, r0, #20
 800c396:	dd45      	ble.n	800c424 <rshift+0xa0>
 800c398:	f011 011f 	ands.w	r1, r1, #31
 800c39c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c3a0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c3a4:	d10c      	bne.n	800c3c0 <rshift+0x3c>
 800c3a6:	f100 0710 	add.w	r7, r0, #16
 800c3aa:	4629      	mov	r1, r5
 800c3ac:	42b1      	cmp	r1, r6
 800c3ae:	d334      	bcc.n	800c41a <rshift+0x96>
 800c3b0:	1a9b      	subs	r3, r3, r2
 800c3b2:	009b      	lsls	r3, r3, #2
 800c3b4:	1eea      	subs	r2, r5, #3
 800c3b6:	4296      	cmp	r6, r2
 800c3b8:	bf38      	it	cc
 800c3ba:	2300      	movcc	r3, #0
 800c3bc:	4423      	add	r3, r4
 800c3be:	e015      	b.n	800c3ec <rshift+0x68>
 800c3c0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c3c4:	f1c1 0820 	rsb	r8, r1, #32
 800c3c8:	40cf      	lsrs	r7, r1
 800c3ca:	f105 0e04 	add.w	lr, r5, #4
 800c3ce:	46a1      	mov	r9, r4
 800c3d0:	4576      	cmp	r6, lr
 800c3d2:	46f4      	mov	ip, lr
 800c3d4:	d815      	bhi.n	800c402 <rshift+0x7e>
 800c3d6:	1a9a      	subs	r2, r3, r2
 800c3d8:	0092      	lsls	r2, r2, #2
 800c3da:	3a04      	subs	r2, #4
 800c3dc:	3501      	adds	r5, #1
 800c3de:	42ae      	cmp	r6, r5
 800c3e0:	bf38      	it	cc
 800c3e2:	2200      	movcc	r2, #0
 800c3e4:	18a3      	adds	r3, r4, r2
 800c3e6:	50a7      	str	r7, [r4, r2]
 800c3e8:	b107      	cbz	r7, 800c3ec <rshift+0x68>
 800c3ea:	3304      	adds	r3, #4
 800c3ec:	1b1a      	subs	r2, r3, r4
 800c3ee:	42a3      	cmp	r3, r4
 800c3f0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c3f4:	bf08      	it	eq
 800c3f6:	2300      	moveq	r3, #0
 800c3f8:	6102      	str	r2, [r0, #16]
 800c3fa:	bf08      	it	eq
 800c3fc:	6143      	streq	r3, [r0, #20]
 800c3fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c402:	f8dc c000 	ldr.w	ip, [ip]
 800c406:	fa0c fc08 	lsl.w	ip, ip, r8
 800c40a:	ea4c 0707 	orr.w	r7, ip, r7
 800c40e:	f849 7b04 	str.w	r7, [r9], #4
 800c412:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c416:	40cf      	lsrs	r7, r1
 800c418:	e7da      	b.n	800c3d0 <rshift+0x4c>
 800c41a:	f851 cb04 	ldr.w	ip, [r1], #4
 800c41e:	f847 cf04 	str.w	ip, [r7, #4]!
 800c422:	e7c3      	b.n	800c3ac <rshift+0x28>
 800c424:	4623      	mov	r3, r4
 800c426:	e7e1      	b.n	800c3ec <rshift+0x68>

0800c428 <__hexdig_fun>:
 800c428:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c42c:	2b09      	cmp	r3, #9
 800c42e:	d802      	bhi.n	800c436 <__hexdig_fun+0xe>
 800c430:	3820      	subs	r0, #32
 800c432:	b2c0      	uxtb	r0, r0
 800c434:	4770      	bx	lr
 800c436:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c43a:	2b05      	cmp	r3, #5
 800c43c:	d801      	bhi.n	800c442 <__hexdig_fun+0x1a>
 800c43e:	3847      	subs	r0, #71	@ 0x47
 800c440:	e7f7      	b.n	800c432 <__hexdig_fun+0xa>
 800c442:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c446:	2b05      	cmp	r3, #5
 800c448:	d801      	bhi.n	800c44e <__hexdig_fun+0x26>
 800c44a:	3827      	subs	r0, #39	@ 0x27
 800c44c:	e7f1      	b.n	800c432 <__hexdig_fun+0xa>
 800c44e:	2000      	movs	r0, #0
 800c450:	4770      	bx	lr
	...

0800c454 <__gethex>:
 800c454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c458:	b085      	sub	sp, #20
 800c45a:	468a      	mov	sl, r1
 800c45c:	9302      	str	r3, [sp, #8]
 800c45e:	680b      	ldr	r3, [r1, #0]
 800c460:	9001      	str	r0, [sp, #4]
 800c462:	4690      	mov	r8, r2
 800c464:	1c9c      	adds	r4, r3, #2
 800c466:	46a1      	mov	r9, r4
 800c468:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c46c:	2830      	cmp	r0, #48	@ 0x30
 800c46e:	d0fa      	beq.n	800c466 <__gethex+0x12>
 800c470:	eba9 0303 	sub.w	r3, r9, r3
 800c474:	f1a3 0b02 	sub.w	fp, r3, #2
 800c478:	f7ff ffd6 	bl	800c428 <__hexdig_fun>
 800c47c:	4605      	mov	r5, r0
 800c47e:	2800      	cmp	r0, #0
 800c480:	d168      	bne.n	800c554 <__gethex+0x100>
 800c482:	49a0      	ldr	r1, [pc, #640]	@ (800c704 <__gethex+0x2b0>)
 800c484:	2201      	movs	r2, #1
 800c486:	4648      	mov	r0, r9
 800c488:	f7ff f808 	bl	800b49c <strncmp>
 800c48c:	4607      	mov	r7, r0
 800c48e:	2800      	cmp	r0, #0
 800c490:	d167      	bne.n	800c562 <__gethex+0x10e>
 800c492:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c496:	4626      	mov	r6, r4
 800c498:	f7ff ffc6 	bl	800c428 <__hexdig_fun>
 800c49c:	2800      	cmp	r0, #0
 800c49e:	d062      	beq.n	800c566 <__gethex+0x112>
 800c4a0:	4623      	mov	r3, r4
 800c4a2:	7818      	ldrb	r0, [r3, #0]
 800c4a4:	2830      	cmp	r0, #48	@ 0x30
 800c4a6:	4699      	mov	r9, r3
 800c4a8:	f103 0301 	add.w	r3, r3, #1
 800c4ac:	d0f9      	beq.n	800c4a2 <__gethex+0x4e>
 800c4ae:	f7ff ffbb 	bl	800c428 <__hexdig_fun>
 800c4b2:	fab0 f580 	clz	r5, r0
 800c4b6:	096d      	lsrs	r5, r5, #5
 800c4b8:	f04f 0b01 	mov.w	fp, #1
 800c4bc:	464a      	mov	r2, r9
 800c4be:	4616      	mov	r6, r2
 800c4c0:	3201      	adds	r2, #1
 800c4c2:	7830      	ldrb	r0, [r6, #0]
 800c4c4:	f7ff ffb0 	bl	800c428 <__hexdig_fun>
 800c4c8:	2800      	cmp	r0, #0
 800c4ca:	d1f8      	bne.n	800c4be <__gethex+0x6a>
 800c4cc:	498d      	ldr	r1, [pc, #564]	@ (800c704 <__gethex+0x2b0>)
 800c4ce:	2201      	movs	r2, #1
 800c4d0:	4630      	mov	r0, r6
 800c4d2:	f7fe ffe3 	bl	800b49c <strncmp>
 800c4d6:	2800      	cmp	r0, #0
 800c4d8:	d13f      	bne.n	800c55a <__gethex+0x106>
 800c4da:	b944      	cbnz	r4, 800c4ee <__gethex+0x9a>
 800c4dc:	1c74      	adds	r4, r6, #1
 800c4de:	4622      	mov	r2, r4
 800c4e0:	4616      	mov	r6, r2
 800c4e2:	3201      	adds	r2, #1
 800c4e4:	7830      	ldrb	r0, [r6, #0]
 800c4e6:	f7ff ff9f 	bl	800c428 <__hexdig_fun>
 800c4ea:	2800      	cmp	r0, #0
 800c4ec:	d1f8      	bne.n	800c4e0 <__gethex+0x8c>
 800c4ee:	1ba4      	subs	r4, r4, r6
 800c4f0:	00a7      	lsls	r7, r4, #2
 800c4f2:	7833      	ldrb	r3, [r6, #0]
 800c4f4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c4f8:	2b50      	cmp	r3, #80	@ 0x50
 800c4fa:	d13e      	bne.n	800c57a <__gethex+0x126>
 800c4fc:	7873      	ldrb	r3, [r6, #1]
 800c4fe:	2b2b      	cmp	r3, #43	@ 0x2b
 800c500:	d033      	beq.n	800c56a <__gethex+0x116>
 800c502:	2b2d      	cmp	r3, #45	@ 0x2d
 800c504:	d034      	beq.n	800c570 <__gethex+0x11c>
 800c506:	1c71      	adds	r1, r6, #1
 800c508:	2400      	movs	r4, #0
 800c50a:	7808      	ldrb	r0, [r1, #0]
 800c50c:	f7ff ff8c 	bl	800c428 <__hexdig_fun>
 800c510:	1e43      	subs	r3, r0, #1
 800c512:	b2db      	uxtb	r3, r3
 800c514:	2b18      	cmp	r3, #24
 800c516:	d830      	bhi.n	800c57a <__gethex+0x126>
 800c518:	f1a0 0210 	sub.w	r2, r0, #16
 800c51c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c520:	f7ff ff82 	bl	800c428 <__hexdig_fun>
 800c524:	f100 3cff 	add.w	ip, r0, #4294967295
 800c528:	fa5f fc8c 	uxtb.w	ip, ip
 800c52c:	f1bc 0f18 	cmp.w	ip, #24
 800c530:	f04f 030a 	mov.w	r3, #10
 800c534:	d91e      	bls.n	800c574 <__gethex+0x120>
 800c536:	b104      	cbz	r4, 800c53a <__gethex+0xe6>
 800c538:	4252      	negs	r2, r2
 800c53a:	4417      	add	r7, r2
 800c53c:	f8ca 1000 	str.w	r1, [sl]
 800c540:	b1ed      	cbz	r5, 800c57e <__gethex+0x12a>
 800c542:	f1bb 0f00 	cmp.w	fp, #0
 800c546:	bf0c      	ite	eq
 800c548:	2506      	moveq	r5, #6
 800c54a:	2500      	movne	r5, #0
 800c54c:	4628      	mov	r0, r5
 800c54e:	b005      	add	sp, #20
 800c550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c554:	2500      	movs	r5, #0
 800c556:	462c      	mov	r4, r5
 800c558:	e7b0      	b.n	800c4bc <__gethex+0x68>
 800c55a:	2c00      	cmp	r4, #0
 800c55c:	d1c7      	bne.n	800c4ee <__gethex+0x9a>
 800c55e:	4627      	mov	r7, r4
 800c560:	e7c7      	b.n	800c4f2 <__gethex+0x9e>
 800c562:	464e      	mov	r6, r9
 800c564:	462f      	mov	r7, r5
 800c566:	2501      	movs	r5, #1
 800c568:	e7c3      	b.n	800c4f2 <__gethex+0x9e>
 800c56a:	2400      	movs	r4, #0
 800c56c:	1cb1      	adds	r1, r6, #2
 800c56e:	e7cc      	b.n	800c50a <__gethex+0xb6>
 800c570:	2401      	movs	r4, #1
 800c572:	e7fb      	b.n	800c56c <__gethex+0x118>
 800c574:	fb03 0002 	mla	r0, r3, r2, r0
 800c578:	e7ce      	b.n	800c518 <__gethex+0xc4>
 800c57a:	4631      	mov	r1, r6
 800c57c:	e7de      	b.n	800c53c <__gethex+0xe8>
 800c57e:	eba6 0309 	sub.w	r3, r6, r9
 800c582:	3b01      	subs	r3, #1
 800c584:	4629      	mov	r1, r5
 800c586:	2b07      	cmp	r3, #7
 800c588:	dc0a      	bgt.n	800c5a0 <__gethex+0x14c>
 800c58a:	9801      	ldr	r0, [sp, #4]
 800c58c:	f000 fafc 	bl	800cb88 <_Balloc>
 800c590:	4604      	mov	r4, r0
 800c592:	b940      	cbnz	r0, 800c5a6 <__gethex+0x152>
 800c594:	4b5c      	ldr	r3, [pc, #368]	@ (800c708 <__gethex+0x2b4>)
 800c596:	4602      	mov	r2, r0
 800c598:	21e4      	movs	r1, #228	@ 0xe4
 800c59a:	485c      	ldr	r0, [pc, #368]	@ (800c70c <__gethex+0x2b8>)
 800c59c:	f001 f9e0 	bl	800d960 <__assert_func>
 800c5a0:	3101      	adds	r1, #1
 800c5a2:	105b      	asrs	r3, r3, #1
 800c5a4:	e7ef      	b.n	800c586 <__gethex+0x132>
 800c5a6:	f100 0a14 	add.w	sl, r0, #20
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	4655      	mov	r5, sl
 800c5ae:	469b      	mov	fp, r3
 800c5b0:	45b1      	cmp	r9, r6
 800c5b2:	d337      	bcc.n	800c624 <__gethex+0x1d0>
 800c5b4:	f845 bb04 	str.w	fp, [r5], #4
 800c5b8:	eba5 050a 	sub.w	r5, r5, sl
 800c5bc:	10ad      	asrs	r5, r5, #2
 800c5be:	6125      	str	r5, [r4, #16]
 800c5c0:	4658      	mov	r0, fp
 800c5c2:	f000 fbd3 	bl	800cd6c <__hi0bits>
 800c5c6:	016d      	lsls	r5, r5, #5
 800c5c8:	f8d8 6000 	ldr.w	r6, [r8]
 800c5cc:	1a2d      	subs	r5, r5, r0
 800c5ce:	42b5      	cmp	r5, r6
 800c5d0:	dd54      	ble.n	800c67c <__gethex+0x228>
 800c5d2:	1bad      	subs	r5, r5, r6
 800c5d4:	4629      	mov	r1, r5
 800c5d6:	4620      	mov	r0, r4
 800c5d8:	f000 ff67 	bl	800d4aa <__any_on>
 800c5dc:	4681      	mov	r9, r0
 800c5de:	b178      	cbz	r0, 800c600 <__gethex+0x1ac>
 800c5e0:	1e6b      	subs	r3, r5, #1
 800c5e2:	1159      	asrs	r1, r3, #5
 800c5e4:	f003 021f 	and.w	r2, r3, #31
 800c5e8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c5ec:	f04f 0901 	mov.w	r9, #1
 800c5f0:	fa09 f202 	lsl.w	r2, r9, r2
 800c5f4:	420a      	tst	r2, r1
 800c5f6:	d003      	beq.n	800c600 <__gethex+0x1ac>
 800c5f8:	454b      	cmp	r3, r9
 800c5fa:	dc36      	bgt.n	800c66a <__gethex+0x216>
 800c5fc:	f04f 0902 	mov.w	r9, #2
 800c600:	4629      	mov	r1, r5
 800c602:	4620      	mov	r0, r4
 800c604:	f7ff febe 	bl	800c384 <rshift>
 800c608:	442f      	add	r7, r5
 800c60a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c60e:	42bb      	cmp	r3, r7
 800c610:	da42      	bge.n	800c698 <__gethex+0x244>
 800c612:	9801      	ldr	r0, [sp, #4]
 800c614:	4621      	mov	r1, r4
 800c616:	f000 faf7 	bl	800cc08 <_Bfree>
 800c61a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c61c:	2300      	movs	r3, #0
 800c61e:	6013      	str	r3, [r2, #0]
 800c620:	25a3      	movs	r5, #163	@ 0xa3
 800c622:	e793      	b.n	800c54c <__gethex+0xf8>
 800c624:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c628:	2a2e      	cmp	r2, #46	@ 0x2e
 800c62a:	d012      	beq.n	800c652 <__gethex+0x1fe>
 800c62c:	2b20      	cmp	r3, #32
 800c62e:	d104      	bne.n	800c63a <__gethex+0x1e6>
 800c630:	f845 bb04 	str.w	fp, [r5], #4
 800c634:	f04f 0b00 	mov.w	fp, #0
 800c638:	465b      	mov	r3, fp
 800c63a:	7830      	ldrb	r0, [r6, #0]
 800c63c:	9303      	str	r3, [sp, #12]
 800c63e:	f7ff fef3 	bl	800c428 <__hexdig_fun>
 800c642:	9b03      	ldr	r3, [sp, #12]
 800c644:	f000 000f 	and.w	r0, r0, #15
 800c648:	4098      	lsls	r0, r3
 800c64a:	ea4b 0b00 	orr.w	fp, fp, r0
 800c64e:	3304      	adds	r3, #4
 800c650:	e7ae      	b.n	800c5b0 <__gethex+0x15c>
 800c652:	45b1      	cmp	r9, r6
 800c654:	d8ea      	bhi.n	800c62c <__gethex+0x1d8>
 800c656:	492b      	ldr	r1, [pc, #172]	@ (800c704 <__gethex+0x2b0>)
 800c658:	9303      	str	r3, [sp, #12]
 800c65a:	2201      	movs	r2, #1
 800c65c:	4630      	mov	r0, r6
 800c65e:	f7fe ff1d 	bl	800b49c <strncmp>
 800c662:	9b03      	ldr	r3, [sp, #12]
 800c664:	2800      	cmp	r0, #0
 800c666:	d1e1      	bne.n	800c62c <__gethex+0x1d8>
 800c668:	e7a2      	b.n	800c5b0 <__gethex+0x15c>
 800c66a:	1ea9      	subs	r1, r5, #2
 800c66c:	4620      	mov	r0, r4
 800c66e:	f000 ff1c 	bl	800d4aa <__any_on>
 800c672:	2800      	cmp	r0, #0
 800c674:	d0c2      	beq.n	800c5fc <__gethex+0x1a8>
 800c676:	f04f 0903 	mov.w	r9, #3
 800c67a:	e7c1      	b.n	800c600 <__gethex+0x1ac>
 800c67c:	da09      	bge.n	800c692 <__gethex+0x23e>
 800c67e:	1b75      	subs	r5, r6, r5
 800c680:	4621      	mov	r1, r4
 800c682:	9801      	ldr	r0, [sp, #4]
 800c684:	462a      	mov	r2, r5
 800c686:	f000 fcd7 	bl	800d038 <__lshift>
 800c68a:	1b7f      	subs	r7, r7, r5
 800c68c:	4604      	mov	r4, r0
 800c68e:	f100 0a14 	add.w	sl, r0, #20
 800c692:	f04f 0900 	mov.w	r9, #0
 800c696:	e7b8      	b.n	800c60a <__gethex+0x1b6>
 800c698:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c69c:	42bd      	cmp	r5, r7
 800c69e:	dd6f      	ble.n	800c780 <__gethex+0x32c>
 800c6a0:	1bed      	subs	r5, r5, r7
 800c6a2:	42ae      	cmp	r6, r5
 800c6a4:	dc34      	bgt.n	800c710 <__gethex+0x2bc>
 800c6a6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c6aa:	2b02      	cmp	r3, #2
 800c6ac:	d022      	beq.n	800c6f4 <__gethex+0x2a0>
 800c6ae:	2b03      	cmp	r3, #3
 800c6b0:	d024      	beq.n	800c6fc <__gethex+0x2a8>
 800c6b2:	2b01      	cmp	r3, #1
 800c6b4:	d115      	bne.n	800c6e2 <__gethex+0x28e>
 800c6b6:	42ae      	cmp	r6, r5
 800c6b8:	d113      	bne.n	800c6e2 <__gethex+0x28e>
 800c6ba:	2e01      	cmp	r6, #1
 800c6bc:	d10b      	bne.n	800c6d6 <__gethex+0x282>
 800c6be:	9a02      	ldr	r2, [sp, #8]
 800c6c0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c6c4:	6013      	str	r3, [r2, #0]
 800c6c6:	2301      	movs	r3, #1
 800c6c8:	6123      	str	r3, [r4, #16]
 800c6ca:	f8ca 3000 	str.w	r3, [sl]
 800c6ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c6d0:	2562      	movs	r5, #98	@ 0x62
 800c6d2:	601c      	str	r4, [r3, #0]
 800c6d4:	e73a      	b.n	800c54c <__gethex+0xf8>
 800c6d6:	1e71      	subs	r1, r6, #1
 800c6d8:	4620      	mov	r0, r4
 800c6da:	f000 fee6 	bl	800d4aa <__any_on>
 800c6de:	2800      	cmp	r0, #0
 800c6e0:	d1ed      	bne.n	800c6be <__gethex+0x26a>
 800c6e2:	9801      	ldr	r0, [sp, #4]
 800c6e4:	4621      	mov	r1, r4
 800c6e6:	f000 fa8f 	bl	800cc08 <_Bfree>
 800c6ea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	6013      	str	r3, [r2, #0]
 800c6f0:	2550      	movs	r5, #80	@ 0x50
 800c6f2:	e72b      	b.n	800c54c <__gethex+0xf8>
 800c6f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d1f3      	bne.n	800c6e2 <__gethex+0x28e>
 800c6fa:	e7e0      	b.n	800c6be <__gethex+0x26a>
 800c6fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d1dd      	bne.n	800c6be <__gethex+0x26a>
 800c702:	e7ee      	b.n	800c6e2 <__gethex+0x28e>
 800c704:	0801602c 	.word	0x0801602c
 800c708:	08016239 	.word	0x08016239
 800c70c:	0801624a 	.word	0x0801624a
 800c710:	1e6f      	subs	r7, r5, #1
 800c712:	f1b9 0f00 	cmp.w	r9, #0
 800c716:	d130      	bne.n	800c77a <__gethex+0x326>
 800c718:	b127      	cbz	r7, 800c724 <__gethex+0x2d0>
 800c71a:	4639      	mov	r1, r7
 800c71c:	4620      	mov	r0, r4
 800c71e:	f000 fec4 	bl	800d4aa <__any_on>
 800c722:	4681      	mov	r9, r0
 800c724:	117a      	asrs	r2, r7, #5
 800c726:	2301      	movs	r3, #1
 800c728:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c72c:	f007 071f 	and.w	r7, r7, #31
 800c730:	40bb      	lsls	r3, r7
 800c732:	4213      	tst	r3, r2
 800c734:	4629      	mov	r1, r5
 800c736:	4620      	mov	r0, r4
 800c738:	bf18      	it	ne
 800c73a:	f049 0902 	orrne.w	r9, r9, #2
 800c73e:	f7ff fe21 	bl	800c384 <rshift>
 800c742:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c746:	1b76      	subs	r6, r6, r5
 800c748:	2502      	movs	r5, #2
 800c74a:	f1b9 0f00 	cmp.w	r9, #0
 800c74e:	d047      	beq.n	800c7e0 <__gethex+0x38c>
 800c750:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c754:	2b02      	cmp	r3, #2
 800c756:	d015      	beq.n	800c784 <__gethex+0x330>
 800c758:	2b03      	cmp	r3, #3
 800c75a:	d017      	beq.n	800c78c <__gethex+0x338>
 800c75c:	2b01      	cmp	r3, #1
 800c75e:	d109      	bne.n	800c774 <__gethex+0x320>
 800c760:	f019 0f02 	tst.w	r9, #2
 800c764:	d006      	beq.n	800c774 <__gethex+0x320>
 800c766:	f8da 3000 	ldr.w	r3, [sl]
 800c76a:	ea49 0903 	orr.w	r9, r9, r3
 800c76e:	f019 0f01 	tst.w	r9, #1
 800c772:	d10e      	bne.n	800c792 <__gethex+0x33e>
 800c774:	f045 0510 	orr.w	r5, r5, #16
 800c778:	e032      	b.n	800c7e0 <__gethex+0x38c>
 800c77a:	f04f 0901 	mov.w	r9, #1
 800c77e:	e7d1      	b.n	800c724 <__gethex+0x2d0>
 800c780:	2501      	movs	r5, #1
 800c782:	e7e2      	b.n	800c74a <__gethex+0x2f6>
 800c784:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c786:	f1c3 0301 	rsb	r3, r3, #1
 800c78a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c78c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d0f0      	beq.n	800c774 <__gethex+0x320>
 800c792:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c796:	f104 0314 	add.w	r3, r4, #20
 800c79a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c79e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c7a2:	f04f 0c00 	mov.w	ip, #0
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800c7ac:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c7b0:	d01b      	beq.n	800c7ea <__gethex+0x396>
 800c7b2:	3201      	adds	r2, #1
 800c7b4:	6002      	str	r2, [r0, #0]
 800c7b6:	2d02      	cmp	r5, #2
 800c7b8:	f104 0314 	add.w	r3, r4, #20
 800c7bc:	d13c      	bne.n	800c838 <__gethex+0x3e4>
 800c7be:	f8d8 2000 	ldr.w	r2, [r8]
 800c7c2:	3a01      	subs	r2, #1
 800c7c4:	42b2      	cmp	r2, r6
 800c7c6:	d109      	bne.n	800c7dc <__gethex+0x388>
 800c7c8:	1171      	asrs	r1, r6, #5
 800c7ca:	2201      	movs	r2, #1
 800c7cc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c7d0:	f006 061f 	and.w	r6, r6, #31
 800c7d4:	fa02 f606 	lsl.w	r6, r2, r6
 800c7d8:	421e      	tst	r6, r3
 800c7da:	d13a      	bne.n	800c852 <__gethex+0x3fe>
 800c7dc:	f045 0520 	orr.w	r5, r5, #32
 800c7e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c7e2:	601c      	str	r4, [r3, #0]
 800c7e4:	9b02      	ldr	r3, [sp, #8]
 800c7e6:	601f      	str	r7, [r3, #0]
 800c7e8:	e6b0      	b.n	800c54c <__gethex+0xf8>
 800c7ea:	4299      	cmp	r1, r3
 800c7ec:	f843 cc04 	str.w	ip, [r3, #-4]
 800c7f0:	d8d9      	bhi.n	800c7a6 <__gethex+0x352>
 800c7f2:	68a3      	ldr	r3, [r4, #8]
 800c7f4:	459b      	cmp	fp, r3
 800c7f6:	db17      	blt.n	800c828 <__gethex+0x3d4>
 800c7f8:	6861      	ldr	r1, [r4, #4]
 800c7fa:	9801      	ldr	r0, [sp, #4]
 800c7fc:	3101      	adds	r1, #1
 800c7fe:	f000 f9c3 	bl	800cb88 <_Balloc>
 800c802:	4681      	mov	r9, r0
 800c804:	b918      	cbnz	r0, 800c80e <__gethex+0x3ba>
 800c806:	4b1a      	ldr	r3, [pc, #104]	@ (800c870 <__gethex+0x41c>)
 800c808:	4602      	mov	r2, r0
 800c80a:	2184      	movs	r1, #132	@ 0x84
 800c80c:	e6c5      	b.n	800c59a <__gethex+0x146>
 800c80e:	6922      	ldr	r2, [r4, #16]
 800c810:	3202      	adds	r2, #2
 800c812:	f104 010c 	add.w	r1, r4, #12
 800c816:	0092      	lsls	r2, r2, #2
 800c818:	300c      	adds	r0, #12
 800c81a:	f7fe fefc 	bl	800b616 <memcpy>
 800c81e:	4621      	mov	r1, r4
 800c820:	9801      	ldr	r0, [sp, #4]
 800c822:	f000 f9f1 	bl	800cc08 <_Bfree>
 800c826:	464c      	mov	r4, r9
 800c828:	6923      	ldr	r3, [r4, #16]
 800c82a:	1c5a      	adds	r2, r3, #1
 800c82c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c830:	6122      	str	r2, [r4, #16]
 800c832:	2201      	movs	r2, #1
 800c834:	615a      	str	r2, [r3, #20]
 800c836:	e7be      	b.n	800c7b6 <__gethex+0x362>
 800c838:	6922      	ldr	r2, [r4, #16]
 800c83a:	455a      	cmp	r2, fp
 800c83c:	dd0b      	ble.n	800c856 <__gethex+0x402>
 800c83e:	2101      	movs	r1, #1
 800c840:	4620      	mov	r0, r4
 800c842:	f7ff fd9f 	bl	800c384 <rshift>
 800c846:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c84a:	3701      	adds	r7, #1
 800c84c:	42bb      	cmp	r3, r7
 800c84e:	f6ff aee0 	blt.w	800c612 <__gethex+0x1be>
 800c852:	2501      	movs	r5, #1
 800c854:	e7c2      	b.n	800c7dc <__gethex+0x388>
 800c856:	f016 061f 	ands.w	r6, r6, #31
 800c85a:	d0fa      	beq.n	800c852 <__gethex+0x3fe>
 800c85c:	4453      	add	r3, sl
 800c85e:	f1c6 0620 	rsb	r6, r6, #32
 800c862:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c866:	f000 fa81 	bl	800cd6c <__hi0bits>
 800c86a:	42b0      	cmp	r0, r6
 800c86c:	dbe7      	blt.n	800c83e <__gethex+0x3ea>
 800c86e:	e7f0      	b.n	800c852 <__gethex+0x3fe>
 800c870:	08016239 	.word	0x08016239

0800c874 <L_shift>:
 800c874:	f1c2 0208 	rsb	r2, r2, #8
 800c878:	0092      	lsls	r2, r2, #2
 800c87a:	b570      	push	{r4, r5, r6, lr}
 800c87c:	f1c2 0620 	rsb	r6, r2, #32
 800c880:	6843      	ldr	r3, [r0, #4]
 800c882:	6804      	ldr	r4, [r0, #0]
 800c884:	fa03 f506 	lsl.w	r5, r3, r6
 800c888:	432c      	orrs	r4, r5
 800c88a:	40d3      	lsrs	r3, r2
 800c88c:	6004      	str	r4, [r0, #0]
 800c88e:	f840 3f04 	str.w	r3, [r0, #4]!
 800c892:	4288      	cmp	r0, r1
 800c894:	d3f4      	bcc.n	800c880 <L_shift+0xc>
 800c896:	bd70      	pop	{r4, r5, r6, pc}

0800c898 <__match>:
 800c898:	b530      	push	{r4, r5, lr}
 800c89a:	6803      	ldr	r3, [r0, #0]
 800c89c:	3301      	adds	r3, #1
 800c89e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c8a2:	b914      	cbnz	r4, 800c8aa <__match+0x12>
 800c8a4:	6003      	str	r3, [r0, #0]
 800c8a6:	2001      	movs	r0, #1
 800c8a8:	bd30      	pop	{r4, r5, pc}
 800c8aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c8ae:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c8b2:	2d19      	cmp	r5, #25
 800c8b4:	bf98      	it	ls
 800c8b6:	3220      	addls	r2, #32
 800c8b8:	42a2      	cmp	r2, r4
 800c8ba:	d0f0      	beq.n	800c89e <__match+0x6>
 800c8bc:	2000      	movs	r0, #0
 800c8be:	e7f3      	b.n	800c8a8 <__match+0x10>

0800c8c0 <__hexnan>:
 800c8c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8c4:	680b      	ldr	r3, [r1, #0]
 800c8c6:	6801      	ldr	r1, [r0, #0]
 800c8c8:	115e      	asrs	r6, r3, #5
 800c8ca:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c8ce:	f013 031f 	ands.w	r3, r3, #31
 800c8d2:	b087      	sub	sp, #28
 800c8d4:	bf18      	it	ne
 800c8d6:	3604      	addne	r6, #4
 800c8d8:	2500      	movs	r5, #0
 800c8da:	1f37      	subs	r7, r6, #4
 800c8dc:	4682      	mov	sl, r0
 800c8de:	4690      	mov	r8, r2
 800c8e0:	9301      	str	r3, [sp, #4]
 800c8e2:	f846 5c04 	str.w	r5, [r6, #-4]
 800c8e6:	46b9      	mov	r9, r7
 800c8e8:	463c      	mov	r4, r7
 800c8ea:	9502      	str	r5, [sp, #8]
 800c8ec:	46ab      	mov	fp, r5
 800c8ee:	784a      	ldrb	r2, [r1, #1]
 800c8f0:	1c4b      	adds	r3, r1, #1
 800c8f2:	9303      	str	r3, [sp, #12]
 800c8f4:	b342      	cbz	r2, 800c948 <__hexnan+0x88>
 800c8f6:	4610      	mov	r0, r2
 800c8f8:	9105      	str	r1, [sp, #20]
 800c8fa:	9204      	str	r2, [sp, #16]
 800c8fc:	f7ff fd94 	bl	800c428 <__hexdig_fun>
 800c900:	2800      	cmp	r0, #0
 800c902:	d151      	bne.n	800c9a8 <__hexnan+0xe8>
 800c904:	9a04      	ldr	r2, [sp, #16]
 800c906:	9905      	ldr	r1, [sp, #20]
 800c908:	2a20      	cmp	r2, #32
 800c90a:	d818      	bhi.n	800c93e <__hexnan+0x7e>
 800c90c:	9b02      	ldr	r3, [sp, #8]
 800c90e:	459b      	cmp	fp, r3
 800c910:	dd13      	ble.n	800c93a <__hexnan+0x7a>
 800c912:	454c      	cmp	r4, r9
 800c914:	d206      	bcs.n	800c924 <__hexnan+0x64>
 800c916:	2d07      	cmp	r5, #7
 800c918:	dc04      	bgt.n	800c924 <__hexnan+0x64>
 800c91a:	462a      	mov	r2, r5
 800c91c:	4649      	mov	r1, r9
 800c91e:	4620      	mov	r0, r4
 800c920:	f7ff ffa8 	bl	800c874 <L_shift>
 800c924:	4544      	cmp	r4, r8
 800c926:	d952      	bls.n	800c9ce <__hexnan+0x10e>
 800c928:	2300      	movs	r3, #0
 800c92a:	f1a4 0904 	sub.w	r9, r4, #4
 800c92e:	f844 3c04 	str.w	r3, [r4, #-4]
 800c932:	f8cd b008 	str.w	fp, [sp, #8]
 800c936:	464c      	mov	r4, r9
 800c938:	461d      	mov	r5, r3
 800c93a:	9903      	ldr	r1, [sp, #12]
 800c93c:	e7d7      	b.n	800c8ee <__hexnan+0x2e>
 800c93e:	2a29      	cmp	r2, #41	@ 0x29
 800c940:	d157      	bne.n	800c9f2 <__hexnan+0x132>
 800c942:	3102      	adds	r1, #2
 800c944:	f8ca 1000 	str.w	r1, [sl]
 800c948:	f1bb 0f00 	cmp.w	fp, #0
 800c94c:	d051      	beq.n	800c9f2 <__hexnan+0x132>
 800c94e:	454c      	cmp	r4, r9
 800c950:	d206      	bcs.n	800c960 <__hexnan+0xa0>
 800c952:	2d07      	cmp	r5, #7
 800c954:	dc04      	bgt.n	800c960 <__hexnan+0xa0>
 800c956:	462a      	mov	r2, r5
 800c958:	4649      	mov	r1, r9
 800c95a:	4620      	mov	r0, r4
 800c95c:	f7ff ff8a 	bl	800c874 <L_shift>
 800c960:	4544      	cmp	r4, r8
 800c962:	d936      	bls.n	800c9d2 <__hexnan+0x112>
 800c964:	f1a8 0204 	sub.w	r2, r8, #4
 800c968:	4623      	mov	r3, r4
 800c96a:	f853 1b04 	ldr.w	r1, [r3], #4
 800c96e:	f842 1f04 	str.w	r1, [r2, #4]!
 800c972:	429f      	cmp	r7, r3
 800c974:	d2f9      	bcs.n	800c96a <__hexnan+0xaa>
 800c976:	1b3b      	subs	r3, r7, r4
 800c978:	f023 0303 	bic.w	r3, r3, #3
 800c97c:	3304      	adds	r3, #4
 800c97e:	3401      	adds	r4, #1
 800c980:	3e03      	subs	r6, #3
 800c982:	42b4      	cmp	r4, r6
 800c984:	bf88      	it	hi
 800c986:	2304      	movhi	r3, #4
 800c988:	4443      	add	r3, r8
 800c98a:	2200      	movs	r2, #0
 800c98c:	f843 2b04 	str.w	r2, [r3], #4
 800c990:	429f      	cmp	r7, r3
 800c992:	d2fb      	bcs.n	800c98c <__hexnan+0xcc>
 800c994:	683b      	ldr	r3, [r7, #0]
 800c996:	b91b      	cbnz	r3, 800c9a0 <__hexnan+0xe0>
 800c998:	4547      	cmp	r7, r8
 800c99a:	d128      	bne.n	800c9ee <__hexnan+0x12e>
 800c99c:	2301      	movs	r3, #1
 800c99e:	603b      	str	r3, [r7, #0]
 800c9a0:	2005      	movs	r0, #5
 800c9a2:	b007      	add	sp, #28
 800c9a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9a8:	3501      	adds	r5, #1
 800c9aa:	2d08      	cmp	r5, #8
 800c9ac:	f10b 0b01 	add.w	fp, fp, #1
 800c9b0:	dd06      	ble.n	800c9c0 <__hexnan+0x100>
 800c9b2:	4544      	cmp	r4, r8
 800c9b4:	d9c1      	bls.n	800c93a <__hexnan+0x7a>
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	f844 3c04 	str.w	r3, [r4, #-4]
 800c9bc:	2501      	movs	r5, #1
 800c9be:	3c04      	subs	r4, #4
 800c9c0:	6822      	ldr	r2, [r4, #0]
 800c9c2:	f000 000f 	and.w	r0, r0, #15
 800c9c6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c9ca:	6020      	str	r0, [r4, #0]
 800c9cc:	e7b5      	b.n	800c93a <__hexnan+0x7a>
 800c9ce:	2508      	movs	r5, #8
 800c9d0:	e7b3      	b.n	800c93a <__hexnan+0x7a>
 800c9d2:	9b01      	ldr	r3, [sp, #4]
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d0dd      	beq.n	800c994 <__hexnan+0xd4>
 800c9d8:	f1c3 0320 	rsb	r3, r3, #32
 800c9dc:	f04f 32ff 	mov.w	r2, #4294967295
 800c9e0:	40da      	lsrs	r2, r3
 800c9e2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c9e6:	4013      	ands	r3, r2
 800c9e8:	f846 3c04 	str.w	r3, [r6, #-4]
 800c9ec:	e7d2      	b.n	800c994 <__hexnan+0xd4>
 800c9ee:	3f04      	subs	r7, #4
 800c9f0:	e7d0      	b.n	800c994 <__hexnan+0xd4>
 800c9f2:	2004      	movs	r0, #4
 800c9f4:	e7d5      	b.n	800c9a2 <__hexnan+0xe2>
	...

0800c9f8 <malloc>:
 800c9f8:	4b02      	ldr	r3, [pc, #8]	@ (800ca04 <malloc+0xc>)
 800c9fa:	4601      	mov	r1, r0
 800c9fc:	6818      	ldr	r0, [r3, #0]
 800c9fe:	f000 b825 	b.w	800ca4c <_malloc_r>
 800ca02:	bf00      	nop
 800ca04:	200001d4 	.word	0x200001d4

0800ca08 <sbrk_aligned>:
 800ca08:	b570      	push	{r4, r5, r6, lr}
 800ca0a:	4e0f      	ldr	r6, [pc, #60]	@ (800ca48 <sbrk_aligned+0x40>)
 800ca0c:	460c      	mov	r4, r1
 800ca0e:	6831      	ldr	r1, [r6, #0]
 800ca10:	4605      	mov	r5, r0
 800ca12:	b911      	cbnz	r1, 800ca1a <sbrk_aligned+0x12>
 800ca14:	f000 ff94 	bl	800d940 <_sbrk_r>
 800ca18:	6030      	str	r0, [r6, #0]
 800ca1a:	4621      	mov	r1, r4
 800ca1c:	4628      	mov	r0, r5
 800ca1e:	f000 ff8f 	bl	800d940 <_sbrk_r>
 800ca22:	1c43      	adds	r3, r0, #1
 800ca24:	d103      	bne.n	800ca2e <sbrk_aligned+0x26>
 800ca26:	f04f 34ff 	mov.w	r4, #4294967295
 800ca2a:	4620      	mov	r0, r4
 800ca2c:	bd70      	pop	{r4, r5, r6, pc}
 800ca2e:	1cc4      	adds	r4, r0, #3
 800ca30:	f024 0403 	bic.w	r4, r4, #3
 800ca34:	42a0      	cmp	r0, r4
 800ca36:	d0f8      	beq.n	800ca2a <sbrk_aligned+0x22>
 800ca38:	1a21      	subs	r1, r4, r0
 800ca3a:	4628      	mov	r0, r5
 800ca3c:	f000 ff80 	bl	800d940 <_sbrk_r>
 800ca40:	3001      	adds	r0, #1
 800ca42:	d1f2      	bne.n	800ca2a <sbrk_aligned+0x22>
 800ca44:	e7ef      	b.n	800ca26 <sbrk_aligned+0x1e>
 800ca46:	bf00      	nop
 800ca48:	20006c08 	.word	0x20006c08

0800ca4c <_malloc_r>:
 800ca4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca50:	1ccd      	adds	r5, r1, #3
 800ca52:	f025 0503 	bic.w	r5, r5, #3
 800ca56:	3508      	adds	r5, #8
 800ca58:	2d0c      	cmp	r5, #12
 800ca5a:	bf38      	it	cc
 800ca5c:	250c      	movcc	r5, #12
 800ca5e:	2d00      	cmp	r5, #0
 800ca60:	4606      	mov	r6, r0
 800ca62:	db01      	blt.n	800ca68 <_malloc_r+0x1c>
 800ca64:	42a9      	cmp	r1, r5
 800ca66:	d904      	bls.n	800ca72 <_malloc_r+0x26>
 800ca68:	230c      	movs	r3, #12
 800ca6a:	6033      	str	r3, [r6, #0]
 800ca6c:	2000      	movs	r0, #0
 800ca6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca72:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cb48 <_malloc_r+0xfc>
 800ca76:	f000 f87b 	bl	800cb70 <__malloc_lock>
 800ca7a:	f8d8 3000 	ldr.w	r3, [r8]
 800ca7e:	461c      	mov	r4, r3
 800ca80:	bb44      	cbnz	r4, 800cad4 <_malloc_r+0x88>
 800ca82:	4629      	mov	r1, r5
 800ca84:	4630      	mov	r0, r6
 800ca86:	f7ff ffbf 	bl	800ca08 <sbrk_aligned>
 800ca8a:	1c43      	adds	r3, r0, #1
 800ca8c:	4604      	mov	r4, r0
 800ca8e:	d158      	bne.n	800cb42 <_malloc_r+0xf6>
 800ca90:	f8d8 4000 	ldr.w	r4, [r8]
 800ca94:	4627      	mov	r7, r4
 800ca96:	2f00      	cmp	r7, #0
 800ca98:	d143      	bne.n	800cb22 <_malloc_r+0xd6>
 800ca9a:	2c00      	cmp	r4, #0
 800ca9c:	d04b      	beq.n	800cb36 <_malloc_r+0xea>
 800ca9e:	6823      	ldr	r3, [r4, #0]
 800caa0:	4639      	mov	r1, r7
 800caa2:	4630      	mov	r0, r6
 800caa4:	eb04 0903 	add.w	r9, r4, r3
 800caa8:	f000 ff4a 	bl	800d940 <_sbrk_r>
 800caac:	4581      	cmp	r9, r0
 800caae:	d142      	bne.n	800cb36 <_malloc_r+0xea>
 800cab0:	6821      	ldr	r1, [r4, #0]
 800cab2:	1a6d      	subs	r5, r5, r1
 800cab4:	4629      	mov	r1, r5
 800cab6:	4630      	mov	r0, r6
 800cab8:	f7ff ffa6 	bl	800ca08 <sbrk_aligned>
 800cabc:	3001      	adds	r0, #1
 800cabe:	d03a      	beq.n	800cb36 <_malloc_r+0xea>
 800cac0:	6823      	ldr	r3, [r4, #0]
 800cac2:	442b      	add	r3, r5
 800cac4:	6023      	str	r3, [r4, #0]
 800cac6:	f8d8 3000 	ldr.w	r3, [r8]
 800caca:	685a      	ldr	r2, [r3, #4]
 800cacc:	bb62      	cbnz	r2, 800cb28 <_malloc_r+0xdc>
 800cace:	f8c8 7000 	str.w	r7, [r8]
 800cad2:	e00f      	b.n	800caf4 <_malloc_r+0xa8>
 800cad4:	6822      	ldr	r2, [r4, #0]
 800cad6:	1b52      	subs	r2, r2, r5
 800cad8:	d420      	bmi.n	800cb1c <_malloc_r+0xd0>
 800cada:	2a0b      	cmp	r2, #11
 800cadc:	d917      	bls.n	800cb0e <_malloc_r+0xc2>
 800cade:	1961      	adds	r1, r4, r5
 800cae0:	42a3      	cmp	r3, r4
 800cae2:	6025      	str	r5, [r4, #0]
 800cae4:	bf18      	it	ne
 800cae6:	6059      	strne	r1, [r3, #4]
 800cae8:	6863      	ldr	r3, [r4, #4]
 800caea:	bf08      	it	eq
 800caec:	f8c8 1000 	streq.w	r1, [r8]
 800caf0:	5162      	str	r2, [r4, r5]
 800caf2:	604b      	str	r3, [r1, #4]
 800caf4:	4630      	mov	r0, r6
 800caf6:	f000 f841 	bl	800cb7c <__malloc_unlock>
 800cafa:	f104 000b 	add.w	r0, r4, #11
 800cafe:	1d23      	adds	r3, r4, #4
 800cb00:	f020 0007 	bic.w	r0, r0, #7
 800cb04:	1ac2      	subs	r2, r0, r3
 800cb06:	bf1c      	itt	ne
 800cb08:	1a1b      	subne	r3, r3, r0
 800cb0a:	50a3      	strne	r3, [r4, r2]
 800cb0c:	e7af      	b.n	800ca6e <_malloc_r+0x22>
 800cb0e:	6862      	ldr	r2, [r4, #4]
 800cb10:	42a3      	cmp	r3, r4
 800cb12:	bf0c      	ite	eq
 800cb14:	f8c8 2000 	streq.w	r2, [r8]
 800cb18:	605a      	strne	r2, [r3, #4]
 800cb1a:	e7eb      	b.n	800caf4 <_malloc_r+0xa8>
 800cb1c:	4623      	mov	r3, r4
 800cb1e:	6864      	ldr	r4, [r4, #4]
 800cb20:	e7ae      	b.n	800ca80 <_malloc_r+0x34>
 800cb22:	463c      	mov	r4, r7
 800cb24:	687f      	ldr	r7, [r7, #4]
 800cb26:	e7b6      	b.n	800ca96 <_malloc_r+0x4a>
 800cb28:	461a      	mov	r2, r3
 800cb2a:	685b      	ldr	r3, [r3, #4]
 800cb2c:	42a3      	cmp	r3, r4
 800cb2e:	d1fb      	bne.n	800cb28 <_malloc_r+0xdc>
 800cb30:	2300      	movs	r3, #0
 800cb32:	6053      	str	r3, [r2, #4]
 800cb34:	e7de      	b.n	800caf4 <_malloc_r+0xa8>
 800cb36:	230c      	movs	r3, #12
 800cb38:	6033      	str	r3, [r6, #0]
 800cb3a:	4630      	mov	r0, r6
 800cb3c:	f000 f81e 	bl	800cb7c <__malloc_unlock>
 800cb40:	e794      	b.n	800ca6c <_malloc_r+0x20>
 800cb42:	6005      	str	r5, [r0, #0]
 800cb44:	e7d6      	b.n	800caf4 <_malloc_r+0xa8>
 800cb46:	bf00      	nop
 800cb48:	20006c0c 	.word	0x20006c0c

0800cb4c <__ascii_mbtowc>:
 800cb4c:	b082      	sub	sp, #8
 800cb4e:	b901      	cbnz	r1, 800cb52 <__ascii_mbtowc+0x6>
 800cb50:	a901      	add	r1, sp, #4
 800cb52:	b142      	cbz	r2, 800cb66 <__ascii_mbtowc+0x1a>
 800cb54:	b14b      	cbz	r3, 800cb6a <__ascii_mbtowc+0x1e>
 800cb56:	7813      	ldrb	r3, [r2, #0]
 800cb58:	600b      	str	r3, [r1, #0]
 800cb5a:	7812      	ldrb	r2, [r2, #0]
 800cb5c:	1e10      	subs	r0, r2, #0
 800cb5e:	bf18      	it	ne
 800cb60:	2001      	movne	r0, #1
 800cb62:	b002      	add	sp, #8
 800cb64:	4770      	bx	lr
 800cb66:	4610      	mov	r0, r2
 800cb68:	e7fb      	b.n	800cb62 <__ascii_mbtowc+0x16>
 800cb6a:	f06f 0001 	mvn.w	r0, #1
 800cb6e:	e7f8      	b.n	800cb62 <__ascii_mbtowc+0x16>

0800cb70 <__malloc_lock>:
 800cb70:	4801      	ldr	r0, [pc, #4]	@ (800cb78 <__malloc_lock+0x8>)
 800cb72:	f7fe bd46 	b.w	800b602 <__retarget_lock_acquire_recursive>
 800cb76:	bf00      	nop
 800cb78:	20006c04 	.word	0x20006c04

0800cb7c <__malloc_unlock>:
 800cb7c:	4801      	ldr	r0, [pc, #4]	@ (800cb84 <__malloc_unlock+0x8>)
 800cb7e:	f7fe bd41 	b.w	800b604 <__retarget_lock_release_recursive>
 800cb82:	bf00      	nop
 800cb84:	20006c04 	.word	0x20006c04

0800cb88 <_Balloc>:
 800cb88:	b570      	push	{r4, r5, r6, lr}
 800cb8a:	69c6      	ldr	r6, [r0, #28]
 800cb8c:	4604      	mov	r4, r0
 800cb8e:	460d      	mov	r5, r1
 800cb90:	b976      	cbnz	r6, 800cbb0 <_Balloc+0x28>
 800cb92:	2010      	movs	r0, #16
 800cb94:	f7ff ff30 	bl	800c9f8 <malloc>
 800cb98:	4602      	mov	r2, r0
 800cb9a:	61e0      	str	r0, [r4, #28]
 800cb9c:	b920      	cbnz	r0, 800cba8 <_Balloc+0x20>
 800cb9e:	4b18      	ldr	r3, [pc, #96]	@ (800cc00 <_Balloc+0x78>)
 800cba0:	4818      	ldr	r0, [pc, #96]	@ (800cc04 <_Balloc+0x7c>)
 800cba2:	216b      	movs	r1, #107	@ 0x6b
 800cba4:	f000 fedc 	bl	800d960 <__assert_func>
 800cba8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cbac:	6006      	str	r6, [r0, #0]
 800cbae:	60c6      	str	r6, [r0, #12]
 800cbb0:	69e6      	ldr	r6, [r4, #28]
 800cbb2:	68f3      	ldr	r3, [r6, #12]
 800cbb4:	b183      	cbz	r3, 800cbd8 <_Balloc+0x50>
 800cbb6:	69e3      	ldr	r3, [r4, #28]
 800cbb8:	68db      	ldr	r3, [r3, #12]
 800cbba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cbbe:	b9b8      	cbnz	r0, 800cbf0 <_Balloc+0x68>
 800cbc0:	2101      	movs	r1, #1
 800cbc2:	fa01 f605 	lsl.w	r6, r1, r5
 800cbc6:	1d72      	adds	r2, r6, #5
 800cbc8:	0092      	lsls	r2, r2, #2
 800cbca:	4620      	mov	r0, r4
 800cbcc:	f000 fee6 	bl	800d99c <_calloc_r>
 800cbd0:	b160      	cbz	r0, 800cbec <_Balloc+0x64>
 800cbd2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cbd6:	e00e      	b.n	800cbf6 <_Balloc+0x6e>
 800cbd8:	2221      	movs	r2, #33	@ 0x21
 800cbda:	2104      	movs	r1, #4
 800cbdc:	4620      	mov	r0, r4
 800cbde:	f000 fedd 	bl	800d99c <_calloc_r>
 800cbe2:	69e3      	ldr	r3, [r4, #28]
 800cbe4:	60f0      	str	r0, [r6, #12]
 800cbe6:	68db      	ldr	r3, [r3, #12]
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d1e4      	bne.n	800cbb6 <_Balloc+0x2e>
 800cbec:	2000      	movs	r0, #0
 800cbee:	bd70      	pop	{r4, r5, r6, pc}
 800cbf0:	6802      	ldr	r2, [r0, #0]
 800cbf2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cbf6:	2300      	movs	r3, #0
 800cbf8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cbfc:	e7f7      	b.n	800cbee <_Balloc+0x66>
 800cbfe:	bf00      	nop
 800cc00:	080161ca 	.word	0x080161ca
 800cc04:	080162aa 	.word	0x080162aa

0800cc08 <_Bfree>:
 800cc08:	b570      	push	{r4, r5, r6, lr}
 800cc0a:	69c6      	ldr	r6, [r0, #28]
 800cc0c:	4605      	mov	r5, r0
 800cc0e:	460c      	mov	r4, r1
 800cc10:	b976      	cbnz	r6, 800cc30 <_Bfree+0x28>
 800cc12:	2010      	movs	r0, #16
 800cc14:	f7ff fef0 	bl	800c9f8 <malloc>
 800cc18:	4602      	mov	r2, r0
 800cc1a:	61e8      	str	r0, [r5, #28]
 800cc1c:	b920      	cbnz	r0, 800cc28 <_Bfree+0x20>
 800cc1e:	4b09      	ldr	r3, [pc, #36]	@ (800cc44 <_Bfree+0x3c>)
 800cc20:	4809      	ldr	r0, [pc, #36]	@ (800cc48 <_Bfree+0x40>)
 800cc22:	218f      	movs	r1, #143	@ 0x8f
 800cc24:	f000 fe9c 	bl	800d960 <__assert_func>
 800cc28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cc2c:	6006      	str	r6, [r0, #0]
 800cc2e:	60c6      	str	r6, [r0, #12]
 800cc30:	b13c      	cbz	r4, 800cc42 <_Bfree+0x3a>
 800cc32:	69eb      	ldr	r3, [r5, #28]
 800cc34:	6862      	ldr	r2, [r4, #4]
 800cc36:	68db      	ldr	r3, [r3, #12]
 800cc38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cc3c:	6021      	str	r1, [r4, #0]
 800cc3e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cc42:	bd70      	pop	{r4, r5, r6, pc}
 800cc44:	080161ca 	.word	0x080161ca
 800cc48:	080162aa 	.word	0x080162aa

0800cc4c <__multadd>:
 800cc4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc50:	690d      	ldr	r5, [r1, #16]
 800cc52:	4607      	mov	r7, r0
 800cc54:	460c      	mov	r4, r1
 800cc56:	461e      	mov	r6, r3
 800cc58:	f101 0c14 	add.w	ip, r1, #20
 800cc5c:	2000      	movs	r0, #0
 800cc5e:	f8dc 3000 	ldr.w	r3, [ip]
 800cc62:	b299      	uxth	r1, r3
 800cc64:	fb02 6101 	mla	r1, r2, r1, r6
 800cc68:	0c1e      	lsrs	r6, r3, #16
 800cc6a:	0c0b      	lsrs	r3, r1, #16
 800cc6c:	fb02 3306 	mla	r3, r2, r6, r3
 800cc70:	b289      	uxth	r1, r1
 800cc72:	3001      	adds	r0, #1
 800cc74:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cc78:	4285      	cmp	r5, r0
 800cc7a:	f84c 1b04 	str.w	r1, [ip], #4
 800cc7e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cc82:	dcec      	bgt.n	800cc5e <__multadd+0x12>
 800cc84:	b30e      	cbz	r6, 800ccca <__multadd+0x7e>
 800cc86:	68a3      	ldr	r3, [r4, #8]
 800cc88:	42ab      	cmp	r3, r5
 800cc8a:	dc19      	bgt.n	800ccc0 <__multadd+0x74>
 800cc8c:	6861      	ldr	r1, [r4, #4]
 800cc8e:	4638      	mov	r0, r7
 800cc90:	3101      	adds	r1, #1
 800cc92:	f7ff ff79 	bl	800cb88 <_Balloc>
 800cc96:	4680      	mov	r8, r0
 800cc98:	b928      	cbnz	r0, 800cca6 <__multadd+0x5a>
 800cc9a:	4602      	mov	r2, r0
 800cc9c:	4b0c      	ldr	r3, [pc, #48]	@ (800ccd0 <__multadd+0x84>)
 800cc9e:	480d      	ldr	r0, [pc, #52]	@ (800ccd4 <__multadd+0x88>)
 800cca0:	21ba      	movs	r1, #186	@ 0xba
 800cca2:	f000 fe5d 	bl	800d960 <__assert_func>
 800cca6:	6922      	ldr	r2, [r4, #16]
 800cca8:	3202      	adds	r2, #2
 800ccaa:	f104 010c 	add.w	r1, r4, #12
 800ccae:	0092      	lsls	r2, r2, #2
 800ccb0:	300c      	adds	r0, #12
 800ccb2:	f7fe fcb0 	bl	800b616 <memcpy>
 800ccb6:	4621      	mov	r1, r4
 800ccb8:	4638      	mov	r0, r7
 800ccba:	f7ff ffa5 	bl	800cc08 <_Bfree>
 800ccbe:	4644      	mov	r4, r8
 800ccc0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ccc4:	3501      	adds	r5, #1
 800ccc6:	615e      	str	r6, [r3, #20]
 800ccc8:	6125      	str	r5, [r4, #16]
 800ccca:	4620      	mov	r0, r4
 800cccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccd0:	08016239 	.word	0x08016239
 800ccd4:	080162aa 	.word	0x080162aa

0800ccd8 <__s2b>:
 800ccd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ccdc:	460c      	mov	r4, r1
 800ccde:	4615      	mov	r5, r2
 800cce0:	461f      	mov	r7, r3
 800cce2:	2209      	movs	r2, #9
 800cce4:	3308      	adds	r3, #8
 800cce6:	4606      	mov	r6, r0
 800cce8:	fb93 f3f2 	sdiv	r3, r3, r2
 800ccec:	2100      	movs	r1, #0
 800ccee:	2201      	movs	r2, #1
 800ccf0:	429a      	cmp	r2, r3
 800ccf2:	db09      	blt.n	800cd08 <__s2b+0x30>
 800ccf4:	4630      	mov	r0, r6
 800ccf6:	f7ff ff47 	bl	800cb88 <_Balloc>
 800ccfa:	b940      	cbnz	r0, 800cd0e <__s2b+0x36>
 800ccfc:	4602      	mov	r2, r0
 800ccfe:	4b19      	ldr	r3, [pc, #100]	@ (800cd64 <__s2b+0x8c>)
 800cd00:	4819      	ldr	r0, [pc, #100]	@ (800cd68 <__s2b+0x90>)
 800cd02:	21d3      	movs	r1, #211	@ 0xd3
 800cd04:	f000 fe2c 	bl	800d960 <__assert_func>
 800cd08:	0052      	lsls	r2, r2, #1
 800cd0a:	3101      	adds	r1, #1
 800cd0c:	e7f0      	b.n	800ccf0 <__s2b+0x18>
 800cd0e:	9b08      	ldr	r3, [sp, #32]
 800cd10:	6143      	str	r3, [r0, #20]
 800cd12:	2d09      	cmp	r5, #9
 800cd14:	f04f 0301 	mov.w	r3, #1
 800cd18:	6103      	str	r3, [r0, #16]
 800cd1a:	dd16      	ble.n	800cd4a <__s2b+0x72>
 800cd1c:	f104 0909 	add.w	r9, r4, #9
 800cd20:	46c8      	mov	r8, r9
 800cd22:	442c      	add	r4, r5
 800cd24:	f818 3b01 	ldrb.w	r3, [r8], #1
 800cd28:	4601      	mov	r1, r0
 800cd2a:	3b30      	subs	r3, #48	@ 0x30
 800cd2c:	220a      	movs	r2, #10
 800cd2e:	4630      	mov	r0, r6
 800cd30:	f7ff ff8c 	bl	800cc4c <__multadd>
 800cd34:	45a0      	cmp	r8, r4
 800cd36:	d1f5      	bne.n	800cd24 <__s2b+0x4c>
 800cd38:	f1a5 0408 	sub.w	r4, r5, #8
 800cd3c:	444c      	add	r4, r9
 800cd3e:	1b2d      	subs	r5, r5, r4
 800cd40:	1963      	adds	r3, r4, r5
 800cd42:	42bb      	cmp	r3, r7
 800cd44:	db04      	blt.n	800cd50 <__s2b+0x78>
 800cd46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd4a:	340a      	adds	r4, #10
 800cd4c:	2509      	movs	r5, #9
 800cd4e:	e7f6      	b.n	800cd3e <__s2b+0x66>
 800cd50:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cd54:	4601      	mov	r1, r0
 800cd56:	3b30      	subs	r3, #48	@ 0x30
 800cd58:	220a      	movs	r2, #10
 800cd5a:	4630      	mov	r0, r6
 800cd5c:	f7ff ff76 	bl	800cc4c <__multadd>
 800cd60:	e7ee      	b.n	800cd40 <__s2b+0x68>
 800cd62:	bf00      	nop
 800cd64:	08016239 	.word	0x08016239
 800cd68:	080162aa 	.word	0x080162aa

0800cd6c <__hi0bits>:
 800cd6c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800cd70:	4603      	mov	r3, r0
 800cd72:	bf36      	itet	cc
 800cd74:	0403      	lslcc	r3, r0, #16
 800cd76:	2000      	movcs	r0, #0
 800cd78:	2010      	movcc	r0, #16
 800cd7a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cd7e:	bf3c      	itt	cc
 800cd80:	021b      	lslcc	r3, r3, #8
 800cd82:	3008      	addcc	r0, #8
 800cd84:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cd88:	bf3c      	itt	cc
 800cd8a:	011b      	lslcc	r3, r3, #4
 800cd8c:	3004      	addcc	r0, #4
 800cd8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cd92:	bf3c      	itt	cc
 800cd94:	009b      	lslcc	r3, r3, #2
 800cd96:	3002      	addcc	r0, #2
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	db05      	blt.n	800cda8 <__hi0bits+0x3c>
 800cd9c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800cda0:	f100 0001 	add.w	r0, r0, #1
 800cda4:	bf08      	it	eq
 800cda6:	2020      	moveq	r0, #32
 800cda8:	4770      	bx	lr

0800cdaa <__lo0bits>:
 800cdaa:	6803      	ldr	r3, [r0, #0]
 800cdac:	4602      	mov	r2, r0
 800cdae:	f013 0007 	ands.w	r0, r3, #7
 800cdb2:	d00b      	beq.n	800cdcc <__lo0bits+0x22>
 800cdb4:	07d9      	lsls	r1, r3, #31
 800cdb6:	d421      	bmi.n	800cdfc <__lo0bits+0x52>
 800cdb8:	0798      	lsls	r0, r3, #30
 800cdba:	bf49      	itett	mi
 800cdbc:	085b      	lsrmi	r3, r3, #1
 800cdbe:	089b      	lsrpl	r3, r3, #2
 800cdc0:	2001      	movmi	r0, #1
 800cdc2:	6013      	strmi	r3, [r2, #0]
 800cdc4:	bf5c      	itt	pl
 800cdc6:	6013      	strpl	r3, [r2, #0]
 800cdc8:	2002      	movpl	r0, #2
 800cdca:	4770      	bx	lr
 800cdcc:	b299      	uxth	r1, r3
 800cdce:	b909      	cbnz	r1, 800cdd4 <__lo0bits+0x2a>
 800cdd0:	0c1b      	lsrs	r3, r3, #16
 800cdd2:	2010      	movs	r0, #16
 800cdd4:	b2d9      	uxtb	r1, r3
 800cdd6:	b909      	cbnz	r1, 800cddc <__lo0bits+0x32>
 800cdd8:	3008      	adds	r0, #8
 800cdda:	0a1b      	lsrs	r3, r3, #8
 800cddc:	0719      	lsls	r1, r3, #28
 800cdde:	bf04      	itt	eq
 800cde0:	091b      	lsreq	r3, r3, #4
 800cde2:	3004      	addeq	r0, #4
 800cde4:	0799      	lsls	r1, r3, #30
 800cde6:	bf04      	itt	eq
 800cde8:	089b      	lsreq	r3, r3, #2
 800cdea:	3002      	addeq	r0, #2
 800cdec:	07d9      	lsls	r1, r3, #31
 800cdee:	d403      	bmi.n	800cdf8 <__lo0bits+0x4e>
 800cdf0:	085b      	lsrs	r3, r3, #1
 800cdf2:	f100 0001 	add.w	r0, r0, #1
 800cdf6:	d003      	beq.n	800ce00 <__lo0bits+0x56>
 800cdf8:	6013      	str	r3, [r2, #0]
 800cdfa:	4770      	bx	lr
 800cdfc:	2000      	movs	r0, #0
 800cdfe:	4770      	bx	lr
 800ce00:	2020      	movs	r0, #32
 800ce02:	4770      	bx	lr

0800ce04 <__i2b>:
 800ce04:	b510      	push	{r4, lr}
 800ce06:	460c      	mov	r4, r1
 800ce08:	2101      	movs	r1, #1
 800ce0a:	f7ff febd 	bl	800cb88 <_Balloc>
 800ce0e:	4602      	mov	r2, r0
 800ce10:	b928      	cbnz	r0, 800ce1e <__i2b+0x1a>
 800ce12:	4b05      	ldr	r3, [pc, #20]	@ (800ce28 <__i2b+0x24>)
 800ce14:	4805      	ldr	r0, [pc, #20]	@ (800ce2c <__i2b+0x28>)
 800ce16:	f240 1145 	movw	r1, #325	@ 0x145
 800ce1a:	f000 fda1 	bl	800d960 <__assert_func>
 800ce1e:	2301      	movs	r3, #1
 800ce20:	6144      	str	r4, [r0, #20]
 800ce22:	6103      	str	r3, [r0, #16]
 800ce24:	bd10      	pop	{r4, pc}
 800ce26:	bf00      	nop
 800ce28:	08016239 	.word	0x08016239
 800ce2c:	080162aa 	.word	0x080162aa

0800ce30 <__multiply>:
 800ce30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce34:	4614      	mov	r4, r2
 800ce36:	690a      	ldr	r2, [r1, #16]
 800ce38:	6923      	ldr	r3, [r4, #16]
 800ce3a:	429a      	cmp	r2, r3
 800ce3c:	bfa8      	it	ge
 800ce3e:	4623      	movge	r3, r4
 800ce40:	460f      	mov	r7, r1
 800ce42:	bfa4      	itt	ge
 800ce44:	460c      	movge	r4, r1
 800ce46:	461f      	movge	r7, r3
 800ce48:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ce4c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ce50:	68a3      	ldr	r3, [r4, #8]
 800ce52:	6861      	ldr	r1, [r4, #4]
 800ce54:	eb0a 0609 	add.w	r6, sl, r9
 800ce58:	42b3      	cmp	r3, r6
 800ce5a:	b085      	sub	sp, #20
 800ce5c:	bfb8      	it	lt
 800ce5e:	3101      	addlt	r1, #1
 800ce60:	f7ff fe92 	bl	800cb88 <_Balloc>
 800ce64:	b930      	cbnz	r0, 800ce74 <__multiply+0x44>
 800ce66:	4602      	mov	r2, r0
 800ce68:	4b44      	ldr	r3, [pc, #272]	@ (800cf7c <__multiply+0x14c>)
 800ce6a:	4845      	ldr	r0, [pc, #276]	@ (800cf80 <__multiply+0x150>)
 800ce6c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ce70:	f000 fd76 	bl	800d960 <__assert_func>
 800ce74:	f100 0514 	add.w	r5, r0, #20
 800ce78:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ce7c:	462b      	mov	r3, r5
 800ce7e:	2200      	movs	r2, #0
 800ce80:	4543      	cmp	r3, r8
 800ce82:	d321      	bcc.n	800cec8 <__multiply+0x98>
 800ce84:	f107 0114 	add.w	r1, r7, #20
 800ce88:	f104 0214 	add.w	r2, r4, #20
 800ce8c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ce90:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ce94:	9302      	str	r3, [sp, #8]
 800ce96:	1b13      	subs	r3, r2, r4
 800ce98:	3b15      	subs	r3, #21
 800ce9a:	f023 0303 	bic.w	r3, r3, #3
 800ce9e:	3304      	adds	r3, #4
 800cea0:	f104 0715 	add.w	r7, r4, #21
 800cea4:	42ba      	cmp	r2, r7
 800cea6:	bf38      	it	cc
 800cea8:	2304      	movcc	r3, #4
 800ceaa:	9301      	str	r3, [sp, #4]
 800ceac:	9b02      	ldr	r3, [sp, #8]
 800ceae:	9103      	str	r1, [sp, #12]
 800ceb0:	428b      	cmp	r3, r1
 800ceb2:	d80c      	bhi.n	800cece <__multiply+0x9e>
 800ceb4:	2e00      	cmp	r6, #0
 800ceb6:	dd03      	ble.n	800cec0 <__multiply+0x90>
 800ceb8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d05b      	beq.n	800cf78 <__multiply+0x148>
 800cec0:	6106      	str	r6, [r0, #16]
 800cec2:	b005      	add	sp, #20
 800cec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cec8:	f843 2b04 	str.w	r2, [r3], #4
 800cecc:	e7d8      	b.n	800ce80 <__multiply+0x50>
 800cece:	f8b1 a000 	ldrh.w	sl, [r1]
 800ced2:	f1ba 0f00 	cmp.w	sl, #0
 800ced6:	d024      	beq.n	800cf22 <__multiply+0xf2>
 800ced8:	f104 0e14 	add.w	lr, r4, #20
 800cedc:	46a9      	mov	r9, r5
 800cede:	f04f 0c00 	mov.w	ip, #0
 800cee2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cee6:	f8d9 3000 	ldr.w	r3, [r9]
 800ceea:	fa1f fb87 	uxth.w	fp, r7
 800ceee:	b29b      	uxth	r3, r3
 800cef0:	fb0a 330b 	mla	r3, sl, fp, r3
 800cef4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800cef8:	f8d9 7000 	ldr.w	r7, [r9]
 800cefc:	4463      	add	r3, ip
 800cefe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800cf02:	fb0a c70b 	mla	r7, sl, fp, ip
 800cf06:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800cf0a:	b29b      	uxth	r3, r3
 800cf0c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800cf10:	4572      	cmp	r2, lr
 800cf12:	f849 3b04 	str.w	r3, [r9], #4
 800cf16:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800cf1a:	d8e2      	bhi.n	800cee2 <__multiply+0xb2>
 800cf1c:	9b01      	ldr	r3, [sp, #4]
 800cf1e:	f845 c003 	str.w	ip, [r5, r3]
 800cf22:	9b03      	ldr	r3, [sp, #12]
 800cf24:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800cf28:	3104      	adds	r1, #4
 800cf2a:	f1b9 0f00 	cmp.w	r9, #0
 800cf2e:	d021      	beq.n	800cf74 <__multiply+0x144>
 800cf30:	682b      	ldr	r3, [r5, #0]
 800cf32:	f104 0c14 	add.w	ip, r4, #20
 800cf36:	46ae      	mov	lr, r5
 800cf38:	f04f 0a00 	mov.w	sl, #0
 800cf3c:	f8bc b000 	ldrh.w	fp, [ip]
 800cf40:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800cf44:	fb09 770b 	mla	r7, r9, fp, r7
 800cf48:	4457      	add	r7, sl
 800cf4a:	b29b      	uxth	r3, r3
 800cf4c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800cf50:	f84e 3b04 	str.w	r3, [lr], #4
 800cf54:	f85c 3b04 	ldr.w	r3, [ip], #4
 800cf58:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cf5c:	f8be 3000 	ldrh.w	r3, [lr]
 800cf60:	fb09 330a 	mla	r3, r9, sl, r3
 800cf64:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800cf68:	4562      	cmp	r2, ip
 800cf6a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cf6e:	d8e5      	bhi.n	800cf3c <__multiply+0x10c>
 800cf70:	9f01      	ldr	r7, [sp, #4]
 800cf72:	51eb      	str	r3, [r5, r7]
 800cf74:	3504      	adds	r5, #4
 800cf76:	e799      	b.n	800ceac <__multiply+0x7c>
 800cf78:	3e01      	subs	r6, #1
 800cf7a:	e79b      	b.n	800ceb4 <__multiply+0x84>
 800cf7c:	08016239 	.word	0x08016239
 800cf80:	080162aa 	.word	0x080162aa

0800cf84 <__pow5mult>:
 800cf84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf88:	4615      	mov	r5, r2
 800cf8a:	f012 0203 	ands.w	r2, r2, #3
 800cf8e:	4607      	mov	r7, r0
 800cf90:	460e      	mov	r6, r1
 800cf92:	d007      	beq.n	800cfa4 <__pow5mult+0x20>
 800cf94:	4c25      	ldr	r4, [pc, #148]	@ (800d02c <__pow5mult+0xa8>)
 800cf96:	3a01      	subs	r2, #1
 800cf98:	2300      	movs	r3, #0
 800cf9a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cf9e:	f7ff fe55 	bl	800cc4c <__multadd>
 800cfa2:	4606      	mov	r6, r0
 800cfa4:	10ad      	asrs	r5, r5, #2
 800cfa6:	d03d      	beq.n	800d024 <__pow5mult+0xa0>
 800cfa8:	69fc      	ldr	r4, [r7, #28]
 800cfaa:	b97c      	cbnz	r4, 800cfcc <__pow5mult+0x48>
 800cfac:	2010      	movs	r0, #16
 800cfae:	f7ff fd23 	bl	800c9f8 <malloc>
 800cfb2:	4602      	mov	r2, r0
 800cfb4:	61f8      	str	r0, [r7, #28]
 800cfb6:	b928      	cbnz	r0, 800cfc4 <__pow5mult+0x40>
 800cfb8:	4b1d      	ldr	r3, [pc, #116]	@ (800d030 <__pow5mult+0xac>)
 800cfba:	481e      	ldr	r0, [pc, #120]	@ (800d034 <__pow5mult+0xb0>)
 800cfbc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800cfc0:	f000 fcce 	bl	800d960 <__assert_func>
 800cfc4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cfc8:	6004      	str	r4, [r0, #0]
 800cfca:	60c4      	str	r4, [r0, #12]
 800cfcc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800cfd0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cfd4:	b94c      	cbnz	r4, 800cfea <__pow5mult+0x66>
 800cfd6:	f240 2171 	movw	r1, #625	@ 0x271
 800cfda:	4638      	mov	r0, r7
 800cfdc:	f7ff ff12 	bl	800ce04 <__i2b>
 800cfe0:	2300      	movs	r3, #0
 800cfe2:	f8c8 0008 	str.w	r0, [r8, #8]
 800cfe6:	4604      	mov	r4, r0
 800cfe8:	6003      	str	r3, [r0, #0]
 800cfea:	f04f 0900 	mov.w	r9, #0
 800cfee:	07eb      	lsls	r3, r5, #31
 800cff0:	d50a      	bpl.n	800d008 <__pow5mult+0x84>
 800cff2:	4631      	mov	r1, r6
 800cff4:	4622      	mov	r2, r4
 800cff6:	4638      	mov	r0, r7
 800cff8:	f7ff ff1a 	bl	800ce30 <__multiply>
 800cffc:	4631      	mov	r1, r6
 800cffe:	4680      	mov	r8, r0
 800d000:	4638      	mov	r0, r7
 800d002:	f7ff fe01 	bl	800cc08 <_Bfree>
 800d006:	4646      	mov	r6, r8
 800d008:	106d      	asrs	r5, r5, #1
 800d00a:	d00b      	beq.n	800d024 <__pow5mult+0xa0>
 800d00c:	6820      	ldr	r0, [r4, #0]
 800d00e:	b938      	cbnz	r0, 800d020 <__pow5mult+0x9c>
 800d010:	4622      	mov	r2, r4
 800d012:	4621      	mov	r1, r4
 800d014:	4638      	mov	r0, r7
 800d016:	f7ff ff0b 	bl	800ce30 <__multiply>
 800d01a:	6020      	str	r0, [r4, #0]
 800d01c:	f8c0 9000 	str.w	r9, [r0]
 800d020:	4604      	mov	r4, r0
 800d022:	e7e4      	b.n	800cfee <__pow5mult+0x6a>
 800d024:	4630      	mov	r0, r6
 800d026:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d02a:	bf00      	nop
 800d02c:	08016304 	.word	0x08016304
 800d030:	080161ca 	.word	0x080161ca
 800d034:	080162aa 	.word	0x080162aa

0800d038 <__lshift>:
 800d038:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d03c:	460c      	mov	r4, r1
 800d03e:	6849      	ldr	r1, [r1, #4]
 800d040:	6923      	ldr	r3, [r4, #16]
 800d042:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d046:	68a3      	ldr	r3, [r4, #8]
 800d048:	4607      	mov	r7, r0
 800d04a:	4691      	mov	r9, r2
 800d04c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d050:	f108 0601 	add.w	r6, r8, #1
 800d054:	42b3      	cmp	r3, r6
 800d056:	db0b      	blt.n	800d070 <__lshift+0x38>
 800d058:	4638      	mov	r0, r7
 800d05a:	f7ff fd95 	bl	800cb88 <_Balloc>
 800d05e:	4605      	mov	r5, r0
 800d060:	b948      	cbnz	r0, 800d076 <__lshift+0x3e>
 800d062:	4602      	mov	r2, r0
 800d064:	4b28      	ldr	r3, [pc, #160]	@ (800d108 <__lshift+0xd0>)
 800d066:	4829      	ldr	r0, [pc, #164]	@ (800d10c <__lshift+0xd4>)
 800d068:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d06c:	f000 fc78 	bl	800d960 <__assert_func>
 800d070:	3101      	adds	r1, #1
 800d072:	005b      	lsls	r3, r3, #1
 800d074:	e7ee      	b.n	800d054 <__lshift+0x1c>
 800d076:	2300      	movs	r3, #0
 800d078:	f100 0114 	add.w	r1, r0, #20
 800d07c:	f100 0210 	add.w	r2, r0, #16
 800d080:	4618      	mov	r0, r3
 800d082:	4553      	cmp	r3, sl
 800d084:	db33      	blt.n	800d0ee <__lshift+0xb6>
 800d086:	6920      	ldr	r0, [r4, #16]
 800d088:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d08c:	f104 0314 	add.w	r3, r4, #20
 800d090:	f019 091f 	ands.w	r9, r9, #31
 800d094:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d098:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d09c:	d02b      	beq.n	800d0f6 <__lshift+0xbe>
 800d09e:	f1c9 0e20 	rsb	lr, r9, #32
 800d0a2:	468a      	mov	sl, r1
 800d0a4:	2200      	movs	r2, #0
 800d0a6:	6818      	ldr	r0, [r3, #0]
 800d0a8:	fa00 f009 	lsl.w	r0, r0, r9
 800d0ac:	4310      	orrs	r0, r2
 800d0ae:	f84a 0b04 	str.w	r0, [sl], #4
 800d0b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d0b6:	459c      	cmp	ip, r3
 800d0b8:	fa22 f20e 	lsr.w	r2, r2, lr
 800d0bc:	d8f3      	bhi.n	800d0a6 <__lshift+0x6e>
 800d0be:	ebac 0304 	sub.w	r3, ip, r4
 800d0c2:	3b15      	subs	r3, #21
 800d0c4:	f023 0303 	bic.w	r3, r3, #3
 800d0c8:	3304      	adds	r3, #4
 800d0ca:	f104 0015 	add.w	r0, r4, #21
 800d0ce:	4584      	cmp	ip, r0
 800d0d0:	bf38      	it	cc
 800d0d2:	2304      	movcc	r3, #4
 800d0d4:	50ca      	str	r2, [r1, r3]
 800d0d6:	b10a      	cbz	r2, 800d0dc <__lshift+0xa4>
 800d0d8:	f108 0602 	add.w	r6, r8, #2
 800d0dc:	3e01      	subs	r6, #1
 800d0de:	4638      	mov	r0, r7
 800d0e0:	612e      	str	r6, [r5, #16]
 800d0e2:	4621      	mov	r1, r4
 800d0e4:	f7ff fd90 	bl	800cc08 <_Bfree>
 800d0e8:	4628      	mov	r0, r5
 800d0ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0ee:	f842 0f04 	str.w	r0, [r2, #4]!
 800d0f2:	3301      	adds	r3, #1
 800d0f4:	e7c5      	b.n	800d082 <__lshift+0x4a>
 800d0f6:	3904      	subs	r1, #4
 800d0f8:	f853 2b04 	ldr.w	r2, [r3], #4
 800d0fc:	f841 2f04 	str.w	r2, [r1, #4]!
 800d100:	459c      	cmp	ip, r3
 800d102:	d8f9      	bhi.n	800d0f8 <__lshift+0xc0>
 800d104:	e7ea      	b.n	800d0dc <__lshift+0xa4>
 800d106:	bf00      	nop
 800d108:	08016239 	.word	0x08016239
 800d10c:	080162aa 	.word	0x080162aa

0800d110 <__mcmp>:
 800d110:	690a      	ldr	r2, [r1, #16]
 800d112:	4603      	mov	r3, r0
 800d114:	6900      	ldr	r0, [r0, #16]
 800d116:	1a80      	subs	r0, r0, r2
 800d118:	b530      	push	{r4, r5, lr}
 800d11a:	d10e      	bne.n	800d13a <__mcmp+0x2a>
 800d11c:	3314      	adds	r3, #20
 800d11e:	3114      	adds	r1, #20
 800d120:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d124:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d128:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d12c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d130:	4295      	cmp	r5, r2
 800d132:	d003      	beq.n	800d13c <__mcmp+0x2c>
 800d134:	d205      	bcs.n	800d142 <__mcmp+0x32>
 800d136:	f04f 30ff 	mov.w	r0, #4294967295
 800d13a:	bd30      	pop	{r4, r5, pc}
 800d13c:	42a3      	cmp	r3, r4
 800d13e:	d3f3      	bcc.n	800d128 <__mcmp+0x18>
 800d140:	e7fb      	b.n	800d13a <__mcmp+0x2a>
 800d142:	2001      	movs	r0, #1
 800d144:	e7f9      	b.n	800d13a <__mcmp+0x2a>
	...

0800d148 <__mdiff>:
 800d148:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d14c:	4689      	mov	r9, r1
 800d14e:	4606      	mov	r6, r0
 800d150:	4611      	mov	r1, r2
 800d152:	4648      	mov	r0, r9
 800d154:	4614      	mov	r4, r2
 800d156:	f7ff ffdb 	bl	800d110 <__mcmp>
 800d15a:	1e05      	subs	r5, r0, #0
 800d15c:	d112      	bne.n	800d184 <__mdiff+0x3c>
 800d15e:	4629      	mov	r1, r5
 800d160:	4630      	mov	r0, r6
 800d162:	f7ff fd11 	bl	800cb88 <_Balloc>
 800d166:	4602      	mov	r2, r0
 800d168:	b928      	cbnz	r0, 800d176 <__mdiff+0x2e>
 800d16a:	4b3f      	ldr	r3, [pc, #252]	@ (800d268 <__mdiff+0x120>)
 800d16c:	f240 2137 	movw	r1, #567	@ 0x237
 800d170:	483e      	ldr	r0, [pc, #248]	@ (800d26c <__mdiff+0x124>)
 800d172:	f000 fbf5 	bl	800d960 <__assert_func>
 800d176:	2301      	movs	r3, #1
 800d178:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d17c:	4610      	mov	r0, r2
 800d17e:	b003      	add	sp, #12
 800d180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d184:	bfbc      	itt	lt
 800d186:	464b      	movlt	r3, r9
 800d188:	46a1      	movlt	r9, r4
 800d18a:	4630      	mov	r0, r6
 800d18c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d190:	bfba      	itte	lt
 800d192:	461c      	movlt	r4, r3
 800d194:	2501      	movlt	r5, #1
 800d196:	2500      	movge	r5, #0
 800d198:	f7ff fcf6 	bl	800cb88 <_Balloc>
 800d19c:	4602      	mov	r2, r0
 800d19e:	b918      	cbnz	r0, 800d1a8 <__mdiff+0x60>
 800d1a0:	4b31      	ldr	r3, [pc, #196]	@ (800d268 <__mdiff+0x120>)
 800d1a2:	f240 2145 	movw	r1, #581	@ 0x245
 800d1a6:	e7e3      	b.n	800d170 <__mdiff+0x28>
 800d1a8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d1ac:	6926      	ldr	r6, [r4, #16]
 800d1ae:	60c5      	str	r5, [r0, #12]
 800d1b0:	f109 0310 	add.w	r3, r9, #16
 800d1b4:	f109 0514 	add.w	r5, r9, #20
 800d1b8:	f104 0e14 	add.w	lr, r4, #20
 800d1bc:	f100 0b14 	add.w	fp, r0, #20
 800d1c0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d1c4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d1c8:	9301      	str	r3, [sp, #4]
 800d1ca:	46d9      	mov	r9, fp
 800d1cc:	f04f 0c00 	mov.w	ip, #0
 800d1d0:	9b01      	ldr	r3, [sp, #4]
 800d1d2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d1d6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d1da:	9301      	str	r3, [sp, #4]
 800d1dc:	fa1f f38a 	uxth.w	r3, sl
 800d1e0:	4619      	mov	r1, r3
 800d1e2:	b283      	uxth	r3, r0
 800d1e4:	1acb      	subs	r3, r1, r3
 800d1e6:	0c00      	lsrs	r0, r0, #16
 800d1e8:	4463      	add	r3, ip
 800d1ea:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d1ee:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d1f2:	b29b      	uxth	r3, r3
 800d1f4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d1f8:	4576      	cmp	r6, lr
 800d1fa:	f849 3b04 	str.w	r3, [r9], #4
 800d1fe:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d202:	d8e5      	bhi.n	800d1d0 <__mdiff+0x88>
 800d204:	1b33      	subs	r3, r6, r4
 800d206:	3b15      	subs	r3, #21
 800d208:	f023 0303 	bic.w	r3, r3, #3
 800d20c:	3415      	adds	r4, #21
 800d20e:	3304      	adds	r3, #4
 800d210:	42a6      	cmp	r6, r4
 800d212:	bf38      	it	cc
 800d214:	2304      	movcc	r3, #4
 800d216:	441d      	add	r5, r3
 800d218:	445b      	add	r3, fp
 800d21a:	461e      	mov	r6, r3
 800d21c:	462c      	mov	r4, r5
 800d21e:	4544      	cmp	r4, r8
 800d220:	d30e      	bcc.n	800d240 <__mdiff+0xf8>
 800d222:	f108 0103 	add.w	r1, r8, #3
 800d226:	1b49      	subs	r1, r1, r5
 800d228:	f021 0103 	bic.w	r1, r1, #3
 800d22c:	3d03      	subs	r5, #3
 800d22e:	45a8      	cmp	r8, r5
 800d230:	bf38      	it	cc
 800d232:	2100      	movcc	r1, #0
 800d234:	440b      	add	r3, r1
 800d236:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d23a:	b191      	cbz	r1, 800d262 <__mdiff+0x11a>
 800d23c:	6117      	str	r7, [r2, #16]
 800d23e:	e79d      	b.n	800d17c <__mdiff+0x34>
 800d240:	f854 1b04 	ldr.w	r1, [r4], #4
 800d244:	46e6      	mov	lr, ip
 800d246:	0c08      	lsrs	r0, r1, #16
 800d248:	fa1c fc81 	uxtah	ip, ip, r1
 800d24c:	4471      	add	r1, lr
 800d24e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d252:	b289      	uxth	r1, r1
 800d254:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d258:	f846 1b04 	str.w	r1, [r6], #4
 800d25c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d260:	e7dd      	b.n	800d21e <__mdiff+0xd6>
 800d262:	3f01      	subs	r7, #1
 800d264:	e7e7      	b.n	800d236 <__mdiff+0xee>
 800d266:	bf00      	nop
 800d268:	08016239 	.word	0x08016239
 800d26c:	080162aa 	.word	0x080162aa

0800d270 <__ulp>:
 800d270:	b082      	sub	sp, #8
 800d272:	ed8d 0b00 	vstr	d0, [sp]
 800d276:	9a01      	ldr	r2, [sp, #4]
 800d278:	4b0f      	ldr	r3, [pc, #60]	@ (800d2b8 <__ulp+0x48>)
 800d27a:	4013      	ands	r3, r2
 800d27c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800d280:	2b00      	cmp	r3, #0
 800d282:	dc08      	bgt.n	800d296 <__ulp+0x26>
 800d284:	425b      	negs	r3, r3
 800d286:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800d28a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d28e:	da04      	bge.n	800d29a <__ulp+0x2a>
 800d290:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d294:	4113      	asrs	r3, r2
 800d296:	2200      	movs	r2, #0
 800d298:	e008      	b.n	800d2ac <__ulp+0x3c>
 800d29a:	f1a2 0314 	sub.w	r3, r2, #20
 800d29e:	2b1e      	cmp	r3, #30
 800d2a0:	bfda      	itte	le
 800d2a2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800d2a6:	40da      	lsrle	r2, r3
 800d2a8:	2201      	movgt	r2, #1
 800d2aa:	2300      	movs	r3, #0
 800d2ac:	4619      	mov	r1, r3
 800d2ae:	4610      	mov	r0, r2
 800d2b0:	ec41 0b10 	vmov	d0, r0, r1
 800d2b4:	b002      	add	sp, #8
 800d2b6:	4770      	bx	lr
 800d2b8:	7ff00000 	.word	0x7ff00000

0800d2bc <__b2d>:
 800d2bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2c0:	6906      	ldr	r6, [r0, #16]
 800d2c2:	f100 0814 	add.w	r8, r0, #20
 800d2c6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800d2ca:	1f37      	subs	r7, r6, #4
 800d2cc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d2d0:	4610      	mov	r0, r2
 800d2d2:	f7ff fd4b 	bl	800cd6c <__hi0bits>
 800d2d6:	f1c0 0320 	rsb	r3, r0, #32
 800d2da:	280a      	cmp	r0, #10
 800d2dc:	600b      	str	r3, [r1, #0]
 800d2de:	491b      	ldr	r1, [pc, #108]	@ (800d34c <__b2d+0x90>)
 800d2e0:	dc15      	bgt.n	800d30e <__b2d+0x52>
 800d2e2:	f1c0 0c0b 	rsb	ip, r0, #11
 800d2e6:	fa22 f30c 	lsr.w	r3, r2, ip
 800d2ea:	45b8      	cmp	r8, r7
 800d2ec:	ea43 0501 	orr.w	r5, r3, r1
 800d2f0:	bf34      	ite	cc
 800d2f2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d2f6:	2300      	movcs	r3, #0
 800d2f8:	3015      	adds	r0, #21
 800d2fa:	fa02 f000 	lsl.w	r0, r2, r0
 800d2fe:	fa23 f30c 	lsr.w	r3, r3, ip
 800d302:	4303      	orrs	r3, r0
 800d304:	461c      	mov	r4, r3
 800d306:	ec45 4b10 	vmov	d0, r4, r5
 800d30a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d30e:	45b8      	cmp	r8, r7
 800d310:	bf3a      	itte	cc
 800d312:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d316:	f1a6 0708 	subcc.w	r7, r6, #8
 800d31a:	2300      	movcs	r3, #0
 800d31c:	380b      	subs	r0, #11
 800d31e:	d012      	beq.n	800d346 <__b2d+0x8a>
 800d320:	f1c0 0120 	rsb	r1, r0, #32
 800d324:	fa23 f401 	lsr.w	r4, r3, r1
 800d328:	4082      	lsls	r2, r0
 800d32a:	4322      	orrs	r2, r4
 800d32c:	4547      	cmp	r7, r8
 800d32e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800d332:	bf8c      	ite	hi
 800d334:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800d338:	2200      	movls	r2, #0
 800d33a:	4083      	lsls	r3, r0
 800d33c:	40ca      	lsrs	r2, r1
 800d33e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800d342:	4313      	orrs	r3, r2
 800d344:	e7de      	b.n	800d304 <__b2d+0x48>
 800d346:	ea42 0501 	orr.w	r5, r2, r1
 800d34a:	e7db      	b.n	800d304 <__b2d+0x48>
 800d34c:	3ff00000 	.word	0x3ff00000

0800d350 <__d2b>:
 800d350:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d354:	460f      	mov	r7, r1
 800d356:	2101      	movs	r1, #1
 800d358:	ec59 8b10 	vmov	r8, r9, d0
 800d35c:	4616      	mov	r6, r2
 800d35e:	f7ff fc13 	bl	800cb88 <_Balloc>
 800d362:	4604      	mov	r4, r0
 800d364:	b930      	cbnz	r0, 800d374 <__d2b+0x24>
 800d366:	4602      	mov	r2, r0
 800d368:	4b23      	ldr	r3, [pc, #140]	@ (800d3f8 <__d2b+0xa8>)
 800d36a:	4824      	ldr	r0, [pc, #144]	@ (800d3fc <__d2b+0xac>)
 800d36c:	f240 310f 	movw	r1, #783	@ 0x30f
 800d370:	f000 faf6 	bl	800d960 <__assert_func>
 800d374:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d378:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d37c:	b10d      	cbz	r5, 800d382 <__d2b+0x32>
 800d37e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d382:	9301      	str	r3, [sp, #4]
 800d384:	f1b8 0300 	subs.w	r3, r8, #0
 800d388:	d023      	beq.n	800d3d2 <__d2b+0x82>
 800d38a:	4668      	mov	r0, sp
 800d38c:	9300      	str	r3, [sp, #0]
 800d38e:	f7ff fd0c 	bl	800cdaa <__lo0bits>
 800d392:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d396:	b1d0      	cbz	r0, 800d3ce <__d2b+0x7e>
 800d398:	f1c0 0320 	rsb	r3, r0, #32
 800d39c:	fa02 f303 	lsl.w	r3, r2, r3
 800d3a0:	430b      	orrs	r3, r1
 800d3a2:	40c2      	lsrs	r2, r0
 800d3a4:	6163      	str	r3, [r4, #20]
 800d3a6:	9201      	str	r2, [sp, #4]
 800d3a8:	9b01      	ldr	r3, [sp, #4]
 800d3aa:	61a3      	str	r3, [r4, #24]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	bf0c      	ite	eq
 800d3b0:	2201      	moveq	r2, #1
 800d3b2:	2202      	movne	r2, #2
 800d3b4:	6122      	str	r2, [r4, #16]
 800d3b6:	b1a5      	cbz	r5, 800d3e2 <__d2b+0x92>
 800d3b8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d3bc:	4405      	add	r5, r0
 800d3be:	603d      	str	r5, [r7, #0]
 800d3c0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d3c4:	6030      	str	r0, [r6, #0]
 800d3c6:	4620      	mov	r0, r4
 800d3c8:	b003      	add	sp, #12
 800d3ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d3ce:	6161      	str	r1, [r4, #20]
 800d3d0:	e7ea      	b.n	800d3a8 <__d2b+0x58>
 800d3d2:	a801      	add	r0, sp, #4
 800d3d4:	f7ff fce9 	bl	800cdaa <__lo0bits>
 800d3d8:	9b01      	ldr	r3, [sp, #4]
 800d3da:	6163      	str	r3, [r4, #20]
 800d3dc:	3020      	adds	r0, #32
 800d3de:	2201      	movs	r2, #1
 800d3e0:	e7e8      	b.n	800d3b4 <__d2b+0x64>
 800d3e2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d3e6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d3ea:	6038      	str	r0, [r7, #0]
 800d3ec:	6918      	ldr	r0, [r3, #16]
 800d3ee:	f7ff fcbd 	bl	800cd6c <__hi0bits>
 800d3f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d3f6:	e7e5      	b.n	800d3c4 <__d2b+0x74>
 800d3f8:	08016239 	.word	0x08016239
 800d3fc:	080162aa 	.word	0x080162aa

0800d400 <__ratio>:
 800d400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d404:	b085      	sub	sp, #20
 800d406:	e9cd 1000 	strd	r1, r0, [sp]
 800d40a:	a902      	add	r1, sp, #8
 800d40c:	f7ff ff56 	bl	800d2bc <__b2d>
 800d410:	9800      	ldr	r0, [sp, #0]
 800d412:	a903      	add	r1, sp, #12
 800d414:	ec55 4b10 	vmov	r4, r5, d0
 800d418:	f7ff ff50 	bl	800d2bc <__b2d>
 800d41c:	9b01      	ldr	r3, [sp, #4]
 800d41e:	6919      	ldr	r1, [r3, #16]
 800d420:	9b00      	ldr	r3, [sp, #0]
 800d422:	691b      	ldr	r3, [r3, #16]
 800d424:	1ac9      	subs	r1, r1, r3
 800d426:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800d42a:	1a9b      	subs	r3, r3, r2
 800d42c:	ec5b ab10 	vmov	sl, fp, d0
 800d430:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800d434:	2b00      	cmp	r3, #0
 800d436:	bfce      	itee	gt
 800d438:	462a      	movgt	r2, r5
 800d43a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d43e:	465a      	movle	r2, fp
 800d440:	462f      	mov	r7, r5
 800d442:	46d9      	mov	r9, fp
 800d444:	bfcc      	ite	gt
 800d446:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d44a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800d44e:	464b      	mov	r3, r9
 800d450:	4652      	mov	r2, sl
 800d452:	4620      	mov	r0, r4
 800d454:	4639      	mov	r1, r7
 800d456:	f7f3 fa31 	bl	80008bc <__aeabi_ddiv>
 800d45a:	ec41 0b10 	vmov	d0, r0, r1
 800d45e:	b005      	add	sp, #20
 800d460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d464 <__copybits>:
 800d464:	3901      	subs	r1, #1
 800d466:	b570      	push	{r4, r5, r6, lr}
 800d468:	1149      	asrs	r1, r1, #5
 800d46a:	6914      	ldr	r4, [r2, #16]
 800d46c:	3101      	adds	r1, #1
 800d46e:	f102 0314 	add.w	r3, r2, #20
 800d472:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d476:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d47a:	1f05      	subs	r5, r0, #4
 800d47c:	42a3      	cmp	r3, r4
 800d47e:	d30c      	bcc.n	800d49a <__copybits+0x36>
 800d480:	1aa3      	subs	r3, r4, r2
 800d482:	3b11      	subs	r3, #17
 800d484:	f023 0303 	bic.w	r3, r3, #3
 800d488:	3211      	adds	r2, #17
 800d48a:	42a2      	cmp	r2, r4
 800d48c:	bf88      	it	hi
 800d48e:	2300      	movhi	r3, #0
 800d490:	4418      	add	r0, r3
 800d492:	2300      	movs	r3, #0
 800d494:	4288      	cmp	r0, r1
 800d496:	d305      	bcc.n	800d4a4 <__copybits+0x40>
 800d498:	bd70      	pop	{r4, r5, r6, pc}
 800d49a:	f853 6b04 	ldr.w	r6, [r3], #4
 800d49e:	f845 6f04 	str.w	r6, [r5, #4]!
 800d4a2:	e7eb      	b.n	800d47c <__copybits+0x18>
 800d4a4:	f840 3b04 	str.w	r3, [r0], #4
 800d4a8:	e7f4      	b.n	800d494 <__copybits+0x30>

0800d4aa <__any_on>:
 800d4aa:	f100 0214 	add.w	r2, r0, #20
 800d4ae:	6900      	ldr	r0, [r0, #16]
 800d4b0:	114b      	asrs	r3, r1, #5
 800d4b2:	4298      	cmp	r0, r3
 800d4b4:	b510      	push	{r4, lr}
 800d4b6:	db11      	blt.n	800d4dc <__any_on+0x32>
 800d4b8:	dd0a      	ble.n	800d4d0 <__any_on+0x26>
 800d4ba:	f011 011f 	ands.w	r1, r1, #31
 800d4be:	d007      	beq.n	800d4d0 <__any_on+0x26>
 800d4c0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d4c4:	fa24 f001 	lsr.w	r0, r4, r1
 800d4c8:	fa00 f101 	lsl.w	r1, r0, r1
 800d4cc:	428c      	cmp	r4, r1
 800d4ce:	d10b      	bne.n	800d4e8 <__any_on+0x3e>
 800d4d0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d4d4:	4293      	cmp	r3, r2
 800d4d6:	d803      	bhi.n	800d4e0 <__any_on+0x36>
 800d4d8:	2000      	movs	r0, #0
 800d4da:	bd10      	pop	{r4, pc}
 800d4dc:	4603      	mov	r3, r0
 800d4de:	e7f7      	b.n	800d4d0 <__any_on+0x26>
 800d4e0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d4e4:	2900      	cmp	r1, #0
 800d4e6:	d0f5      	beq.n	800d4d4 <__any_on+0x2a>
 800d4e8:	2001      	movs	r0, #1
 800d4ea:	e7f6      	b.n	800d4da <__any_on+0x30>

0800d4ec <__ascii_wctomb>:
 800d4ec:	4603      	mov	r3, r0
 800d4ee:	4608      	mov	r0, r1
 800d4f0:	b141      	cbz	r1, 800d504 <__ascii_wctomb+0x18>
 800d4f2:	2aff      	cmp	r2, #255	@ 0xff
 800d4f4:	d904      	bls.n	800d500 <__ascii_wctomb+0x14>
 800d4f6:	228a      	movs	r2, #138	@ 0x8a
 800d4f8:	601a      	str	r2, [r3, #0]
 800d4fa:	f04f 30ff 	mov.w	r0, #4294967295
 800d4fe:	4770      	bx	lr
 800d500:	700a      	strb	r2, [r1, #0]
 800d502:	2001      	movs	r0, #1
 800d504:	4770      	bx	lr

0800d506 <__ssputs_r>:
 800d506:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d50a:	688e      	ldr	r6, [r1, #8]
 800d50c:	461f      	mov	r7, r3
 800d50e:	42be      	cmp	r6, r7
 800d510:	680b      	ldr	r3, [r1, #0]
 800d512:	4682      	mov	sl, r0
 800d514:	460c      	mov	r4, r1
 800d516:	4690      	mov	r8, r2
 800d518:	d82d      	bhi.n	800d576 <__ssputs_r+0x70>
 800d51a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d51e:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d522:	d026      	beq.n	800d572 <__ssputs_r+0x6c>
 800d524:	6965      	ldr	r5, [r4, #20]
 800d526:	6909      	ldr	r1, [r1, #16]
 800d528:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d52c:	eba3 0901 	sub.w	r9, r3, r1
 800d530:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d534:	1c7b      	adds	r3, r7, #1
 800d536:	444b      	add	r3, r9
 800d538:	106d      	asrs	r5, r5, #1
 800d53a:	429d      	cmp	r5, r3
 800d53c:	bf38      	it	cc
 800d53e:	461d      	movcc	r5, r3
 800d540:	0553      	lsls	r3, r2, #21
 800d542:	d527      	bpl.n	800d594 <__ssputs_r+0x8e>
 800d544:	4629      	mov	r1, r5
 800d546:	f7ff fa81 	bl	800ca4c <_malloc_r>
 800d54a:	4606      	mov	r6, r0
 800d54c:	b360      	cbz	r0, 800d5a8 <__ssputs_r+0xa2>
 800d54e:	6921      	ldr	r1, [r4, #16]
 800d550:	464a      	mov	r2, r9
 800d552:	f7fe f860 	bl	800b616 <memcpy>
 800d556:	89a3      	ldrh	r3, [r4, #12]
 800d558:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d55c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d560:	81a3      	strh	r3, [r4, #12]
 800d562:	6126      	str	r6, [r4, #16]
 800d564:	6165      	str	r5, [r4, #20]
 800d566:	444e      	add	r6, r9
 800d568:	eba5 0509 	sub.w	r5, r5, r9
 800d56c:	6026      	str	r6, [r4, #0]
 800d56e:	60a5      	str	r5, [r4, #8]
 800d570:	463e      	mov	r6, r7
 800d572:	42be      	cmp	r6, r7
 800d574:	d900      	bls.n	800d578 <__ssputs_r+0x72>
 800d576:	463e      	mov	r6, r7
 800d578:	6820      	ldr	r0, [r4, #0]
 800d57a:	4632      	mov	r2, r6
 800d57c:	4641      	mov	r1, r8
 800d57e:	f000 f9c5 	bl	800d90c <memmove>
 800d582:	68a3      	ldr	r3, [r4, #8]
 800d584:	1b9b      	subs	r3, r3, r6
 800d586:	60a3      	str	r3, [r4, #8]
 800d588:	6823      	ldr	r3, [r4, #0]
 800d58a:	4433      	add	r3, r6
 800d58c:	6023      	str	r3, [r4, #0]
 800d58e:	2000      	movs	r0, #0
 800d590:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d594:	462a      	mov	r2, r5
 800d596:	f000 fa15 	bl	800d9c4 <_realloc_r>
 800d59a:	4606      	mov	r6, r0
 800d59c:	2800      	cmp	r0, #0
 800d59e:	d1e0      	bne.n	800d562 <__ssputs_r+0x5c>
 800d5a0:	6921      	ldr	r1, [r4, #16]
 800d5a2:	4650      	mov	r0, sl
 800d5a4:	f7fe fea4 	bl	800c2f0 <_free_r>
 800d5a8:	230c      	movs	r3, #12
 800d5aa:	f8ca 3000 	str.w	r3, [sl]
 800d5ae:	89a3      	ldrh	r3, [r4, #12]
 800d5b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d5b4:	81a3      	strh	r3, [r4, #12]
 800d5b6:	f04f 30ff 	mov.w	r0, #4294967295
 800d5ba:	e7e9      	b.n	800d590 <__ssputs_r+0x8a>

0800d5bc <_svfiprintf_r>:
 800d5bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5c0:	4698      	mov	r8, r3
 800d5c2:	898b      	ldrh	r3, [r1, #12]
 800d5c4:	061b      	lsls	r3, r3, #24
 800d5c6:	b09d      	sub	sp, #116	@ 0x74
 800d5c8:	4607      	mov	r7, r0
 800d5ca:	460d      	mov	r5, r1
 800d5cc:	4614      	mov	r4, r2
 800d5ce:	d510      	bpl.n	800d5f2 <_svfiprintf_r+0x36>
 800d5d0:	690b      	ldr	r3, [r1, #16]
 800d5d2:	b973      	cbnz	r3, 800d5f2 <_svfiprintf_r+0x36>
 800d5d4:	2140      	movs	r1, #64	@ 0x40
 800d5d6:	f7ff fa39 	bl	800ca4c <_malloc_r>
 800d5da:	6028      	str	r0, [r5, #0]
 800d5dc:	6128      	str	r0, [r5, #16]
 800d5de:	b930      	cbnz	r0, 800d5ee <_svfiprintf_r+0x32>
 800d5e0:	230c      	movs	r3, #12
 800d5e2:	603b      	str	r3, [r7, #0]
 800d5e4:	f04f 30ff 	mov.w	r0, #4294967295
 800d5e8:	b01d      	add	sp, #116	@ 0x74
 800d5ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5ee:	2340      	movs	r3, #64	@ 0x40
 800d5f0:	616b      	str	r3, [r5, #20]
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	9309      	str	r3, [sp, #36]	@ 0x24
 800d5f6:	2320      	movs	r3, #32
 800d5f8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d5fc:	f8cd 800c 	str.w	r8, [sp, #12]
 800d600:	2330      	movs	r3, #48	@ 0x30
 800d602:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d7a0 <_svfiprintf_r+0x1e4>
 800d606:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d60a:	f04f 0901 	mov.w	r9, #1
 800d60e:	4623      	mov	r3, r4
 800d610:	469a      	mov	sl, r3
 800d612:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d616:	b10a      	cbz	r2, 800d61c <_svfiprintf_r+0x60>
 800d618:	2a25      	cmp	r2, #37	@ 0x25
 800d61a:	d1f9      	bne.n	800d610 <_svfiprintf_r+0x54>
 800d61c:	ebba 0b04 	subs.w	fp, sl, r4
 800d620:	d00b      	beq.n	800d63a <_svfiprintf_r+0x7e>
 800d622:	465b      	mov	r3, fp
 800d624:	4622      	mov	r2, r4
 800d626:	4629      	mov	r1, r5
 800d628:	4638      	mov	r0, r7
 800d62a:	f7ff ff6c 	bl	800d506 <__ssputs_r>
 800d62e:	3001      	adds	r0, #1
 800d630:	f000 80a7 	beq.w	800d782 <_svfiprintf_r+0x1c6>
 800d634:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d636:	445a      	add	r2, fp
 800d638:	9209      	str	r2, [sp, #36]	@ 0x24
 800d63a:	f89a 3000 	ldrb.w	r3, [sl]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	f000 809f 	beq.w	800d782 <_svfiprintf_r+0x1c6>
 800d644:	2300      	movs	r3, #0
 800d646:	f04f 32ff 	mov.w	r2, #4294967295
 800d64a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d64e:	f10a 0a01 	add.w	sl, sl, #1
 800d652:	9304      	str	r3, [sp, #16]
 800d654:	9307      	str	r3, [sp, #28]
 800d656:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d65a:	931a      	str	r3, [sp, #104]	@ 0x68
 800d65c:	4654      	mov	r4, sl
 800d65e:	2205      	movs	r2, #5
 800d660:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d664:	484e      	ldr	r0, [pc, #312]	@ (800d7a0 <_svfiprintf_r+0x1e4>)
 800d666:	f7f2 fdeb 	bl	8000240 <memchr>
 800d66a:	9a04      	ldr	r2, [sp, #16]
 800d66c:	b9d8      	cbnz	r0, 800d6a6 <_svfiprintf_r+0xea>
 800d66e:	06d0      	lsls	r0, r2, #27
 800d670:	bf44      	itt	mi
 800d672:	2320      	movmi	r3, #32
 800d674:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d678:	0711      	lsls	r1, r2, #28
 800d67a:	bf44      	itt	mi
 800d67c:	232b      	movmi	r3, #43	@ 0x2b
 800d67e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d682:	f89a 3000 	ldrb.w	r3, [sl]
 800d686:	2b2a      	cmp	r3, #42	@ 0x2a
 800d688:	d015      	beq.n	800d6b6 <_svfiprintf_r+0xfa>
 800d68a:	9a07      	ldr	r2, [sp, #28]
 800d68c:	4654      	mov	r4, sl
 800d68e:	2000      	movs	r0, #0
 800d690:	f04f 0c0a 	mov.w	ip, #10
 800d694:	4621      	mov	r1, r4
 800d696:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d69a:	3b30      	subs	r3, #48	@ 0x30
 800d69c:	2b09      	cmp	r3, #9
 800d69e:	d94b      	bls.n	800d738 <_svfiprintf_r+0x17c>
 800d6a0:	b1b0      	cbz	r0, 800d6d0 <_svfiprintf_r+0x114>
 800d6a2:	9207      	str	r2, [sp, #28]
 800d6a4:	e014      	b.n	800d6d0 <_svfiprintf_r+0x114>
 800d6a6:	eba0 0308 	sub.w	r3, r0, r8
 800d6aa:	fa09 f303 	lsl.w	r3, r9, r3
 800d6ae:	4313      	orrs	r3, r2
 800d6b0:	9304      	str	r3, [sp, #16]
 800d6b2:	46a2      	mov	sl, r4
 800d6b4:	e7d2      	b.n	800d65c <_svfiprintf_r+0xa0>
 800d6b6:	9b03      	ldr	r3, [sp, #12]
 800d6b8:	1d19      	adds	r1, r3, #4
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	9103      	str	r1, [sp, #12]
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	bfbb      	ittet	lt
 800d6c2:	425b      	neglt	r3, r3
 800d6c4:	f042 0202 	orrlt.w	r2, r2, #2
 800d6c8:	9307      	strge	r3, [sp, #28]
 800d6ca:	9307      	strlt	r3, [sp, #28]
 800d6cc:	bfb8      	it	lt
 800d6ce:	9204      	strlt	r2, [sp, #16]
 800d6d0:	7823      	ldrb	r3, [r4, #0]
 800d6d2:	2b2e      	cmp	r3, #46	@ 0x2e
 800d6d4:	d10a      	bne.n	800d6ec <_svfiprintf_r+0x130>
 800d6d6:	7863      	ldrb	r3, [r4, #1]
 800d6d8:	2b2a      	cmp	r3, #42	@ 0x2a
 800d6da:	d132      	bne.n	800d742 <_svfiprintf_r+0x186>
 800d6dc:	9b03      	ldr	r3, [sp, #12]
 800d6de:	1d1a      	adds	r2, r3, #4
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	9203      	str	r2, [sp, #12]
 800d6e4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d6e8:	3402      	adds	r4, #2
 800d6ea:	9305      	str	r3, [sp, #20]
 800d6ec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d7b0 <_svfiprintf_r+0x1f4>
 800d6f0:	7821      	ldrb	r1, [r4, #0]
 800d6f2:	2203      	movs	r2, #3
 800d6f4:	4650      	mov	r0, sl
 800d6f6:	f7f2 fda3 	bl	8000240 <memchr>
 800d6fa:	b138      	cbz	r0, 800d70c <_svfiprintf_r+0x150>
 800d6fc:	9b04      	ldr	r3, [sp, #16]
 800d6fe:	eba0 000a 	sub.w	r0, r0, sl
 800d702:	2240      	movs	r2, #64	@ 0x40
 800d704:	4082      	lsls	r2, r0
 800d706:	4313      	orrs	r3, r2
 800d708:	3401      	adds	r4, #1
 800d70a:	9304      	str	r3, [sp, #16]
 800d70c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d710:	4824      	ldr	r0, [pc, #144]	@ (800d7a4 <_svfiprintf_r+0x1e8>)
 800d712:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d716:	2206      	movs	r2, #6
 800d718:	f7f2 fd92 	bl	8000240 <memchr>
 800d71c:	2800      	cmp	r0, #0
 800d71e:	d036      	beq.n	800d78e <_svfiprintf_r+0x1d2>
 800d720:	4b21      	ldr	r3, [pc, #132]	@ (800d7a8 <_svfiprintf_r+0x1ec>)
 800d722:	bb1b      	cbnz	r3, 800d76c <_svfiprintf_r+0x1b0>
 800d724:	9b03      	ldr	r3, [sp, #12]
 800d726:	3307      	adds	r3, #7
 800d728:	f023 0307 	bic.w	r3, r3, #7
 800d72c:	3308      	adds	r3, #8
 800d72e:	9303      	str	r3, [sp, #12]
 800d730:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d732:	4433      	add	r3, r6
 800d734:	9309      	str	r3, [sp, #36]	@ 0x24
 800d736:	e76a      	b.n	800d60e <_svfiprintf_r+0x52>
 800d738:	fb0c 3202 	mla	r2, ip, r2, r3
 800d73c:	460c      	mov	r4, r1
 800d73e:	2001      	movs	r0, #1
 800d740:	e7a8      	b.n	800d694 <_svfiprintf_r+0xd8>
 800d742:	2300      	movs	r3, #0
 800d744:	3401      	adds	r4, #1
 800d746:	9305      	str	r3, [sp, #20]
 800d748:	4619      	mov	r1, r3
 800d74a:	f04f 0c0a 	mov.w	ip, #10
 800d74e:	4620      	mov	r0, r4
 800d750:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d754:	3a30      	subs	r2, #48	@ 0x30
 800d756:	2a09      	cmp	r2, #9
 800d758:	d903      	bls.n	800d762 <_svfiprintf_r+0x1a6>
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d0c6      	beq.n	800d6ec <_svfiprintf_r+0x130>
 800d75e:	9105      	str	r1, [sp, #20]
 800d760:	e7c4      	b.n	800d6ec <_svfiprintf_r+0x130>
 800d762:	fb0c 2101 	mla	r1, ip, r1, r2
 800d766:	4604      	mov	r4, r0
 800d768:	2301      	movs	r3, #1
 800d76a:	e7f0      	b.n	800d74e <_svfiprintf_r+0x192>
 800d76c:	ab03      	add	r3, sp, #12
 800d76e:	9300      	str	r3, [sp, #0]
 800d770:	462a      	mov	r2, r5
 800d772:	4b0e      	ldr	r3, [pc, #56]	@ (800d7ac <_svfiprintf_r+0x1f0>)
 800d774:	a904      	add	r1, sp, #16
 800d776:	4638      	mov	r0, r7
 800d778:	f7fd f992 	bl	800aaa0 <_printf_float>
 800d77c:	1c42      	adds	r2, r0, #1
 800d77e:	4606      	mov	r6, r0
 800d780:	d1d6      	bne.n	800d730 <_svfiprintf_r+0x174>
 800d782:	89ab      	ldrh	r3, [r5, #12]
 800d784:	065b      	lsls	r3, r3, #25
 800d786:	f53f af2d 	bmi.w	800d5e4 <_svfiprintf_r+0x28>
 800d78a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d78c:	e72c      	b.n	800d5e8 <_svfiprintf_r+0x2c>
 800d78e:	ab03      	add	r3, sp, #12
 800d790:	9300      	str	r3, [sp, #0]
 800d792:	462a      	mov	r2, r5
 800d794:	4b05      	ldr	r3, [pc, #20]	@ (800d7ac <_svfiprintf_r+0x1f0>)
 800d796:	a904      	add	r1, sp, #16
 800d798:	4638      	mov	r0, r7
 800d79a:	f7fd fc19 	bl	800afd0 <_printf_i>
 800d79e:	e7ed      	b.n	800d77c <_svfiprintf_r+0x1c0>
 800d7a0:	08016400 	.word	0x08016400
 800d7a4:	0801640a 	.word	0x0801640a
 800d7a8:	0800aaa1 	.word	0x0800aaa1
 800d7ac:	0800d507 	.word	0x0800d507
 800d7b0:	08016406 	.word	0x08016406

0800d7b4 <__sflush_r>:
 800d7b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d7b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7bc:	0716      	lsls	r6, r2, #28
 800d7be:	4605      	mov	r5, r0
 800d7c0:	460c      	mov	r4, r1
 800d7c2:	d454      	bmi.n	800d86e <__sflush_r+0xba>
 800d7c4:	684b      	ldr	r3, [r1, #4]
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	dc02      	bgt.n	800d7d0 <__sflush_r+0x1c>
 800d7ca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	dd48      	ble.n	800d862 <__sflush_r+0xae>
 800d7d0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d7d2:	2e00      	cmp	r6, #0
 800d7d4:	d045      	beq.n	800d862 <__sflush_r+0xae>
 800d7d6:	2300      	movs	r3, #0
 800d7d8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d7dc:	682f      	ldr	r7, [r5, #0]
 800d7de:	6a21      	ldr	r1, [r4, #32]
 800d7e0:	602b      	str	r3, [r5, #0]
 800d7e2:	d030      	beq.n	800d846 <__sflush_r+0x92>
 800d7e4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d7e6:	89a3      	ldrh	r3, [r4, #12]
 800d7e8:	0759      	lsls	r1, r3, #29
 800d7ea:	d505      	bpl.n	800d7f8 <__sflush_r+0x44>
 800d7ec:	6863      	ldr	r3, [r4, #4]
 800d7ee:	1ad2      	subs	r2, r2, r3
 800d7f0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d7f2:	b10b      	cbz	r3, 800d7f8 <__sflush_r+0x44>
 800d7f4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d7f6:	1ad2      	subs	r2, r2, r3
 800d7f8:	2300      	movs	r3, #0
 800d7fa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d7fc:	6a21      	ldr	r1, [r4, #32]
 800d7fe:	4628      	mov	r0, r5
 800d800:	47b0      	blx	r6
 800d802:	1c43      	adds	r3, r0, #1
 800d804:	89a3      	ldrh	r3, [r4, #12]
 800d806:	d106      	bne.n	800d816 <__sflush_r+0x62>
 800d808:	6829      	ldr	r1, [r5, #0]
 800d80a:	291d      	cmp	r1, #29
 800d80c:	d82b      	bhi.n	800d866 <__sflush_r+0xb2>
 800d80e:	4a2a      	ldr	r2, [pc, #168]	@ (800d8b8 <__sflush_r+0x104>)
 800d810:	410a      	asrs	r2, r1
 800d812:	07d6      	lsls	r6, r2, #31
 800d814:	d427      	bmi.n	800d866 <__sflush_r+0xb2>
 800d816:	2200      	movs	r2, #0
 800d818:	6062      	str	r2, [r4, #4]
 800d81a:	04d9      	lsls	r1, r3, #19
 800d81c:	6922      	ldr	r2, [r4, #16]
 800d81e:	6022      	str	r2, [r4, #0]
 800d820:	d504      	bpl.n	800d82c <__sflush_r+0x78>
 800d822:	1c42      	adds	r2, r0, #1
 800d824:	d101      	bne.n	800d82a <__sflush_r+0x76>
 800d826:	682b      	ldr	r3, [r5, #0]
 800d828:	b903      	cbnz	r3, 800d82c <__sflush_r+0x78>
 800d82a:	6560      	str	r0, [r4, #84]	@ 0x54
 800d82c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d82e:	602f      	str	r7, [r5, #0]
 800d830:	b1b9      	cbz	r1, 800d862 <__sflush_r+0xae>
 800d832:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d836:	4299      	cmp	r1, r3
 800d838:	d002      	beq.n	800d840 <__sflush_r+0x8c>
 800d83a:	4628      	mov	r0, r5
 800d83c:	f7fe fd58 	bl	800c2f0 <_free_r>
 800d840:	2300      	movs	r3, #0
 800d842:	6363      	str	r3, [r4, #52]	@ 0x34
 800d844:	e00d      	b.n	800d862 <__sflush_r+0xae>
 800d846:	2301      	movs	r3, #1
 800d848:	4628      	mov	r0, r5
 800d84a:	47b0      	blx	r6
 800d84c:	4602      	mov	r2, r0
 800d84e:	1c50      	adds	r0, r2, #1
 800d850:	d1c9      	bne.n	800d7e6 <__sflush_r+0x32>
 800d852:	682b      	ldr	r3, [r5, #0]
 800d854:	2b00      	cmp	r3, #0
 800d856:	d0c6      	beq.n	800d7e6 <__sflush_r+0x32>
 800d858:	2b1d      	cmp	r3, #29
 800d85a:	d001      	beq.n	800d860 <__sflush_r+0xac>
 800d85c:	2b16      	cmp	r3, #22
 800d85e:	d11e      	bne.n	800d89e <__sflush_r+0xea>
 800d860:	602f      	str	r7, [r5, #0]
 800d862:	2000      	movs	r0, #0
 800d864:	e022      	b.n	800d8ac <__sflush_r+0xf8>
 800d866:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d86a:	b21b      	sxth	r3, r3
 800d86c:	e01b      	b.n	800d8a6 <__sflush_r+0xf2>
 800d86e:	690f      	ldr	r7, [r1, #16]
 800d870:	2f00      	cmp	r7, #0
 800d872:	d0f6      	beq.n	800d862 <__sflush_r+0xae>
 800d874:	0793      	lsls	r3, r2, #30
 800d876:	680e      	ldr	r6, [r1, #0]
 800d878:	bf08      	it	eq
 800d87a:	694b      	ldreq	r3, [r1, #20]
 800d87c:	600f      	str	r7, [r1, #0]
 800d87e:	bf18      	it	ne
 800d880:	2300      	movne	r3, #0
 800d882:	eba6 0807 	sub.w	r8, r6, r7
 800d886:	608b      	str	r3, [r1, #8]
 800d888:	f1b8 0f00 	cmp.w	r8, #0
 800d88c:	dde9      	ble.n	800d862 <__sflush_r+0xae>
 800d88e:	6a21      	ldr	r1, [r4, #32]
 800d890:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d892:	4643      	mov	r3, r8
 800d894:	463a      	mov	r2, r7
 800d896:	4628      	mov	r0, r5
 800d898:	47b0      	blx	r6
 800d89a:	2800      	cmp	r0, #0
 800d89c:	dc08      	bgt.n	800d8b0 <__sflush_r+0xfc>
 800d89e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d8a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d8a6:	81a3      	strh	r3, [r4, #12]
 800d8a8:	f04f 30ff 	mov.w	r0, #4294967295
 800d8ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8b0:	4407      	add	r7, r0
 800d8b2:	eba8 0800 	sub.w	r8, r8, r0
 800d8b6:	e7e7      	b.n	800d888 <__sflush_r+0xd4>
 800d8b8:	dfbffffe 	.word	0xdfbffffe

0800d8bc <_fflush_r>:
 800d8bc:	b538      	push	{r3, r4, r5, lr}
 800d8be:	690b      	ldr	r3, [r1, #16]
 800d8c0:	4605      	mov	r5, r0
 800d8c2:	460c      	mov	r4, r1
 800d8c4:	b913      	cbnz	r3, 800d8cc <_fflush_r+0x10>
 800d8c6:	2500      	movs	r5, #0
 800d8c8:	4628      	mov	r0, r5
 800d8ca:	bd38      	pop	{r3, r4, r5, pc}
 800d8cc:	b118      	cbz	r0, 800d8d6 <_fflush_r+0x1a>
 800d8ce:	6a03      	ldr	r3, [r0, #32]
 800d8d0:	b90b      	cbnz	r3, 800d8d6 <_fflush_r+0x1a>
 800d8d2:	f7fd fd29 	bl	800b328 <__sinit>
 800d8d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d0f3      	beq.n	800d8c6 <_fflush_r+0xa>
 800d8de:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d8e0:	07d0      	lsls	r0, r2, #31
 800d8e2:	d404      	bmi.n	800d8ee <_fflush_r+0x32>
 800d8e4:	0599      	lsls	r1, r3, #22
 800d8e6:	d402      	bmi.n	800d8ee <_fflush_r+0x32>
 800d8e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d8ea:	f7fd fe8a 	bl	800b602 <__retarget_lock_acquire_recursive>
 800d8ee:	4628      	mov	r0, r5
 800d8f0:	4621      	mov	r1, r4
 800d8f2:	f7ff ff5f 	bl	800d7b4 <__sflush_r>
 800d8f6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d8f8:	07da      	lsls	r2, r3, #31
 800d8fa:	4605      	mov	r5, r0
 800d8fc:	d4e4      	bmi.n	800d8c8 <_fflush_r+0xc>
 800d8fe:	89a3      	ldrh	r3, [r4, #12]
 800d900:	059b      	lsls	r3, r3, #22
 800d902:	d4e1      	bmi.n	800d8c8 <_fflush_r+0xc>
 800d904:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d906:	f7fd fe7d 	bl	800b604 <__retarget_lock_release_recursive>
 800d90a:	e7dd      	b.n	800d8c8 <_fflush_r+0xc>

0800d90c <memmove>:
 800d90c:	4288      	cmp	r0, r1
 800d90e:	b510      	push	{r4, lr}
 800d910:	eb01 0402 	add.w	r4, r1, r2
 800d914:	d902      	bls.n	800d91c <memmove+0x10>
 800d916:	4284      	cmp	r4, r0
 800d918:	4623      	mov	r3, r4
 800d91a:	d807      	bhi.n	800d92c <memmove+0x20>
 800d91c:	1e43      	subs	r3, r0, #1
 800d91e:	42a1      	cmp	r1, r4
 800d920:	d008      	beq.n	800d934 <memmove+0x28>
 800d922:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d926:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d92a:	e7f8      	b.n	800d91e <memmove+0x12>
 800d92c:	4402      	add	r2, r0
 800d92e:	4601      	mov	r1, r0
 800d930:	428a      	cmp	r2, r1
 800d932:	d100      	bne.n	800d936 <memmove+0x2a>
 800d934:	bd10      	pop	{r4, pc}
 800d936:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d93a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d93e:	e7f7      	b.n	800d930 <memmove+0x24>

0800d940 <_sbrk_r>:
 800d940:	b538      	push	{r3, r4, r5, lr}
 800d942:	4d06      	ldr	r5, [pc, #24]	@ (800d95c <_sbrk_r+0x1c>)
 800d944:	2300      	movs	r3, #0
 800d946:	4604      	mov	r4, r0
 800d948:	4608      	mov	r0, r1
 800d94a:	602b      	str	r3, [r5, #0]
 800d94c:	f7f6 fdee 	bl	800452c <_sbrk>
 800d950:	1c43      	adds	r3, r0, #1
 800d952:	d102      	bne.n	800d95a <_sbrk_r+0x1a>
 800d954:	682b      	ldr	r3, [r5, #0]
 800d956:	b103      	cbz	r3, 800d95a <_sbrk_r+0x1a>
 800d958:	6023      	str	r3, [r4, #0]
 800d95a:	bd38      	pop	{r3, r4, r5, pc}
 800d95c:	20006c00 	.word	0x20006c00

0800d960 <__assert_func>:
 800d960:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d962:	4614      	mov	r4, r2
 800d964:	461a      	mov	r2, r3
 800d966:	4b09      	ldr	r3, [pc, #36]	@ (800d98c <__assert_func+0x2c>)
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	4605      	mov	r5, r0
 800d96c:	68d8      	ldr	r0, [r3, #12]
 800d96e:	b954      	cbnz	r4, 800d986 <__assert_func+0x26>
 800d970:	4b07      	ldr	r3, [pc, #28]	@ (800d990 <__assert_func+0x30>)
 800d972:	461c      	mov	r4, r3
 800d974:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d978:	9100      	str	r1, [sp, #0]
 800d97a:	462b      	mov	r3, r5
 800d97c:	4905      	ldr	r1, [pc, #20]	@ (800d994 <__assert_func+0x34>)
 800d97e:	f000 f84f 	bl	800da20 <fiprintf>
 800d982:	f000 f85f 	bl	800da44 <abort>
 800d986:	4b04      	ldr	r3, [pc, #16]	@ (800d998 <__assert_func+0x38>)
 800d988:	e7f4      	b.n	800d974 <__assert_func+0x14>
 800d98a:	bf00      	nop
 800d98c:	200001d4 	.word	0x200001d4
 800d990:	0801644c 	.word	0x0801644c
 800d994:	0801641e 	.word	0x0801641e
 800d998:	08016411 	.word	0x08016411

0800d99c <_calloc_r>:
 800d99c:	b570      	push	{r4, r5, r6, lr}
 800d99e:	fba1 5402 	umull	r5, r4, r1, r2
 800d9a2:	b93c      	cbnz	r4, 800d9b4 <_calloc_r+0x18>
 800d9a4:	4629      	mov	r1, r5
 800d9a6:	f7ff f851 	bl	800ca4c <_malloc_r>
 800d9aa:	4606      	mov	r6, r0
 800d9ac:	b928      	cbnz	r0, 800d9ba <_calloc_r+0x1e>
 800d9ae:	2600      	movs	r6, #0
 800d9b0:	4630      	mov	r0, r6
 800d9b2:	bd70      	pop	{r4, r5, r6, pc}
 800d9b4:	220c      	movs	r2, #12
 800d9b6:	6002      	str	r2, [r0, #0]
 800d9b8:	e7f9      	b.n	800d9ae <_calloc_r+0x12>
 800d9ba:	462a      	mov	r2, r5
 800d9bc:	4621      	mov	r1, r4
 800d9be:	f7fd fd65 	bl	800b48c <memset>
 800d9c2:	e7f5      	b.n	800d9b0 <_calloc_r+0x14>

0800d9c4 <_realloc_r>:
 800d9c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9c8:	4680      	mov	r8, r0
 800d9ca:	4615      	mov	r5, r2
 800d9cc:	460c      	mov	r4, r1
 800d9ce:	b921      	cbnz	r1, 800d9da <_realloc_r+0x16>
 800d9d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d9d4:	4611      	mov	r1, r2
 800d9d6:	f7ff b839 	b.w	800ca4c <_malloc_r>
 800d9da:	b92a      	cbnz	r2, 800d9e8 <_realloc_r+0x24>
 800d9dc:	f7fe fc88 	bl	800c2f0 <_free_r>
 800d9e0:	2400      	movs	r4, #0
 800d9e2:	4620      	mov	r0, r4
 800d9e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9e8:	f000 f833 	bl	800da52 <_malloc_usable_size_r>
 800d9ec:	4285      	cmp	r5, r0
 800d9ee:	4606      	mov	r6, r0
 800d9f0:	d802      	bhi.n	800d9f8 <_realloc_r+0x34>
 800d9f2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d9f6:	d8f4      	bhi.n	800d9e2 <_realloc_r+0x1e>
 800d9f8:	4629      	mov	r1, r5
 800d9fa:	4640      	mov	r0, r8
 800d9fc:	f7ff f826 	bl	800ca4c <_malloc_r>
 800da00:	4607      	mov	r7, r0
 800da02:	2800      	cmp	r0, #0
 800da04:	d0ec      	beq.n	800d9e0 <_realloc_r+0x1c>
 800da06:	42b5      	cmp	r5, r6
 800da08:	462a      	mov	r2, r5
 800da0a:	4621      	mov	r1, r4
 800da0c:	bf28      	it	cs
 800da0e:	4632      	movcs	r2, r6
 800da10:	f7fd fe01 	bl	800b616 <memcpy>
 800da14:	4621      	mov	r1, r4
 800da16:	4640      	mov	r0, r8
 800da18:	f7fe fc6a 	bl	800c2f0 <_free_r>
 800da1c:	463c      	mov	r4, r7
 800da1e:	e7e0      	b.n	800d9e2 <_realloc_r+0x1e>

0800da20 <fiprintf>:
 800da20:	b40e      	push	{r1, r2, r3}
 800da22:	b503      	push	{r0, r1, lr}
 800da24:	4601      	mov	r1, r0
 800da26:	ab03      	add	r3, sp, #12
 800da28:	4805      	ldr	r0, [pc, #20]	@ (800da40 <fiprintf+0x20>)
 800da2a:	f853 2b04 	ldr.w	r2, [r3], #4
 800da2e:	6800      	ldr	r0, [r0, #0]
 800da30:	9301      	str	r3, [sp, #4]
 800da32:	f000 f83f 	bl	800dab4 <_vfiprintf_r>
 800da36:	b002      	add	sp, #8
 800da38:	f85d eb04 	ldr.w	lr, [sp], #4
 800da3c:	b003      	add	sp, #12
 800da3e:	4770      	bx	lr
 800da40:	200001d4 	.word	0x200001d4

0800da44 <abort>:
 800da44:	b508      	push	{r3, lr}
 800da46:	2006      	movs	r0, #6
 800da48:	f000 fa08 	bl	800de5c <raise>
 800da4c:	2001      	movs	r0, #1
 800da4e:	f7f6 fd3f 	bl	80044d0 <_exit>

0800da52 <_malloc_usable_size_r>:
 800da52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800da56:	1f18      	subs	r0, r3, #4
 800da58:	2b00      	cmp	r3, #0
 800da5a:	bfbc      	itt	lt
 800da5c:	580b      	ldrlt	r3, [r1, r0]
 800da5e:	18c0      	addlt	r0, r0, r3
 800da60:	4770      	bx	lr

0800da62 <__sfputc_r>:
 800da62:	6893      	ldr	r3, [r2, #8]
 800da64:	3b01      	subs	r3, #1
 800da66:	2b00      	cmp	r3, #0
 800da68:	b410      	push	{r4}
 800da6a:	6093      	str	r3, [r2, #8]
 800da6c:	da08      	bge.n	800da80 <__sfputc_r+0x1e>
 800da6e:	6994      	ldr	r4, [r2, #24]
 800da70:	42a3      	cmp	r3, r4
 800da72:	db01      	blt.n	800da78 <__sfputc_r+0x16>
 800da74:	290a      	cmp	r1, #10
 800da76:	d103      	bne.n	800da80 <__sfputc_r+0x1e>
 800da78:	f85d 4b04 	ldr.w	r4, [sp], #4
 800da7c:	f000 b932 	b.w	800dce4 <__swbuf_r>
 800da80:	6813      	ldr	r3, [r2, #0]
 800da82:	1c58      	adds	r0, r3, #1
 800da84:	6010      	str	r0, [r2, #0]
 800da86:	7019      	strb	r1, [r3, #0]
 800da88:	4608      	mov	r0, r1
 800da8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800da8e:	4770      	bx	lr

0800da90 <__sfputs_r>:
 800da90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da92:	4606      	mov	r6, r0
 800da94:	460f      	mov	r7, r1
 800da96:	4614      	mov	r4, r2
 800da98:	18d5      	adds	r5, r2, r3
 800da9a:	42ac      	cmp	r4, r5
 800da9c:	d101      	bne.n	800daa2 <__sfputs_r+0x12>
 800da9e:	2000      	movs	r0, #0
 800daa0:	e007      	b.n	800dab2 <__sfputs_r+0x22>
 800daa2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800daa6:	463a      	mov	r2, r7
 800daa8:	4630      	mov	r0, r6
 800daaa:	f7ff ffda 	bl	800da62 <__sfputc_r>
 800daae:	1c43      	adds	r3, r0, #1
 800dab0:	d1f3      	bne.n	800da9a <__sfputs_r+0xa>
 800dab2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800dab4 <_vfiprintf_r>:
 800dab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dab8:	460d      	mov	r5, r1
 800daba:	b09d      	sub	sp, #116	@ 0x74
 800dabc:	4614      	mov	r4, r2
 800dabe:	4698      	mov	r8, r3
 800dac0:	4606      	mov	r6, r0
 800dac2:	b118      	cbz	r0, 800dacc <_vfiprintf_r+0x18>
 800dac4:	6a03      	ldr	r3, [r0, #32]
 800dac6:	b90b      	cbnz	r3, 800dacc <_vfiprintf_r+0x18>
 800dac8:	f7fd fc2e 	bl	800b328 <__sinit>
 800dacc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dace:	07d9      	lsls	r1, r3, #31
 800dad0:	d405      	bmi.n	800dade <_vfiprintf_r+0x2a>
 800dad2:	89ab      	ldrh	r3, [r5, #12]
 800dad4:	059a      	lsls	r2, r3, #22
 800dad6:	d402      	bmi.n	800dade <_vfiprintf_r+0x2a>
 800dad8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dada:	f7fd fd92 	bl	800b602 <__retarget_lock_acquire_recursive>
 800dade:	89ab      	ldrh	r3, [r5, #12]
 800dae0:	071b      	lsls	r3, r3, #28
 800dae2:	d501      	bpl.n	800dae8 <_vfiprintf_r+0x34>
 800dae4:	692b      	ldr	r3, [r5, #16]
 800dae6:	b99b      	cbnz	r3, 800db10 <_vfiprintf_r+0x5c>
 800dae8:	4629      	mov	r1, r5
 800daea:	4630      	mov	r0, r6
 800daec:	f000 f938 	bl	800dd60 <__swsetup_r>
 800daf0:	b170      	cbz	r0, 800db10 <_vfiprintf_r+0x5c>
 800daf2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800daf4:	07dc      	lsls	r4, r3, #31
 800daf6:	d504      	bpl.n	800db02 <_vfiprintf_r+0x4e>
 800daf8:	f04f 30ff 	mov.w	r0, #4294967295
 800dafc:	b01d      	add	sp, #116	@ 0x74
 800dafe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db02:	89ab      	ldrh	r3, [r5, #12]
 800db04:	0598      	lsls	r0, r3, #22
 800db06:	d4f7      	bmi.n	800daf8 <_vfiprintf_r+0x44>
 800db08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800db0a:	f7fd fd7b 	bl	800b604 <__retarget_lock_release_recursive>
 800db0e:	e7f3      	b.n	800daf8 <_vfiprintf_r+0x44>
 800db10:	2300      	movs	r3, #0
 800db12:	9309      	str	r3, [sp, #36]	@ 0x24
 800db14:	2320      	movs	r3, #32
 800db16:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800db1a:	f8cd 800c 	str.w	r8, [sp, #12]
 800db1e:	2330      	movs	r3, #48	@ 0x30
 800db20:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800dcd0 <_vfiprintf_r+0x21c>
 800db24:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800db28:	f04f 0901 	mov.w	r9, #1
 800db2c:	4623      	mov	r3, r4
 800db2e:	469a      	mov	sl, r3
 800db30:	f813 2b01 	ldrb.w	r2, [r3], #1
 800db34:	b10a      	cbz	r2, 800db3a <_vfiprintf_r+0x86>
 800db36:	2a25      	cmp	r2, #37	@ 0x25
 800db38:	d1f9      	bne.n	800db2e <_vfiprintf_r+0x7a>
 800db3a:	ebba 0b04 	subs.w	fp, sl, r4
 800db3e:	d00b      	beq.n	800db58 <_vfiprintf_r+0xa4>
 800db40:	465b      	mov	r3, fp
 800db42:	4622      	mov	r2, r4
 800db44:	4629      	mov	r1, r5
 800db46:	4630      	mov	r0, r6
 800db48:	f7ff ffa2 	bl	800da90 <__sfputs_r>
 800db4c:	3001      	adds	r0, #1
 800db4e:	f000 80a7 	beq.w	800dca0 <_vfiprintf_r+0x1ec>
 800db52:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800db54:	445a      	add	r2, fp
 800db56:	9209      	str	r2, [sp, #36]	@ 0x24
 800db58:	f89a 3000 	ldrb.w	r3, [sl]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	f000 809f 	beq.w	800dca0 <_vfiprintf_r+0x1ec>
 800db62:	2300      	movs	r3, #0
 800db64:	f04f 32ff 	mov.w	r2, #4294967295
 800db68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800db6c:	f10a 0a01 	add.w	sl, sl, #1
 800db70:	9304      	str	r3, [sp, #16]
 800db72:	9307      	str	r3, [sp, #28]
 800db74:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800db78:	931a      	str	r3, [sp, #104]	@ 0x68
 800db7a:	4654      	mov	r4, sl
 800db7c:	2205      	movs	r2, #5
 800db7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db82:	4853      	ldr	r0, [pc, #332]	@ (800dcd0 <_vfiprintf_r+0x21c>)
 800db84:	f7f2 fb5c 	bl	8000240 <memchr>
 800db88:	9a04      	ldr	r2, [sp, #16]
 800db8a:	b9d8      	cbnz	r0, 800dbc4 <_vfiprintf_r+0x110>
 800db8c:	06d1      	lsls	r1, r2, #27
 800db8e:	bf44      	itt	mi
 800db90:	2320      	movmi	r3, #32
 800db92:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800db96:	0713      	lsls	r3, r2, #28
 800db98:	bf44      	itt	mi
 800db9a:	232b      	movmi	r3, #43	@ 0x2b
 800db9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dba0:	f89a 3000 	ldrb.w	r3, [sl]
 800dba4:	2b2a      	cmp	r3, #42	@ 0x2a
 800dba6:	d015      	beq.n	800dbd4 <_vfiprintf_r+0x120>
 800dba8:	9a07      	ldr	r2, [sp, #28]
 800dbaa:	4654      	mov	r4, sl
 800dbac:	2000      	movs	r0, #0
 800dbae:	f04f 0c0a 	mov.w	ip, #10
 800dbb2:	4621      	mov	r1, r4
 800dbb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dbb8:	3b30      	subs	r3, #48	@ 0x30
 800dbba:	2b09      	cmp	r3, #9
 800dbbc:	d94b      	bls.n	800dc56 <_vfiprintf_r+0x1a2>
 800dbbe:	b1b0      	cbz	r0, 800dbee <_vfiprintf_r+0x13a>
 800dbc0:	9207      	str	r2, [sp, #28]
 800dbc2:	e014      	b.n	800dbee <_vfiprintf_r+0x13a>
 800dbc4:	eba0 0308 	sub.w	r3, r0, r8
 800dbc8:	fa09 f303 	lsl.w	r3, r9, r3
 800dbcc:	4313      	orrs	r3, r2
 800dbce:	9304      	str	r3, [sp, #16]
 800dbd0:	46a2      	mov	sl, r4
 800dbd2:	e7d2      	b.n	800db7a <_vfiprintf_r+0xc6>
 800dbd4:	9b03      	ldr	r3, [sp, #12]
 800dbd6:	1d19      	adds	r1, r3, #4
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	9103      	str	r1, [sp, #12]
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	bfbb      	ittet	lt
 800dbe0:	425b      	neglt	r3, r3
 800dbe2:	f042 0202 	orrlt.w	r2, r2, #2
 800dbe6:	9307      	strge	r3, [sp, #28]
 800dbe8:	9307      	strlt	r3, [sp, #28]
 800dbea:	bfb8      	it	lt
 800dbec:	9204      	strlt	r2, [sp, #16]
 800dbee:	7823      	ldrb	r3, [r4, #0]
 800dbf0:	2b2e      	cmp	r3, #46	@ 0x2e
 800dbf2:	d10a      	bne.n	800dc0a <_vfiprintf_r+0x156>
 800dbf4:	7863      	ldrb	r3, [r4, #1]
 800dbf6:	2b2a      	cmp	r3, #42	@ 0x2a
 800dbf8:	d132      	bne.n	800dc60 <_vfiprintf_r+0x1ac>
 800dbfa:	9b03      	ldr	r3, [sp, #12]
 800dbfc:	1d1a      	adds	r2, r3, #4
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	9203      	str	r2, [sp, #12]
 800dc02:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dc06:	3402      	adds	r4, #2
 800dc08:	9305      	str	r3, [sp, #20]
 800dc0a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800dce0 <_vfiprintf_r+0x22c>
 800dc0e:	7821      	ldrb	r1, [r4, #0]
 800dc10:	2203      	movs	r2, #3
 800dc12:	4650      	mov	r0, sl
 800dc14:	f7f2 fb14 	bl	8000240 <memchr>
 800dc18:	b138      	cbz	r0, 800dc2a <_vfiprintf_r+0x176>
 800dc1a:	9b04      	ldr	r3, [sp, #16]
 800dc1c:	eba0 000a 	sub.w	r0, r0, sl
 800dc20:	2240      	movs	r2, #64	@ 0x40
 800dc22:	4082      	lsls	r2, r0
 800dc24:	4313      	orrs	r3, r2
 800dc26:	3401      	adds	r4, #1
 800dc28:	9304      	str	r3, [sp, #16]
 800dc2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc2e:	4829      	ldr	r0, [pc, #164]	@ (800dcd4 <_vfiprintf_r+0x220>)
 800dc30:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dc34:	2206      	movs	r2, #6
 800dc36:	f7f2 fb03 	bl	8000240 <memchr>
 800dc3a:	2800      	cmp	r0, #0
 800dc3c:	d03f      	beq.n	800dcbe <_vfiprintf_r+0x20a>
 800dc3e:	4b26      	ldr	r3, [pc, #152]	@ (800dcd8 <_vfiprintf_r+0x224>)
 800dc40:	bb1b      	cbnz	r3, 800dc8a <_vfiprintf_r+0x1d6>
 800dc42:	9b03      	ldr	r3, [sp, #12]
 800dc44:	3307      	adds	r3, #7
 800dc46:	f023 0307 	bic.w	r3, r3, #7
 800dc4a:	3308      	adds	r3, #8
 800dc4c:	9303      	str	r3, [sp, #12]
 800dc4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc50:	443b      	add	r3, r7
 800dc52:	9309      	str	r3, [sp, #36]	@ 0x24
 800dc54:	e76a      	b.n	800db2c <_vfiprintf_r+0x78>
 800dc56:	fb0c 3202 	mla	r2, ip, r2, r3
 800dc5a:	460c      	mov	r4, r1
 800dc5c:	2001      	movs	r0, #1
 800dc5e:	e7a8      	b.n	800dbb2 <_vfiprintf_r+0xfe>
 800dc60:	2300      	movs	r3, #0
 800dc62:	3401      	adds	r4, #1
 800dc64:	9305      	str	r3, [sp, #20]
 800dc66:	4619      	mov	r1, r3
 800dc68:	f04f 0c0a 	mov.w	ip, #10
 800dc6c:	4620      	mov	r0, r4
 800dc6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dc72:	3a30      	subs	r2, #48	@ 0x30
 800dc74:	2a09      	cmp	r2, #9
 800dc76:	d903      	bls.n	800dc80 <_vfiprintf_r+0x1cc>
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d0c6      	beq.n	800dc0a <_vfiprintf_r+0x156>
 800dc7c:	9105      	str	r1, [sp, #20]
 800dc7e:	e7c4      	b.n	800dc0a <_vfiprintf_r+0x156>
 800dc80:	fb0c 2101 	mla	r1, ip, r1, r2
 800dc84:	4604      	mov	r4, r0
 800dc86:	2301      	movs	r3, #1
 800dc88:	e7f0      	b.n	800dc6c <_vfiprintf_r+0x1b8>
 800dc8a:	ab03      	add	r3, sp, #12
 800dc8c:	9300      	str	r3, [sp, #0]
 800dc8e:	462a      	mov	r2, r5
 800dc90:	4b12      	ldr	r3, [pc, #72]	@ (800dcdc <_vfiprintf_r+0x228>)
 800dc92:	a904      	add	r1, sp, #16
 800dc94:	4630      	mov	r0, r6
 800dc96:	f7fc ff03 	bl	800aaa0 <_printf_float>
 800dc9a:	4607      	mov	r7, r0
 800dc9c:	1c78      	adds	r0, r7, #1
 800dc9e:	d1d6      	bne.n	800dc4e <_vfiprintf_r+0x19a>
 800dca0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dca2:	07d9      	lsls	r1, r3, #31
 800dca4:	d405      	bmi.n	800dcb2 <_vfiprintf_r+0x1fe>
 800dca6:	89ab      	ldrh	r3, [r5, #12]
 800dca8:	059a      	lsls	r2, r3, #22
 800dcaa:	d402      	bmi.n	800dcb2 <_vfiprintf_r+0x1fe>
 800dcac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dcae:	f7fd fca9 	bl	800b604 <__retarget_lock_release_recursive>
 800dcb2:	89ab      	ldrh	r3, [r5, #12]
 800dcb4:	065b      	lsls	r3, r3, #25
 800dcb6:	f53f af1f 	bmi.w	800daf8 <_vfiprintf_r+0x44>
 800dcba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dcbc:	e71e      	b.n	800dafc <_vfiprintf_r+0x48>
 800dcbe:	ab03      	add	r3, sp, #12
 800dcc0:	9300      	str	r3, [sp, #0]
 800dcc2:	462a      	mov	r2, r5
 800dcc4:	4b05      	ldr	r3, [pc, #20]	@ (800dcdc <_vfiprintf_r+0x228>)
 800dcc6:	a904      	add	r1, sp, #16
 800dcc8:	4630      	mov	r0, r6
 800dcca:	f7fd f981 	bl	800afd0 <_printf_i>
 800dcce:	e7e4      	b.n	800dc9a <_vfiprintf_r+0x1e6>
 800dcd0:	08016400 	.word	0x08016400
 800dcd4:	0801640a 	.word	0x0801640a
 800dcd8:	0800aaa1 	.word	0x0800aaa1
 800dcdc:	0800da91 	.word	0x0800da91
 800dce0:	08016406 	.word	0x08016406

0800dce4 <__swbuf_r>:
 800dce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dce6:	460e      	mov	r6, r1
 800dce8:	4614      	mov	r4, r2
 800dcea:	4605      	mov	r5, r0
 800dcec:	b118      	cbz	r0, 800dcf6 <__swbuf_r+0x12>
 800dcee:	6a03      	ldr	r3, [r0, #32]
 800dcf0:	b90b      	cbnz	r3, 800dcf6 <__swbuf_r+0x12>
 800dcf2:	f7fd fb19 	bl	800b328 <__sinit>
 800dcf6:	69a3      	ldr	r3, [r4, #24]
 800dcf8:	60a3      	str	r3, [r4, #8]
 800dcfa:	89a3      	ldrh	r3, [r4, #12]
 800dcfc:	071a      	lsls	r2, r3, #28
 800dcfe:	d501      	bpl.n	800dd04 <__swbuf_r+0x20>
 800dd00:	6923      	ldr	r3, [r4, #16]
 800dd02:	b943      	cbnz	r3, 800dd16 <__swbuf_r+0x32>
 800dd04:	4621      	mov	r1, r4
 800dd06:	4628      	mov	r0, r5
 800dd08:	f000 f82a 	bl	800dd60 <__swsetup_r>
 800dd0c:	b118      	cbz	r0, 800dd16 <__swbuf_r+0x32>
 800dd0e:	f04f 37ff 	mov.w	r7, #4294967295
 800dd12:	4638      	mov	r0, r7
 800dd14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd16:	6823      	ldr	r3, [r4, #0]
 800dd18:	6922      	ldr	r2, [r4, #16]
 800dd1a:	1a98      	subs	r0, r3, r2
 800dd1c:	6963      	ldr	r3, [r4, #20]
 800dd1e:	b2f6      	uxtb	r6, r6
 800dd20:	4283      	cmp	r3, r0
 800dd22:	4637      	mov	r7, r6
 800dd24:	dc05      	bgt.n	800dd32 <__swbuf_r+0x4e>
 800dd26:	4621      	mov	r1, r4
 800dd28:	4628      	mov	r0, r5
 800dd2a:	f7ff fdc7 	bl	800d8bc <_fflush_r>
 800dd2e:	2800      	cmp	r0, #0
 800dd30:	d1ed      	bne.n	800dd0e <__swbuf_r+0x2a>
 800dd32:	68a3      	ldr	r3, [r4, #8]
 800dd34:	3b01      	subs	r3, #1
 800dd36:	60a3      	str	r3, [r4, #8]
 800dd38:	6823      	ldr	r3, [r4, #0]
 800dd3a:	1c5a      	adds	r2, r3, #1
 800dd3c:	6022      	str	r2, [r4, #0]
 800dd3e:	701e      	strb	r6, [r3, #0]
 800dd40:	6962      	ldr	r2, [r4, #20]
 800dd42:	1c43      	adds	r3, r0, #1
 800dd44:	429a      	cmp	r2, r3
 800dd46:	d004      	beq.n	800dd52 <__swbuf_r+0x6e>
 800dd48:	89a3      	ldrh	r3, [r4, #12]
 800dd4a:	07db      	lsls	r3, r3, #31
 800dd4c:	d5e1      	bpl.n	800dd12 <__swbuf_r+0x2e>
 800dd4e:	2e0a      	cmp	r6, #10
 800dd50:	d1df      	bne.n	800dd12 <__swbuf_r+0x2e>
 800dd52:	4621      	mov	r1, r4
 800dd54:	4628      	mov	r0, r5
 800dd56:	f7ff fdb1 	bl	800d8bc <_fflush_r>
 800dd5a:	2800      	cmp	r0, #0
 800dd5c:	d0d9      	beq.n	800dd12 <__swbuf_r+0x2e>
 800dd5e:	e7d6      	b.n	800dd0e <__swbuf_r+0x2a>

0800dd60 <__swsetup_r>:
 800dd60:	b538      	push	{r3, r4, r5, lr}
 800dd62:	4b29      	ldr	r3, [pc, #164]	@ (800de08 <__swsetup_r+0xa8>)
 800dd64:	4605      	mov	r5, r0
 800dd66:	6818      	ldr	r0, [r3, #0]
 800dd68:	460c      	mov	r4, r1
 800dd6a:	b118      	cbz	r0, 800dd74 <__swsetup_r+0x14>
 800dd6c:	6a03      	ldr	r3, [r0, #32]
 800dd6e:	b90b      	cbnz	r3, 800dd74 <__swsetup_r+0x14>
 800dd70:	f7fd fada 	bl	800b328 <__sinit>
 800dd74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd78:	0719      	lsls	r1, r3, #28
 800dd7a:	d422      	bmi.n	800ddc2 <__swsetup_r+0x62>
 800dd7c:	06da      	lsls	r2, r3, #27
 800dd7e:	d407      	bmi.n	800dd90 <__swsetup_r+0x30>
 800dd80:	2209      	movs	r2, #9
 800dd82:	602a      	str	r2, [r5, #0]
 800dd84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dd88:	81a3      	strh	r3, [r4, #12]
 800dd8a:	f04f 30ff 	mov.w	r0, #4294967295
 800dd8e:	e033      	b.n	800ddf8 <__swsetup_r+0x98>
 800dd90:	0758      	lsls	r0, r3, #29
 800dd92:	d512      	bpl.n	800ddba <__swsetup_r+0x5a>
 800dd94:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dd96:	b141      	cbz	r1, 800ddaa <__swsetup_r+0x4a>
 800dd98:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dd9c:	4299      	cmp	r1, r3
 800dd9e:	d002      	beq.n	800dda6 <__swsetup_r+0x46>
 800dda0:	4628      	mov	r0, r5
 800dda2:	f7fe faa5 	bl	800c2f0 <_free_r>
 800dda6:	2300      	movs	r3, #0
 800dda8:	6363      	str	r3, [r4, #52]	@ 0x34
 800ddaa:	89a3      	ldrh	r3, [r4, #12]
 800ddac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ddb0:	81a3      	strh	r3, [r4, #12]
 800ddb2:	2300      	movs	r3, #0
 800ddb4:	6063      	str	r3, [r4, #4]
 800ddb6:	6923      	ldr	r3, [r4, #16]
 800ddb8:	6023      	str	r3, [r4, #0]
 800ddba:	89a3      	ldrh	r3, [r4, #12]
 800ddbc:	f043 0308 	orr.w	r3, r3, #8
 800ddc0:	81a3      	strh	r3, [r4, #12]
 800ddc2:	6923      	ldr	r3, [r4, #16]
 800ddc4:	b94b      	cbnz	r3, 800ddda <__swsetup_r+0x7a>
 800ddc6:	89a3      	ldrh	r3, [r4, #12]
 800ddc8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ddcc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ddd0:	d003      	beq.n	800ddda <__swsetup_r+0x7a>
 800ddd2:	4621      	mov	r1, r4
 800ddd4:	4628      	mov	r0, r5
 800ddd6:	f000 f883 	bl	800dee0 <__smakebuf_r>
 800ddda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ddde:	f013 0201 	ands.w	r2, r3, #1
 800dde2:	d00a      	beq.n	800ddfa <__swsetup_r+0x9a>
 800dde4:	2200      	movs	r2, #0
 800dde6:	60a2      	str	r2, [r4, #8]
 800dde8:	6962      	ldr	r2, [r4, #20]
 800ddea:	4252      	negs	r2, r2
 800ddec:	61a2      	str	r2, [r4, #24]
 800ddee:	6922      	ldr	r2, [r4, #16]
 800ddf0:	b942      	cbnz	r2, 800de04 <__swsetup_r+0xa4>
 800ddf2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ddf6:	d1c5      	bne.n	800dd84 <__swsetup_r+0x24>
 800ddf8:	bd38      	pop	{r3, r4, r5, pc}
 800ddfa:	0799      	lsls	r1, r3, #30
 800ddfc:	bf58      	it	pl
 800ddfe:	6962      	ldrpl	r2, [r4, #20]
 800de00:	60a2      	str	r2, [r4, #8]
 800de02:	e7f4      	b.n	800ddee <__swsetup_r+0x8e>
 800de04:	2000      	movs	r0, #0
 800de06:	e7f7      	b.n	800ddf8 <__swsetup_r+0x98>
 800de08:	200001d4 	.word	0x200001d4

0800de0c <_raise_r>:
 800de0c:	291f      	cmp	r1, #31
 800de0e:	b538      	push	{r3, r4, r5, lr}
 800de10:	4605      	mov	r5, r0
 800de12:	460c      	mov	r4, r1
 800de14:	d904      	bls.n	800de20 <_raise_r+0x14>
 800de16:	2316      	movs	r3, #22
 800de18:	6003      	str	r3, [r0, #0]
 800de1a:	f04f 30ff 	mov.w	r0, #4294967295
 800de1e:	bd38      	pop	{r3, r4, r5, pc}
 800de20:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800de22:	b112      	cbz	r2, 800de2a <_raise_r+0x1e>
 800de24:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800de28:	b94b      	cbnz	r3, 800de3e <_raise_r+0x32>
 800de2a:	4628      	mov	r0, r5
 800de2c:	f000 f830 	bl	800de90 <_getpid_r>
 800de30:	4622      	mov	r2, r4
 800de32:	4601      	mov	r1, r0
 800de34:	4628      	mov	r0, r5
 800de36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800de3a:	f000 b817 	b.w	800de6c <_kill_r>
 800de3e:	2b01      	cmp	r3, #1
 800de40:	d00a      	beq.n	800de58 <_raise_r+0x4c>
 800de42:	1c59      	adds	r1, r3, #1
 800de44:	d103      	bne.n	800de4e <_raise_r+0x42>
 800de46:	2316      	movs	r3, #22
 800de48:	6003      	str	r3, [r0, #0]
 800de4a:	2001      	movs	r0, #1
 800de4c:	e7e7      	b.n	800de1e <_raise_r+0x12>
 800de4e:	2100      	movs	r1, #0
 800de50:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800de54:	4620      	mov	r0, r4
 800de56:	4798      	blx	r3
 800de58:	2000      	movs	r0, #0
 800de5a:	e7e0      	b.n	800de1e <_raise_r+0x12>

0800de5c <raise>:
 800de5c:	4b02      	ldr	r3, [pc, #8]	@ (800de68 <raise+0xc>)
 800de5e:	4601      	mov	r1, r0
 800de60:	6818      	ldr	r0, [r3, #0]
 800de62:	f7ff bfd3 	b.w	800de0c <_raise_r>
 800de66:	bf00      	nop
 800de68:	200001d4 	.word	0x200001d4

0800de6c <_kill_r>:
 800de6c:	b538      	push	{r3, r4, r5, lr}
 800de6e:	4d07      	ldr	r5, [pc, #28]	@ (800de8c <_kill_r+0x20>)
 800de70:	2300      	movs	r3, #0
 800de72:	4604      	mov	r4, r0
 800de74:	4608      	mov	r0, r1
 800de76:	4611      	mov	r1, r2
 800de78:	602b      	str	r3, [r5, #0]
 800de7a:	f7f6 fb21 	bl	80044c0 <_kill>
 800de7e:	1c43      	adds	r3, r0, #1
 800de80:	d102      	bne.n	800de88 <_kill_r+0x1c>
 800de82:	682b      	ldr	r3, [r5, #0]
 800de84:	b103      	cbz	r3, 800de88 <_kill_r+0x1c>
 800de86:	6023      	str	r3, [r4, #0]
 800de88:	bd38      	pop	{r3, r4, r5, pc}
 800de8a:	bf00      	nop
 800de8c:	20006c00 	.word	0x20006c00

0800de90 <_getpid_r>:
 800de90:	f7f6 bb14 	b.w	80044bc <_getpid>

0800de94 <__swhatbuf_r>:
 800de94:	b570      	push	{r4, r5, r6, lr}
 800de96:	460c      	mov	r4, r1
 800de98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de9c:	2900      	cmp	r1, #0
 800de9e:	b096      	sub	sp, #88	@ 0x58
 800dea0:	4615      	mov	r5, r2
 800dea2:	461e      	mov	r6, r3
 800dea4:	da0d      	bge.n	800dec2 <__swhatbuf_r+0x2e>
 800dea6:	89a3      	ldrh	r3, [r4, #12]
 800dea8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800deac:	f04f 0100 	mov.w	r1, #0
 800deb0:	bf14      	ite	ne
 800deb2:	2340      	movne	r3, #64	@ 0x40
 800deb4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800deb8:	2000      	movs	r0, #0
 800deba:	6031      	str	r1, [r6, #0]
 800debc:	602b      	str	r3, [r5, #0]
 800debe:	b016      	add	sp, #88	@ 0x58
 800dec0:	bd70      	pop	{r4, r5, r6, pc}
 800dec2:	466a      	mov	r2, sp
 800dec4:	f000 f848 	bl	800df58 <_fstat_r>
 800dec8:	2800      	cmp	r0, #0
 800deca:	dbec      	blt.n	800dea6 <__swhatbuf_r+0x12>
 800decc:	9901      	ldr	r1, [sp, #4]
 800dece:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ded2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ded6:	4259      	negs	r1, r3
 800ded8:	4159      	adcs	r1, r3
 800deda:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dede:	e7eb      	b.n	800deb8 <__swhatbuf_r+0x24>

0800dee0 <__smakebuf_r>:
 800dee0:	898b      	ldrh	r3, [r1, #12]
 800dee2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dee4:	079d      	lsls	r5, r3, #30
 800dee6:	4606      	mov	r6, r0
 800dee8:	460c      	mov	r4, r1
 800deea:	d507      	bpl.n	800defc <__smakebuf_r+0x1c>
 800deec:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800def0:	6023      	str	r3, [r4, #0]
 800def2:	6123      	str	r3, [r4, #16]
 800def4:	2301      	movs	r3, #1
 800def6:	6163      	str	r3, [r4, #20]
 800def8:	b003      	add	sp, #12
 800defa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800defc:	ab01      	add	r3, sp, #4
 800defe:	466a      	mov	r2, sp
 800df00:	f7ff ffc8 	bl	800de94 <__swhatbuf_r>
 800df04:	9f00      	ldr	r7, [sp, #0]
 800df06:	4605      	mov	r5, r0
 800df08:	4639      	mov	r1, r7
 800df0a:	4630      	mov	r0, r6
 800df0c:	f7fe fd9e 	bl	800ca4c <_malloc_r>
 800df10:	b948      	cbnz	r0, 800df26 <__smakebuf_r+0x46>
 800df12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df16:	059a      	lsls	r2, r3, #22
 800df18:	d4ee      	bmi.n	800def8 <__smakebuf_r+0x18>
 800df1a:	f023 0303 	bic.w	r3, r3, #3
 800df1e:	f043 0302 	orr.w	r3, r3, #2
 800df22:	81a3      	strh	r3, [r4, #12]
 800df24:	e7e2      	b.n	800deec <__smakebuf_r+0xc>
 800df26:	89a3      	ldrh	r3, [r4, #12]
 800df28:	6020      	str	r0, [r4, #0]
 800df2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800df2e:	81a3      	strh	r3, [r4, #12]
 800df30:	9b01      	ldr	r3, [sp, #4]
 800df32:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800df36:	b15b      	cbz	r3, 800df50 <__smakebuf_r+0x70>
 800df38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800df3c:	4630      	mov	r0, r6
 800df3e:	f000 f81d 	bl	800df7c <_isatty_r>
 800df42:	b128      	cbz	r0, 800df50 <__smakebuf_r+0x70>
 800df44:	89a3      	ldrh	r3, [r4, #12]
 800df46:	f023 0303 	bic.w	r3, r3, #3
 800df4a:	f043 0301 	orr.w	r3, r3, #1
 800df4e:	81a3      	strh	r3, [r4, #12]
 800df50:	89a3      	ldrh	r3, [r4, #12]
 800df52:	431d      	orrs	r5, r3
 800df54:	81a5      	strh	r5, [r4, #12]
 800df56:	e7cf      	b.n	800def8 <__smakebuf_r+0x18>

0800df58 <_fstat_r>:
 800df58:	b538      	push	{r3, r4, r5, lr}
 800df5a:	4d07      	ldr	r5, [pc, #28]	@ (800df78 <_fstat_r+0x20>)
 800df5c:	2300      	movs	r3, #0
 800df5e:	4604      	mov	r4, r0
 800df60:	4608      	mov	r0, r1
 800df62:	4611      	mov	r1, r2
 800df64:	602b      	str	r3, [r5, #0]
 800df66:	f7f6 fad8 	bl	800451a <_fstat>
 800df6a:	1c43      	adds	r3, r0, #1
 800df6c:	d102      	bne.n	800df74 <_fstat_r+0x1c>
 800df6e:	682b      	ldr	r3, [r5, #0]
 800df70:	b103      	cbz	r3, 800df74 <_fstat_r+0x1c>
 800df72:	6023      	str	r3, [r4, #0]
 800df74:	bd38      	pop	{r3, r4, r5, pc}
 800df76:	bf00      	nop
 800df78:	20006c00 	.word	0x20006c00

0800df7c <_isatty_r>:
 800df7c:	b538      	push	{r3, r4, r5, lr}
 800df7e:	4d06      	ldr	r5, [pc, #24]	@ (800df98 <_isatty_r+0x1c>)
 800df80:	2300      	movs	r3, #0
 800df82:	4604      	mov	r4, r0
 800df84:	4608      	mov	r0, r1
 800df86:	602b      	str	r3, [r5, #0]
 800df88:	f7f6 facc 	bl	8004524 <_isatty>
 800df8c:	1c43      	adds	r3, r0, #1
 800df8e:	d102      	bne.n	800df96 <_isatty_r+0x1a>
 800df90:	682b      	ldr	r3, [r5, #0]
 800df92:	b103      	cbz	r3, 800df96 <_isatty_r+0x1a>
 800df94:	6023      	str	r3, [r4, #0]
 800df96:	bd38      	pop	{r3, r4, r5, pc}
 800df98:	20006c00 	.word	0x20006c00

0800df9c <sinf>:
 800df9c:	ee10 3a10 	vmov	r3, s0
 800dfa0:	b507      	push	{r0, r1, r2, lr}
 800dfa2:	4a1f      	ldr	r2, [pc, #124]	@ (800e020 <sinf+0x84>)
 800dfa4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800dfa8:	4293      	cmp	r3, r2
 800dfaa:	d807      	bhi.n	800dfbc <sinf+0x20>
 800dfac:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800e024 <sinf+0x88>
 800dfb0:	2000      	movs	r0, #0
 800dfb2:	b003      	add	sp, #12
 800dfb4:	f85d eb04 	ldr.w	lr, [sp], #4
 800dfb8:	f000 b91a 	b.w	800e1f0 <__kernel_sinf>
 800dfbc:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800dfc0:	d304      	bcc.n	800dfcc <sinf+0x30>
 800dfc2:	ee30 0a40 	vsub.f32	s0, s0, s0
 800dfc6:	b003      	add	sp, #12
 800dfc8:	f85d fb04 	ldr.w	pc, [sp], #4
 800dfcc:	4668      	mov	r0, sp
 800dfce:	f000 f957 	bl	800e280 <__ieee754_rem_pio2f>
 800dfd2:	f000 0003 	and.w	r0, r0, #3
 800dfd6:	2801      	cmp	r0, #1
 800dfd8:	d00a      	beq.n	800dff0 <sinf+0x54>
 800dfda:	2802      	cmp	r0, #2
 800dfdc:	d00f      	beq.n	800dffe <sinf+0x62>
 800dfde:	b9c0      	cbnz	r0, 800e012 <sinf+0x76>
 800dfe0:	eddd 0a01 	vldr	s1, [sp, #4]
 800dfe4:	ed9d 0a00 	vldr	s0, [sp]
 800dfe8:	2001      	movs	r0, #1
 800dfea:	f000 f901 	bl	800e1f0 <__kernel_sinf>
 800dfee:	e7ea      	b.n	800dfc6 <sinf+0x2a>
 800dff0:	eddd 0a01 	vldr	s1, [sp, #4]
 800dff4:	ed9d 0a00 	vldr	s0, [sp]
 800dff8:	f000 f8a2 	bl	800e140 <__kernel_cosf>
 800dffc:	e7e3      	b.n	800dfc6 <sinf+0x2a>
 800dffe:	eddd 0a01 	vldr	s1, [sp, #4]
 800e002:	ed9d 0a00 	vldr	s0, [sp]
 800e006:	2001      	movs	r0, #1
 800e008:	f000 f8f2 	bl	800e1f0 <__kernel_sinf>
 800e00c:	eeb1 0a40 	vneg.f32	s0, s0
 800e010:	e7d9      	b.n	800dfc6 <sinf+0x2a>
 800e012:	eddd 0a01 	vldr	s1, [sp, #4]
 800e016:	ed9d 0a00 	vldr	s0, [sp]
 800e01a:	f000 f891 	bl	800e140 <__kernel_cosf>
 800e01e:	e7f5      	b.n	800e00c <sinf+0x70>
 800e020:	3f490fd8 	.word	0x3f490fd8
 800e024:	00000000 	.word	0x00000000

0800e028 <rint>:
 800e028:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e02a:	ec53 2b10 	vmov	r2, r3, d0
 800e02e:	f3c3 500a 	ubfx	r0, r3, #20, #11
 800e032:	f2a0 35ff 	subw	r5, r0, #1023	@ 0x3ff
 800e036:	2d13      	cmp	r5, #19
 800e038:	461c      	mov	r4, r3
 800e03a:	4611      	mov	r1, r2
 800e03c:	ea4f 76d3 	mov.w	r6, r3, lsr #31
 800e040:	dc5b      	bgt.n	800e0fa <rint+0xd2>
 800e042:	2d00      	cmp	r5, #0
 800e044:	da2f      	bge.n	800e0a6 <rint+0x7e>
 800e046:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800e04a:	4310      	orrs	r0, r2
 800e04c:	d027      	beq.n	800e09e <rint+0x76>
 800e04e:	f3c3 0513 	ubfx	r5, r3, #0, #20
 800e052:	4315      	orrs	r5, r2
 800e054:	426b      	negs	r3, r5
 800e056:	432b      	orrs	r3, r5
 800e058:	4610      	mov	r0, r2
 800e05a:	0b1b      	lsrs	r3, r3, #12
 800e05c:	0c62      	lsrs	r2, r4, #17
 800e05e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800e062:	0452      	lsls	r2, r2, #17
 800e064:	ea43 0102 	orr.w	r1, r3, r2
 800e068:	460b      	mov	r3, r1
 800e06a:	4933      	ldr	r1, [pc, #204]	@ (800e138 <rint+0x110>)
 800e06c:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800e070:	e9d1 6700 	ldrd	r6, r7, [r1]
 800e074:	4602      	mov	r2, r0
 800e076:	4639      	mov	r1, r7
 800e078:	4630      	mov	r0, r6
 800e07a:	f7f2 f93f 	bl	80002fc <__adddf3>
 800e07e:	e9cd 0100 	strd	r0, r1, [sp]
 800e082:	463b      	mov	r3, r7
 800e084:	4632      	mov	r2, r6
 800e086:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e08a:	f7f2 f935 	bl	80002f8 <__aeabi_dsub>
 800e08e:	f004 4400 	and.w	r4, r4, #2147483648	@ 0x80000000
 800e092:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800e096:	ea44 0703 	orr.w	r7, r4, r3
 800e09a:	4602      	mov	r2, r0
 800e09c:	463b      	mov	r3, r7
 800e09e:	ec43 2b10 	vmov	d0, r2, r3
 800e0a2:	b003      	add	sp, #12
 800e0a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e0a6:	4825      	ldr	r0, [pc, #148]	@ (800e13c <rint+0x114>)
 800e0a8:	4128      	asrs	r0, r5
 800e0aa:	ea00 0703 	and.w	r7, r0, r3
 800e0ae:	4317      	orrs	r7, r2
 800e0b0:	d0f5      	beq.n	800e09e <rint+0x76>
 800e0b2:	0843      	lsrs	r3, r0, #1
 800e0b4:	ea04 0050 	and.w	r0, r4, r0, lsr #1
 800e0b8:	4301      	orrs	r1, r0
 800e0ba:	d00a      	beq.n	800e0d2 <rint+0xaa>
 800e0bc:	f1a5 0213 	sub.w	r2, r5, #19
 800e0c0:	ea24 0303 	bic.w	r3, r4, r3
 800e0c4:	4251      	negs	r1, r2
 800e0c6:	f44f 2480 	mov.w	r4, #262144	@ 0x40000
 800e0ca:	4151      	adcs	r1, r2
 800e0cc:	412c      	asrs	r4, r5
 800e0ce:	07c9      	lsls	r1, r1, #31
 800e0d0:	431c      	orrs	r4, r3
 800e0d2:	460a      	mov	r2, r1
 800e0d4:	4918      	ldr	r1, [pc, #96]	@ (800e138 <rint+0x110>)
 800e0d6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800e0da:	4623      	mov	r3, r4
 800e0dc:	e9d1 4500 	ldrd	r4, r5, [r1]
 800e0e0:	4620      	mov	r0, r4
 800e0e2:	4629      	mov	r1, r5
 800e0e4:	f7f2 f90a 	bl	80002fc <__adddf3>
 800e0e8:	e9cd 0100 	strd	r0, r1, [sp]
 800e0ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e0f0:	4622      	mov	r2, r4
 800e0f2:	462b      	mov	r3, r5
 800e0f4:	f7f2 f900 	bl	80002f8 <__aeabi_dsub>
 800e0f8:	e008      	b.n	800e10c <rint+0xe4>
 800e0fa:	2d33      	cmp	r5, #51	@ 0x33
 800e0fc:	dd09      	ble.n	800e112 <rint+0xea>
 800e0fe:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 800e102:	d1cc      	bne.n	800e09e <rint+0x76>
 800e104:	4610      	mov	r0, r2
 800e106:	4619      	mov	r1, r3
 800e108:	f7f2 f8f8 	bl	80002fc <__adddf3>
 800e10c:	4602      	mov	r2, r0
 800e10e:	460b      	mov	r3, r1
 800e110:	e7c5      	b.n	800e09e <rint+0x76>
 800e112:	f2a0 4513 	subw	r5, r0, #1043	@ 0x413
 800e116:	f04f 30ff 	mov.w	r0, #4294967295
 800e11a:	40e8      	lsrs	r0, r5
 800e11c:	4202      	tst	r2, r0
 800e11e:	d0be      	beq.n	800e09e <rint+0x76>
 800e120:	0843      	lsrs	r3, r0, #1
 800e122:	ea11 0050 	ands.w	r0, r1, r0, lsr #1
 800e126:	bf1f      	itttt	ne
 800e128:	ea21 0303 	bicne.w	r3, r1, r3
 800e12c:	f04f 4180 	movne.w	r1, #1073741824	@ 0x40000000
 800e130:	4129      	asrne	r1, r5
 800e132:	4319      	orrne	r1, r3
 800e134:	e7cd      	b.n	800e0d2 <rint+0xaa>
 800e136:	bf00      	nop
 800e138:	08016450 	.word	0x08016450
 800e13c:	000fffff 	.word	0x000fffff

0800e140 <__kernel_cosf>:
 800e140:	ee10 3a10 	vmov	r3, s0
 800e144:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e148:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800e14c:	eef0 6a40 	vmov.f32	s13, s0
 800e150:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800e154:	d204      	bcs.n	800e160 <__kernel_cosf+0x20>
 800e156:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800e15a:	ee17 2a90 	vmov	r2, s15
 800e15e:	b342      	cbz	r2, 800e1b2 <__kernel_cosf+0x72>
 800e160:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800e164:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800e1d0 <__kernel_cosf+0x90>
 800e168:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800e1d4 <__kernel_cosf+0x94>
 800e16c:	4a1a      	ldr	r2, [pc, #104]	@ (800e1d8 <__kernel_cosf+0x98>)
 800e16e:	eea7 6a27 	vfma.f32	s12, s14, s15
 800e172:	4293      	cmp	r3, r2
 800e174:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800e1dc <__kernel_cosf+0x9c>
 800e178:	eee6 7a07 	vfma.f32	s15, s12, s14
 800e17c:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800e1e0 <__kernel_cosf+0xa0>
 800e180:	eea7 6a87 	vfma.f32	s12, s15, s14
 800e184:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800e1e4 <__kernel_cosf+0xa4>
 800e188:	eee6 7a07 	vfma.f32	s15, s12, s14
 800e18c:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800e1e8 <__kernel_cosf+0xa8>
 800e190:	eea7 6a87 	vfma.f32	s12, s15, s14
 800e194:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800e198:	ee26 6a07 	vmul.f32	s12, s12, s14
 800e19c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800e1a0:	eee7 0a06 	vfma.f32	s1, s14, s12
 800e1a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e1a8:	d804      	bhi.n	800e1b4 <__kernel_cosf+0x74>
 800e1aa:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800e1ae:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e1b2:	4770      	bx	lr
 800e1b4:	4a0d      	ldr	r2, [pc, #52]	@ (800e1ec <__kernel_cosf+0xac>)
 800e1b6:	4293      	cmp	r3, r2
 800e1b8:	bf9a      	itte	ls
 800e1ba:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800e1be:	ee07 3a10 	vmovls	s14, r3
 800e1c2:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800e1c6:	ee30 0a47 	vsub.f32	s0, s0, s14
 800e1ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e1ce:	e7ec      	b.n	800e1aa <__kernel_cosf+0x6a>
 800e1d0:	ad47d74e 	.word	0xad47d74e
 800e1d4:	310f74f6 	.word	0x310f74f6
 800e1d8:	3e999999 	.word	0x3e999999
 800e1dc:	b493f27c 	.word	0xb493f27c
 800e1e0:	37d00d01 	.word	0x37d00d01
 800e1e4:	bab60b61 	.word	0xbab60b61
 800e1e8:	3d2aaaab 	.word	0x3d2aaaab
 800e1ec:	3f480000 	.word	0x3f480000

0800e1f0 <__kernel_sinf>:
 800e1f0:	ee10 3a10 	vmov	r3, s0
 800e1f4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e1f8:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800e1fc:	d204      	bcs.n	800e208 <__kernel_sinf+0x18>
 800e1fe:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800e202:	ee17 3a90 	vmov	r3, s15
 800e206:	b35b      	cbz	r3, 800e260 <__kernel_sinf+0x70>
 800e208:	ee20 7a00 	vmul.f32	s14, s0, s0
 800e20c:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800e264 <__kernel_sinf+0x74>
 800e210:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800e268 <__kernel_sinf+0x78>
 800e214:	eea7 6a27 	vfma.f32	s12, s14, s15
 800e218:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800e26c <__kernel_sinf+0x7c>
 800e21c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800e220:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800e270 <__kernel_sinf+0x80>
 800e224:	eea7 6a87 	vfma.f32	s12, s15, s14
 800e228:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800e274 <__kernel_sinf+0x84>
 800e22c:	ee60 6a07 	vmul.f32	s13, s0, s14
 800e230:	eee6 7a07 	vfma.f32	s15, s12, s14
 800e234:	b930      	cbnz	r0, 800e244 <__kernel_sinf+0x54>
 800e236:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800e278 <__kernel_sinf+0x88>
 800e23a:	eea7 6a27 	vfma.f32	s12, s14, s15
 800e23e:	eea6 0a26 	vfma.f32	s0, s12, s13
 800e242:	4770      	bx	lr
 800e244:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800e248:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800e24c:	eee0 7a86 	vfma.f32	s15, s1, s12
 800e250:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800e254:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800e27c <__kernel_sinf+0x8c>
 800e258:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800e25c:	ee30 0a60 	vsub.f32	s0, s0, s1
 800e260:	4770      	bx	lr
 800e262:	bf00      	nop
 800e264:	2f2ec9d3 	.word	0x2f2ec9d3
 800e268:	b2d72f34 	.word	0xb2d72f34
 800e26c:	3638ef1b 	.word	0x3638ef1b
 800e270:	b9500d01 	.word	0xb9500d01
 800e274:	3c088889 	.word	0x3c088889
 800e278:	be2aaaab 	.word	0xbe2aaaab
 800e27c:	3e2aaaab 	.word	0x3e2aaaab

0800e280 <__ieee754_rem_pio2f>:
 800e280:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e282:	ee10 6a10 	vmov	r6, s0
 800e286:	4b88      	ldr	r3, [pc, #544]	@ (800e4a8 <__ieee754_rem_pio2f+0x228>)
 800e288:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800e28c:	429d      	cmp	r5, r3
 800e28e:	b087      	sub	sp, #28
 800e290:	4604      	mov	r4, r0
 800e292:	d805      	bhi.n	800e2a0 <__ieee754_rem_pio2f+0x20>
 800e294:	2300      	movs	r3, #0
 800e296:	ed80 0a00 	vstr	s0, [r0]
 800e29a:	6043      	str	r3, [r0, #4]
 800e29c:	2000      	movs	r0, #0
 800e29e:	e022      	b.n	800e2e6 <__ieee754_rem_pio2f+0x66>
 800e2a0:	4b82      	ldr	r3, [pc, #520]	@ (800e4ac <__ieee754_rem_pio2f+0x22c>)
 800e2a2:	429d      	cmp	r5, r3
 800e2a4:	d83a      	bhi.n	800e31c <__ieee754_rem_pio2f+0x9c>
 800e2a6:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800e2aa:	2e00      	cmp	r6, #0
 800e2ac:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800e4b0 <__ieee754_rem_pio2f+0x230>
 800e2b0:	4a80      	ldr	r2, [pc, #512]	@ (800e4b4 <__ieee754_rem_pio2f+0x234>)
 800e2b2:	f023 030f 	bic.w	r3, r3, #15
 800e2b6:	dd18      	ble.n	800e2ea <__ieee754_rem_pio2f+0x6a>
 800e2b8:	4293      	cmp	r3, r2
 800e2ba:	ee70 7a47 	vsub.f32	s15, s0, s14
 800e2be:	bf09      	itett	eq
 800e2c0:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800e4b8 <__ieee754_rem_pio2f+0x238>
 800e2c4:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800e4bc <__ieee754_rem_pio2f+0x23c>
 800e2c8:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800e4c0 <__ieee754_rem_pio2f+0x240>
 800e2cc:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800e2d0:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800e2d4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e2d8:	ed80 7a00 	vstr	s14, [r0]
 800e2dc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e2e0:	edc0 7a01 	vstr	s15, [r0, #4]
 800e2e4:	2001      	movs	r0, #1
 800e2e6:	b007      	add	sp, #28
 800e2e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e2ea:	4293      	cmp	r3, r2
 800e2ec:	ee70 7a07 	vadd.f32	s15, s0, s14
 800e2f0:	bf09      	itett	eq
 800e2f2:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800e4b8 <__ieee754_rem_pio2f+0x238>
 800e2f6:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800e4bc <__ieee754_rem_pio2f+0x23c>
 800e2fa:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800e4c0 <__ieee754_rem_pio2f+0x240>
 800e2fe:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800e302:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800e306:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e30a:	ed80 7a00 	vstr	s14, [r0]
 800e30e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e312:	edc0 7a01 	vstr	s15, [r0, #4]
 800e316:	f04f 30ff 	mov.w	r0, #4294967295
 800e31a:	e7e4      	b.n	800e2e6 <__ieee754_rem_pio2f+0x66>
 800e31c:	4b69      	ldr	r3, [pc, #420]	@ (800e4c4 <__ieee754_rem_pio2f+0x244>)
 800e31e:	429d      	cmp	r5, r3
 800e320:	d873      	bhi.n	800e40a <__ieee754_rem_pio2f+0x18a>
 800e322:	f000 f8dd 	bl	800e4e0 <fabsf>
 800e326:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800e4c8 <__ieee754_rem_pio2f+0x248>
 800e32a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800e32e:	eee0 7a07 	vfma.f32	s15, s0, s14
 800e332:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e336:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e33a:	ee17 0a90 	vmov	r0, s15
 800e33e:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800e4b0 <__ieee754_rem_pio2f+0x230>
 800e342:	eea7 0a67 	vfms.f32	s0, s14, s15
 800e346:	281f      	cmp	r0, #31
 800e348:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800e4bc <__ieee754_rem_pio2f+0x23c>
 800e34c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e350:	eeb1 6a47 	vneg.f32	s12, s14
 800e354:	ee70 6a67 	vsub.f32	s13, s0, s15
 800e358:	ee16 1a90 	vmov	r1, s13
 800e35c:	dc09      	bgt.n	800e372 <__ieee754_rem_pio2f+0xf2>
 800e35e:	4a5b      	ldr	r2, [pc, #364]	@ (800e4cc <__ieee754_rem_pio2f+0x24c>)
 800e360:	1e47      	subs	r7, r0, #1
 800e362:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800e366:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800e36a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800e36e:	4293      	cmp	r3, r2
 800e370:	d107      	bne.n	800e382 <__ieee754_rem_pio2f+0x102>
 800e372:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800e376:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800e37a:	2a08      	cmp	r2, #8
 800e37c:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800e380:	dc14      	bgt.n	800e3ac <__ieee754_rem_pio2f+0x12c>
 800e382:	6021      	str	r1, [r4, #0]
 800e384:	ed94 7a00 	vldr	s14, [r4]
 800e388:	ee30 0a47 	vsub.f32	s0, s0, s14
 800e38c:	2e00      	cmp	r6, #0
 800e38e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e392:	ed84 0a01 	vstr	s0, [r4, #4]
 800e396:	daa6      	bge.n	800e2e6 <__ieee754_rem_pio2f+0x66>
 800e398:	eeb1 7a47 	vneg.f32	s14, s14
 800e39c:	eeb1 0a40 	vneg.f32	s0, s0
 800e3a0:	ed84 7a00 	vstr	s14, [r4]
 800e3a4:	ed84 0a01 	vstr	s0, [r4, #4]
 800e3a8:	4240      	negs	r0, r0
 800e3aa:	e79c      	b.n	800e2e6 <__ieee754_rem_pio2f+0x66>
 800e3ac:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800e4b8 <__ieee754_rem_pio2f+0x238>
 800e3b0:	eef0 6a40 	vmov.f32	s13, s0
 800e3b4:	eee6 6a25 	vfma.f32	s13, s12, s11
 800e3b8:	ee70 7a66 	vsub.f32	s15, s0, s13
 800e3bc:	eee6 7a25 	vfma.f32	s15, s12, s11
 800e3c0:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800e4c0 <__ieee754_rem_pio2f+0x240>
 800e3c4:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800e3c8:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800e3cc:	ee15 2a90 	vmov	r2, s11
 800e3d0:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800e3d4:	1a5b      	subs	r3, r3, r1
 800e3d6:	2b19      	cmp	r3, #25
 800e3d8:	dc04      	bgt.n	800e3e4 <__ieee754_rem_pio2f+0x164>
 800e3da:	edc4 5a00 	vstr	s11, [r4]
 800e3de:	eeb0 0a66 	vmov.f32	s0, s13
 800e3e2:	e7cf      	b.n	800e384 <__ieee754_rem_pio2f+0x104>
 800e3e4:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800e4d0 <__ieee754_rem_pio2f+0x250>
 800e3e8:	eeb0 0a66 	vmov.f32	s0, s13
 800e3ec:	eea6 0a25 	vfma.f32	s0, s12, s11
 800e3f0:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800e3f4:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800e4d4 <__ieee754_rem_pio2f+0x254>
 800e3f8:	eee6 7a25 	vfma.f32	s15, s12, s11
 800e3fc:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800e400:	ee30 7a67 	vsub.f32	s14, s0, s15
 800e404:	ed84 7a00 	vstr	s14, [r4]
 800e408:	e7bc      	b.n	800e384 <__ieee754_rem_pio2f+0x104>
 800e40a:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800e40e:	d306      	bcc.n	800e41e <__ieee754_rem_pio2f+0x19e>
 800e410:	ee70 7a40 	vsub.f32	s15, s0, s0
 800e414:	edc0 7a01 	vstr	s15, [r0, #4]
 800e418:	edc0 7a00 	vstr	s15, [r0]
 800e41c:	e73e      	b.n	800e29c <__ieee754_rem_pio2f+0x1c>
 800e41e:	15ea      	asrs	r2, r5, #23
 800e420:	3a86      	subs	r2, #134	@ 0x86
 800e422:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800e426:	ee07 3a90 	vmov	s15, r3
 800e42a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800e42e:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800e4d8 <__ieee754_rem_pio2f+0x258>
 800e432:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e436:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e43a:	ed8d 7a03 	vstr	s14, [sp, #12]
 800e43e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e442:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800e446:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e44a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e44e:	ed8d 7a04 	vstr	s14, [sp, #16]
 800e452:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e456:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e45a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e45e:	edcd 7a05 	vstr	s15, [sp, #20]
 800e462:	d11e      	bne.n	800e4a2 <__ieee754_rem_pio2f+0x222>
 800e464:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800e468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e46c:	bf0c      	ite	eq
 800e46e:	2301      	moveq	r3, #1
 800e470:	2302      	movne	r3, #2
 800e472:	491a      	ldr	r1, [pc, #104]	@ (800e4dc <__ieee754_rem_pio2f+0x25c>)
 800e474:	9101      	str	r1, [sp, #4]
 800e476:	2102      	movs	r1, #2
 800e478:	9100      	str	r1, [sp, #0]
 800e47a:	a803      	add	r0, sp, #12
 800e47c:	4621      	mov	r1, r4
 800e47e:	f000 f837 	bl	800e4f0 <__kernel_rem_pio2f>
 800e482:	2e00      	cmp	r6, #0
 800e484:	f6bf af2f 	bge.w	800e2e6 <__ieee754_rem_pio2f+0x66>
 800e488:	edd4 7a00 	vldr	s15, [r4]
 800e48c:	eef1 7a67 	vneg.f32	s15, s15
 800e490:	edc4 7a00 	vstr	s15, [r4]
 800e494:	edd4 7a01 	vldr	s15, [r4, #4]
 800e498:	eef1 7a67 	vneg.f32	s15, s15
 800e49c:	edc4 7a01 	vstr	s15, [r4, #4]
 800e4a0:	e782      	b.n	800e3a8 <__ieee754_rem_pio2f+0x128>
 800e4a2:	2303      	movs	r3, #3
 800e4a4:	e7e5      	b.n	800e472 <__ieee754_rem_pio2f+0x1f2>
 800e4a6:	bf00      	nop
 800e4a8:	3f490fd8 	.word	0x3f490fd8
 800e4ac:	4016cbe3 	.word	0x4016cbe3
 800e4b0:	3fc90f80 	.word	0x3fc90f80
 800e4b4:	3fc90fd0 	.word	0x3fc90fd0
 800e4b8:	37354400 	.word	0x37354400
 800e4bc:	37354443 	.word	0x37354443
 800e4c0:	2e85a308 	.word	0x2e85a308
 800e4c4:	43490f80 	.word	0x43490f80
 800e4c8:	3f22f984 	.word	0x3f22f984
 800e4cc:	08016460 	.word	0x08016460
 800e4d0:	2e85a300 	.word	0x2e85a300
 800e4d4:	248d3132 	.word	0x248d3132
 800e4d8:	43800000 	.word	0x43800000
 800e4dc:	080164e0 	.word	0x080164e0

0800e4e0 <fabsf>:
 800e4e0:	ee10 3a10 	vmov	r3, s0
 800e4e4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e4e8:	ee00 3a10 	vmov	s0, r3
 800e4ec:	4770      	bx	lr
	...

0800e4f0 <__kernel_rem_pio2f>:
 800e4f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4f4:	ed2d 8b04 	vpush	{d8-d9}
 800e4f8:	b0d9      	sub	sp, #356	@ 0x164
 800e4fa:	4690      	mov	r8, r2
 800e4fc:	9001      	str	r0, [sp, #4]
 800e4fe:	4ab9      	ldr	r2, [pc, #740]	@ (800e7e4 <__kernel_rem_pio2f+0x2f4>)
 800e500:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800e502:	f118 0f04 	cmn.w	r8, #4
 800e506:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800e50a:	460f      	mov	r7, r1
 800e50c:	f103 3bff 	add.w	fp, r3, #4294967295
 800e510:	db27      	blt.n	800e562 <__kernel_rem_pio2f+0x72>
 800e512:	f1b8 0203 	subs.w	r2, r8, #3
 800e516:	bf48      	it	mi
 800e518:	f108 0204 	addmi.w	r2, r8, #4
 800e51c:	10d2      	asrs	r2, r2, #3
 800e51e:	1c55      	adds	r5, r2, #1
 800e520:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800e522:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 800e7f4 <__kernel_rem_pio2f+0x304>
 800e526:	00e8      	lsls	r0, r5, #3
 800e528:	eba2 060b 	sub.w	r6, r2, fp
 800e52c:	9002      	str	r0, [sp, #8]
 800e52e:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800e532:	eb0a 0c0b 	add.w	ip, sl, fp
 800e536:	ac1c      	add	r4, sp, #112	@ 0x70
 800e538:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800e53c:	2000      	movs	r0, #0
 800e53e:	4560      	cmp	r0, ip
 800e540:	dd11      	ble.n	800e566 <__kernel_rem_pio2f+0x76>
 800e542:	a91c      	add	r1, sp, #112	@ 0x70
 800e544:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800e548:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800e54c:	f04f 0c00 	mov.w	ip, #0
 800e550:	45d4      	cmp	ip, sl
 800e552:	dc27      	bgt.n	800e5a4 <__kernel_rem_pio2f+0xb4>
 800e554:	f8dd e004 	ldr.w	lr, [sp, #4]
 800e558:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 800e7f4 <__kernel_rem_pio2f+0x304>
 800e55c:	4606      	mov	r6, r0
 800e55e:	2400      	movs	r4, #0
 800e560:	e016      	b.n	800e590 <__kernel_rem_pio2f+0xa0>
 800e562:	2200      	movs	r2, #0
 800e564:	e7db      	b.n	800e51e <__kernel_rem_pio2f+0x2e>
 800e566:	42c6      	cmn	r6, r0
 800e568:	bf5d      	ittte	pl
 800e56a:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800e56e:	ee07 1a90 	vmovpl	s15, r1
 800e572:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800e576:	eef0 7a47 	vmovmi.f32	s15, s14
 800e57a:	ece4 7a01 	vstmia	r4!, {s15}
 800e57e:	3001      	adds	r0, #1
 800e580:	e7dd      	b.n	800e53e <__kernel_rem_pio2f+0x4e>
 800e582:	ecfe 6a01 	vldmia	lr!, {s13}
 800e586:	ed96 7a00 	vldr	s14, [r6]
 800e58a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800e58e:	3401      	adds	r4, #1
 800e590:	455c      	cmp	r4, fp
 800e592:	f1a6 0604 	sub.w	r6, r6, #4
 800e596:	ddf4      	ble.n	800e582 <__kernel_rem_pio2f+0x92>
 800e598:	ece9 7a01 	vstmia	r9!, {s15}
 800e59c:	f10c 0c01 	add.w	ip, ip, #1
 800e5a0:	3004      	adds	r0, #4
 800e5a2:	e7d5      	b.n	800e550 <__kernel_rem_pio2f+0x60>
 800e5a4:	a908      	add	r1, sp, #32
 800e5a6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e5aa:	9104      	str	r1, [sp, #16]
 800e5ac:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800e5ae:	eddf 8a90 	vldr	s17, [pc, #576]	@ 800e7f0 <__kernel_rem_pio2f+0x300>
 800e5b2:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 800e7ec <__kernel_rem_pio2f+0x2fc>
 800e5b6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800e5ba:	9203      	str	r2, [sp, #12]
 800e5bc:	4654      	mov	r4, sl
 800e5be:	00a2      	lsls	r2, r4, #2
 800e5c0:	9205      	str	r2, [sp, #20]
 800e5c2:	aa58      	add	r2, sp, #352	@ 0x160
 800e5c4:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800e5c8:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800e5cc:	a944      	add	r1, sp, #272	@ 0x110
 800e5ce:	aa08      	add	r2, sp, #32
 800e5d0:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800e5d4:	4694      	mov	ip, r2
 800e5d6:	4626      	mov	r6, r4
 800e5d8:	2e00      	cmp	r6, #0
 800e5da:	f1a0 0004 	sub.w	r0, r0, #4
 800e5de:	dc4c      	bgt.n	800e67a <__kernel_rem_pio2f+0x18a>
 800e5e0:	4628      	mov	r0, r5
 800e5e2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e5e6:	f000 f9f5 	bl	800e9d4 <scalbnf>
 800e5ea:	eeb0 8a40 	vmov.f32	s16, s0
 800e5ee:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800e5f2:	ee28 0a00 	vmul.f32	s0, s16, s0
 800e5f6:	f000 fa53 	bl	800eaa0 <floorf>
 800e5fa:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800e5fe:	eea0 8a67 	vfms.f32	s16, s0, s15
 800e602:	2d00      	cmp	r5, #0
 800e604:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e608:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800e60c:	ee17 9a90 	vmov	r9, s15
 800e610:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e614:	ee38 8a67 	vsub.f32	s16, s16, s15
 800e618:	dd41      	ble.n	800e69e <__kernel_rem_pio2f+0x1ae>
 800e61a:	f104 3cff 	add.w	ip, r4, #4294967295
 800e61e:	a908      	add	r1, sp, #32
 800e620:	f1c5 0e08 	rsb	lr, r5, #8
 800e624:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800e628:	fa46 f00e 	asr.w	r0, r6, lr
 800e62c:	4481      	add	r9, r0
 800e62e:	fa00 f00e 	lsl.w	r0, r0, lr
 800e632:	1a36      	subs	r6, r6, r0
 800e634:	f1c5 0007 	rsb	r0, r5, #7
 800e638:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800e63c:	4106      	asrs	r6, r0
 800e63e:	2e00      	cmp	r6, #0
 800e640:	dd3c      	ble.n	800e6bc <__kernel_rem_pio2f+0x1cc>
 800e642:	f04f 0e00 	mov.w	lr, #0
 800e646:	f109 0901 	add.w	r9, r9, #1
 800e64a:	4670      	mov	r0, lr
 800e64c:	4574      	cmp	r4, lr
 800e64e:	dc68      	bgt.n	800e722 <__kernel_rem_pio2f+0x232>
 800e650:	2d00      	cmp	r5, #0
 800e652:	dd03      	ble.n	800e65c <__kernel_rem_pio2f+0x16c>
 800e654:	2d01      	cmp	r5, #1
 800e656:	d074      	beq.n	800e742 <__kernel_rem_pio2f+0x252>
 800e658:	2d02      	cmp	r5, #2
 800e65a:	d07d      	beq.n	800e758 <__kernel_rem_pio2f+0x268>
 800e65c:	2e02      	cmp	r6, #2
 800e65e:	d12d      	bne.n	800e6bc <__kernel_rem_pio2f+0x1cc>
 800e660:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800e664:	ee30 8a48 	vsub.f32	s16, s0, s16
 800e668:	b340      	cbz	r0, 800e6bc <__kernel_rem_pio2f+0x1cc>
 800e66a:	4628      	mov	r0, r5
 800e66c:	9306      	str	r3, [sp, #24]
 800e66e:	f000 f9b1 	bl	800e9d4 <scalbnf>
 800e672:	9b06      	ldr	r3, [sp, #24]
 800e674:	ee38 8a40 	vsub.f32	s16, s16, s0
 800e678:	e020      	b.n	800e6bc <__kernel_rem_pio2f+0x1cc>
 800e67a:	ee60 7a28 	vmul.f32	s15, s0, s17
 800e67e:	3e01      	subs	r6, #1
 800e680:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e684:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e688:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800e68c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800e690:	ecac 0a01 	vstmia	ip!, {s0}
 800e694:	ed90 0a00 	vldr	s0, [r0]
 800e698:	ee37 0a80 	vadd.f32	s0, s15, s0
 800e69c:	e79c      	b.n	800e5d8 <__kernel_rem_pio2f+0xe8>
 800e69e:	d105      	bne.n	800e6ac <__kernel_rem_pio2f+0x1bc>
 800e6a0:	1e60      	subs	r0, r4, #1
 800e6a2:	a908      	add	r1, sp, #32
 800e6a4:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800e6a8:	11f6      	asrs	r6, r6, #7
 800e6aa:	e7c8      	b.n	800e63e <__kernel_rem_pio2f+0x14e>
 800e6ac:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800e6b0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800e6b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6b8:	da31      	bge.n	800e71e <__kernel_rem_pio2f+0x22e>
 800e6ba:	2600      	movs	r6, #0
 800e6bc:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800e6c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6c4:	f040 8098 	bne.w	800e7f8 <__kernel_rem_pio2f+0x308>
 800e6c8:	1e60      	subs	r0, r4, #1
 800e6ca:	2200      	movs	r2, #0
 800e6cc:	4550      	cmp	r0, sl
 800e6ce:	da4b      	bge.n	800e768 <__kernel_rem_pio2f+0x278>
 800e6d0:	2a00      	cmp	r2, #0
 800e6d2:	d065      	beq.n	800e7a0 <__kernel_rem_pio2f+0x2b0>
 800e6d4:	3c01      	subs	r4, #1
 800e6d6:	ab08      	add	r3, sp, #32
 800e6d8:	3d08      	subs	r5, #8
 800e6da:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d0f8      	beq.n	800e6d4 <__kernel_rem_pio2f+0x1e4>
 800e6e2:	4628      	mov	r0, r5
 800e6e4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800e6e8:	f000 f974 	bl	800e9d4 <scalbnf>
 800e6ec:	1c63      	adds	r3, r4, #1
 800e6ee:	aa44      	add	r2, sp, #272	@ 0x110
 800e6f0:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800e7f0 <__kernel_rem_pio2f+0x300>
 800e6f4:	0099      	lsls	r1, r3, #2
 800e6f6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800e6fa:	4623      	mov	r3, r4
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	f280 80a9 	bge.w	800e854 <__kernel_rem_pio2f+0x364>
 800e702:	4623      	mov	r3, r4
 800e704:	2b00      	cmp	r3, #0
 800e706:	f2c0 80c7 	blt.w	800e898 <__kernel_rem_pio2f+0x3a8>
 800e70a:	aa44      	add	r2, sp, #272	@ 0x110
 800e70c:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800e710:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800e7e8 <__kernel_rem_pio2f+0x2f8>
 800e714:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800e7f4 <__kernel_rem_pio2f+0x304>
 800e718:	2000      	movs	r0, #0
 800e71a:	1ae2      	subs	r2, r4, r3
 800e71c:	e0b1      	b.n	800e882 <__kernel_rem_pio2f+0x392>
 800e71e:	2602      	movs	r6, #2
 800e720:	e78f      	b.n	800e642 <__kernel_rem_pio2f+0x152>
 800e722:	f852 1b04 	ldr.w	r1, [r2], #4
 800e726:	b948      	cbnz	r0, 800e73c <__kernel_rem_pio2f+0x24c>
 800e728:	b121      	cbz	r1, 800e734 <__kernel_rem_pio2f+0x244>
 800e72a:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800e72e:	f842 1c04 	str.w	r1, [r2, #-4]
 800e732:	2101      	movs	r1, #1
 800e734:	f10e 0e01 	add.w	lr, lr, #1
 800e738:	4608      	mov	r0, r1
 800e73a:	e787      	b.n	800e64c <__kernel_rem_pio2f+0x15c>
 800e73c:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800e740:	e7f5      	b.n	800e72e <__kernel_rem_pio2f+0x23e>
 800e742:	f104 3cff 	add.w	ip, r4, #4294967295
 800e746:	aa08      	add	r2, sp, #32
 800e748:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800e74c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800e750:	a908      	add	r1, sp, #32
 800e752:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800e756:	e781      	b.n	800e65c <__kernel_rem_pio2f+0x16c>
 800e758:	f104 3cff 	add.w	ip, r4, #4294967295
 800e75c:	aa08      	add	r2, sp, #32
 800e75e:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800e762:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800e766:	e7f3      	b.n	800e750 <__kernel_rem_pio2f+0x260>
 800e768:	a908      	add	r1, sp, #32
 800e76a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800e76e:	3801      	subs	r0, #1
 800e770:	430a      	orrs	r2, r1
 800e772:	e7ab      	b.n	800e6cc <__kernel_rem_pio2f+0x1dc>
 800e774:	3201      	adds	r2, #1
 800e776:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800e77a:	2e00      	cmp	r6, #0
 800e77c:	d0fa      	beq.n	800e774 <__kernel_rem_pio2f+0x284>
 800e77e:	9905      	ldr	r1, [sp, #20]
 800e780:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800e784:	eb0d 0001 	add.w	r0, sp, r1
 800e788:	18e6      	adds	r6, r4, r3
 800e78a:	a91c      	add	r1, sp, #112	@ 0x70
 800e78c:	f104 0c01 	add.w	ip, r4, #1
 800e790:	384c      	subs	r0, #76	@ 0x4c
 800e792:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800e796:	4422      	add	r2, r4
 800e798:	4562      	cmp	r2, ip
 800e79a:	da04      	bge.n	800e7a6 <__kernel_rem_pio2f+0x2b6>
 800e79c:	4614      	mov	r4, r2
 800e79e:	e70e      	b.n	800e5be <__kernel_rem_pio2f+0xce>
 800e7a0:	9804      	ldr	r0, [sp, #16]
 800e7a2:	2201      	movs	r2, #1
 800e7a4:	e7e7      	b.n	800e776 <__kernel_rem_pio2f+0x286>
 800e7a6:	9903      	ldr	r1, [sp, #12]
 800e7a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 800e7ac:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800e7b0:	9105      	str	r1, [sp, #20]
 800e7b2:	ee07 1a90 	vmov	s15, r1
 800e7b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e7ba:	2400      	movs	r4, #0
 800e7bc:	ece6 7a01 	vstmia	r6!, {s15}
 800e7c0:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800e7f4 <__kernel_rem_pio2f+0x304>
 800e7c4:	46b1      	mov	r9, r6
 800e7c6:	455c      	cmp	r4, fp
 800e7c8:	dd04      	ble.n	800e7d4 <__kernel_rem_pio2f+0x2e4>
 800e7ca:	ece0 7a01 	vstmia	r0!, {s15}
 800e7ce:	f10c 0c01 	add.w	ip, ip, #1
 800e7d2:	e7e1      	b.n	800e798 <__kernel_rem_pio2f+0x2a8>
 800e7d4:	ecfe 6a01 	vldmia	lr!, {s13}
 800e7d8:	ed39 7a01 	vldmdb	r9!, {s14}
 800e7dc:	3401      	adds	r4, #1
 800e7de:	eee6 7a87 	vfma.f32	s15, s13, s14
 800e7e2:	e7f0      	b.n	800e7c6 <__kernel_rem_pio2f+0x2d6>
 800e7e4:	08016824 	.word	0x08016824
 800e7e8:	080167f8 	.word	0x080167f8
 800e7ec:	43800000 	.word	0x43800000
 800e7f0:	3b800000 	.word	0x3b800000
 800e7f4:	00000000 	.word	0x00000000
 800e7f8:	9b02      	ldr	r3, [sp, #8]
 800e7fa:	eeb0 0a48 	vmov.f32	s0, s16
 800e7fe:	eba3 0008 	sub.w	r0, r3, r8
 800e802:	f000 f8e7 	bl	800e9d4 <scalbnf>
 800e806:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800e7ec <__kernel_rem_pio2f+0x2fc>
 800e80a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800e80e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e812:	db19      	blt.n	800e848 <__kernel_rem_pio2f+0x358>
 800e814:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800e7f0 <__kernel_rem_pio2f+0x300>
 800e818:	ee60 7a27 	vmul.f32	s15, s0, s15
 800e81c:	aa08      	add	r2, sp, #32
 800e81e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e822:	3508      	adds	r5, #8
 800e824:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e828:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800e82c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e830:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800e834:	ee10 3a10 	vmov	r3, s0
 800e838:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800e83c:	ee17 3a90 	vmov	r3, s15
 800e840:	3401      	adds	r4, #1
 800e842:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800e846:	e74c      	b.n	800e6e2 <__kernel_rem_pio2f+0x1f2>
 800e848:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800e84c:	aa08      	add	r2, sp, #32
 800e84e:	ee10 3a10 	vmov	r3, s0
 800e852:	e7f6      	b.n	800e842 <__kernel_rem_pio2f+0x352>
 800e854:	a808      	add	r0, sp, #32
 800e856:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800e85a:	9001      	str	r0, [sp, #4]
 800e85c:	ee07 0a90 	vmov	s15, r0
 800e860:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e864:	3b01      	subs	r3, #1
 800e866:	ee67 7a80 	vmul.f32	s15, s15, s0
 800e86a:	ee20 0a07 	vmul.f32	s0, s0, s14
 800e86e:	ed62 7a01 	vstmdb	r2!, {s15}
 800e872:	e743      	b.n	800e6fc <__kernel_rem_pio2f+0x20c>
 800e874:	ecfc 6a01 	vldmia	ip!, {s13}
 800e878:	ecb5 7a01 	vldmia	r5!, {s14}
 800e87c:	eee6 7a87 	vfma.f32	s15, s13, s14
 800e880:	3001      	adds	r0, #1
 800e882:	4550      	cmp	r0, sl
 800e884:	dc01      	bgt.n	800e88a <__kernel_rem_pio2f+0x39a>
 800e886:	4282      	cmp	r2, r0
 800e888:	daf4      	bge.n	800e874 <__kernel_rem_pio2f+0x384>
 800e88a:	a858      	add	r0, sp, #352	@ 0x160
 800e88c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800e890:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800e894:	3b01      	subs	r3, #1
 800e896:	e735      	b.n	800e704 <__kernel_rem_pio2f+0x214>
 800e898:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800e89a:	2b02      	cmp	r3, #2
 800e89c:	dc09      	bgt.n	800e8b2 <__kernel_rem_pio2f+0x3c2>
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	dc2b      	bgt.n	800e8fa <__kernel_rem_pio2f+0x40a>
 800e8a2:	d044      	beq.n	800e92e <__kernel_rem_pio2f+0x43e>
 800e8a4:	f009 0007 	and.w	r0, r9, #7
 800e8a8:	b059      	add	sp, #356	@ 0x164
 800e8aa:	ecbd 8b04 	vpop	{d8-d9}
 800e8ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8b2:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800e8b4:	2b03      	cmp	r3, #3
 800e8b6:	d1f5      	bne.n	800e8a4 <__kernel_rem_pio2f+0x3b4>
 800e8b8:	aa30      	add	r2, sp, #192	@ 0xc0
 800e8ba:	1f0b      	subs	r3, r1, #4
 800e8bc:	4413      	add	r3, r2
 800e8be:	461a      	mov	r2, r3
 800e8c0:	4620      	mov	r0, r4
 800e8c2:	2800      	cmp	r0, #0
 800e8c4:	f1a2 0204 	sub.w	r2, r2, #4
 800e8c8:	dc52      	bgt.n	800e970 <__kernel_rem_pio2f+0x480>
 800e8ca:	4622      	mov	r2, r4
 800e8cc:	2a01      	cmp	r2, #1
 800e8ce:	f1a3 0304 	sub.w	r3, r3, #4
 800e8d2:	dc5d      	bgt.n	800e990 <__kernel_rem_pio2f+0x4a0>
 800e8d4:	ab30      	add	r3, sp, #192	@ 0xc0
 800e8d6:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 800e7f4 <__kernel_rem_pio2f+0x304>
 800e8da:	440b      	add	r3, r1
 800e8dc:	2c01      	cmp	r4, #1
 800e8de:	dc67      	bgt.n	800e9b0 <__kernel_rem_pio2f+0x4c0>
 800e8e0:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800e8e4:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800e8e8:	2e00      	cmp	r6, #0
 800e8ea:	d167      	bne.n	800e9bc <__kernel_rem_pio2f+0x4cc>
 800e8ec:	edc7 6a00 	vstr	s13, [r7]
 800e8f0:	ed87 7a01 	vstr	s14, [r7, #4]
 800e8f4:	edc7 7a02 	vstr	s15, [r7, #8]
 800e8f8:	e7d4      	b.n	800e8a4 <__kernel_rem_pio2f+0x3b4>
 800e8fa:	ab30      	add	r3, sp, #192	@ 0xc0
 800e8fc:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 800e7f4 <__kernel_rem_pio2f+0x304>
 800e900:	440b      	add	r3, r1
 800e902:	4622      	mov	r2, r4
 800e904:	2a00      	cmp	r2, #0
 800e906:	da24      	bge.n	800e952 <__kernel_rem_pio2f+0x462>
 800e908:	b34e      	cbz	r6, 800e95e <__kernel_rem_pio2f+0x46e>
 800e90a:	eef1 7a47 	vneg.f32	s15, s14
 800e90e:	edc7 7a00 	vstr	s15, [r7]
 800e912:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800e916:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e91a:	aa31      	add	r2, sp, #196	@ 0xc4
 800e91c:	2301      	movs	r3, #1
 800e91e:	429c      	cmp	r4, r3
 800e920:	da20      	bge.n	800e964 <__kernel_rem_pio2f+0x474>
 800e922:	b10e      	cbz	r6, 800e928 <__kernel_rem_pio2f+0x438>
 800e924:	eef1 7a67 	vneg.f32	s15, s15
 800e928:	edc7 7a01 	vstr	s15, [r7, #4]
 800e92c:	e7ba      	b.n	800e8a4 <__kernel_rem_pio2f+0x3b4>
 800e92e:	ab30      	add	r3, sp, #192	@ 0xc0
 800e930:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 800e7f4 <__kernel_rem_pio2f+0x304>
 800e934:	440b      	add	r3, r1
 800e936:	2c00      	cmp	r4, #0
 800e938:	da05      	bge.n	800e946 <__kernel_rem_pio2f+0x456>
 800e93a:	b10e      	cbz	r6, 800e940 <__kernel_rem_pio2f+0x450>
 800e93c:	eef1 7a67 	vneg.f32	s15, s15
 800e940:	edc7 7a00 	vstr	s15, [r7]
 800e944:	e7ae      	b.n	800e8a4 <__kernel_rem_pio2f+0x3b4>
 800e946:	ed33 7a01 	vldmdb	r3!, {s14}
 800e94a:	3c01      	subs	r4, #1
 800e94c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e950:	e7f1      	b.n	800e936 <__kernel_rem_pio2f+0x446>
 800e952:	ed73 7a01 	vldmdb	r3!, {s15}
 800e956:	3a01      	subs	r2, #1
 800e958:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e95c:	e7d2      	b.n	800e904 <__kernel_rem_pio2f+0x414>
 800e95e:	eef0 7a47 	vmov.f32	s15, s14
 800e962:	e7d4      	b.n	800e90e <__kernel_rem_pio2f+0x41e>
 800e964:	ecb2 7a01 	vldmia	r2!, {s14}
 800e968:	3301      	adds	r3, #1
 800e96a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e96e:	e7d6      	b.n	800e91e <__kernel_rem_pio2f+0x42e>
 800e970:	edd2 7a00 	vldr	s15, [r2]
 800e974:	edd2 6a01 	vldr	s13, [r2, #4]
 800e978:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800e97c:	3801      	subs	r0, #1
 800e97e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e982:	ed82 7a00 	vstr	s14, [r2]
 800e986:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e98a:	edc2 7a01 	vstr	s15, [r2, #4]
 800e98e:	e798      	b.n	800e8c2 <__kernel_rem_pio2f+0x3d2>
 800e990:	edd3 7a00 	vldr	s15, [r3]
 800e994:	edd3 6a01 	vldr	s13, [r3, #4]
 800e998:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800e99c:	3a01      	subs	r2, #1
 800e99e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e9a2:	ed83 7a00 	vstr	s14, [r3]
 800e9a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e9aa:	edc3 7a01 	vstr	s15, [r3, #4]
 800e9ae:	e78d      	b.n	800e8cc <__kernel_rem_pio2f+0x3dc>
 800e9b0:	ed33 7a01 	vldmdb	r3!, {s14}
 800e9b4:	3c01      	subs	r4, #1
 800e9b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e9ba:	e78f      	b.n	800e8dc <__kernel_rem_pio2f+0x3ec>
 800e9bc:	eef1 6a66 	vneg.f32	s13, s13
 800e9c0:	eeb1 7a47 	vneg.f32	s14, s14
 800e9c4:	edc7 6a00 	vstr	s13, [r7]
 800e9c8:	ed87 7a01 	vstr	s14, [r7, #4]
 800e9cc:	eef1 7a67 	vneg.f32	s15, s15
 800e9d0:	e790      	b.n	800e8f4 <__kernel_rem_pio2f+0x404>
 800e9d2:	bf00      	nop

0800e9d4 <scalbnf>:
 800e9d4:	ee10 3a10 	vmov	r3, s0
 800e9d8:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800e9dc:	d02b      	beq.n	800ea36 <scalbnf+0x62>
 800e9de:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800e9e2:	d302      	bcc.n	800e9ea <scalbnf+0x16>
 800e9e4:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e9e8:	4770      	bx	lr
 800e9ea:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800e9ee:	d123      	bne.n	800ea38 <scalbnf+0x64>
 800e9f0:	4b24      	ldr	r3, [pc, #144]	@ (800ea84 <scalbnf+0xb0>)
 800e9f2:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800ea88 <scalbnf+0xb4>
 800e9f6:	4298      	cmp	r0, r3
 800e9f8:	ee20 0a27 	vmul.f32	s0, s0, s15
 800e9fc:	db17      	blt.n	800ea2e <scalbnf+0x5a>
 800e9fe:	ee10 3a10 	vmov	r3, s0
 800ea02:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800ea06:	3a19      	subs	r2, #25
 800ea08:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800ea0c:	4288      	cmp	r0, r1
 800ea0e:	dd15      	ble.n	800ea3c <scalbnf+0x68>
 800ea10:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800ea8c <scalbnf+0xb8>
 800ea14:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800ea90 <scalbnf+0xbc>
 800ea18:	ee10 3a10 	vmov	r3, s0
 800ea1c:	eeb0 7a67 	vmov.f32	s14, s15
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	bfb8      	it	lt
 800ea24:	eef0 7a66 	vmovlt.f32	s15, s13
 800ea28:	ee27 0a87 	vmul.f32	s0, s15, s14
 800ea2c:	4770      	bx	lr
 800ea2e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800ea94 <scalbnf+0xc0>
 800ea32:	ee27 0a80 	vmul.f32	s0, s15, s0
 800ea36:	4770      	bx	lr
 800ea38:	0dd2      	lsrs	r2, r2, #23
 800ea3a:	e7e5      	b.n	800ea08 <scalbnf+0x34>
 800ea3c:	4410      	add	r0, r2
 800ea3e:	28fe      	cmp	r0, #254	@ 0xfe
 800ea40:	dce6      	bgt.n	800ea10 <scalbnf+0x3c>
 800ea42:	2800      	cmp	r0, #0
 800ea44:	dd06      	ble.n	800ea54 <scalbnf+0x80>
 800ea46:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800ea4a:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800ea4e:	ee00 3a10 	vmov	s0, r3
 800ea52:	4770      	bx	lr
 800ea54:	f110 0f16 	cmn.w	r0, #22
 800ea58:	da09      	bge.n	800ea6e <scalbnf+0x9a>
 800ea5a:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800ea94 <scalbnf+0xc0>
 800ea5e:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800ea98 <scalbnf+0xc4>
 800ea62:	ee10 3a10 	vmov	r3, s0
 800ea66:	eeb0 7a67 	vmov.f32	s14, s15
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	e7d9      	b.n	800ea22 <scalbnf+0x4e>
 800ea6e:	3019      	adds	r0, #25
 800ea70:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800ea74:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800ea78:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800ea9c <scalbnf+0xc8>
 800ea7c:	ee07 3a90 	vmov	s15, r3
 800ea80:	e7d7      	b.n	800ea32 <scalbnf+0x5e>
 800ea82:	bf00      	nop
 800ea84:	ffff3cb0 	.word	0xffff3cb0
 800ea88:	4c000000 	.word	0x4c000000
 800ea8c:	7149f2ca 	.word	0x7149f2ca
 800ea90:	f149f2ca 	.word	0xf149f2ca
 800ea94:	0da24260 	.word	0x0da24260
 800ea98:	8da24260 	.word	0x8da24260
 800ea9c:	33000000 	.word	0x33000000

0800eaa0 <floorf>:
 800eaa0:	ee10 3a10 	vmov	r3, s0
 800eaa4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800eaa8:	3a7f      	subs	r2, #127	@ 0x7f
 800eaaa:	2a16      	cmp	r2, #22
 800eaac:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800eab0:	dc2b      	bgt.n	800eb0a <floorf+0x6a>
 800eab2:	2a00      	cmp	r2, #0
 800eab4:	da12      	bge.n	800eadc <floorf+0x3c>
 800eab6:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800eb1c <floorf+0x7c>
 800eaba:	ee30 0a27 	vadd.f32	s0, s0, s15
 800eabe:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800eac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eac6:	dd06      	ble.n	800ead6 <floorf+0x36>
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	da24      	bge.n	800eb16 <floorf+0x76>
 800eacc:	2900      	cmp	r1, #0
 800eace:	4b14      	ldr	r3, [pc, #80]	@ (800eb20 <floorf+0x80>)
 800ead0:	bf08      	it	eq
 800ead2:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800ead6:	ee00 3a10 	vmov	s0, r3
 800eada:	4770      	bx	lr
 800eadc:	4911      	ldr	r1, [pc, #68]	@ (800eb24 <floorf+0x84>)
 800eade:	4111      	asrs	r1, r2
 800eae0:	420b      	tst	r3, r1
 800eae2:	d0fa      	beq.n	800eada <floorf+0x3a>
 800eae4:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800eb1c <floorf+0x7c>
 800eae8:	ee30 0a27 	vadd.f32	s0, s0, s15
 800eaec:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800eaf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eaf4:	ddef      	ble.n	800ead6 <floorf+0x36>
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	bfbe      	ittt	lt
 800eafa:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800eafe:	fa40 f202 	asrlt.w	r2, r0, r2
 800eb02:	189b      	addlt	r3, r3, r2
 800eb04:	ea23 0301 	bic.w	r3, r3, r1
 800eb08:	e7e5      	b.n	800ead6 <floorf+0x36>
 800eb0a:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800eb0e:	d3e4      	bcc.n	800eada <floorf+0x3a>
 800eb10:	ee30 0a00 	vadd.f32	s0, s0, s0
 800eb14:	4770      	bx	lr
 800eb16:	2300      	movs	r3, #0
 800eb18:	e7dd      	b.n	800ead6 <floorf+0x36>
 800eb1a:	bf00      	nop
 800eb1c:	7149f2ca 	.word	0x7149f2ca
 800eb20:	bf800000 	.word	0xbf800000
 800eb24:	007fffff 	.word	0x007fffff

0800eb28 <_init>:
 800eb28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb2a:	bf00      	nop
 800eb2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eb2e:	bc08      	pop	{r3}
 800eb30:	469e      	mov	lr, r3
 800eb32:	4770      	bx	lr

0800eb34 <_fini>:
 800eb34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb36:	bf00      	nop
 800eb38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eb3a:	bc08      	pop	{r3}
 800eb3c:	469e      	mov	lr, r3
 800eb3e:	4770      	bx	lr
